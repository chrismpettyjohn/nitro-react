{"ast":null,"code":"import { BaseTexture } from '@pixi/core';\nimport { inflate } from 'pako';\nimport { BinaryReader } from '../communication/codec/BinaryReader';\nexport class NitroBundle {\n  constructor(arrayBuffer) {\n    this._jsonFile = null;\n    this._image = null;\n    this._imageData = null;\n    this._baseTexture = null;\n    this.parse(arrayBuffer);\n  }\n\n  static arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n\n    for (let i = 0; i < len; i++) binary += String.fromCharCode(bytes[i]);\n\n    return window.btoa(binary);\n  }\n\n  parse(arrayBuffer) {\n    const binaryReader = new BinaryReader(arrayBuffer);\n    let fileCount = binaryReader.readShort();\n\n    while (fileCount > 0) {\n      const fileNameLength = binaryReader.readShort();\n      const fileName = binaryReader.readBytes(fileNameLength).toString();\n      const fileLength = binaryReader.readInt();\n      const buffer = binaryReader.readBytes(fileLength);\n\n      if (fileName.endsWith('.json')) {\n        const decompressed = inflate(buffer.toArrayBuffer());\n        this._jsonFile = JSON.parse(NitroBundle.TEXT_DECODER.decode(decompressed));\n      } else {\n        const decompressed = inflate(buffer.toArrayBuffer());\n        const base64 = NitroBundle.arrayBufferToBase64(decompressed);\n        this._baseTexture = new BaseTexture('data:image/png;base64,' + base64);\n      }\n\n      fileCount--;\n    }\n  }\n\n  get jsonFile() {\n    return this._jsonFile;\n  }\n\n  get baseTexture() {\n    return this._baseTexture;\n  }\n\n}\nNitroBundle.TEXT_DECODER = new TextDecoder('utf-8');","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/asset/NitroBundle.ts"],"names":["BaseTexture","inflate","BinaryReader","NitroBundle","constructor","arrayBuffer","_jsonFile","_image","_imageData","_baseTexture","parse","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","binaryReader","fileCount","readShort","fileNameLength","fileName","readBytes","toString","fileLength","readInt","endsWith","decompressed","toArrayBuffer","JSON","TEXT_DECODER","decode","base64","jsonFile","baseTexture","TextDecoder"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,SAAeC,OAAf,QAA8B,MAA9B;AACA,SAASC,YAAT,QAA6B,qCAA7B;AAEA,OAAO,MAAMC,WAAN,CACP;AAQIC,EAAAA,WAAW,CAACC,WAAD,EACX;AAAA,SANQC,SAMR,GAN4B,IAM5B;AAAA,SALQC,MAKR,GALyB,IAKzB;AAAA,SAJQC,UAIR,GAJiC,IAIjC;AAAA,SAHQC,YAGR,GAHoC,IAGpC;AACI,SAAKC,KAAL,CAAWL,WAAX;AACH;;AAEiC,SAAnBM,mBAAmB,CAACC,MAAD,EAClC;AACI,QAAIC,MAAM,GAAG,EAAb;AAEA,UAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAd;AACA,UAAMI,GAAG,GAAGF,KAAK,CAACG,UAAlB;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,GAAnB,EAAwBE,CAAC,EAAzB,EAA8BL,MAAM,IAAIM,MAAM,CAACC,YAAP,CAAoBN,KAAK,CAACI,CAAD,CAAzB,CAAX;;AAE7B,WAAOG,MAAM,CAACC,IAAP,CAAYT,MAAZ,CAAP;AACH;;AAEMH,EAAAA,KAAK,CAACL,WAAD,EACZ;AACI,UAAMkB,YAAY,GAAG,IAAIrB,YAAJ,CAAiBG,WAAjB,CAArB;AAEA,QAAImB,SAAS,GAAGD,YAAY,CAACE,SAAb,EAAhB;;AAEA,WAAMD,SAAS,GAAG,CAAlB,EACA;AACI,YAAME,cAAc,GAAGH,YAAY,CAACE,SAAb,EAAvB;AACA,YAAME,QAAQ,GAAGJ,YAAY,CAACK,SAAb,CAAuBF,cAAvB,EAAuCG,QAAvC,EAAjB;AACA,YAAMC,UAAU,GAAGP,YAAY,CAACQ,OAAb,EAAnB;AACA,YAAMnB,MAAM,GAAGW,YAAY,CAACK,SAAb,CAAuBE,UAAvB,CAAf;;AAEA,UAAGH,QAAQ,CAACK,QAAT,CAAkB,OAAlB,CAAH,EACA;AACI,cAAMC,YAAY,GAAGhC,OAAO,CAAEW,MAAM,CAACsB,aAAP,EAAF,CAA5B;AAEA,aAAK5B,SAAL,GAAiB6B,IAAI,CAACzB,KAAL,CAAWP,WAAW,CAACiC,YAAZ,CAAyBC,MAAzB,CAAgCJ,YAAhC,CAAX,CAAjB;AACH,OALD,MAOA;AACI,cAAMA,YAAY,GAAGhC,OAAO,CAAEW,MAAM,CAACsB,aAAP,EAAF,CAA5B;AACA,cAAMI,MAAM,GAAGnC,WAAW,CAACQ,mBAAZ,CAAgCsB,YAAhC,CAAf;AAEA,aAAKxB,YAAL,GAAoB,IAAIT,WAAJ,CAAgB,2BAA2BsC,MAA3C,CAApB;AACH;;AAEDd,MAAAA,SAAS;AACZ;AACJ;;AAEW,MAARe,QAAQ,GACZ;AACI,WAAO,KAAKjC,SAAZ;AACH;;AAEqB,MAAXkC,WAAW,GACtB;AACI,WAAO,KAAK/B,YAAZ;AACH;;AAhEL;AADaN,W,CAEMiC,Y,GAA4B,IAAIK,WAAJ,CAAgB,OAAhB,C","sourcesContent":["import { BaseTexture } from '@pixi/core';\r\nimport { Data, inflate } from 'pako';\r\nimport { BinaryReader } from '../communication/codec/BinaryReader';\r\n\r\nexport class NitroBundle\r\n{\r\n    private static TEXT_DECODER: TextDecoder = new TextDecoder('utf-8');\r\n\r\n    private _jsonFile: Object = null;\r\n    private _image: string = null;\r\n    private _imageData: Uint8Array = null;\r\n    private _baseTexture: BaseTexture = null;\r\n\r\n    constructor(arrayBuffer: ArrayBuffer)\r\n    {\r\n        this.parse(arrayBuffer);\r\n    }\r\n\r\n    private static arrayBufferToBase64(buffer: ArrayBuffer): string\r\n    {\r\n        let binary = '';\r\n\r\n        const bytes = new Uint8Array(buffer);\r\n        const len = bytes.byteLength;\r\n\r\n        for(let i = 0; i < len; i++) (binary += String.fromCharCode(bytes[i]));\r\n\r\n        return window.btoa(binary);\r\n    }\r\n\r\n    public parse(arrayBuffer: ArrayBuffer): void\r\n    {\r\n        const binaryReader = new BinaryReader(arrayBuffer);\r\n\r\n        let fileCount = binaryReader.readShort();\r\n\r\n        while(fileCount > 0)\r\n        {\r\n            const fileNameLength = binaryReader.readShort();\r\n            const fileName = binaryReader.readBytes(fileNameLength).toString();\r\n            const fileLength = binaryReader.readInt();\r\n            const buffer = binaryReader.readBytes(fileLength);\r\n\r\n            if(fileName.endsWith('.json'))\r\n            {\r\n                const decompressed = inflate((buffer.toArrayBuffer() as Data));\r\n\r\n                this._jsonFile = JSON.parse(NitroBundle.TEXT_DECODER.decode(decompressed));\r\n            }\r\n            else\r\n            {\r\n                const decompressed = inflate((buffer.toArrayBuffer() as Data));\r\n                const base64 = NitroBundle.arrayBufferToBase64(decompressed);\r\n\r\n                this._baseTexture = new BaseTexture('data:image/png;base64,' + base64);\r\n            }\r\n\r\n            fileCount--;\r\n        }\r\n    }\r\n\r\n    get jsonFile(): Object\r\n    {\r\n        return this._jsonFile;\r\n    }\r\n\r\n    public get baseTexture(): BaseTexture\r\n    {\r\n        return this._baseTexture;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}