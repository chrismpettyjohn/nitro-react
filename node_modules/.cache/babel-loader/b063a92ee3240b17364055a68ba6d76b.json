{"ast":null,"code":"import { NitroManager } from '../core/common/NitroManager';\nimport { RoomContentLoader } from '../nitro/room/RoomContentLoader';\nimport { RoomContentLoadedEvent } from './events/RoomContentLoadedEvent';\nimport { RoomInstance } from './RoomInstance';\nimport { RoomObjectManager } from './RoomObjectManager';\nexport class RoomManager extends NitroManager {\n  constructor(listener, visualizationFactory, logicFactory) {\n    super();\n    this._state = void 0;\n    this._rooms = void 0;\n    this._contentLoader = void 0;\n    this._updateCategories = void 0;\n    this._listener = void 0;\n    this._visualizationFactory = void 0;\n    this._logicFactory = void 0;\n    this._initialLoadList = void 0;\n    this._pendingContentTypes = void 0;\n    this._skipContentProcessing = void 0;\n    this._disposed = void 0;\n    this._state = RoomManager.ROOM_MANAGER_LOADED;\n    this._rooms = new Map();\n    this._contentLoader = null;\n    this._updateCategories = [];\n    this._listener = listener;\n    this._visualizationFactory = visualizationFactory;\n    this._logicFactory = logicFactory;\n    this._initialLoadList = [];\n    this._pendingContentTypes = [];\n    this._skipContentProcessing = false;\n    this._disposed = false;\n    this.onRoomContentLoadedEvent = this.onRoomContentLoadedEvent.bind(this);\n    this.events.addEventListener(RoomContentLoadedEvent.RCLE_SUCCESS, this.onRoomContentLoadedEvent);\n    this.events.addEventListener(RoomContentLoadedEvent.RCLE_FAILURE, this.onRoomContentLoadedEvent);\n    this.events.addEventListener(RoomContentLoadedEvent.RCLE_CANCEL, this.onRoomContentLoadedEvent);\n  }\n\n  onInit() {\n    if (this._state >= RoomManager.ROOM_MANAGER_INITIALIZING || !this._contentLoader) return;\n    const mandatoryLibraries = RoomContentLoader.MANDATORY_LIBRARIES;\n\n    for (const library of mandatoryLibraries) {\n      if (!library) continue;\n\n      if (this._initialLoadList.indexOf(library) === -1) {\n        this._contentLoader.downloadAsset(library, this.events);\n\n        this._initialLoadList.push(library);\n      }\n    }\n\n    this._state = RoomManager.ROOM_MANAGER_INITIALIZING;\n  }\n\n  getRoomInstance(roomId) {\n    const existing = this._rooms.get(roomId);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  createRoomInstance(roomId) {\n    if (this._rooms.get(roomId)) return null;\n    const instance = new RoomInstance(roomId, this);\n\n    this._rooms.set(instance.id, instance);\n\n    if (this._updateCategories.length) {\n      for (const category of this._updateCategories) {\n        instance.addUpdateCategory(category);\n      }\n    }\n\n    return instance;\n  }\n\n  removeRoomInstance(roomId) {\n    const existing = this._rooms.get(roomId);\n\n    if (!existing) return false;\n\n    this._rooms.delete(roomId);\n\n    existing.dispose();\n    return true;\n  }\n\n  createRoomObjectAndInitalize(roomId, objectId, type, category) {\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    let visualization = type;\n    let logic = type;\n    let assetName = type;\n    let asset = null;\n    let isLoading = false;\n\n    if (this._contentLoader.isLoaderType(type)) {\n      asset = this._contentLoader.getCollection(type);\n\n      if (!asset) {\n        isLoading = true;\n\n        this._contentLoader.downloadAsset(type, this.events);\n\n        assetName = this._contentLoader.getPlaceholderName(type);\n        asset = this._contentLoader.getCollection(assetName);\n        if (!asset) return null;\n      }\n\n      visualization = asset.data.visualizationType;\n      logic = asset.data.logicType;\n    }\n\n    const object = instance.createRoomObject(objectId, 1, type, category);\n    if (!object) return null;\n\n    if (this._visualizationFactory) {\n      const visualizationInstance = this._visualizationFactory.getVisualization(visualization);\n\n      if (!visualizationInstance) {\n        instance.removeRoomObject(objectId, category);\n        return null;\n      }\n\n      visualizationInstance.asset = asset;\n\n      const visualizationData = this._visualizationFactory.getVisualizationData(assetName, visualization, asset && asset.data || null);\n\n      if (!visualizationData || !visualizationInstance.initialize(visualizationData)) {\n        instance.removeRoomObject(objectId, category);\n        return null;\n      }\n\n      object.setVisualization(visualizationInstance);\n    }\n\n    if (this._logicFactory) {\n      const logicInstance = this._logicFactory.getLogic(logic);\n\n      object.setLogic(logicInstance);\n\n      if (logicInstance) {\n        logicInstance.initialize(asset && asset.data || null);\n      }\n    }\n\n    if (!isLoading) object.isReady = true;\n\n    this._contentLoader.setRoomObjectRoomId(object, roomId);\n\n    return object;\n  }\n\n  reinitializeRoomObjectsByType(type) {\n    if (!type || !this._contentLoader || !this._visualizationFactory || !this._logicFactory) return;\n\n    const asset = this._contentLoader.getCollection(type);\n\n    if (!asset) return;\n    const visualization = asset.data.visualizationType;\n    const logic = asset.data.logicType;\n\n    const visualizationData = this._visualizationFactory.getVisualizationData(type, visualization, asset.data);\n\n    for (const room of this._rooms.values()) {\n      if (!room) continue;\n\n      for (const [category, manager] of room.managers.entries()) {\n        if (!manager) continue;\n\n        for (const object of manager.objects.getValues()) {\n          if (!object || object.type !== type) continue;\n\n          const visualizationInstance = this._visualizationFactory.getVisualization(visualization);\n\n          if (visualizationInstance) {\n            visualizationInstance.asset = asset;\n\n            if (!visualizationData || !visualizationInstance.initialize(visualizationData)) {\n              manager.removeObject(object.id);\n            } else {\n              object.setVisualization(visualizationInstance);\n\n              const logicInstance = this._logicFactory.getLogic(logic);\n\n              object.setLogic(logicInstance);\n\n              if (logicInstance) {\n                logicInstance.initialize(asset.data);\n              }\n\n              object.isReady = true;\n              if (this._listener) this._listener.objectInitialized(room.id, object.id, category);\n            }\n          } else {\n            manager.removeObject(object.id);\n          }\n        }\n      }\n    }\n  }\n\n  addUpdateCategory(category) {\n    const index = this._updateCategories.indexOf(category);\n\n    if (index >= 0) return;\n\n    this._updateCategories.push(category);\n\n    if (!this._rooms.size) return;\n\n    for (const room of this._rooms.values()) {\n      if (!room) continue;\n      room.addUpdateCategory(category);\n    }\n  }\n\n  removeUpdateCategory(category) {\n    const index = this._updateCategories.indexOf(category);\n\n    if (index === -1) return;\n\n    this._updateCategories.splice(index, 1);\n\n    if (!this._rooms.size) return;\n\n    for (const room of this._rooms.values()) {\n      if (!room) continue;\n      room.removeUpdateCategory(category);\n    }\n  }\n\n  setContentLoader(loader) {\n    if (this._contentLoader) this._contentLoader.dispose();\n    this._contentLoader = loader;\n  }\n\n  processPendingContentTypes(time) {\n    if (this._skipContentProcessing) {\n      this._skipContentProcessing = false;\n      return;\n    }\n\n    while (this._pendingContentTypes.length) {\n      const type = this._pendingContentTypes.shift();\n\n      const collection = this._contentLoader.getCollection(type);\n\n      if (!collection) {\n        if (this._listener) {\n          this._listener.initalizeTemporaryObjectsByType(type, false);\n        }\n\n        this.logger.log(`Invalid Collection: ${type}`);\n        continue;\n      }\n\n      this.reinitializeRoomObjectsByType(type);\n      if (this._listener) this._listener.initalizeTemporaryObjectsByType(type, true);\n      if (this._initialLoadList.length > 0) this.removeFromInitialLoad(type);\n    }\n  }\n\n  removeFromInitialLoad(type) {\n    if (!type || this._state === RoomManager.ROOM_MANAGER_ERROR) return;\n    if (!this._contentLoader) this._state = RoomManager.ROOM_MANAGER_ERROR;\n\n    if (this._contentLoader.getCollection(type)) {\n      const i = this._initialLoadList.indexOf(type);\n\n      if (i >= 0) this._initialLoadList.splice(i, 1);\n\n      if (!this._initialLoadList.length) {\n        this._state = RoomManager.ROOM_MANAGER_INITIALIZED;\n\n        if (this._listener) {\n          this._listener.onRoomEngineInitalized(true);\n        }\n      }\n    } else {\n      this._state = RoomManager.ROOM_MANAGER_ERROR;\n      if (this._listener) this._listener.onRoomEngineInitalized(false);\n    }\n  }\n\n  onRoomContentLoadedEvent(event) {\n    if (!this._contentLoader) return;\n    const contentType = event.contentType;\n    if (this._pendingContentTypes.indexOf(contentType) >= 0) return;\n\n    this._pendingContentTypes.push(contentType);\n  }\n\n  update(time) {\n    let update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.processPendingContentTypes(time);\n    if (!this._rooms.size) return;\n\n    for (const room of this._rooms.values()) room && room.update(time, update);\n  }\n\n  createRoomObjectManager(category) {\n    return new RoomObjectManager();\n  }\n\n  get rooms() {\n    return this._rooms;\n  }\n\n  get disposed() {\n    return this._disposed;\n  }\n\n}\nRoomManager.ROOM_MANAGER_ERROR = -1;\nRoomManager.ROOM_MANAGER_LOADING = 0;\nRoomManager.ROOM_MANAGER_LOADED = 1;\nRoomManager.ROOM_MANAGER_INITIALIZING = 2;\nRoomManager.ROOM_MANAGER_INITIALIZED = 3;\nRoomManager.CONTENT_PROCESSING_TIME_LIMIT_MILLISECONDS = 40;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/RoomManager.ts"],"names":["NitroManager","RoomContentLoader","RoomContentLoadedEvent","RoomInstance","RoomObjectManager","RoomManager","constructor","listener","visualizationFactory","logicFactory","_state","_rooms","_contentLoader","_updateCategories","_listener","_visualizationFactory","_logicFactory","_initialLoadList","_pendingContentTypes","_skipContentProcessing","_disposed","ROOM_MANAGER_LOADED","Map","onRoomContentLoadedEvent","bind","events","addEventListener","RCLE_SUCCESS","RCLE_FAILURE","RCLE_CANCEL","onInit","ROOM_MANAGER_INITIALIZING","mandatoryLibraries","MANDATORY_LIBRARIES","library","indexOf","downloadAsset","push","getRoomInstance","roomId","existing","get","createRoomInstance","instance","set","id","length","category","addUpdateCategory","removeRoomInstance","delete","dispose","createRoomObjectAndInitalize","objectId","type","visualization","logic","assetName","asset","isLoading","isLoaderType","getCollection","getPlaceholderName","data","visualizationType","logicType","object","createRoomObject","visualizationInstance","getVisualization","removeRoomObject","visualizationData","getVisualizationData","initialize","setVisualization","logicInstance","getLogic","setLogic","isReady","setRoomObjectRoomId","reinitializeRoomObjectsByType","room","values","manager","managers","entries","objects","getValues","removeObject","objectInitialized","index","size","removeUpdateCategory","splice","setContentLoader","loader","processPendingContentTypes","time","shift","collection","initalizeTemporaryObjectsByType","logger","log","removeFromInitialLoad","ROOM_MANAGER_ERROR","i","ROOM_MANAGER_INITIALIZED","onRoomEngineInitalized","event","contentType","update","createRoomObjectManager","rooms","disposed","ROOM_MANAGER_LOADING","CONTENT_PROCESSING_TIME_LIMIT_MILLISECONDS"],"mappings":"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","sourcesContent":["import { NitroManager } from '../core/common/NitroManager';\r\nimport { RoomContentLoader } from '../nitro/room/RoomContentLoader';\r\nimport { RoomContentLoadedEvent } from './events/RoomContentLoadedEvent';\r\nimport { IRoomInstance } from './IRoomInstance';\r\nimport { IRoomInstanceContainer } from './IRoomInstanceContainer';\r\nimport { IRoomManager } from './IRoomManager';\r\nimport { IRoomManagerListener } from './IRoomManagerListener';\r\nimport { IRoomObjectManager } from './IRoomObjectManager';\r\nimport { IRoomObject } from './object/IRoomObject';\r\nimport { IRoomObjectController } from './object/IRoomObjectController';\r\nimport { IRoomObjectLogicFactory } from './object/logic/IRoomObjectLogicFactory';\r\nimport { IRoomObjectVisualizationFactory } from './object/visualization/IRoomObjectVisualizationFactory';\r\nimport { IGraphicAssetCollection } from './object/visualization/utils/IGraphicAssetCollection';\r\nimport { RoomInstance } from './RoomInstance';\r\nimport { RoomObjectManager } from './RoomObjectManager';\r\n\r\nexport class RoomManager extends NitroManager implements IRoomManager, IRoomInstanceContainer\r\n{\r\n    public static ROOM_MANAGER_ERROR: number = -1;\r\n    public static ROOM_MANAGER_LOADING: number = 0;\r\n    public static ROOM_MANAGER_LOADED: number = 1;\r\n    public static ROOM_MANAGER_INITIALIZING: number = 2;\r\n    public static ROOM_MANAGER_INITIALIZED: number = 3;\r\n    private static CONTENT_PROCESSING_TIME_LIMIT_MILLISECONDS: number = 40;\r\n\r\n    private _state: number;\r\n    private _rooms: Map<string, IRoomInstance>;\r\n    private _contentLoader: RoomContentLoader;\r\n    private _updateCategories: number[];\r\n\r\n    private _listener: IRoomManagerListener;\r\n    private _visualizationFactory: IRoomObjectVisualizationFactory;\r\n    private _logicFactory: IRoomObjectLogicFactory;\r\n\r\n    private _initialLoadList: string[];\r\n    private _pendingContentTypes: string[];\r\n    private _skipContentProcessing: boolean;\r\n\r\n    private _disposed: boolean;\r\n\r\n    constructor(listener: IRoomManagerListener, visualizationFactory: IRoomObjectVisualizationFactory, logicFactory: IRoomObjectLogicFactory)\r\n    {\r\n        super();\r\n\r\n        this._state = RoomManager.ROOM_MANAGER_LOADED;\r\n        this._rooms = new Map();\r\n        this._contentLoader = null;\r\n        this._updateCategories = [];\r\n\r\n        this._listener = listener;\r\n        this._visualizationFactory = visualizationFactory;\r\n        this._logicFactory = logicFactory;\r\n\r\n        this._initialLoadList = [];\r\n        this._pendingContentTypes = [];\r\n        this._skipContentProcessing = false;\r\n\r\n        this._disposed = false;\r\n\r\n        this.onRoomContentLoadedEvent = this.onRoomContentLoadedEvent.bind(this);\r\n\r\n        this.events.addEventListener(RoomContentLoadedEvent.RCLE_SUCCESS, this.onRoomContentLoadedEvent);\r\n        this.events.addEventListener(RoomContentLoadedEvent.RCLE_FAILURE, this.onRoomContentLoadedEvent);\r\n        this.events.addEventListener(RoomContentLoadedEvent.RCLE_CANCEL, this.onRoomContentLoadedEvent);\r\n    }\r\n\r\n    public onInit(): void\r\n    {\r\n        if(this._state >= RoomManager.ROOM_MANAGER_INITIALIZING || !this._contentLoader) return;\r\n\r\n        const mandatoryLibraries = RoomContentLoader.MANDATORY_LIBRARIES;\r\n\r\n        for(const library of mandatoryLibraries)\r\n        {\r\n            if(!library) continue;\r\n\r\n            if(this._initialLoadList.indexOf(library) === -1)\r\n            {\r\n                this._contentLoader.downloadAsset(library, this.events);\r\n\r\n                this._initialLoadList.push(library);\r\n            }\r\n        }\r\n\r\n        this._state = RoomManager.ROOM_MANAGER_INITIALIZING;\r\n    }\r\n\r\n    public getRoomInstance(roomId: string): IRoomInstance\r\n    {\r\n        const existing = this._rooms.get(roomId);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public createRoomInstance(roomId: string): IRoomInstance\r\n    {\r\n        if(this._rooms.get(roomId)) return null;\r\n\r\n        const instance = new RoomInstance(roomId, this);\r\n\r\n        this._rooms.set(instance.id, instance);\r\n\r\n        if(this._updateCategories.length)\r\n        {\r\n            for(const category of this._updateCategories)\r\n            {\r\n                instance.addUpdateCategory(category);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    public removeRoomInstance(roomId: string): boolean\r\n    {\r\n        const existing = this._rooms.get(roomId);\r\n\r\n        if(!existing) return false;\r\n\r\n        this._rooms.delete(roomId);\r\n\r\n        existing.dispose();\r\n\r\n        return true;\r\n    }\r\n\r\n    public createRoomObjectAndInitalize(roomId: string, objectId: number, type: string, category: number): IRoomObject\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        let visualization = type;\r\n        let logic = type;\r\n        let assetName = type;\r\n        let asset: IGraphicAssetCollection = null;\r\n        let isLoading = false;\r\n\r\n        if(this._contentLoader.isLoaderType(type))\r\n        {\r\n            asset = this._contentLoader.getCollection(type);\r\n\r\n            if(!asset)\r\n            {\r\n                isLoading = true;\r\n\r\n                this._contentLoader.downloadAsset(type, this.events);\r\n\r\n                assetName = this._contentLoader.getPlaceholderName(type);\r\n                asset = this._contentLoader.getCollection(assetName);\r\n\r\n                if(!asset) return null;\r\n            }\r\n\r\n            visualization = asset.data.visualizationType;\r\n            logic = asset.data.logicType;\r\n        }\r\n\r\n        const object = (instance.createRoomObject(objectId, 1, type, category) as IRoomObjectController);\r\n\r\n        if(!object) return null;\r\n\r\n        if(this._visualizationFactory)\r\n        {\r\n            const visualizationInstance = this._visualizationFactory.getVisualization(visualization);\r\n\r\n            if(!visualizationInstance)\r\n            {\r\n                instance.removeRoomObject(objectId, category);\r\n\r\n                return null;\r\n            }\r\n\r\n            visualizationInstance.asset = asset;\r\n\r\n            const visualizationData = this._visualizationFactory.getVisualizationData(assetName, visualization, ((asset && asset.data) || null));\r\n\r\n            if(!visualizationData || !visualizationInstance.initialize(visualizationData))\r\n            {\r\n                instance.removeRoomObject(objectId, category);\r\n\r\n                return null;\r\n            }\r\n\r\n            object.setVisualization(visualizationInstance);\r\n        }\r\n\r\n        if(this._logicFactory)\r\n        {\r\n            const logicInstance = this._logicFactory.getLogic(logic);\r\n\r\n            object.setLogic(logicInstance);\r\n\r\n            if(logicInstance)\r\n            {\r\n                logicInstance.initialize((asset && asset.data) || null);\r\n            }\r\n        }\r\n\r\n        if(!isLoading) object.isReady = true;\r\n\r\n        this._contentLoader.setRoomObjectRoomId(object, roomId);\r\n\r\n        return object;\r\n    }\r\n\r\n    private reinitializeRoomObjectsByType(type: string): void\r\n    {\r\n        if(!type || !this._contentLoader || !this._visualizationFactory || !this._logicFactory) return;\r\n\r\n        const asset = this._contentLoader.getCollection(type);\r\n\r\n        if(!asset) return;\r\n\r\n        const visualization = asset.data.visualizationType;\r\n        const logic = asset.data.logicType;\r\n        const visualizationData = this._visualizationFactory.getVisualizationData(type, visualization, asset.data);\r\n\r\n        for(const room of this._rooms.values())\r\n        {\r\n            if(!room) continue;\r\n\r\n            for(const [ category, manager ] of room.managers.entries())\r\n            {\r\n                if(!manager) continue;\r\n\r\n                for(const object of manager.objects.getValues())\r\n                {\r\n                    if(!object || object.type !== type) continue;\r\n\r\n                    const visualizationInstance = this._visualizationFactory.getVisualization(visualization);\r\n\r\n                    if(visualizationInstance)\r\n                    {\r\n                        visualizationInstance.asset = asset;\r\n\r\n                        if(!visualizationData || !visualizationInstance.initialize(visualizationData))\r\n                        {\r\n                            manager.removeObject(object.id);\r\n                        }\r\n                        else\r\n                        {\r\n                            object.setVisualization(visualizationInstance);\r\n\r\n                            const logicInstance = this._logicFactory.getLogic(logic);\r\n\r\n                            object.setLogic(logicInstance);\r\n\r\n                            if(logicInstance)\r\n                            {\r\n                                logicInstance.initialize(asset.data);\r\n                            }\r\n\r\n                            object.isReady = true;\r\n\r\n                            if(this._listener) this._listener.objectInitialized(room.id, object.id, category);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        manager.removeObject(object.id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public addUpdateCategory(category: number): void\r\n    {\r\n        const index = this._updateCategories.indexOf(category);\r\n\r\n        if(index >= 0) return;\r\n\r\n        this._updateCategories.push(category);\r\n\r\n        if(!this._rooms.size) return;\r\n\r\n        for(const room of this._rooms.values())\r\n        {\r\n            if(!room) continue;\r\n\r\n            room.addUpdateCategory(category);\r\n        }\r\n    }\r\n\r\n    public removeUpdateCategory(category: number): void\r\n    {\r\n        const index = this._updateCategories.indexOf(category);\r\n\r\n        if(index === -1) return;\r\n\r\n        this._updateCategories.splice(index, 1);\r\n\r\n        if(!this._rooms.size) return;\r\n\r\n        for(const room of this._rooms.values())\r\n        {\r\n            if(!room) continue;\r\n\r\n            room.removeUpdateCategory(category);\r\n        }\r\n    }\r\n\r\n    public setContentLoader(loader: RoomContentLoader): void\r\n    {\r\n        if(this._contentLoader) this._contentLoader.dispose();\r\n\r\n        this._contentLoader = loader;\r\n    }\r\n\r\n    private processPendingContentTypes(time: number): void\r\n    {\r\n        if(this._skipContentProcessing)\r\n        {\r\n            this._skipContentProcessing = false;\r\n\r\n            return;\r\n        }\r\n\r\n        while(this._pendingContentTypes.length)\r\n        {\r\n            const type = this._pendingContentTypes.shift();\r\n\r\n            const collection = this._contentLoader.getCollection(type);\r\n\r\n            if(!collection)\r\n            {\r\n                if(this._listener)\r\n                {\r\n                    this._listener.initalizeTemporaryObjectsByType(type, false);\r\n                }\r\n\r\n                this.logger.log(`Invalid Collection: ${ type }`);\r\n\r\n                continue;\r\n            }\r\n\r\n            this.reinitializeRoomObjectsByType(type);\r\n\r\n            if(this._listener) this._listener.initalizeTemporaryObjectsByType(type, true);\r\n\r\n            if(this._initialLoadList.length > 0) this.removeFromInitialLoad(type);\r\n        }\r\n    }\r\n\r\n    private removeFromInitialLoad(type: string): void\r\n    {\r\n        if(!type || this._state === RoomManager.ROOM_MANAGER_ERROR) return;\r\n\r\n        if(!this._contentLoader) this._state = RoomManager.ROOM_MANAGER_ERROR;\r\n\r\n        if(this._contentLoader.getCollection(type))\r\n        {\r\n            const i = this._initialLoadList.indexOf(type);\r\n\r\n            if(i >= 0) this._initialLoadList.splice(i, 1);\r\n\r\n            if(!this._initialLoadList.length)\r\n            {\r\n                this._state = RoomManager.ROOM_MANAGER_INITIALIZED;\r\n\r\n                if(this._listener)\r\n                {\r\n                    this._listener.onRoomEngineInitalized(true);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this._state = RoomManager.ROOM_MANAGER_ERROR;\r\n\r\n            if(this._listener) this._listener.onRoomEngineInitalized(false);\r\n        }\r\n    }\r\n\r\n    private onRoomContentLoadedEvent(event: RoomContentLoadedEvent): void\r\n    {\r\n        if(!this._contentLoader) return;\r\n\r\n        const contentType = event.contentType;\r\n\r\n        if(this._pendingContentTypes.indexOf(contentType) >= 0) return;\r\n\r\n        this._pendingContentTypes.push(contentType);\r\n    }\r\n\r\n    public update(time: number, update: boolean = false): void\r\n    {\r\n        this.processPendingContentTypes(time);\r\n\r\n        if(!this._rooms.size) return;\r\n\r\n        for(const room of this._rooms.values()) room && room.update(time, update);\r\n    }\r\n\r\n    public createRoomObjectManager(category: number): IRoomObjectManager\r\n    {\r\n        return new RoomObjectManager();\r\n    }\r\n\r\n    public get rooms(): Map<string, IRoomInstance>\r\n    {\r\n        return this._rooms;\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return this._disposed;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}