{"ast":null,"code":"import { Vector3d } from '../../../room/utils/Vector3d';\nexport class RoomCamera {\n  constructor() {\n    this._targetId = -1;\n    this._targetCategory = -2;\n    this._targetLoc = null;\n    this._moveDistance = 0;\n    this._previousMoveSpeed = 0;\n    this._maintainPreviousMoveSpeed = false;\n    this._currentLoc = null;\n    this._targetObjectLoc = void 0;\n    this._limitedLocX = false;\n    this._limitedLocY = false;\n    this._centeredLocX = false;\n    this._centeredLocY = false;\n    this._screenWd = 0;\n    this._screenHt = 0;\n    this._scale = 0;\n    this._roomWd = 0;\n    this._roomHt = 0;\n    this._geometryUpdateId = -1;\n    this._scaleChanged = false;\n    this._followDuration = void 0;\n    this._targetObjectLoc = new Vector3d();\n  }\n\n  get location() {\n    return this._currentLoc;\n  }\n\n  get targetId() {\n    return this._targetId;\n  }\n\n  set targetId(k) {\n    this._targetId = k;\n  }\n\n  get targetCategory() {\n    return this._targetCategory;\n  }\n\n  set targetCategory(k) {\n    this._targetCategory = k;\n  }\n\n  get targetObjectLoc() {\n    return this._targetObjectLoc;\n  }\n\n  set targetObjectLoc(k) {\n    this._targetObjectLoc.assign(k);\n  }\n\n  get limitedLocationX() {\n    return this._limitedLocX;\n  }\n\n  set limitedLocationX(k) {\n    this._limitedLocX = k;\n  }\n\n  get limitedLocationY() {\n    return this._limitedLocY;\n  }\n\n  set limitedLocationY(k) {\n    this._limitedLocY = k;\n  }\n\n  get centeredLocX() {\n    return this._centeredLocX;\n  }\n\n  set centeredLocX(k) {\n    this._centeredLocX = k;\n  }\n\n  get centeredLocY() {\n    return this._centeredLocY;\n  }\n\n  set centeredLocY(k) {\n    this._centeredLocY = k;\n  }\n\n  get screenWd() {\n    return this._screenWd;\n  }\n\n  set screenWd(k) {\n    this._screenWd = k;\n  }\n\n  get screenHt() {\n    return this._screenHt;\n  }\n\n  set screenHt(k) {\n    this._screenHt = k;\n  }\n\n  get scale() {\n    return this._scale;\n  }\n\n  set scale(k) {\n    if (this._scale != k) {\n      this._scale = k;\n      this._scaleChanged = true;\n    }\n  }\n\n  get roomWd() {\n    return this._roomWd;\n  }\n\n  set roomWd(k) {\n    this._roomWd = k;\n  }\n\n  get roomHt() {\n    return this._roomHt;\n  }\n\n  set roomHt(k) {\n    this._roomHt = k;\n  }\n\n  get geometryUpdateId() {\n    return this._geometryUpdateId;\n  }\n\n  set geometryUpdateId(k) {\n    this._geometryUpdateId = k;\n  }\n\n  get isMoving() {\n    if (!(this._targetLoc == null) && !(this._currentLoc == null)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  set target(k) {\n    let _local_2;\n\n    if (this._targetLoc == null) {\n      this._targetLoc = new Vector3d();\n    }\n\n    if (!(this._targetLoc.x == k.x) || !(this._targetLoc.y == k.y) || !(this._targetLoc.z == k.z)) {\n      this._targetLoc.assign(k);\n\n      _local_2 = Vector3d.dif(this._targetLoc, this._currentLoc);\n      this._moveDistance = _local_2.length;\n      this._maintainPreviousMoveSpeed = true;\n    }\n  }\n\n  dispose() {\n    this._targetLoc = null;\n    this._currentLoc = null;\n  }\n\n  initializeLocation(k) {\n    if (this._currentLoc != null) {\n      return;\n    }\n\n    this._currentLoc = new Vector3d();\n\n    this._currentLoc.assign(k);\n  }\n\n  resetLocation(k) {\n    if (this._currentLoc == null) {\n      this._currentLoc = new Vector3d();\n    }\n\n    this._currentLoc.assign(k);\n  }\n\n  update(k, _arg_2) {\n    let _local_3;\n\n    let _local_4;\n\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    if (this._followDuration > 0 && !(this._targetLoc == null) && !(this._currentLoc == null)) {\n      if (this._scaleChanged) {\n        this._scaleChanged = false;\n        this._currentLoc = this._targetLoc;\n        this._targetLoc = null;\n        return;\n      }\n\n      _local_3 = Vector3d.dif(this._targetLoc, this._currentLoc);\n\n      if (_local_3.length > this._moveDistance) {\n        this._moveDistance = _local_3.length;\n      }\n\n      if (_local_3.length <= _arg_2) {\n        this._currentLoc = this._targetLoc;\n        this._targetLoc = null;\n        this._previousMoveSpeed = 0;\n      } else {\n        _local_4 = Math.sin(Math.PI * _local_3.length / this._moveDistance);\n        _local_5 = _arg_2 * 0.5;\n        _local_6 = this._moveDistance / RoomCamera.MOVE_SPEED_DENOMINATOR;\n        _local_7 = _local_5 + (_local_6 - _local_5) * _local_4;\n\n        if (this._maintainPreviousMoveSpeed) {\n          if (_local_7 < this._previousMoveSpeed) {\n            _local_7 = this._previousMoveSpeed;\n\n            if (_local_7 > _local_3.length) {\n              _local_7 = _local_3.length;\n            }\n          } else {\n            this._maintainPreviousMoveSpeed = false;\n          }\n        }\n\n        this._previousMoveSpeed = _local_7;\n\n        _local_3.divide(_local_3.length);\n\n        _local_3.multiply(_local_7);\n\n        this._currentLoc = Vector3d.sum(this._currentLoc, _local_3);\n      }\n    }\n  }\n\n  reset() {\n    this._geometryUpdateId = -1;\n  }\n\n  activateFollowing(k) {\n    this._followDuration = k;\n  }\n\n}\nRoomCamera.MOVE_SPEED_DENOMINATOR = 12;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/utils/RoomCamera.ts"],"names":["Vector3d","RoomCamera","constructor","_targetId","_targetCategory","_targetLoc","_moveDistance","_previousMoveSpeed","_maintainPreviousMoveSpeed","_currentLoc","_targetObjectLoc","_limitedLocX","_limitedLocY","_centeredLocX","_centeredLocY","_screenWd","_screenHt","_scale","_roomWd","_roomHt","_geometryUpdateId","_scaleChanged","_followDuration","location","targetId","k","targetCategory","targetObjectLoc","assign","limitedLocationX","limitedLocationY","centeredLocX","centeredLocY","screenWd","screenHt","scale","roomWd","roomHt","geometryUpdateId","isMoving","target","_local_2","x","y","z","dif","length","dispose","initializeLocation","resetLocation","update","_arg_2","_local_3","_local_4","_local_5","_local_6","_local_7","Math","sin","PI","MOVE_SPEED_DENOMINATOR","divide","multiply","sum","reset","activateFollowing"],"mappings":"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","sourcesContent":["import { IVector3D } from '../../../room/utils/IVector3D';\r\nimport { Vector3d } from '../../../room/utils/Vector3d';\r\n\r\nexport class RoomCamera\r\n{\r\n    private static MOVE_SPEED_DENOMINATOR: number = 12;\r\n\r\n    private _targetId: number = -1;\r\n    private _targetCategory: number = -2;\r\n    private _targetLoc:Vector3d = null;\r\n    private _moveDistance: number = 0;\r\n    private _previousMoveSpeed: number = 0;\r\n    private _maintainPreviousMoveSpeed: boolean = false;\r\n    private _currentLoc:Vector3d = null;\r\n    private _targetObjectLoc:Vector3d;\r\n    private _limitedLocX: boolean = false;\r\n    private _limitedLocY: boolean = false;\r\n    private _centeredLocX: boolean = false;\r\n    private _centeredLocY: boolean = false;\r\n    private _screenWd: number = 0;\r\n    private _screenHt: number = 0;\r\n    private _scale: number = 0;\r\n    private _roomWd: number = 0;\r\n    private _roomHt: number = 0;\r\n    private _geometryUpdateId: number = -1;\r\n    private _scaleChanged: boolean = false;\r\n    private _followDuration: number;\r\n\r\n    constructor()\r\n    {\r\n        this._targetObjectLoc = new Vector3d();\r\n    }\r\n\r\n    public get location():IVector3D\r\n    {\r\n        return this._currentLoc;\r\n    }\r\n\r\n    public get targetId(): number\r\n    {\r\n        return this._targetId;\r\n    }\r\n\r\n    public set targetId(k: number)\r\n    {\r\n        this._targetId = k;\r\n    }\r\n\r\n    public get targetCategory(): number\r\n    {\r\n        return this._targetCategory;\r\n    }\r\n\r\n    public set targetCategory(k: number)\r\n    {\r\n        this._targetCategory = k;\r\n    }\r\n\r\n    public get targetObjectLoc():IVector3D\r\n    {\r\n        return this._targetObjectLoc;\r\n    }\r\n\r\n    public set targetObjectLoc(k:IVector3D)\r\n    {\r\n        this._targetObjectLoc.assign(k);\r\n    }\r\n\r\n    public get limitedLocationX(): boolean\r\n    {\r\n        return this._limitedLocX;\r\n    }\r\n\r\n    public set limitedLocationX(k: boolean)\r\n    {\r\n        this._limitedLocX = k;\r\n    }\r\n\r\n    public get limitedLocationY(): boolean\r\n    {\r\n        return this._limitedLocY;\r\n    }\r\n\r\n    public set limitedLocationY(k: boolean)\r\n    {\r\n        this._limitedLocY = k;\r\n    }\r\n\r\n    public get centeredLocX(): boolean\r\n    {\r\n        return this._centeredLocX;\r\n    }\r\n\r\n    public set centeredLocX(k: boolean)\r\n    {\r\n        this._centeredLocX = k;\r\n    }\r\n\r\n    public get centeredLocY(): boolean\r\n    {\r\n        return this._centeredLocY;\r\n    }\r\n\r\n    public set centeredLocY(k: boolean)\r\n    {\r\n        this._centeredLocY = k;\r\n    }\r\n\r\n    public get screenWd(): number\r\n    {\r\n        return this._screenWd;\r\n    }\r\n\r\n    public set screenWd(k: number)\r\n    {\r\n        this._screenWd = k;\r\n    }\r\n\r\n    public get screenHt(): number\r\n    {\r\n        return this._screenHt;\r\n    }\r\n\r\n    public set screenHt(k: number)\r\n    {\r\n        this._screenHt = k;\r\n    }\r\n\r\n    public get scale(): number\r\n    {\r\n        return this._scale;\r\n    }\r\n\r\n    public set scale(k: number)\r\n    {\r\n        if(this._scale != k)\r\n        {\r\n            this._scale = k;\r\n            this._scaleChanged = true;\r\n        }\r\n    }\r\n\r\n    public get roomWd(): number\r\n    {\r\n        return this._roomWd;\r\n    }\r\n\r\n    public set roomWd(k: number)\r\n    {\r\n        this._roomWd = k;\r\n    }\r\n\r\n    public get roomHt(): number\r\n    {\r\n        return this._roomHt;\r\n    }\r\n\r\n    public set roomHt(k: number)\r\n    {\r\n        this._roomHt = k;\r\n    }\r\n\r\n    public get geometryUpdateId(): number\r\n    {\r\n        return this._geometryUpdateId;\r\n    }\r\n\r\n    public set geometryUpdateId(k: number)\r\n    {\r\n        this._geometryUpdateId = k;\r\n    }\r\n\r\n    public get isMoving(): boolean\r\n    {\r\n        if(((!(this._targetLoc == null)) && (!(this._currentLoc == null))))\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public set target(k:IVector3D)\r\n    {\r\n        let _local_2:Vector3d;\r\n        if(this._targetLoc == null)\r\n        {\r\n            this._targetLoc = new Vector3d();\r\n        }\r\n        if((((!(this._targetLoc.x == k.x)) || (!(this._targetLoc.y == k.y))) || (!(this._targetLoc.z == k.z))))\r\n        {\r\n            this._targetLoc.assign(k);\r\n            _local_2 = Vector3d.dif(this._targetLoc, this._currentLoc);\r\n            this._moveDistance = _local_2.length;\r\n            this._maintainPreviousMoveSpeed = true;\r\n        }\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._targetLoc = null;\r\n        this._currentLoc = null;\r\n    }\r\n\r\n    public initializeLocation(k:IVector3D): void\r\n    {\r\n        if(this._currentLoc != null)\r\n        {\r\n            return;\r\n        }\r\n        this._currentLoc = new Vector3d();\r\n        this._currentLoc.assign(k);\r\n    }\r\n\r\n    public resetLocation(k:IVector3D): void\r\n    {\r\n        if(this._currentLoc == null)\r\n        {\r\n            this._currentLoc = new Vector3d();\r\n        }\r\n        this._currentLoc.assign(k);\r\n    }\r\n\r\n    public update(k: number, _arg_2: number): void\r\n    {\r\n        let _local_3:Vector3d;\r\n        let _local_4: number;\r\n        let _local_5: number;\r\n        let _local_6: number;\r\n        let _local_7: number;\r\n        if((((this._followDuration > 0) && (!(this._targetLoc == null))) && (!(this._currentLoc == null))))\r\n        {\r\n            if(this._scaleChanged)\r\n            {\r\n                this._scaleChanged = false;\r\n                this._currentLoc = this._targetLoc;\r\n                this._targetLoc = null;\r\n                return;\r\n            }\r\n            _local_3 = Vector3d.dif(this._targetLoc, this._currentLoc);\r\n            if(_local_3.length > this._moveDistance)\r\n            {\r\n                this._moveDistance = _local_3.length;\r\n            }\r\n            if(_local_3.length <= _arg_2)\r\n            {\r\n                this._currentLoc = this._targetLoc;\r\n                this._targetLoc = null;\r\n                this._previousMoveSpeed = 0;\r\n            }\r\n            else\r\n            {\r\n                _local_4 = Math.sin(((Math.PI * _local_3.length) / this._moveDistance));\r\n                _local_5 = (_arg_2 * 0.5);\r\n                _local_6 = (this._moveDistance / RoomCamera.MOVE_SPEED_DENOMINATOR);\r\n                _local_7 = (_local_5 + ((_local_6 - _local_5) * _local_4));\r\n                if(this._maintainPreviousMoveSpeed)\r\n                {\r\n                    if(_local_7 < this._previousMoveSpeed)\r\n                    {\r\n                        _local_7 = this._previousMoveSpeed;\r\n                        if(_local_7 > _local_3.length)\r\n                        {\r\n                            _local_7 = _local_3.length;\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        this._maintainPreviousMoveSpeed = false;\r\n                    }\r\n                }\r\n                this._previousMoveSpeed = _local_7;\r\n                _local_3.divide(_local_3.length);\r\n                _local_3.multiply(_local_7);\r\n                this._currentLoc = Vector3d.sum(this._currentLoc, _local_3);\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void\r\n    {\r\n        this._geometryUpdateId = -1;\r\n    }\r\n\r\n    public activateFollowing(k: number): void\r\n    {\r\n        this._followDuration = k;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}