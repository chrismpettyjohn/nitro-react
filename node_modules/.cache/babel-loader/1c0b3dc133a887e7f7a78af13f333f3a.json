{"ast":null,"code":"import { ActionType } from './ActionType';\nexport class ActionDefinition {\n  constructor(data) {\n    this._id = void 0;\n    this._state = void 0;\n    this._precedence = void 0;\n    this._activePartSet = void 0;\n    this._assetPartDefinition = void 0;\n    this._lay = void 0;\n    this._geometryType = void 0;\n    this._isMain = void 0;\n    this._isDefault = void 0;\n    this._isAnimation = void 0;\n    this._startFromFrameZero = void 0;\n    this._prevents = void 0;\n    this._preventHeadTurn = void 0;\n    this._types = void 0;\n    this._params = void 0;\n    this._defaultParameterValue = void 0;\n    this._canvasOffsets = void 0;\n    this._id = data.id;\n    this._state = data.state;\n    this._precedence = data.precedence;\n    this._activePartSet = data.activePartSet;\n    this._assetPartDefinition = data.assetPartDefinition;\n    this._lay = data.lay;\n    this._geometryType = data.geometryType;\n    this._isMain = data.main || false;\n    this._isDefault = data.isDefault || false;\n    this._isAnimation = data.animation || false;\n    this._startFromFrameZero = data.startFromFrameZero || false;\n    this._prevents = data.prevents || [];\n    this._preventHeadTurn = data.preventHeadTurn || false;\n    this._types = new Map();\n    this._params = new Map();\n    this._defaultParameterValue = '';\n    this._canvasOffsets = null;\n\n    if (data.params && data.params.length > 0) {\n      for (const param of data.params) {\n        if (!param) continue;\n        if (param.id === 'default') this._defaultParameterValue = param.value;else this._params.set(param.id, param.value);\n      }\n    }\n\n    if (data.types && data.types.length > 0) {\n      for (const type of data.types) {\n        if (!type) continue;\n        const action = new ActionType(type);\n\n        this._types.set(action.id, action);\n      }\n    }\n  }\n\n  setOffsets(k, _arg_2, _arg_3) {\n    if (!this._canvasOffsets) this._canvasOffsets = new Map();\n\n    let existing = this._canvasOffsets.get(k);\n\n    if (!existing) {\n      existing = new Map();\n\n      this._canvasOffsets.set(k, existing);\n    }\n\n    existing.set(_arg_2, _arg_3);\n  }\n\n  getOffsets(k, _arg_2) {\n    if (!this._canvasOffsets) return null;\n\n    const existing = this._canvasOffsets.get(k);\n\n    if (!existing) return null;\n    return existing.get(_arg_2);\n  }\n\n  getType(id) {\n    if (!id) return null;\n\n    const existing = this._types.get(parseInt(id));\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  getParameterValue(id) {\n    if (!id) return '';\n\n    const existing = this._params.get(id);\n\n    if (!existing) return this._defaultParameterValue;\n    return existing;\n  }\n\n  getPrevents(type) {\n    return this._prevents.concat(this.getTypePrevents(type));\n  }\n\n  getTypePrevents(type) {\n    if (!type) return [];\n\n    const existing = this._types.get(parseInt(type));\n\n    if (!existing) return [];\n    return existing.prevents;\n  }\n\n  getPreventHeadTurn(k) {\n    if (!k) return this._preventHeadTurn;\n    const type = this.getType(k);\n    if (!type) return this._preventHeadTurn;\n    return type.preventHeadTurn;\n  }\n\n  isAnimated(k) {\n    if (!k) return true;\n    const type = this.getType(k);\n    if (!type) return true;\n    return type.isAnimated;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get precedence() {\n    return this._precedence;\n  }\n\n  get activePartSet() {\n    return this._activePartSet;\n  }\n\n  get assetPartDefinition() {\n    return this._assetPartDefinition;\n  }\n\n  get lay() {\n    return this._lay;\n  }\n\n  get geometryType() {\n    return this._geometryType;\n  }\n\n  get isMain() {\n    return this._isMain;\n  }\n\n  get isDefault() {\n    return this._isDefault;\n  }\n\n  get isAnimation() {\n    return this._isAnimation;\n  }\n\n  get startFromFrameZero() {\n    return this._startFromFrameZero;\n  }\n\n  get prevents() {\n    return this._prevents;\n  }\n\n  get preventHeadTurn() {\n    return this._preventHeadTurn;\n  }\n\n  get params() {\n    return this._params;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/actions/ActionDefinition.ts"],"names":["ActionType","ActionDefinition","constructor","data","_id","_state","_precedence","_activePartSet","_assetPartDefinition","_lay","_geometryType","_isMain","_isDefault","_isAnimation","_startFromFrameZero","_prevents","_preventHeadTurn","_types","_params","_defaultParameterValue","_canvasOffsets","id","state","precedence","activePartSet","assetPartDefinition","lay","geometryType","main","isDefault","animation","startFromFrameZero","prevents","preventHeadTurn","Map","params","length","param","value","set","types","type","action","setOffsets","k","_arg_2","_arg_3","existing","get","getOffsets","getType","parseInt","getParameterValue","getPrevents","concat","getTypePrevents","getPreventHeadTurn","isAnimated","isMain","isAnimation"],"mappings":"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","sourcesContent":["import { ActionType } from './ActionType';\r\nimport { IActionDefinition } from './IActionDefinition';\r\n\r\nexport class ActionDefinition implements IActionDefinition\r\n{\r\n    private _id: string;\r\n    private _state: string;\r\n    private _precedence: number;\r\n    private _activePartSet: string;\r\n    private _assetPartDefinition: string;\r\n    private _lay: string;\r\n    private _geometryType: string;\r\n    private _isMain: boolean;\r\n    private _isDefault: boolean;\r\n    private _isAnimation: boolean;\r\n    private _startFromFrameZero: boolean;\r\n    private _prevents: string[];\r\n    private _preventHeadTurn: boolean;\r\n    private _types: Map<number, ActionType>;\r\n    private _params: Map<string, string>;\r\n    private _defaultParameterValue: string;\r\n    private _canvasOffsets: Map<string, Map<number, number[]>>;\r\n\r\n    constructor(data: any)\r\n    {\r\n        this._id = data.id;\r\n        this._state = data.state;\r\n        this._precedence = data.precedence;\r\n        this._activePartSet = data.activePartSet;\r\n        this._assetPartDefinition = data.assetPartDefinition;\r\n        this._lay = data.lay;\r\n        this._geometryType = data.geometryType;\r\n        this._isMain = data.main || false;\r\n        this._isDefault = data.isDefault || false;\r\n        this._isAnimation = data.animation || false;\r\n        this._startFromFrameZero = data.startFromFrameZero || false;\r\n        this._prevents = data.prevents || [];\r\n        this._preventHeadTurn = data.preventHeadTurn || false;\r\n        this._types = new Map();\r\n        this._params = new Map();\r\n        this._defaultParameterValue = '';\r\n        this._canvasOffsets = null;\r\n\r\n        if(data.params && (data.params.length > 0))\r\n        {\r\n            for(const param of data.params)\r\n            {\r\n                if(!param) continue;\r\n\r\n                if(param.id === 'default') this._defaultParameterValue = param.value;\r\n                else this._params.set(param.id, param.value);\r\n            }\r\n        }\r\n\r\n        if(data.types && (data.types.length > 0))\r\n        {\r\n            for(const type of data.types)\r\n            {\r\n                if(!type) continue;\r\n\r\n                const action = new ActionType(type);\r\n\r\n                this._types.set(action.id, action);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setOffsets(k: string, _arg_2: number, _arg_3: number[]): void\r\n    {\r\n        if(!this._canvasOffsets) this._canvasOffsets = new Map();\r\n\r\n        let existing = this._canvasOffsets.get(k);\r\n\r\n        if(!existing)\r\n        {\r\n            existing = new Map();\r\n\r\n            this._canvasOffsets.set(k, existing);\r\n        }\r\n\r\n        existing.set(_arg_2, _arg_3);\r\n    }\r\n\r\n    public getOffsets(k: string, _arg_2: number): number[]\r\n    {\r\n        if(!this._canvasOffsets) return null;\r\n\r\n        const existing = this._canvasOffsets.get(k);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing.get(_arg_2);\r\n    }\r\n\r\n    public getType(id: string): ActionType\r\n    {\r\n        if(!id) return null;\r\n\r\n        const existing = this._types.get(parseInt(id));\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getParameterValue(id: string): string\r\n    {\r\n        if(!id) return '';\r\n\r\n        const existing = this._params.get(id);\r\n\r\n        if(!existing) return this._defaultParameterValue;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getPrevents(type: string): string[]\r\n    {\r\n        return this._prevents.concat(this.getTypePrevents(type));\r\n    }\r\n\r\n    private getTypePrevents(type: string): string[]\r\n    {\r\n        if(!type) return [];\r\n\r\n        const existing = this._types.get(parseInt(type));\r\n\r\n        if(!existing) return [];\r\n\r\n        return existing.prevents;\r\n    }\r\n\r\n    public getPreventHeadTurn(k: string): boolean\r\n    {\r\n        if(!k) return this._preventHeadTurn;\r\n\r\n        const type = this.getType(k);\r\n\r\n        if(!type) return this._preventHeadTurn;\r\n\r\n        return type.preventHeadTurn;\r\n    }\r\n\r\n    public isAnimated(k: string): boolean\r\n    {\r\n        if(!k) return true;\r\n\r\n        const type = this.getType(k);\r\n\r\n        if(!type) return true;\r\n\r\n        return type.isAnimated;\r\n    }\r\n\r\n    public get id(): string\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get state(): string\r\n    {\r\n        return this._state;\r\n    }\r\n\r\n    public get precedence(): number\r\n    {\r\n        return this._precedence;\r\n    }\r\n\r\n    public get activePartSet(): string\r\n    {\r\n        return this._activePartSet;\r\n    }\r\n\r\n    public get assetPartDefinition(): string\r\n    {\r\n        return this._assetPartDefinition;\r\n    }\r\n\r\n    public get lay(): string\r\n    {\r\n        return this._lay;\r\n    }\r\n\r\n    public get geometryType(): string\r\n    {\r\n        return this._geometryType;\r\n    }\r\n\r\n    public get isMain(): boolean\r\n    {\r\n        return this._isMain;\r\n    }\r\n\r\n    public get isDefault(): boolean\r\n    {\r\n        return this._isDefault;\r\n    }\r\n\r\n    public get isAnimation(): boolean\r\n    {\r\n        return this._isAnimation;\r\n    }\r\n\r\n    public get startFromFrameZero(): boolean\r\n    {\r\n        return this._startFromFrameZero;\r\n    }\r\n\r\n    public get prevents(): string[]\r\n    {\r\n        return this._prevents;\r\n    }\r\n\r\n    public get preventHeadTurn(): boolean\r\n    {\r\n        return this._preventHeadTurn;\r\n    }\r\n\r\n    public get params(): Map<string, string>\r\n    {\r\n        return this._params;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}