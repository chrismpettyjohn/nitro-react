{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { ColorMatrixFilter } from '@pixi/filter-color-matrix';\nimport { Rectangle } from '@pixi/math';\nimport { Sprite } from '@pixi/sprite';\nimport { NitroContainer, NitroSprite } from '../../core';\nimport { AdvancedMap } from '../../core/utils/AdvancedMap';\nimport { PaletteMapFilter } from '../../core/utils/PaletteMapFilter';\nimport { TextureUtils } from '../../room/utils/TextureUtils';\nimport { Nitro } from '../Nitro';\nimport { ActiveActionData } from './actions/ActiveActionData';\nimport { AvatarFigureContainer } from './AvatarFigureContainer';\nimport { AvatarImageCache } from './cache/AvatarImageCache';\nimport { AvatarAction } from './enum/AvatarAction';\nimport { AvatarDirectionAngle } from './enum/AvatarDirectionAngle';\nimport { AvatarScaleType } from './enum/AvatarScaleType';\nimport { AvatarSetType } from './enum/AvatarSetType';\nexport class AvatarImage {\n  constructor(k, _arg_2, _arg_3, _arg_4, _arg_5) {\n    let _arg_6 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    this._structure = void 0;\n    this._scale = void 0;\n    this._mainDirection = void 0;\n    this._headDirection = void 0;\n    this._mainAction = void 0;\n    this._disposed = void 0;\n    this._canvasOffsets = void 0;\n    this._assets = void 0;\n    this._cache = void 0;\n    this._figure = void 0;\n    this._avatarSpriteData = void 0;\n    this._actions = void 0;\n    this._image = void 0;\n    this._reusableTexture = void 0;\n    this._defaultAction = void 0;\n    this._frameCounter = 0;\n    this._directionOffset = 0;\n    this._changes = void 0;\n    this._sprites = void 0;\n    this._isAnimating = false;\n    this._animationHasResetOnToggle = false;\n    this._actionsSorted = false;\n    this._sortedActions = void 0;\n    this._lastActionsString = void 0;\n    this._currentActionsString = void 0;\n    this._fullImageCache = void 0;\n    this._fullImageCacheSize = 5;\n    this._isCachedImage = false;\n    this._useFullImageCache = false;\n    this._effectIdInUse = -1;\n    this._animationFrameCount = void 0;\n    this._cachedBodyParts = void 0;\n    this._cachedBodyPartsDirection = -1;\n    this._cachedBodyPartsGeometryType = null;\n    this._cachedBodyPartsAvatarSet = null;\n    this._effectManager = void 0;\n    this._effectListener = void 0;\n    this._canvasOffsets = [];\n    this._actions = [];\n    this._cachedBodyParts = [];\n    this._changes = true;\n    this._disposed = false;\n    this._effectManager = _arg_5;\n    this._structure = k;\n    this._assets = _arg_2;\n    this._scale = _arg_4;\n    this._effectListener = _arg_6;\n\n    if (this._scale == null) {\n      this._scale = AvatarScaleType.LARGE;\n    }\n\n    if (_arg_3 == null) {\n      _arg_3 = new AvatarFigureContainer('hr-893-45.hd-180-2.ch-210-66.lg-270-82.sh-300-91.wa-2007-.ri-1-');\n    }\n\n    this._figure = _arg_3;\n    this._cache = new AvatarImageCache(this._structure, this, this._assets, this._scale);\n    this.setDirection(AvatarImage.DEFAULT_AVATAR_SET, AvatarImage.DEFAULT_DIRECTION);\n    this._actions = [];\n    this._defaultAction = new ActiveActionData(AvatarAction.POSTURE_STAND);\n    this._defaultAction.definition = this._structure.getActionDefinition(AvatarImage.DEFAULT_ACTION);\n    this.resetActions();\n    this._fullImageCache = new AdvancedMap();\n    this._animationFrameCount = 0;\n  }\n\n  getServerRenderData() {\n    this.getAvatarPartsForCamera(AvatarSetType.FULL);\n    return this._cache.getServerRenderData();\n  }\n\n  dispose() {\n    if (this._disposed) return;\n    this._structure = null;\n    this._assets = null;\n    this._mainAction = null;\n    this._figure = null;\n    this._avatarSpriteData = null;\n    this._actions = null;\n\n    if (this._image) {\n      this._image.destroy();\n\n      this._image = null;\n    }\n\n    if (this._cache) {\n      this._cache.dispose();\n\n      this._cache = null;\n    }\n\n    if (this._fullImageCache) {\n      for (const k of this._fullImageCache.getValues()) k && k.destroy();\n\n      this._fullImageCache = null;\n    }\n\n    this._image = null;\n    this._canvasOffsets = null;\n    this._disposed = true;\n  }\n\n  get disposed() {\n    return this._disposed;\n  }\n\n  getFigure() {\n    return this._figure;\n  }\n\n  getScale() {\n    return this._scale;\n  }\n\n  getPartColor(k) {\n    return this._structure.getPartColor(this._figure, k);\n  }\n\n  setDirection(k, _arg_2) {\n    _arg_2 = _arg_2 + this._directionOffset;\n\n    if (_arg_2 < AvatarDirectionAngle.MIN_DIRECTION) {\n      _arg_2 = AvatarDirectionAngle.MAX_DIRECTION + (_arg_2 + 1);\n    }\n\n    if (_arg_2 > AvatarDirectionAngle.MAX_DIRECTION) {\n      _arg_2 = _arg_2 - (AvatarDirectionAngle.MAX_DIRECTION + 1);\n    }\n\n    if (this._structure.isMainAvatarSet(k)) {\n      this._mainDirection = _arg_2;\n    }\n\n    if (k === AvatarSetType.HEAD || k === AvatarSetType.FULL) {\n      if (k === AvatarSetType.HEAD && this.isHeadTurnPreventedByAction()) {\n        _arg_2 = this._mainDirection;\n      }\n\n      this._headDirection = _arg_2;\n    }\n\n    this._cache.setDirection(k, _arg_2);\n\n    this._changes = true;\n  }\n\n  setDirectionAngle(k, _arg_2) {\n    this.setDirection(k, Math.floor(_arg_2 / 45));\n  }\n\n  getSprites() {\n    return this._sprites;\n  }\n\n  getCanvasOffsets() {\n    return this._canvasOffsets;\n  }\n\n  getLayerData(k) {\n    return this._structure.getBodyPartData(k.animation.id, this._frameCounter, k.id);\n  }\n\n  updateAnimationByFrames() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this._frameCounter += k;\n    this._changes = true;\n  }\n\n  resetAnimationFrameCounter() {\n    this._frameCounter = 0;\n    this._changes = true;\n  }\n\n  getFullImageCacheKey() {\n    if (!this._useFullImageCache) return null;\n\n    if (this._sortedActions.length == 1 && this._mainDirection == this._headDirection) {\n      return this._mainDirection + this._currentActionsString + this._frameCounter % 4;\n    }\n\n    if (this._sortedActions.length == 2) {\n      for (const k of this._sortedActions) {\n        if (k.actionType == 'fx' && (k.actionParameter == '33' || k.actionParameter == '34' || k.actionParameter == '35' || k.actionParameter == '36')) {\n          return this._mainDirection + this._currentActionsString + 0;\n        }\n\n        if (k.actionType == 'fx' && (k.actionParameter == '38' || k.actionParameter == '39')) {\n          return this._mainDirection + '_' + this._headDirection + this._currentActionsString + this._frameCounter % 11;\n        }\n\n        if (k.actionType === 'dance' && (k.actionParameter === '1' || k.actionParameter === '2' || k.actionParameter === '3' || k.actionParameter === '4')) {\n          let frame = this._frameCounter % 8;\n          if (k.actionParameter === '3') frame = this._frameCounter % 10;\n          if (k.actionParameter === '4') frame = this._frameCounter % 16;\n          return this._mainDirection + k.actionType + k.actionParameter + frame;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  getBodyParts(k, _arg_2, _arg_3) {\n    if (!(_arg_3 == this._cachedBodyPartsDirection) || !(_arg_2 == this._cachedBodyPartsGeometryType) || !(k == this._cachedBodyPartsAvatarSet)) {\n      this._cachedBodyPartsDirection = _arg_3;\n      this._cachedBodyPartsGeometryType = _arg_2;\n      this._cachedBodyPartsAvatarSet = k;\n      this._cachedBodyParts = this._structure.getBodyParts(k, _arg_2, _arg_3);\n    }\n\n    return this._cachedBodyParts;\n  }\n\n  getAvatarPartsForCamera(k) {\n    let _local_4;\n\n    if (this._mainAction == null) {\n      return;\n    }\n\n    const _local_2 = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\n\n    if (_local_2 == null) {\n      return;\n    }\n\n    const _local_3 = this.getBodyParts(k, this._mainAction.definition.geometryType, this._mainDirection);\n\n    let _local_6 = _local_3.length - 1;\n\n    while (_local_6 >= 0) {\n      _local_4 = _local_3[_local_6];\n\n      const _local_5 = this._cache.getImageContainer(_local_4, this._frameCounter, true);\n\n      _local_6--;\n    }\n  }\n\n  getImage(setType, hightlight) {\n    let scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let cache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!this._changes) return this._image;\n    if (!this._mainAction) return null;\n    if (!this._actionsSorted) this.endActionAppends();\n\n    const avatarCanvas = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\n\n    if (!avatarCanvas) return null;\n\n    if (this._image && (this._image.width !== avatarCanvas.width || this._image.height !== avatarCanvas.height)) {\n      if (this._reusableTexture) {\n        this._reusableTexture.destroy(true);\n\n        this._reusableTexture = null;\n      }\n\n      this._image = null;\n      this._isCachedImage = false;\n    }\n\n    const _local_6 = this.getBodyParts(setType, this._mainAction.definition.geometryType, this._mainDirection);\n\n    this._image = null;\n    const container = new NitroContainer();\n    let isCachable = true;\n    let partCount = _local_6.length - 1;\n\n    while (partCount >= 0) {\n      const set = _local_6[partCount];\n\n      const part = this._cache.getImageContainer(set, this._frameCounter);\n\n      if (part) {\n        const partCacheContainer = part.image;\n\n        if (!partCacheContainer) {\n          container.destroy({\n            children: true\n          });\n          return null;\n        }\n\n        isCachable = isCachable && part.isCacheable;\n        const point = part.regPoint.clone();\n\n        if (point) {\n          point.x += avatarCanvas.offset.x;\n          point.y += avatarCanvas.offset.y;\n          point.x += avatarCanvas.regPoint.x;\n          point.y += avatarCanvas.regPoint.y;\n          const partContainer = new NitroContainer();\n          partContainer.addChild(partCacheContainer);\n\n          if (partContainer) {\n            partContainer.position.set(point.x, point.y);\n            container.addChild(partContainer);\n          }\n        }\n      }\n\n      partCount--;\n    }\n\n    if (this._avatarSpriteData) {\n      if (!container.filters) container.filters = [];\n      if (this._avatarSpriteData.colorTransform) container.filters.push(this._avatarSpriteData.colorTransform);\n\n      if (this._avatarSpriteData.paletteIsGrayscale) {\n        this.convertToGrayscale(container);\n        container.filters.push(new PaletteMapFilter(this._avatarSpriteData.reds, PaletteMapFilter.CHANNEL_RED));\n      }\n    }\n\n    if (!cache) {\n      return TextureUtils.generateTexture(container, new Rectangle(0, 0, avatarCanvas.width, avatarCanvas.height));\n    }\n\n    if (this._reusableTexture) {\n      Nitro.instance.renderer.render(container, {\n        renderTexture: this._reusableTexture,\n        clear: true\n      });\n    } else {\n      this._reusableTexture = TextureUtils.generateTexture(container, new Rectangle(0, 0, avatarCanvas.width, avatarCanvas.height));\n    }\n\n    if (!this._reusableTexture) return null;\n    /*\r\n    if(this._avatarSpriteData)\r\n    {\r\n        if(this._avatarSpriteData.paletteIsGrayscale)\r\n        {\r\n            this._reusableTexture = this.applyPalette(this._reusableTexture, this._avatarSpriteData.reds, [], []);\r\n        }\r\n    }\r\n    */\n\n    this._image = this._reusableTexture;\n    this._changes = false;\n    return this._image;\n  }\n\n  applyPalette(texture) {\n    let reds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let greens = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let blues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    const textureCanvas = TextureUtils.generateCanvas(texture);\n    const textureCtx = textureCanvas.getContext('2d');\n    const textureImageData = textureCtx.getImageData(0, 0, textureCanvas.width, textureCanvas.height);\n    const data = textureImageData.data;\n\n    for (let i = 0; i < data.length; i += 4) {\n      if (reds.length == 256) {\n        let paletteColor = reds[data[i]];\n        if (paletteColor === undefined) paletteColor = 0;\n        data[i] = paletteColor >> 16 & 0xFF;\n        data[i + 1] = paletteColor >> 8 & 0xFF;\n        data[i + 2] = paletteColor & 0xFF;\n      }\n\n      if (greens.length == 256) {\n        let paletteColor = greens[data[i + 1]];\n        if (paletteColor === undefined) paletteColor = 0;\n        data[i] = paletteColor >> 16 & 0xFF;\n        data[i + 1] = paletteColor >> 8 & 0xFF;\n        data[i + 2] = paletteColor & 0xFF;\n      }\n\n      if (blues.length == 256) {\n        let paletteColor = greens[data[i + 2]];\n        if (paletteColor === undefined) paletteColor = 0;\n        data[i] = paletteColor >> 16 & 0xFF;\n        data[i + 1] = paletteColor >> 8 & 0xFF;\n        data[i + 2] = paletteColor & 0xFF;\n      }\n    }\n\n    textureCtx.putImageData(textureImageData, 0, 0);\n    const newTexture = new Sprite(Texture.from(textureCanvas));\n    Nitro.instance.renderer.render(newTexture, {\n      renderTexture: texture,\n      clear: true\n    });\n    return texture;\n  }\n\n  getImageAsSprite(setType) {\n    let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (!this._mainAction) return null;\n    if (!this._actionsSorted) this.endActionAppends();\n\n    const avatarCanvas = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\n\n    if (!avatarCanvas) return null;\n    const setTypes = this.getBodyParts(setType, this._mainAction.definition.geometryType, this._mainDirection);\n    const container = new NitroSprite();\n    const sprite = new NitroSprite(Texture.EMPTY);\n    sprite.width = avatarCanvas.width;\n    sprite.height = avatarCanvas.height;\n    container.addChild(sprite);\n    let partCount = setTypes.length - 1;\n\n    while (partCount >= 0) {\n      const set = setTypes[partCount];\n\n      const part = this._cache.getImageContainer(set, this._frameCounter);\n\n      if (part) {\n        const partCacheContainer = part.image;\n\n        if (!partCacheContainer) {\n          container.destroy({\n            children: true\n          });\n          return null;\n        }\n\n        const point = part.regPoint.clone();\n\n        if (point) {\n          point.x += avatarCanvas.offset.x;\n          point.y += avatarCanvas.offset.y;\n          point.x += avatarCanvas.regPoint.x;\n          point.y += avatarCanvas.regPoint.y;\n          const partContainer = new NitroContainer();\n          partContainer.addChild(partCacheContainer);\n          partContainer.position.set(point.x, point.y);\n          container.addChild(partContainer);\n        }\n      }\n\n      partCount--;\n    }\n\n    return container;\n  }\n\n  getCroppedImage(setType) {\n    let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (!this._mainAction) return null;\n    if (!this._actionsSorted) this.endActionAppends();\n\n    const avatarCanvas = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\n\n    if (!avatarCanvas) return null;\n    const setTypes = this.getBodyParts(setType, this._mainAction.definition.geometryType, this._mainDirection);\n    const container = new NitroContainer();\n    let partCount = setTypes.length - 1;\n\n    while (partCount >= 0) {\n      const set = setTypes[partCount];\n\n      const part = this._cache.getImageContainer(set, this._frameCounter);\n\n      if (part) {\n        const partCacheContainer = part.image;\n\n        if (!partCacheContainer) {\n          container.destroy({\n            children: true\n          });\n          return null;\n        }\n\n        const point = part.regPoint.clone();\n\n        if (point) {\n          point.x += avatarCanvas.offset.x;\n          point.y += avatarCanvas.offset.y;\n          point.x += avatarCanvas.regPoint.x;\n          point.y += avatarCanvas.regPoint.y;\n          const partContainer = new NitroContainer();\n          partContainer.addChild(partCacheContainer);\n\n          if (partContainer) {\n            partContainer.position.set(point.x, point.y);\n            container.addChild(partContainer);\n          }\n        }\n      }\n\n      partCount--;\n    }\n\n    const texture = TextureUtils.generateTexture(container, new Rectangle(0, 0, avatarCanvas.width, avatarCanvas.height));\n    const image = TextureUtils.generateImage(texture);\n    if (!image) return null;\n    return image;\n  }\n\n  getFullImage(k) {\n    const existing = this._fullImageCache.getValue(k);\n\n    if (existing) {\n      if (!existing.valid) {\n        this._fullImageCache.remove(k);\n\n        existing.destroy(true);\n      }\n\n      return existing;\n    }\n\n    return null;\n  }\n\n  cacheFullImage(k, _arg_2) {\n    const existing = this._fullImageCache.getValue(k);\n\n    if (existing) {\n      this._fullImageCache.remove(k);\n\n      existing.destroy(true);\n    }\n\n    if (this._fullImageCache.length === this._fullImageCacheSize) {\n      const oldestKey = this._fullImageCache.getKey(0);\n\n      if (oldestKey) {\n        const removed = this._fullImageCache.remove(oldestKey);\n\n        removed.destroy(true);\n      }\n    }\n\n    this._fullImageCache.add(k, _arg_2);\n  }\n\n  getAsset(k) {\n    return this._assets.getAsset(k);\n  }\n\n  getDirection() {\n    return this._mainDirection;\n  }\n\n  initActionAppends() {\n    this._actions = [];\n    this._actionsSorted = false;\n    this._currentActionsString = '';\n    this._useFullImageCache = false;\n  }\n\n  endActionAppends() {\n    let k;\n    if (!this.sortActions()) return;\n\n    for (const k of this._sortedActions) {\n      if (k.actionType === AvatarAction.EFFECT) {\n        if (!this._effectManager.isAvatarEffectReady(parseInt(k.actionParameter))) this._effectManager.downloadAvatarEffect(parseInt(k.actionParameter), this);\n      }\n    }\n\n    this.resetActions();\n    this.setActionsToParts();\n  }\n\n  appendAction(k) {\n    let _local_3 = '';\n    this._actionsSorted = false;\n\n    for (var _len = arguments.length, _args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      _args[_key - 1] = arguments[_key];\n    }\n\n    if (_args && _args.length > 0) _local_3 = _args[0];\n    if (_local_3 !== undefined && _local_3 !== null) _local_3 = _local_3.toString();\n\n    switch (k) {\n      case AvatarAction.POSTURE:\n        switch (_local_3) {\n          case AvatarAction.POSTURE_LAY:\n          case AvatarAction.POSTURE_WALK:\n          case AvatarAction.POSTURE_STAND:\n          case AvatarAction.POSTURE_SWIM:\n          case AvatarAction.POSTURE_FLOAT:\n          case AvatarAction.POSTURE_SIT:\n          case AvatarAction.SNOWWAR_RUN:\n          case AvatarAction.SNOWWAR_DIE_FRONT:\n          case AvatarAction.SNOWWAR_DIE_BACK:\n          case AvatarAction.SNOWWAR_PICK:\n          case AvatarAction.SNOWWAR_THROW:\n            if (_local_3 === AvatarAction.POSTURE_LAY || _local_3 === AvatarAction.POSTURE_LAY || _local_3 === AvatarAction.POSTURE_LAY) {\n              if (_local_3 === AvatarAction.POSTURE_LAY) {\n                if (this._mainDirection == 0) {\n                  this.setDirection(AvatarSetType.FULL, 4);\n                } else {\n                  this.setDirection(AvatarSetType.FULL, 2);\n                }\n              }\n\n              this._useFullImageCache = true;\n              this._useFullImageCache = true;\n            }\n\n            this.addActionData(_local_3);\n            break;\n        }\n\n        break;\n\n      case AvatarAction.GESTURE:\n        switch (_local_3) {\n          case AvatarAction.GESTURE_AGGRAVATED:\n          case AvatarAction.GESTURE_SAD:\n          case AvatarAction.GESTURE_SMILE:\n          case AvatarAction.GESTURE_SURPRISED:\n            this.addActionData(_local_3);\n            break;\n        }\n\n        break;\n\n      case AvatarAction.EFFECT:\n      case AvatarAction.DANCE:\n      case AvatarAction.TALK:\n      case AvatarAction.EXPRESSION_WAVE:\n      case AvatarAction.SLEEP:\n      case AvatarAction.SIGN:\n      case AvatarAction.EXPRESSION_RESPECT:\n      case AvatarAction.EXPRESSION_BLOW_A_KISS:\n      case AvatarAction.EXPRESSION_LAUGH:\n      case AvatarAction.EXPRESSION_CRY:\n      case AvatarAction.EXPRESSION_IDLE:\n      case AvatarAction.EXPRESSION_SNOWBOARD_OLLIE:\n      case AvatarAction.EXPRESSION_SNOWBORD_360:\n      case AvatarAction.EXPRESSION_RIDE_JUMP:\n        if (_local_3 === AvatarAction.EFFECT) {\n          if (_local_3 === '33' || _local_3 === '34' || _local_3 === '35' || _local_3 === '36' || _local_3 === '38' || _local_3 === '39') {\n            this._useFullImageCache = true;\n          }\n        }\n\n        this.addActionData(k, _local_3);\n        break;\n\n      case AvatarAction.CARRY_OBJECT:\n      case AvatarAction.USE_OBJECT:\n        {\n          const _local_4 = this._structure.getActionDefinitionWithState(k);\n\n          if (_local_4) _local_3 = _local_4.getParameterValue(_local_3);\n          this.addActionData(k, _local_3);\n          break;\n        }\n    }\n\n    return true;\n  }\n\n  addActionData(k) {\n    let _arg_2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    let _local_3;\n\n    if (!this._actions) this._actions = [];\n    let _local_4 = 0;\n\n    while (_local_4 < this._actions.length) {\n      _local_3 = this._actions[_local_4];\n\n      if (_local_3.actionType == k && _local_3.actionParameter == _arg_2) {\n        return;\n      }\n\n      _local_4++;\n    }\n\n    this._actions.push(new ActiveActionData(k, _arg_2, this._frameCounter));\n  }\n\n  isAnimating() {\n    return this._isAnimating || this._animationFrameCount > 1;\n  }\n\n  resetActions() {\n    this._animationHasResetOnToggle = false;\n    this._isAnimating = false;\n    this._sprites = [];\n    this._avatarSpriteData = null;\n    this._directionOffset = 0;\n\n    this._structure.removeDynamicItems(this);\n\n    this._mainAction = this._defaultAction;\n    this._mainAction.definition = this._defaultAction.definition;\n    this.resetBodyPartCache(this._defaultAction);\n    return true;\n  }\n\n  isHeadTurnPreventedByAction() {\n    let _local_2;\n\n    let _local_3;\n\n    let k;\n\n    if (this._sortedActions == null) {\n      return false;\n    }\n\n    for (const _local_3 of this._sortedActions) {\n      _local_2 = this._structure.getActionDefinitionWithState(_local_3.actionType);\n\n      if (!(_local_2 == null) && _local_2.getPreventHeadTurn(_local_3.actionParameter)) {\n        k = true;\n      }\n    }\n\n    return k;\n  }\n\n  sortActions() {\n    let _local_2;\n\n    let _local_3;\n\n    let _local_4;\n\n    let _local_5;\n\n    let k;\n    this._currentActionsString = '';\n    this._sortedActions = this._structure.sortActions(this._actions);\n    this._animationFrameCount = this._structure.maxFrames(this._sortedActions);\n\n    if (!this._sortedActions) {\n      this._canvasOffsets = [0, 0, 0];\n\n      if (this._lastActionsString !== '') {\n        k = true;\n        this._lastActionsString = '';\n      }\n    } else {\n      this._canvasOffsets = this._structure.getCanvasOffsets(this._sortedActions, this._scale, this._mainDirection);\n\n      for (const _local_4 of this._sortedActions) {\n        this._currentActionsString = this._currentActionsString + (_local_4.actionType + _local_4.actionParameter);\n\n        if (_local_4.actionType === AvatarAction.EFFECT) {\n          const _local_5 = parseInt(_local_4.actionParameter);\n\n          if (this._effectIdInUse !== _local_5) _local_2 = true;\n          this._effectIdInUse = _local_5;\n          _local_3 = true;\n        }\n      }\n\n      if (!_local_3) {\n        if (this._effectIdInUse > -1) _local_2 = true;\n        this._effectIdInUse = -1;\n      }\n\n      if (_local_2) this._cache.disposeInactiveActions(0);\n\n      if (this._lastActionsString != this._currentActionsString) {\n        k = true;\n        this._lastActionsString = this._currentActionsString;\n      }\n    }\n\n    this._actionsSorted = true;\n    return k;\n  }\n\n  setActionsToParts() {\n    if (!this._sortedActions == null) return;\n    const _local_3 = Nitro.instance.time;\n    const _local_4 = [];\n\n    for (const k of this._sortedActions) _local_4.push(k.actionType);\n\n    for (const k of this._sortedActions) {\n      if (k && k.definition && k.definition.isAnimation) {\n        const _local_2 = this._structure.getAnimation(k.definition.state + '.' + k.actionParameter);\n\n        if (_local_2 && _local_2.hasOverriddenActions()) {\n          const _local_5 = _local_2.overriddenActionNames();\n\n          if (_local_5) {\n            for (const _local_6 of _local_5) {\n              if (_local_4.indexOf(_local_6) >= 0) k.overridingAction = _local_2.overridingAction(_local_6);\n            }\n          }\n        }\n\n        if (_local_2 && _local_2.resetOnToggle) {\n          this._animationHasResetOnToggle = true;\n        }\n      }\n    }\n\n    for (const k of this._sortedActions) {\n      if (!(!k || !k.definition)) {\n        if (k.definition.isAnimation && k.actionParameter === '') k.actionParameter = '1';\n        this.setActionToParts(k, _local_3);\n\n        if (k.definition.isAnimation) {\n          this._isAnimating = k.definition.isAnimated(k.actionParameter);\n\n          const _local_2 = this._structure.getAnimation(k.definition.state + '.' + k.actionParameter);\n\n          if (_local_2) {\n            this._sprites = this._sprites.concat(_local_2.spriteData);\n            if (_local_2.hasDirectionData()) this._directionOffset = _local_2.directionData.offset;\n            if (_local_2.hasAvatarData()) this._avatarSpriteData = _local_2.avatarData;\n          }\n        }\n      }\n    }\n  }\n\n  setActionToParts(k, _arg_2) {\n    if (k == null || k.definition == null) {\n      return;\n    }\n\n    if (k.definition.assetPartDefinition == '') {\n      return;\n    }\n\n    if (k.definition.isMain) {\n      this._mainAction = k;\n\n      this._cache.setGeometryType(k.definition.geometryType);\n    }\n\n    this._cache.setAction(k, _arg_2);\n\n    this._changes = true;\n  }\n\n  resetBodyPartCache(k) {\n    if (!k) return;\n    if (k.definition.assetPartDefinition === '') return;\n\n    if (k.definition.isMain) {\n      this._mainAction = k;\n\n      this._cache.setGeometryType(k.definition.geometryType);\n    }\n\n    this._cache.resetBodyPartCache(k);\n\n    this._changes = true;\n  }\n\n  get avatarSpriteData() {\n    return this._avatarSpriteData;\n  }\n\n  convertToGrayscale(container) {\n    let channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'CHANNELS_EQUAL';\n    let _local_3 = 0.33;\n    let _local_4 = 0.33;\n    let _local_5 = 0.33;\n    const _local_6 = 1;\n\n    switch (channel) {\n      case AvatarImage.CHANNELS_UNIQUE:\n        _local_3 = 0.3;\n        _local_4 = 0.59;\n        _local_5 = 0.11;\n        break;\n\n      case AvatarImage.CHANNELS_RED:\n        _local_3 = 1;\n        _local_4 = 0;\n        _local_5 = 0;\n        break;\n\n      case AvatarImage.CHANNELS_GREEN:\n        _local_3 = 0;\n        _local_4 = 1;\n        _local_5 = 0;\n        break;\n\n      case AvatarImage.CHANNELS_BLUE:\n        _local_3 = 0;\n        _local_4 = 0;\n        _local_5 = 1;\n        break;\n\n      case AvatarImage.CHANNELS_DESATURATED:\n        _local_3 = 0.3086;\n        _local_4 = 0.6094;\n        _local_5 = 0.082;\n        break;\n    }\n\n    const colorFilter = new ColorMatrixFilter();\n    colorFilter.matrix = [_local_3, _local_4, _local_5, 0, 0, _local_3, _local_4, _local_5, 0, 0, _local_3, _local_4, _local_5, 0, 0, 0, 0, 0, 1, 0];\n    container.filters.push(colorFilter);\n    return container;\n  }\n\n  errorThis(k) {}\n\n  logThis(k) {}\n\n  isPlaceholder() {\n    return false;\n  }\n\n  forceActionUpdate() {\n    this._lastActionsString = '';\n  }\n\n  get animationHasResetOnToggle() {\n    return this._animationHasResetOnToggle;\n  }\n\n  get mainAction() {\n    return this._mainAction.actionType;\n  }\n\n  resetEffect(effect) {\n    if (effect === this._effectIdInUse) {\n      this.resetActions();\n      this.setActionsToParts();\n      this._animationHasResetOnToggle = true;\n      this._changes = true;\n      if (this._effectListener) this._effectListener.resetEffect(effect);\n    }\n  }\n\n}\nAvatarImage.CHANNELS_EQUAL = 'CHANNELS_EQUAL';\nAvatarImage.CHANNELS_UNIQUE = 'CHANNELS_UNIQUE';\nAvatarImage.CHANNELS_RED = 'CHANNELS_RED';\nAvatarImage.CHANNELS_GREEN = 'CHANNELS_GREEN';\nAvatarImage.CHANNELS_BLUE = 'CHANNELS_BLUE';\nAvatarImage.CHANNELS_DESATURATED = 'CHANNELS_DESATURATED';\nAvatarImage.DEFAULT_ACTION = 'Default';\nAvatarImage.DEFAULT_DIRECTION = 2;\nAvatarImage.DEFAULT_AVATAR_SET = AvatarSetType.FULL;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/AvatarImage.ts"],"names":["Texture","ColorMatrixFilter","Rectangle","Sprite","NitroContainer","NitroSprite","AdvancedMap","PaletteMapFilter","TextureUtils","Nitro","ActiveActionData","AvatarFigureContainer","AvatarImageCache","AvatarAction","AvatarDirectionAngle","AvatarScaleType","AvatarSetType","AvatarImage","constructor","k","_arg_2","_arg_3","_arg_4","_arg_5","_arg_6","_structure","_scale","_mainDirection","_headDirection","_mainAction","_disposed","_canvasOffsets","_assets","_cache","_figure","_avatarSpriteData","_actions","_image","_reusableTexture","_defaultAction","_frameCounter","_directionOffset","_changes","_sprites","_isAnimating","_animationHasResetOnToggle","_actionsSorted","_sortedActions","_lastActionsString","_currentActionsString","_fullImageCache","_fullImageCacheSize","_isCachedImage","_useFullImageCache","_effectIdInUse","_animationFrameCount","_cachedBodyParts","_cachedBodyPartsDirection","_cachedBodyPartsGeometryType","_cachedBodyPartsAvatarSet","_effectManager","_effectListener","LARGE","setDirection","DEFAULT_AVATAR_SET","DEFAULT_DIRECTION","POSTURE_STAND","definition","getActionDefinition","DEFAULT_ACTION","resetActions","getServerRenderData","getAvatarPartsForCamera","FULL","dispose","destroy","getValues","disposed","getFigure","getScale","getPartColor","MIN_DIRECTION","MAX_DIRECTION","isMainAvatarSet","HEAD","isHeadTurnPreventedByAction","setDirectionAngle","Math","floor","getSprites","getCanvasOffsets","getLayerData","getBodyPartData","animation","id","updateAnimationByFrames","resetAnimationFrameCounter","getFullImageCacheKey","length","actionType","actionParameter","frame","getBodyParts","_local_4","_local_2","getCanvas","geometryType","_local_3","_local_6","_local_5","getImageContainer","getImage","setType","hightlight","scale","cache","endActionAppends","avatarCanvas","width","height","container","isCachable","partCount","set","part","partCacheContainer","image","children","isCacheable","point","regPoint","clone","x","offset","y","partContainer","addChild","position","filters","colorTransform","push","paletteIsGrayscale","convertToGrayscale","reds","CHANNEL_RED","generateTexture","instance","renderer","render","renderTexture","clear","applyPalette","texture","greens","blues","textureCanvas","generateCanvas","textureCtx","getContext","textureImageData","getImageData","data","i","paletteColor","undefined","putImageData","newTexture","from","getImageAsSprite","setTypes","sprite","EMPTY","getCroppedImage","generateImage","getFullImage","existing","getValue","valid","remove","cacheFullImage","oldestKey","getKey","removed","add","getAsset","getDirection","initActionAppends","sortActions","EFFECT","isAvatarEffectReady","parseInt","downloadAvatarEffect","setActionsToParts","appendAction","_args","toString","POSTURE","POSTURE_LAY","POSTURE_WALK","POSTURE_SWIM","POSTURE_FLOAT","POSTURE_SIT","SNOWWAR_RUN","SNOWWAR_DIE_FRONT","SNOWWAR_DIE_BACK","SNOWWAR_PICK","SNOWWAR_THROW","addActionData","GESTURE","GESTURE_AGGRAVATED","GESTURE_SAD","GESTURE_SMILE","GESTURE_SURPRISED","DANCE","TALK","EXPRESSION_WAVE","SLEEP","SIGN","EXPRESSION_RESPECT","EXPRESSION_BLOW_A_KISS","EXPRESSION_LAUGH","EXPRESSION_CRY","EXPRESSION_IDLE","EXPRESSION_SNOWBOARD_OLLIE","EXPRESSION_SNOWBORD_360","EXPRESSION_RIDE_JUMP","CARRY_OBJECT","USE_OBJECT","getActionDefinitionWithState","getParameterValue","isAnimating","removeDynamicItems","resetBodyPartCache","getPreventHeadTurn","maxFrames","disposeInactiveActions","time","isAnimation","getAnimation","state","hasOverriddenActions","overriddenActionNames","indexOf","overridingAction","resetOnToggle","setActionToParts","isAnimated","concat","spriteData","hasDirectionData","directionData","hasAvatarData","avatarData","assetPartDefinition","isMain","setGeometryType","setAction","avatarSpriteData","channel","CHANNELS_UNIQUE","CHANNELS_RED","CHANNELS_GREEN","CHANNELS_BLUE","CHANNELS_DESATURATED","colorFilter","matrix","errorThis","logThis","isPlaceholder","forceActionUpdate","animationHasResetOnToggle","mainAction","resetEffect","effect","CHANNELS_EQUAL"],"mappings":"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","sourcesContent":["import { RenderTexture, Texture } from '@pixi/core';\r\nimport { Container } from '@pixi/display';\r\nimport { ColorMatrixFilter } from '@pixi/filter-color-matrix';\r\nimport { Rectangle } from '@pixi/math';\r\nimport { Sprite } from '@pixi/sprite';\r\nimport { NitroContainer, NitroSprite } from '../../core';\r\nimport { AdvancedMap } from '../../core/utils/AdvancedMap';\r\nimport { PaletteMapFilter } from '../../core/utils/PaletteMapFilter';\r\nimport { IGraphicAsset } from '../../room/object/visualization/utils/IGraphicAsset';\r\nimport { TextureUtils } from '../../room/utils/TextureUtils';\r\nimport { Nitro } from '../Nitro';\r\nimport { ActiveActionData } from './actions/ActiveActionData';\r\nimport { IActionDefinition } from './actions/IActionDefinition';\r\nimport { IActiveActionData } from './actions/IActiveActionData';\r\nimport { AssetAliasCollection } from './alias/AssetAliasCollection';\r\nimport { IAnimationLayerData } from './animation/IAnimationLayerData';\r\nimport { IAvatarDataContainer } from './animation/IAvatarDataContainer';\r\nimport { ISpriteDataContainer } from './animation/ISpriteDataContainer';\r\nimport { AvatarFigureContainer } from './AvatarFigureContainer';\r\nimport { AvatarStructure } from './AvatarStructure';\r\nimport { AvatarImageCache } from './cache/AvatarImageCache';\r\nimport { EffectAssetDownloadManager } from './EffectAssetDownloadManager';\r\nimport { AvatarAction } from './enum/AvatarAction';\r\nimport { AvatarDirectionAngle } from './enum/AvatarDirectionAngle';\r\nimport { AvatarScaleType } from './enum/AvatarScaleType';\r\nimport { AvatarSetType } from './enum/AvatarSetType';\r\nimport { IAvatarEffectListener } from './IAvatarEffectListener';\r\nimport { IAvatarFigureContainer } from './IAvatarFigureContainer';\r\nimport { IAvatarImage } from './IAvatarImage';\r\nimport { IPartColor } from './structure/figure/IPartColor';\r\n\r\nexport class AvatarImage implements IAvatarImage, IAvatarEffectListener\r\n{\r\n    private static CHANNELS_EQUAL: string = 'CHANNELS_EQUAL';\r\n    private static CHANNELS_UNIQUE: string = 'CHANNELS_UNIQUE';\r\n    private static CHANNELS_RED: string = 'CHANNELS_RED';\r\n    private static CHANNELS_GREEN: string = 'CHANNELS_GREEN';\r\n    private static CHANNELS_BLUE: string = 'CHANNELS_BLUE';\r\n    private static CHANNELS_DESATURATED: string = 'CHANNELS_DESATURATED';\r\n    private static DEFAULT_ACTION: string = 'Default';\r\n    private static DEFAULT_DIRECTION: number = 2;\r\n    private static DEFAULT_AVATAR_SET: string = AvatarSetType.FULL;\r\n\r\n    protected _structure: AvatarStructure;\r\n    protected _scale: string;\r\n    protected _mainDirection: number;\r\n    protected _headDirection: number;\r\n    protected _mainAction: IActiveActionData;\r\n    protected _disposed: boolean;\r\n    protected _canvasOffsets: number[];\r\n    protected _assets: AssetAliasCollection;\r\n    protected _cache: AvatarImageCache;\r\n    protected _figure: AvatarFigureContainer;\r\n    protected _avatarSpriteData: IAvatarDataContainer;\r\n    protected _actions: ActiveActionData[];\r\n    protected _image: RenderTexture;\r\n    protected _reusableTexture: RenderTexture;\r\n\r\n    private _defaultAction: IActiveActionData;\r\n    private _frameCounter: number = 0;\r\n    private _directionOffset: number = 0;\r\n    private _changes: boolean;\r\n    private _sprites: ISpriteDataContainer[];\r\n    private _isAnimating: boolean = false;\r\n    private _animationHasResetOnToggle: boolean = false;\r\n    private _actionsSorted: boolean = false;\r\n    private _sortedActions: IActiveActionData[];\r\n    private _lastActionsString: string;\r\n    private _currentActionsString: string;\r\n    private _fullImageCache: AdvancedMap<string, RenderTexture>;\r\n    private _fullImageCacheSize: number = 5;\r\n    protected _isCachedImage: boolean = false;\r\n    private _useFullImageCache: boolean = false;\r\n    private _effectIdInUse: number = -1;\r\n    private _animationFrameCount: number;\r\n    private _cachedBodyParts: string[];\r\n    private _cachedBodyPartsDirection: number = -1;\r\n    private _cachedBodyPartsGeometryType: string = null;\r\n    private _cachedBodyPartsAvatarSet: string = null;\r\n    private _effectManager: EffectAssetDownloadManager;\r\n    private _effectListener: IAvatarEffectListener;\r\n\r\n    constructor(k: AvatarStructure, _arg_2: AssetAliasCollection, _arg_3: AvatarFigureContainer, _arg_4: string, _arg_5: EffectAssetDownloadManager, _arg_6: IAvatarEffectListener = null)\r\n    {\r\n        this._canvasOffsets = [];\r\n        this._actions = [];\r\n        this._cachedBodyParts = [];\r\n        this._changes = true;\r\n        this._disposed = false;\r\n        this._effectManager = _arg_5;\r\n        this._structure = k;\r\n        this._assets = _arg_2;\r\n        this._scale = _arg_4;\r\n        this._effectListener = _arg_6;\r\n        if(this._scale == null)\r\n        {\r\n            this._scale = AvatarScaleType.LARGE;\r\n        }\r\n        if(_arg_3 == null)\r\n        {\r\n            _arg_3 = new AvatarFigureContainer('hr-893-45.hd-180-2.ch-210-66.lg-270-82.sh-300-91.wa-2007-.ri-1-');\r\n        }\r\n        this._figure = _arg_3;\r\n        this._cache = new AvatarImageCache(this._structure, this, this._assets, this._scale);\r\n        this.setDirection(AvatarImage.DEFAULT_AVATAR_SET, AvatarImage.DEFAULT_DIRECTION);\r\n        this._actions = [];\r\n        this._defaultAction = new ActiveActionData(AvatarAction.POSTURE_STAND);\r\n        this._defaultAction.definition = this._structure.getActionDefinition(AvatarImage.DEFAULT_ACTION);\r\n        this.resetActions();\r\n        this._fullImageCache = new AdvancedMap();\r\n        this._animationFrameCount = 0;\r\n    }\r\n\r\n    public getServerRenderData(): any[]\r\n    {\r\n        this.getAvatarPartsForCamera(AvatarSetType.FULL);\r\n\r\n        return this._cache.getServerRenderData();\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._disposed) return;\r\n\r\n        this._structure = null;\r\n        this._assets = null;\r\n        this._mainAction = null;\r\n        this._figure = null;\r\n        this._avatarSpriteData = null;\r\n        this._actions = null;\r\n\r\n        if(this._image)\r\n        {\r\n            this._image.destroy();\r\n\r\n            this._image = null;\r\n        }\r\n\r\n        if(this._cache)\r\n        {\r\n            this._cache.dispose();\r\n            this._cache = null;\r\n        }\r\n\r\n        if(this._fullImageCache)\r\n        {\r\n            for(const k of this._fullImageCache.getValues()) (k && k.destroy());\r\n\r\n            this._fullImageCache = null;\r\n        }\r\n\r\n        this._image = null;\r\n        this._canvasOffsets = null;\r\n        this._disposed = true;\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return this._disposed;\r\n    }\r\n\r\n    public getFigure(): IAvatarFigureContainer\r\n    {\r\n        return this._figure;\r\n    }\r\n\r\n    public getScale(): string\r\n    {\r\n        return this._scale;\r\n    }\r\n\r\n    public getPartColor(k: string): IPartColor\r\n    {\r\n        return this._structure.getPartColor(this._figure, k);\r\n    }\r\n\r\n    public setDirection(k: string, _arg_2: number): void\r\n    {\r\n        _arg_2 = (_arg_2 + this._directionOffset);\r\n\r\n        if(_arg_2 < AvatarDirectionAngle.MIN_DIRECTION)\r\n        {\r\n            _arg_2 = (AvatarDirectionAngle.MAX_DIRECTION + (_arg_2 + 1));\r\n        }\r\n\r\n        if(_arg_2 > AvatarDirectionAngle.MAX_DIRECTION)\r\n        {\r\n            _arg_2 = (_arg_2 - (AvatarDirectionAngle.MAX_DIRECTION + 1));\r\n        }\r\n\r\n        if(this._structure.isMainAvatarSet(k))\r\n        {\r\n            this._mainDirection = _arg_2;\r\n        }\r\n\r\n        if((k === AvatarSetType.HEAD) || (k === AvatarSetType.FULL))\r\n        {\r\n            if((k === AvatarSetType.HEAD) && (this.isHeadTurnPreventedByAction()))\r\n            {\r\n                _arg_2 = this._mainDirection;\r\n            }\r\n\r\n            this._headDirection = _arg_2;\r\n        }\r\n\r\n        this._cache.setDirection(k, _arg_2);\r\n        this._changes = true;\r\n    }\r\n\r\n    public setDirectionAngle(k: string, _arg_2: number): void\r\n    {\r\n        this.setDirection(k, Math.floor(_arg_2 / 45));\r\n    }\r\n\r\n    public getSprites(): ISpriteDataContainer[]\r\n    {\r\n        return this._sprites;\r\n    }\r\n\r\n    public getCanvasOffsets(): number[]\r\n    {\r\n        return this._canvasOffsets;\r\n    }\r\n\r\n    public getLayerData(k: ISpriteDataContainer): IAnimationLayerData\r\n    {\r\n        return this._structure.getBodyPartData(k.animation.id, this._frameCounter, k.id);\r\n    }\r\n\r\n    public updateAnimationByFrames(k: number = 1): void\r\n    {\r\n        this._frameCounter += k;\r\n        this._changes = true;\r\n    }\r\n\r\n    public resetAnimationFrameCounter(): void\r\n    {\r\n        this._frameCounter = 0;\r\n        this._changes = true;\r\n    }\r\n\r\n    private getFullImageCacheKey(): string\r\n    {\r\n        if(!this._useFullImageCache) return null;\r\n\r\n        if(((this._sortedActions.length == 1) && (this._mainDirection == this._headDirection)))\r\n        {\r\n            return (this._mainDirection + this._currentActionsString) + (this._frameCounter % 4);\r\n        }\r\n\r\n        if(this._sortedActions.length == 2)\r\n        {\r\n            for(const k of this._sortedActions)\r\n            {\r\n                if(((k.actionType == 'fx') && ((((k.actionParameter == '33') || (k.actionParameter == '34')) || (k.actionParameter == '35')) || (k.actionParameter == '36'))))\r\n                {\r\n                    return (this._mainDirection + this._currentActionsString) + 0;\r\n                }\r\n\r\n                if(((k.actionType == 'fx') && ((k.actionParameter == '38') || (k.actionParameter == '39'))))\r\n                {\r\n                    return (((this._mainDirection + '_') + this._headDirection) + this._currentActionsString) + (this._frameCounter % 11);\r\n                }\r\n\r\n                if((k.actionType === 'dance') && ((k.actionParameter === '1') || (k.actionParameter === '2') || (k.actionParameter === '3') || (k.actionParameter === '4')))\r\n                {\r\n                    let frame = (this._frameCounter % 8);\r\n\r\n                    if((k.actionParameter === '3')) frame = (this._frameCounter % 10);\r\n\r\n                    if((k.actionParameter === '4')) frame = (this._frameCounter % 16);\r\n\r\n                    return (((this._mainDirection + k.actionType) + k.actionParameter) + frame);\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getBodyParts(k: string, _arg_2: string, _arg_3: number): string[]\r\n    {\r\n        if((((!(_arg_3 == this._cachedBodyPartsDirection)) || (!(_arg_2 == this._cachedBodyPartsGeometryType))) || (!(k == this._cachedBodyPartsAvatarSet))))\r\n        {\r\n            this._cachedBodyPartsDirection = _arg_3;\r\n            this._cachedBodyPartsGeometryType = _arg_2;\r\n            this._cachedBodyPartsAvatarSet = k;\r\n            this._cachedBodyParts = this._structure.getBodyParts(k, _arg_2, _arg_3);\r\n        }\r\n        return this._cachedBodyParts;\r\n    }\r\n\r\n    public getAvatarPartsForCamera(k: string): void\r\n    {\r\n        let _local_4: string;\r\n        if(this._mainAction == null)\r\n        {\r\n            return;\r\n        }\r\n        const _local_2 = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\r\n        if(_local_2 == null)\r\n        {\r\n            return;\r\n        }\r\n        const _local_3 = this.getBodyParts(k, this._mainAction.definition.geometryType, this._mainDirection);\r\n        let _local_6 = (_local_3.length - 1);\r\n        while(_local_6 >= 0)\r\n        {\r\n            _local_4 = _local_3[_local_6];\r\n            const _local_5 = this._cache.getImageContainer(_local_4, this._frameCounter, true);\r\n            _local_6--;\r\n        }\r\n    }\r\n\r\n    public getImage(setType: string, hightlight: boolean, scale: number = 1, cache: boolean = true): RenderTexture\r\n    {\r\n        if(!this._changes) return this._image;\r\n\r\n        if(!this._mainAction) return null;\r\n\r\n        if(!this._actionsSorted) this.endActionAppends();\r\n\r\n        const avatarCanvas = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\r\n\r\n        if(!avatarCanvas) return null;\r\n\r\n        if(this._image && ((this._image.width !== avatarCanvas.width) || (this._image.height !== avatarCanvas.height)))\r\n        {\r\n            if(this._reusableTexture)\r\n            {\r\n                this._reusableTexture.destroy(true);\r\n\r\n                this._reusableTexture = null;\r\n            }\r\n\r\n            this._image = null;\r\n            this._isCachedImage = false;\r\n        }\r\n\r\n        const _local_6 = this.getBodyParts(setType, this._mainAction.definition.geometryType, this._mainDirection);\r\n\r\n        this._image = null;\r\n\r\n        const container = new NitroContainer();\r\n\r\n        let isCachable = true;\r\n        let partCount = (_local_6.length - 1);\r\n\r\n        while(partCount >= 0)\r\n        {\r\n            const set = _local_6[partCount];\r\n            const part = this._cache.getImageContainer(set, this._frameCounter);\r\n\r\n            if(part)\r\n            {\r\n                const partCacheContainer = part.image;\r\n\r\n                if(!partCacheContainer)\r\n                {\r\n                    container.destroy({\r\n                        children: true\r\n                    });\r\n\r\n                    return null;\r\n                }\r\n\r\n                isCachable = ((isCachable) && (part.isCacheable));\r\n\r\n                const point = part.regPoint.clone();\r\n\r\n                if(point)\r\n                {\r\n                    point.x += avatarCanvas.offset.x;\r\n                    point.y += avatarCanvas.offset.y;\r\n\r\n                    point.x += avatarCanvas.regPoint.x;\r\n                    point.y += avatarCanvas.regPoint.y;\r\n\r\n                    const partContainer = new NitroContainer();\r\n\r\n                    partContainer.addChild(partCacheContainer);\r\n\r\n                    if(partContainer)\r\n                    {\r\n                        partContainer.position.set(point.x, point.y);\r\n\r\n                        container.addChild(partContainer);\r\n                    }\r\n                }\r\n            }\r\n\r\n            partCount--;\r\n        }\r\n\r\n        if(this._avatarSpriteData)\r\n        {\r\n            if(!container.filters) container.filters = [];\r\n\r\n            if(this._avatarSpriteData.colorTransform) container.filters.push(this._avatarSpriteData.colorTransform);\r\n\r\n            if(this._avatarSpriteData.paletteIsGrayscale)\r\n            {\r\n                this.convertToGrayscale(container);\r\n\r\n                container.filters.push(new PaletteMapFilter(this._avatarSpriteData.reds, PaletteMapFilter.CHANNEL_RED));\r\n            }\r\n        }\r\n\r\n        if(!cache)\r\n        {\r\n            return TextureUtils.generateTexture(container, new Rectangle(0, 0, avatarCanvas.width, avatarCanvas.height));\r\n        }\r\n\r\n        if(this._reusableTexture)\r\n        {\r\n            Nitro.instance.renderer.render(container, {\r\n                renderTexture: this._reusableTexture,\r\n                clear: true\r\n            });\r\n        }\r\n        else\r\n        {\r\n            this._reusableTexture = TextureUtils.generateTexture(container, new Rectangle(0, 0, avatarCanvas.width, avatarCanvas.height));\r\n        }\r\n\r\n        if(!this._reusableTexture) return null;\r\n\r\n        /*\r\n        if(this._avatarSpriteData)\r\n        {\r\n            if(this._avatarSpriteData.paletteIsGrayscale)\r\n            {\r\n                this._reusableTexture = this.applyPalette(this._reusableTexture, this._avatarSpriteData.reds, [], []);\r\n            }\r\n        }\r\n        */\r\n\r\n        this._image = this._reusableTexture;\r\n        this._changes = false;\r\n\r\n        return this._image;\r\n    }\r\n\r\n    public applyPalette(texture: RenderTexture, reds: number[] = [], greens: number[] = [], blues: number[] = []): RenderTexture\r\n    {\r\n        const textureCanvas = TextureUtils.generateCanvas(texture);\r\n        const textureCtx = textureCanvas.getContext('2d');\r\n        const textureImageData = textureCtx.getImageData(0, 0, textureCanvas.width, textureCanvas.height);\r\n        const data = textureImageData.data;\r\n\r\n        for(let i = 0; i < data.length; i += 4)\r\n        {\r\n            if(reds.length == 256)\r\n            {\r\n                let paletteColor = reds[ data[i] ];\r\n                if(paletteColor === undefined) paletteColor = 0;\r\n\r\n                data[ i ] = ((paletteColor >> 16) & 0xFF);\r\n                data[ i + 1] = ((paletteColor >> 8) & 0xFF);\r\n                data[ i + 2] = (paletteColor & 0xFF);\r\n            }\r\n\r\n            if(greens.length == 256)\r\n            {\r\n                let paletteColor = greens[ data[i + 1] ];\r\n                if(paletteColor === undefined) paletteColor = 0;\r\n\r\n                data[ i ] = ((paletteColor >> 16) & 0xFF);\r\n                data[ i + 1] = ((paletteColor >> 8) & 0xFF);\r\n                data[ i + 2] = (paletteColor & 0xFF);\r\n            }\r\n            if(blues.length == 256)\r\n            {\r\n                let paletteColor = greens[ data[i + 2] ];\r\n                if(paletteColor === undefined) paletteColor = 0;\r\n\r\n                data[ i ] = ((paletteColor >> 16) & 0xFF);\r\n                data[ i + 1] = ((paletteColor >> 8) & 0xFF);\r\n                data[ i + 2] = (paletteColor & 0xFF);\r\n            }\r\n        }\r\n\r\n        textureCtx.putImageData(textureImageData, 0, 0);\r\n\r\n        const newTexture = new Sprite(Texture.from(textureCanvas));\r\n\r\n        Nitro.instance.renderer.render(newTexture, {\r\n            renderTexture: texture,\r\n            clear: true\r\n        });\r\n\r\n        return texture;\r\n    }\r\n\r\n    public getImageAsSprite(setType: string, scale: number = 1): Sprite\r\n    {\r\n        if(!this._mainAction) return null;\r\n\r\n        if(!this._actionsSorted) this.endActionAppends();\r\n\r\n        const avatarCanvas = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\r\n\r\n        if(!avatarCanvas) return null;\r\n\r\n        const setTypes = this.getBodyParts(setType, this._mainAction.definition.geometryType, this._mainDirection);\r\n        const container = new NitroSprite();\r\n        const sprite = new NitroSprite(Texture.EMPTY);\r\n\r\n        sprite.width = avatarCanvas.width;\r\n        sprite.height = avatarCanvas.height;\r\n\r\n        container.addChild(sprite);\r\n\r\n        let partCount = (setTypes.length - 1);\r\n\r\n        while(partCount >= 0)\r\n        {\r\n            const set = setTypes[partCount];\r\n            const part = this._cache.getImageContainer(set, this._frameCounter);\r\n\r\n            if(part)\r\n            {\r\n                const partCacheContainer = part.image;\r\n\r\n                if(!partCacheContainer)\r\n                {\r\n                    container.destroy({\r\n                        children: true\r\n                    });\r\n\r\n                    return null;\r\n                }\r\n\r\n                const point = part.regPoint.clone();\r\n\r\n                if(point)\r\n                {\r\n                    point.x += avatarCanvas.offset.x;\r\n                    point.y += avatarCanvas.offset.y;\r\n\r\n                    point.x += avatarCanvas.regPoint.x;\r\n                    point.y += avatarCanvas.regPoint.y;\r\n\r\n                    const partContainer = new NitroContainer();\r\n\r\n                    partContainer.addChild(partCacheContainer);\r\n\r\n                    partContainer.position.set(point.x, point.y);\r\n\r\n                    container.addChild(partContainer);\r\n                }\r\n            }\r\n\r\n            partCount--;\r\n        }\r\n\r\n        return container;\r\n    }\r\n\r\n    public getCroppedImage(setType: string, scale: number = 1): HTMLImageElement\r\n    {\r\n        if(!this._mainAction) return null;\r\n\r\n        if(!this._actionsSorted) this.endActionAppends();\r\n\r\n        const avatarCanvas = this._structure.getCanvas(this._scale, this._mainAction.definition.geometryType);\r\n\r\n        if(!avatarCanvas) return null;\r\n\r\n        const setTypes = this.getBodyParts(setType, this._mainAction.definition.geometryType, this._mainDirection);\r\n        const container = new NitroContainer();\r\n\r\n        let partCount = (setTypes.length - 1);\r\n\r\n        while(partCount >= 0)\r\n        {\r\n            const set = setTypes[partCount];\r\n            const part = this._cache.getImageContainer(set, this._frameCounter);\r\n\r\n            if(part)\r\n            {\r\n                const partCacheContainer = part.image;\r\n\r\n                if(!partCacheContainer)\r\n                {\r\n                    container.destroy({\r\n                        children: true\r\n                    });\r\n\r\n                    return null;\r\n                }\r\n\r\n                const point = part.regPoint.clone();\r\n\r\n                if(point)\r\n                {\r\n                    point.x += avatarCanvas.offset.x;\r\n                    point.y += avatarCanvas.offset.y;\r\n\r\n                    point.x += avatarCanvas.regPoint.x;\r\n                    point.y += avatarCanvas.regPoint.y;\r\n\r\n                    const partContainer = new NitroContainer();\r\n\r\n                    partContainer.addChild(partCacheContainer);\r\n\r\n                    if(partContainer)\r\n                    {\r\n                        partContainer.position.set(point.x, point.y);\r\n\r\n                        container.addChild(partContainer);\r\n                    }\r\n                }\r\n            }\r\n\r\n            partCount--;\r\n        }\r\n\r\n        const texture = TextureUtils.generateTexture(container, new Rectangle(0, 0, avatarCanvas.width, avatarCanvas.height));\r\n\r\n        const image = TextureUtils.generateImage(texture);\r\n\r\n        if(!image) return null;\r\n\r\n        return image;\r\n    }\r\n\r\n    protected getFullImage(k: string): RenderTexture\r\n    {\r\n        const existing = this._fullImageCache.getValue(k);\r\n\r\n        if(existing)\r\n        {\r\n            if(!existing.valid)\r\n            {\r\n                this._fullImageCache.remove(k);\r\n\r\n                existing.destroy(true);\r\n            }\r\n\r\n            return existing;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    protected cacheFullImage(k: string, _arg_2: RenderTexture): void\r\n    {\r\n        const existing = this._fullImageCache.getValue(k);\r\n\r\n        if(existing)\r\n        {\r\n            this._fullImageCache.remove(k);\r\n\r\n            existing.destroy(true);\r\n        }\r\n\r\n        if(this._fullImageCache.length === this._fullImageCacheSize)\r\n        {\r\n            const oldestKey = this._fullImageCache.getKey(0);\r\n\r\n            if(oldestKey)\r\n            {\r\n                const removed = this._fullImageCache.remove(oldestKey);\r\n\r\n                removed.destroy(true);\r\n            }\r\n        }\r\n\r\n        this._fullImageCache.add(k, _arg_2);\r\n    }\r\n\r\n    public getAsset(k: string): IGraphicAsset\r\n    {\r\n        return this._assets.getAsset(k);\r\n    }\r\n\r\n    public getDirection(): number\r\n    {\r\n        return this._mainDirection;\r\n    }\r\n\r\n    public initActionAppends(): void\r\n    {\r\n        this._actions = [];\r\n        this._actionsSorted = false;\r\n        this._currentActionsString = '';\r\n        this._useFullImageCache = false;\r\n    }\r\n\r\n    public endActionAppends(): void\r\n    {\r\n        let k:ActiveActionData;\r\n\r\n        if(!this.sortActions()) return;\r\n\r\n        for(const k of this._sortedActions)\r\n        {\r\n            if(k.actionType === AvatarAction.EFFECT)\r\n            {\r\n                if(!this._effectManager.isAvatarEffectReady(parseInt(k.actionParameter))) this._effectManager.downloadAvatarEffect(parseInt(k.actionParameter), this);\r\n            }\r\n        }\r\n\r\n        this.resetActions();\r\n        this.setActionsToParts();\r\n    }\r\n\r\n    public appendAction(k: string, ..._args: any[]): boolean\r\n    {\r\n        let _local_3 = '';\r\n\r\n        this._actionsSorted = false;\r\n\r\n        if(_args && (_args.length > 0)) _local_3 = _args[0];\r\n\r\n        if((_local_3 !== undefined) && (_local_3 !== null)) _local_3 = _local_3.toString();\r\n\r\n        switch(k)\r\n        {\r\n            case AvatarAction.POSTURE:\r\n                switch(_local_3)\r\n                {\r\n                    case AvatarAction.POSTURE_LAY:\r\n                    case AvatarAction.POSTURE_WALK:\r\n                    case AvatarAction.POSTURE_STAND:\r\n                    case AvatarAction.POSTURE_SWIM:\r\n                    case AvatarAction.POSTURE_FLOAT:\r\n                    case AvatarAction.POSTURE_SIT:\r\n                    case AvatarAction.SNOWWAR_RUN:\r\n                    case AvatarAction.SNOWWAR_DIE_FRONT:\r\n                    case AvatarAction.SNOWWAR_DIE_BACK:\r\n                    case AvatarAction.SNOWWAR_PICK:\r\n                    case AvatarAction.SNOWWAR_THROW:\r\n                        if((_local_3 === AvatarAction.POSTURE_LAY) || (_local_3 === AvatarAction.POSTURE_LAY) || (_local_3 === AvatarAction.POSTURE_LAY))\r\n                        {\r\n                            if(_local_3 === AvatarAction.POSTURE_LAY)\r\n                            {\r\n                                if(this._mainDirection == 0)\r\n                                {\r\n                                    this.setDirection(AvatarSetType.FULL, 4);\r\n                                }\r\n                                else\r\n                                {\r\n                                    this.setDirection(AvatarSetType.FULL, 2);\r\n                                }\r\n                            }\r\n\r\n                            this._useFullImageCache = true;\r\n                            this._useFullImageCache = true;\r\n                        }\r\n\r\n                        this.addActionData(_local_3);\r\n                        break;\r\n                }\r\n                break;\r\n            case AvatarAction.GESTURE:\r\n                switch(_local_3)\r\n                {\r\n                    case AvatarAction.GESTURE_AGGRAVATED:\r\n                    case AvatarAction.GESTURE_SAD:\r\n                    case AvatarAction.GESTURE_SMILE:\r\n                    case AvatarAction.GESTURE_SURPRISED:\r\n                        this.addActionData(_local_3);\r\n                        break;\r\n                }\r\n                break;\r\n            case AvatarAction.EFFECT:\r\n            case AvatarAction.DANCE:\r\n            case AvatarAction.TALK:\r\n            case AvatarAction.EXPRESSION_WAVE:\r\n            case AvatarAction.SLEEP:\r\n            case AvatarAction.SIGN:\r\n            case AvatarAction.EXPRESSION_RESPECT:\r\n            case AvatarAction.EXPRESSION_BLOW_A_KISS:\r\n            case AvatarAction.EXPRESSION_LAUGH:\r\n            case AvatarAction.EXPRESSION_CRY:\r\n            case AvatarAction.EXPRESSION_IDLE:\r\n            case AvatarAction.EXPRESSION_SNOWBOARD_OLLIE:\r\n            case AvatarAction.EXPRESSION_SNOWBORD_360:\r\n            case AvatarAction.EXPRESSION_RIDE_JUMP:\r\n                if(_local_3 === AvatarAction.EFFECT)\r\n                {\r\n                    if((((((_local_3 === '33') || (_local_3 === '34')) || (_local_3 === '35')) || (_local_3 === '36')) || (_local_3 === '38')) || (_local_3 === '39'))\r\n                    {\r\n                        this._useFullImageCache = true;\r\n                    }\r\n                }\r\n\r\n                this.addActionData(k, _local_3);\r\n                break;\r\n            case AvatarAction.CARRY_OBJECT:\r\n            case AvatarAction.USE_OBJECT: {\r\n                const _local_4 = this._structure.getActionDefinitionWithState(k);\r\n                if(_local_4) _local_3 = _local_4.getParameterValue(_local_3);\r\n                this.addActionData(k, _local_3);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected addActionData(k: string, _arg_2: string=''): void\r\n    {\r\n        let _local_3:ActiveActionData;\r\n        if(!this._actions) this._actions = [];\r\n\r\n        let _local_4 = 0;\r\n        while(_local_4 < this._actions.length)\r\n        {\r\n            _local_3 = this._actions[_local_4];\r\n            if(((_local_3.actionType == k) && (_local_3.actionParameter == _arg_2)))\r\n            {\r\n                return;\r\n            }\r\n            _local_4++;\r\n        }\r\n        this._actions.push(new ActiveActionData(k, _arg_2, this._frameCounter));\r\n    }\r\n\r\n    public isAnimating(): boolean\r\n    {\r\n        return (this._isAnimating) || (this._animationFrameCount > 1);\r\n    }\r\n\r\n    private resetActions(): boolean\r\n    {\r\n        this._animationHasResetOnToggle = false;\r\n        this._isAnimating = false;\r\n        this._sprites = [];\r\n        this._avatarSpriteData = null;\r\n        this._directionOffset = 0;\r\n        this._structure.removeDynamicItems(this);\r\n        this._mainAction = this._defaultAction;\r\n        this._mainAction.definition = this._defaultAction.definition;\r\n        this.resetBodyPartCache(this._defaultAction);\r\n        return true;\r\n    }\r\n\r\n    private isHeadTurnPreventedByAction(): boolean\r\n    {\r\n        let _local_2: IActionDefinition;\r\n        let _local_3: ActiveActionData;\r\n        let k: boolean;\r\n        if(this._sortedActions == null)\r\n        {\r\n            return false;\r\n        }\r\n        for(const _local_3 of this._sortedActions)\r\n        {\r\n            _local_2 = this._structure.getActionDefinitionWithState(_local_3.actionType);\r\n            if(((!(_local_2 == null)) && (_local_2.getPreventHeadTurn(_local_3.actionParameter))))\r\n            {\r\n                k = true;\r\n            }\r\n        }\r\n        return k;\r\n    }\r\n\r\n    private sortActions(): boolean\r\n    {\r\n        let _local_2: boolean;\r\n        let _local_3: boolean;\r\n        let _local_4:ActiveActionData;\r\n        let _local_5: number;\r\n        let k: boolean;\r\n\r\n        this._currentActionsString = '';\r\n        this._sortedActions = this._structure.sortActions(this._actions);\r\n        this._animationFrameCount = this._structure.maxFrames(this._sortedActions);\r\n\r\n        if(!this._sortedActions)\r\n        {\r\n            this._canvasOffsets = [ 0, 0, 0 ];\r\n\r\n            if(this._lastActionsString !== '')\r\n            {\r\n                k = true;\r\n\r\n                this._lastActionsString = '';\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this._canvasOffsets = this._structure.getCanvasOffsets(this._sortedActions, this._scale, this._mainDirection);\r\n\r\n            for(const _local_4 of this._sortedActions)\r\n            {\r\n                this._currentActionsString = (this._currentActionsString + (_local_4.actionType + _local_4.actionParameter));\r\n\r\n                if(_local_4.actionType === AvatarAction.EFFECT)\r\n                {\r\n                    const _local_5 = parseInt(_local_4.actionParameter);\r\n\r\n                    if(this._effectIdInUse !== _local_5) _local_2 = true;\r\n\r\n                    this._effectIdInUse = _local_5;\r\n\r\n                    _local_3 = true;\r\n                }\r\n            }\r\n\r\n            if(!_local_3)\r\n            {\r\n                if(this._effectIdInUse > -1) _local_2 = true;\r\n\r\n                this._effectIdInUse = -1;\r\n            }\r\n\r\n            if(_local_2) this._cache.disposeInactiveActions(0);\r\n\r\n            if(this._lastActionsString != this._currentActionsString)\r\n            {\r\n                k = true;\r\n\r\n                this._lastActionsString = this._currentActionsString;\r\n            }\r\n        }\r\n\r\n        this._actionsSorted = true;\r\n\r\n        return k;\r\n    }\r\n\r\n    private setActionsToParts(): void\r\n    {\r\n        if(!this._sortedActions == null) return;\r\n\r\n        const _local_3: number = Nitro.instance.time;\r\n        const _local_4: string[] = [];\r\n\r\n        for(const k of this._sortedActions) _local_4.push(k.actionType);\r\n\r\n        for(const k of this._sortedActions)\r\n        {\r\n            if((k && k.definition) && k.definition.isAnimation)\r\n            {\r\n                const _local_2 = this._structure.getAnimation(((k.definition.state + '.') + k.actionParameter));\r\n\r\n                if(_local_2 && _local_2.hasOverriddenActions())\r\n                {\r\n                    const _local_5 = _local_2.overriddenActionNames();\r\n\r\n                    if(_local_5)\r\n                    {\r\n                        for(const _local_6 of _local_5)\r\n                        {\r\n                            if(_local_4.indexOf(_local_6) >= 0) k.overridingAction = _local_2.overridingAction(_local_6);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(_local_2 && _local_2.resetOnToggle)\r\n                {\r\n                    this._animationHasResetOnToggle = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(const k of this._sortedActions)\r\n        {\r\n            if(!((!(k)) || (!(k.definition))))\r\n            {\r\n                if(k.definition.isAnimation && (k.actionParameter === '')) k.actionParameter = '1';\r\n\r\n                this.setActionToParts(k, _local_3);\r\n\r\n                if(k.definition.isAnimation)\r\n                {\r\n                    this._isAnimating = k.definition.isAnimated(k.actionParameter);\r\n\r\n                    const _local_2 = this._structure.getAnimation(((k.definition.state + '.') + k.actionParameter));\r\n\r\n                    if(_local_2)\r\n                    {\r\n                        this._sprites = this._sprites.concat(_local_2.spriteData);\r\n\r\n                        if(_local_2.hasDirectionData()) this._directionOffset = _local_2.directionData.offset;\r\n\r\n                        if(_local_2.hasAvatarData()) this._avatarSpriteData = _local_2.avatarData;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActionToParts(k: IActiveActionData, _arg_2: number): void\r\n    {\r\n        if(((k == null) || (k.definition == null)))\r\n        {\r\n            return;\r\n        }\r\n        if(k.definition.assetPartDefinition == '')\r\n        {\r\n            return;\r\n        }\r\n        if(k.definition.isMain)\r\n        {\r\n            this._mainAction = k;\r\n            this._cache.setGeometryType(k.definition.geometryType);\r\n        }\r\n        this._cache.setAction(k, _arg_2);\r\n        this._changes = true;\r\n    }\r\n\r\n    private resetBodyPartCache(k: IActiveActionData): void\r\n    {\r\n        if(!k) return;\r\n\r\n        if(k.definition.assetPartDefinition === '') return;\r\n\r\n        if(k.definition.isMain)\r\n        {\r\n            this._mainAction = k;\r\n            this._cache.setGeometryType(k.definition.geometryType);\r\n        }\r\n\r\n        this._cache.resetBodyPartCache(k);\r\n        this._changes = true;\r\n    }\r\n\r\n    public get avatarSpriteData(): IAvatarDataContainer\r\n    {\r\n        return this._avatarSpriteData;\r\n    }\r\n\r\n    private convertToGrayscale(container: Container, channel: string = 'CHANNELS_EQUAL'): Container\r\n    {\r\n        let _local_3 = 0.33;\r\n        let _local_4 = 0.33;\r\n        let _local_5 = 0.33;\r\n        const _local_6 = 1;\r\n\r\n        switch(channel)\r\n        {\r\n            case AvatarImage.CHANNELS_UNIQUE:\r\n                _local_3 = 0.3;\r\n                _local_4 = 0.59;\r\n                _local_5 = 0.11;\r\n                break;\r\n            case AvatarImage.CHANNELS_RED:\r\n                _local_3 = 1;\r\n                _local_4 = 0;\r\n                _local_5 = 0;\r\n                break;\r\n            case AvatarImage.CHANNELS_GREEN:\r\n                _local_3 = 0;\r\n                _local_4 = 1;\r\n                _local_5 = 0;\r\n                break;\r\n            case AvatarImage.CHANNELS_BLUE:\r\n                _local_3 = 0;\r\n                _local_4 = 0;\r\n                _local_5 = 1;\r\n                break;\r\n            case AvatarImage.CHANNELS_DESATURATED:\r\n                _local_3 = 0.3086;\r\n                _local_4 = 0.6094;\r\n                _local_5 = 0.082;\r\n                break;\r\n        }\r\n\r\n        const colorFilter = new ColorMatrixFilter();\r\n\r\n        colorFilter.matrix = [_local_3, _local_4, _local_5, 0, 0, _local_3, _local_4, _local_5, 0, 0, _local_3, _local_4, _local_5, 0, 0, 0, 0, 0, 1, 0];\r\n\r\n        container.filters.push(colorFilter);\r\n\r\n        return container;\r\n    }\r\n\r\n    private errorThis(k: string): void\r\n    {\r\n    }\r\n\r\n    private logThis(k: string): void\r\n    {\r\n    }\r\n\r\n    public isPlaceholder(): boolean\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public forceActionUpdate(): void\r\n    {\r\n        this._lastActionsString = '';\r\n    }\r\n\r\n    public get animationHasResetOnToggle(): boolean\r\n    {\r\n        return this._animationHasResetOnToggle;\r\n    }\r\n\r\n    public get mainAction(): string\r\n    {\r\n        return this._mainAction.actionType;\r\n    }\r\n\r\n    public resetEffect(effect: number): void\r\n    {\r\n        if(effect === this._effectIdInUse)\r\n        {\r\n            this.resetActions();\r\n            this.setActionsToParts();\r\n\r\n            this._animationHasResetOnToggle = true;\r\n            this._changes = true;\r\n\r\n            if(this._effectListener) this._effectListener.resetEffect(effect);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}