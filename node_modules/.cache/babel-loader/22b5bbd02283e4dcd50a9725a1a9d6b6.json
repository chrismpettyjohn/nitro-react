{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/inventory/views/badge/InventoryBadgeView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { LocalizeBadgeName, LocalizeText, UnseenItemCategory } from '../../../../api';\nimport { AutoGrid, Button, Column, Flex, Grid, LayoutBadgeImageView, Text } from '../../../../common';\nimport { useInventoryBadges, useInventoryUnseenTracker } from '../../../../hooks';\nimport { InventoryBadgeItemView } from './InventoryBadgeItemView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryBadgeView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const {\n    badgeCodes = [],\n    activeBadgeCodes = [],\n    selectedBadgeCode = null,\n    isWearingBadge = null,\n    canWearBadges = null,\n    toggleBadge = null,\n    getBadgeId = null,\n    activate = null,\n    deactivate = null\n  } = useInventoryBadges();\n  const {\n    isUnseen = null,\n    removeUnseen = null\n  } = useInventoryUnseenTracker();\n  useEffect(() => {\n    if (!selectedBadgeCode || !isUnseen(UnseenItemCategory.BADGE, getBadgeId(selectedBadgeCode))) return;\n    removeUnseen(UnseenItemCategory.BADGE, getBadgeId(selectedBadgeCode));\n  }, [selectedBadgeCode, isUnseen, removeUnseen, getBadgeId]);\n  useEffect(() => {\n    if (!isVisible) return;\n    const id = activate();\n    return () => deactivate(id);\n  }, [isVisible, activate, deactivate]);\n  useEffect(() => {\n    setIsVisible(true);\n    return () => setIsVisible(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(Column, {\n      size: 7,\n      overflow: \"hidden\",\n      children: /*#__PURE__*/_jsxDEV(AutoGrid, {\n        columnCount: 4,\n        children: badgeCodes && badgeCodes.length > 0 && badgeCodes.map((badgeCode, index) => {\n          if (activeBadgeCodes.indexOf(badgeCode) >= 0) return null;\n          return /*#__PURE__*/_jsxDEV(InventoryBadgeItemView, {\n            badgeCode: badgeCode\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      className: \"justify-content-between\",\n      size: 5,\n      overflow: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        overflow: \"hidden\",\n        gap: 2,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: LocalizeText('inventory.badges.activebadges')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AutoGrid, {\n          columnCount: 3,\n          children: activeBadgeCodes && activeBadgeCodes.length > 0 && activeBadgeCodes.map((badgeCode, index) => /*#__PURE__*/_jsxDEV(InventoryBadgeItemView, {\n            badgeCode: badgeCode\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 123\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), !!selectedBadgeCode && /*#__PURE__*/_jsxDEV(Column, {\n        grow: true,\n        justifyContent: \"end\",\n        gap: 2,\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          gap: 2,\n          children: [/*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n            shrink: true,\n            badgeCode: selectedBadgeCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: LocalizeBadgeName(selectedBadgeCode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !isWearingBadge(selectedBadgeCode) && !canWearBadges(),\n          onClick: event => toggleBadge(selectedBadgeCode),\n          children: LocalizeText(isWearingBadge(selectedBadgeCode) ? 'inventory.badges.clearbadge' : 'inventory.badges.wearbadge')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InventoryBadgeView, \"7tWEaxWF8Jz5OXjU1BJ0AHLXaDU=\", false, function () {\n  return [useInventoryBadges, useInventoryUnseenTracker];\n});\n\n_c = InventoryBadgeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryBadgeView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/inventory/views/badge/InventoryBadgeView.tsx"],"names":["useEffect","useState","LocalizeBadgeName","LocalizeText","UnseenItemCategory","AutoGrid","Button","Column","Flex","Grid","LayoutBadgeImageView","Text","useInventoryBadges","useInventoryUnseenTracker","InventoryBadgeItemView","InventoryBadgeView","props","isVisible","setIsVisible","badgeCodes","activeBadgeCodes","selectedBadgeCode","isWearingBadge","canWearBadges","toggleBadge","getBadgeId","activate","deactivate","isUnseen","removeUnseen","BADGE","id","length","map","badgeCode","index","indexOf","event"],"mappings":"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","sourcesContent":["import { FC, useEffect, useState } from 'react';\nimport { LocalizeBadgeName, LocalizeText, UnseenItemCategory } from '../../../../api';\nimport { AutoGrid, Button, Column, Flex, Grid, LayoutBadgeImageView, Text } from '../../../../common';\nimport { useInventoryBadges, useInventoryUnseenTracker } from '../../../../hooks';\nimport { InventoryBadgeItemView } from './InventoryBadgeItemView';\n\nexport const InventoryBadgeView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const { badgeCodes = [], activeBadgeCodes = [], selectedBadgeCode = null, isWearingBadge = null, canWearBadges = null, toggleBadge = null, getBadgeId = null, activate = null, deactivate = null } = useInventoryBadges();\n    const { isUnseen = null, removeUnseen = null } = useInventoryUnseenTracker();\n\n    useEffect(() =>\n    {\n        if(!selectedBadgeCode || !isUnseen(UnseenItemCategory.BADGE, getBadgeId(selectedBadgeCode))) return;\n\n        removeUnseen(UnseenItemCategory.BADGE, getBadgeId(selectedBadgeCode));\n    }, [ selectedBadgeCode, isUnseen, removeUnseen, getBadgeId ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible) return;\n\n        const id = activate();\n\n        return () => deactivate(id);\n    }, [ isVisible, activate, deactivate ]);\n\n    useEffect(() =>\n    {\n        setIsVisible(true);\n\n        return () => setIsVisible(false);\n    }, []);\n\n    return (\n        <Grid>\n            <Column size={ 7 } overflow=\"hidden\">\n                <AutoGrid columnCount={ 4 }>\n                    { badgeCodes && (badgeCodes.length > 0) && badgeCodes.map((badgeCode, index) =>\n                    {\n                        if(activeBadgeCodes.indexOf(badgeCode) >= 0) return null;\n\n                        return <InventoryBadgeItemView key={ index } badgeCode={ badgeCode } />\n                    }) }\n                </AutoGrid>\n            </Column>\n            <Column className=\"justify-content-between\" size={ 5 } overflow=\"auto\">\n                <Column overflow=\"hidden\" gap={ 2 }>\n                    <Text>{ LocalizeText('inventory.badges.activebadges') }</Text>\n                    <AutoGrid columnCount={ 3 }>\n                        { activeBadgeCodes && (activeBadgeCodes.length > 0) && activeBadgeCodes.map((badgeCode, index) => <InventoryBadgeItemView key={ index } badgeCode={ badgeCode } />) }\n                    </AutoGrid>\n                </Column>\n                { !!selectedBadgeCode &&\n                    <Column grow justifyContent=\"end\" gap={ 2 }>\n                        <Flex alignItems=\"center\" gap={ 2 }>\n                            <LayoutBadgeImageView shrink badgeCode={ selectedBadgeCode } />\n                            <Text>{ LocalizeBadgeName(selectedBadgeCode) }</Text>\n                        </Flex>\n                        <Button disabled={ !isWearingBadge(selectedBadgeCode) && !canWearBadges() } onClick={ event => toggleBadge(selectedBadgeCode) }>{ LocalizeText(isWearingBadge(selectedBadgeCode) ? 'inventory.badges.clearbadge' : 'inventory.badges.wearbadge') }</Button>\n                    </Column> }\n            </Column>\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}