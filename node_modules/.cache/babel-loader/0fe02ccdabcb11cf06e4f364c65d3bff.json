{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/achievements/AchievementsView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { AddEventLinkTracker, GetAchievementCategoryImageUrl, LocalizeText, RemoveLinkEventTracker } from '../../api';\nimport { Base, Column, LayoutImage, LayoutProgressBar, NitroCardContentView, NitroCardHeaderView, NitroCardSubHeaderView, NitroCardView, Text } from '../../common';\nimport { useAchievements } from '../../hooks';\nimport { AchievementCategoryView } from './views/AchievementCategoryView';\nimport { AchievementsCategoryListView } from './views/category-list/AchievementsCategoryListView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AchievementsView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const {\n    achievementCategories = [],\n    selectedCategoryCode = null,\n    setSelectedCategoryCode = null,\n    selectedAchievementId = -1,\n    setSelectedAchievementId = null,\n    achievementScore = 0,\n    getProgress = 0,\n    getMaxProgress = 0,\n    setAchievementSeen = null\n  } = useAchievements();\n  const selectedCategory = useMemo(() => {\n    if (selectedCategoryCode === null) return null;\n    return achievementCategories.find(category => category.code === selectedCategoryCode);\n  }, [achievementCategories, selectedCategoryCode]);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived: url => {\n        const parts = url.split('/');\n        if (parts.length < 2) return;\n\n        switch (parts[1]) {\n          case 'show':\n            setIsVisible(true);\n            return;\n\n          case 'hide':\n            setIsVisible(false);\n            return;\n\n          case 'toggle':\n            setIsVisible(prevValue => !prevValue);\n            return;\n        }\n      },\n      eventUrlPrefix: 'achievements/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, []);\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(NitroCardView, {\n    uniqueKey: \"achievements\",\n    className: \"nitro-achievements\",\n    theme: \"primary\",\n    children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n      headerText: LocalizeText('inventory.achievements'),\n      onCloseClick: event => setIsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), selectedCategory && /*#__PURE__*/_jsxDEV(NitroCardSubHeaderView, {\n      position: \"relative\",\n      className: \"justify-content-center align-items-center cursor-pointer\",\n      gap: 3,\n      children: [/*#__PURE__*/_jsxDEV(Base, {\n        onClick: event => setSelectedCategoryCode(null),\n        className: \"nitro-achievements-back-arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        grow: true,\n        gap: 0,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: 4,\n          fontWeight: \"bold\",\n          className: \"text-small\",\n          children: LocalizeText(`quests.${selectedCategory.code}.name`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: LocalizeText('achievements.details.categoryprogress', ['progress', 'limit'], [selectedCategory.getProgress().toString(), selectedCategory.getMaxProgress().toString()])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LayoutImage, {\n        imageUrl: GetAchievementCategoryImageUrl(selectedCategory, null, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n      gap: 1,\n      children: [!selectedCategory && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AchievementsCategoryListView, {\n          categories: achievementCategories,\n          selectedCategoryCode: selectedCategoryCode,\n          setSelectedCategoryCode: setSelectedCategoryCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          grow: true,\n          justifyContent: \"end\",\n          gap: 1,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            small: true,\n            center: true,\n            children: LocalizeText('achievements.categories.score', ['score'], [achievementScore.toString()])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(LayoutProgressBar, {\n            text: LocalizeText('achievements.categories.totalprogress', ['progress', 'limit'], [getProgress.toString(), getMaxProgress.toString()]),\n            progress: getProgress,\n            maxProgress: getMaxProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), selectedCategory && /*#__PURE__*/_jsxDEV(AchievementCategoryView, {\n        category: selectedCategory,\n        selectedAchievementId: selectedAchievementId,\n        setSelectedAchievementId: setSelectedAchievementId,\n        setAchievementSeen: setAchievementSeen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AchievementsView, \"1U5QLXalSeqj8VjvcHyXK/stg/0=\", false, function () {\n  return [useAchievements];\n});\n\n_c = AchievementsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"AchievementsView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/achievements/AchievementsView.tsx"],"names":["useEffect","useMemo","useState","AddEventLinkTracker","GetAchievementCategoryImageUrl","LocalizeText","RemoveLinkEventTracker","Base","Column","LayoutImage","LayoutProgressBar","NitroCardContentView","NitroCardHeaderView","NitroCardSubHeaderView","NitroCardView","Text","useAchievements","AchievementCategoryView","AchievementsCategoryListView","AchievementsView","props","isVisible","setIsVisible","achievementCategories","selectedCategoryCode","setSelectedCategoryCode","selectedAchievementId","setSelectedAchievementId","achievementScore","getProgress","getMaxProgress","setAchievementSeen","selectedCategory","find","category","code","linkTracker","linkReceived","url","parts","split","length","prevValue","eventUrlPrefix","event","toString"],"mappings":"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","sourcesContent":["import { ILinkEventTracker } from '@nitrots/nitro-renderer';\nimport { FC, useEffect, useMemo, useState } from 'react';\nimport { AddEventLinkTracker, GetAchievementCategoryImageUrl, LocalizeText, RemoveLinkEventTracker } from '../../api';\nimport { Base, Column, LayoutImage, LayoutProgressBar, NitroCardContentView, NitroCardHeaderView, NitroCardSubHeaderView, NitroCardView, Text } from '../../common';\nimport { useAchievements } from '../../hooks';\nimport { AchievementCategoryView } from './views/AchievementCategoryView';\nimport { AchievementsCategoryListView } from './views/category-list/AchievementsCategoryListView';\n\nexport const AchievementsView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const { achievementCategories = [], selectedCategoryCode = null, setSelectedCategoryCode = null, selectedAchievementId = -1, setSelectedAchievementId = null, achievementScore = 0, getProgress = 0, getMaxProgress = 0, setAchievementSeen = null } = useAchievements();\n\n    const selectedCategory = useMemo(() =>\n    {\n        if(selectedCategoryCode === null) return null;\n\n        return achievementCategories.find(category => (category.code === selectedCategoryCode));\n    }, [ achievementCategories, selectedCategoryCode ]);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived: (url: string) =>\n            {\n                const parts = url.split('/');\n        \n                if(parts.length < 2) return;\n        \n                switch(parts[1])\n                {\n                    case 'show':\n                        setIsVisible(true);\n                        return;\n                    case 'hide':\n                        setIsVisible(false);\n                        return;\n                    case 'toggle':\n                        setIsVisible(prevValue => !prevValue);\n                        return;\n                }\n            },\n            eventUrlPrefix: 'achievements/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, []);\n\n    if(!isVisible) return null;\n\n    return (\n        <NitroCardView uniqueKey=\"achievements\" className=\"nitro-achievements\" theme=\"primary\">\n            <NitroCardHeaderView headerText={ LocalizeText('inventory.achievements') } onCloseClick={ event => setIsVisible(false) } />\n            { selectedCategory &&\n                <NitroCardSubHeaderView position=\"relative\" className=\"justify-content-center align-items-center cursor-pointer\" gap={ 3 }>\n                    <Base onClick={ event => setSelectedCategoryCode(null) } className=\"nitro-achievements-back-arrow\" />\n                    <Column grow gap={ 0 }>\n                        <Text fontSize={ 4 } fontWeight=\"bold\" className=\"text-small\">{ LocalizeText(`quests.${ selectedCategory.code }.name`) }</Text>\n                        <Text>{ LocalizeText('achievements.details.categoryprogress', [ 'progress', 'limit' ], [ selectedCategory.getProgress().toString(), selectedCategory.getMaxProgress().toString() ]) }</Text>\n                    </Column>\n                    <LayoutImage imageUrl={ GetAchievementCategoryImageUrl(selectedCategory, null,true) } />\n                </NitroCardSubHeaderView> }\n            <NitroCardContentView gap={ 1 }>\n                { !selectedCategory &&\n                    <>\n                        <AchievementsCategoryListView categories={ achievementCategories } selectedCategoryCode={ selectedCategoryCode } setSelectedCategoryCode={ setSelectedCategoryCode } />\n                        <Column grow justifyContent=\"end\" gap={ 1 }>\n                            <Text small center>{ LocalizeText('achievements.categories.score', [ 'score' ], [ achievementScore.toString() ]) }</Text>\n                            <LayoutProgressBar text={ LocalizeText('achievements.categories.totalprogress', [ 'progress', 'limit' ], [ getProgress.toString(), getMaxProgress.toString() ]) } progress={ getProgress } maxProgress={ getMaxProgress } />\n                        </Column>\n                    </> }\n                { selectedCategory &&\n                    <AchievementCategoryView category={ selectedCategory } selectedAchievementId={ selectedAchievementId } setSelectedAchievementId={ setSelectedAchievementId } setAchievementSeen={ setAchievementSeen } /> }\n            </NitroCardContentView>\n        </NitroCardView>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}