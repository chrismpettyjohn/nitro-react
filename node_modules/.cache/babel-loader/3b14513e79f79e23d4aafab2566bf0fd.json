{"ast":null,"code":"export class Vector3d {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this._x = void 0;\n    this._y = void 0;\n    this._z = void 0;\n    this._length = void 0;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._length = NaN;\n  }\n\n  static sum(vector1, vector2) {\n    if (!vector1 || !vector2) return null;\n    return new Vector3d(vector1.x + vector2.x, vector1.y + vector2.y, vector1.z + vector2.z);\n  }\n\n  static dif(vector1, vector2) {\n    if (!vector1 || !vector2) return null;\n    return new Vector3d(vector1.x - vector2.x, vector1.y - vector2.y, vector1.z - vector2.z);\n  }\n\n  static product(vector, value) {\n    if (!vector) return null;\n    return new Vector3d(vector.x * value, vector.y * value, vector.z * value);\n  }\n\n  static dotProduct(vector1, vector2) {\n    if (!vector1 || !vector2) return 0;\n    return vector1.x * vector2.x + vector1.y * vector2.y + vector1.z * vector2.z;\n  }\n\n  static crossProduct(vector1, vector2) {\n    if (!vector1 || !vector2) return null;\n    return new Vector3d(vector1.y * vector2.z - vector1.z * vector2.y, vector1.z * vector2.x - vector1.x * vector2.z, vector1.x * vector2.y - vector1.y * vector2.x);\n  }\n\n  static scalarProjection(vector1, vector2) {\n    if (!vector1 || !vector2) return -1;\n    const length = vector2.length;\n\n    if (length > 0) {\n      return (vector1.x * vector2.x + vector1.y * vector2.y + vector1.z * vector2.z) / length;\n    }\n\n    return -1;\n  }\n\n  static cosAngle(vector1, vector2) {\n    if (!vector1 || !vector2) return 0;\n    const totalLength = vector1.length * vector2.length;\n    if (!totalLength) return 0;\n    return Vector3d.dotProduct(vector1, vector2) / totalLength;\n  }\n\n  static isEqual(vector1, vector2) {\n    if (!vector1 || !vector2) return false;\n    if (vector1.x !== vector2.x || vector1.y !== vector2.y || vector1.z !== vector2.z) return false;\n    return true;\n  }\n\n  negate() {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n  }\n\n  add(vector) {\n    if (!vector) return;\n    this._x += vector.x;\n    this._y += vector.y;\n    this._z += vector.z;\n    this._length = NaN;\n  }\n\n  subtract(vector) {\n    if (!vector) return;\n    this._x -= vector.x;\n    this._y -= vector.y;\n    this._z -= vector.z;\n    this._length = NaN;\n  }\n\n  multiply(amount) {\n    this._x *= amount;\n    this._y *= amount;\n    this._z *= amount;\n    this._length = NaN;\n  }\n\n  divide(amount) {\n    if (!amount) return;\n    this._x /= amount;\n    this._y /= amount;\n    this._z /= amount;\n    this._length = NaN;\n  }\n\n  assign(vector) {\n    if (!vector) return;\n    this._x = vector.x;\n    this._y = vector.y;\n    this._z = vector.z;\n    this._length = NaN;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set x(k) {\n    this._x = k;\n    this._length = NaN;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set y(k) {\n    this._y = k;\n    this._length = NaN;\n  }\n\n  get z() {\n    return this._z;\n  }\n\n  set z(k) {\n    this._z = k;\n    this._length = NaN;\n  }\n\n  get length() {\n    if (isNaN(this._length)) {\n      this._length = Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);\n    }\n\n    return this._length;\n  }\n\n  toString() {\n    return `[Vector3d: ${this._x}, ${this._y}, ${this._z}]`;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/utils/Vector3d.ts"],"names":["Vector3d","constructor","x","y","z","_x","_y","_z","_length","NaN","sum","vector1","vector2","dif","product","vector","value","dotProduct","crossProduct","scalarProjection","length","cosAngle","totalLength","isEqual","negate","add","subtract","multiply","amount","divide","assign","k","isNaN","Math","sqrt","toString"],"mappings":"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","sourcesContent":["import { IVector3D } from './IVector3D';\r\n\r\nexport class Vector3d implements IVector3D\r\n{\r\n    private _x: number;\r\n    private _y: number;\r\n    private _z: number;\r\n    private _length: number;\r\n\r\n    constructor(x: number = 0, y: number = 0, z: number = 0)\r\n    {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public static sum(vector1: IVector3D, vector2: IVector3D): Vector3d\r\n    {\r\n        if(!vector1 || !vector2) return null;\r\n\r\n        return new Vector3d((vector1.x + vector2.x), (vector1.y + vector2.y), (vector1.z + vector2.z));\r\n    }\r\n\r\n    public static dif(vector1: IVector3D, vector2: IVector3D): Vector3d\r\n    {\r\n        if(!vector1 || !vector2) return null;\r\n\r\n        return new Vector3d((vector1.x - vector2.x), (vector1.y - vector2.y), (vector1.z - vector2.z));\r\n    }\r\n\r\n    public static product(vector: IVector3D, value: number): Vector3d\r\n    {\r\n        if(!vector) return null;\r\n\r\n        return new Vector3d((vector.x * value), (vector.y * value), (vector.z * value));\r\n    }\r\n\r\n    public static dotProduct(vector1: IVector3D, vector2: IVector3D): number\r\n    {\r\n        if(!vector1 || !vector2) return 0;\r\n\r\n        return (vector1.x * vector2.x) + (vector1.y * vector2.y) + (vector1.z * vector2.z);\r\n    }\r\n\r\n    public static crossProduct(vector1: IVector3D, vector2: IVector3D): Vector3d\r\n    {\r\n        if(!vector1 || !vector2) return null;\r\n\r\n        return new Vector3d(((vector1.y * vector2.z) - (vector1.z * vector2.y)), ((vector1.z * vector2.x) - (vector1.x * vector2.z)), ((vector1.x * vector2.y) - (vector1.y * vector2.x)));\r\n    }\r\n\r\n    public static scalarProjection(vector1: IVector3D, vector2: IVector3D): number\r\n    {\r\n        if(!vector1 || !vector2) return -1;\r\n\r\n        const length = vector2.length;\r\n\r\n        if(length > 0)\r\n        {\r\n            return ((vector1.x * vector2.x) + (vector1.y * vector2.y) + (vector1.z * vector2.z)) / length;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public static cosAngle(vector1: IVector3D, vector2:IVector3D): number\r\n    {\r\n        if(!vector1 || !vector2) return 0;\r\n\r\n        const totalLength = (vector1.length * vector2.length);\r\n\r\n        if(!totalLength) return 0;\r\n\r\n        return (Vector3d.dotProduct(vector1, vector2) / totalLength);\r\n    }\r\n\r\n    public static isEqual(vector1: IVector3D, vector2: IVector3D): boolean\r\n    {\r\n        if(!vector1 || !vector2) return false;\r\n\r\n        if((vector1.x !== vector2.x) || (vector1.y !== vector2.y) || (vector1.z !== vector2.z)) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    public negate(): void\r\n    {\r\n        this._x = -(this._x);\r\n        this._y = -(this._y);\r\n        this._z = -(this._z);\r\n    }\r\n\r\n    public add(vector: IVector3D): void\r\n    {\r\n        if(!vector) return;\r\n\r\n        this._x += vector.x;\r\n        this._y += vector.y;\r\n        this._z += vector.z;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public subtract(vector: IVector3D): void\r\n    {\r\n        if(!vector) return;\r\n\r\n        this._x -= vector.x;\r\n        this._y -= vector.y;\r\n        this._z -= vector.z;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public multiply(amount: number): void\r\n    {\r\n        this._x *= amount;\r\n        this._y *= amount;\r\n        this._z *= amount;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public divide(amount: number): void\r\n    {\r\n        if(!amount) return;\r\n\r\n        this._x /= amount;\r\n        this._y /= amount;\r\n        this._z /= amount;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public assign(vector: IVector3D): void\r\n    {\r\n        if(!vector) return;\r\n\r\n        this._x = vector.x;\r\n        this._y = vector.y;\r\n        this._z = vector.z;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public get x(): number\r\n    {\r\n        return this._x;\r\n    }\r\n\r\n    public set x(k: number)\r\n    {\r\n        this._x = k;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public get y(): number\r\n    {\r\n        return this._y;\r\n    }\r\n\r\n    public set y(k: number)\r\n    {\r\n        this._y = k;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public get z(): number\r\n    {\r\n        return this._z;\r\n    }\r\n\r\n    public set z(k: number)\r\n    {\r\n        this._z = k;\r\n        this._length = NaN;\r\n    }\r\n\r\n    public get length(): number\r\n    {\r\n        if(isNaN(this._length))\r\n        {\r\n            this._length = Math.sqrt(((this._x * this._x) + (this._y * this._y)) + (this._z * this._z));\r\n        }\r\n\r\n        return this._length;\r\n    }\r\n\r\n    public toString(): string\r\n    {\r\n        return `[Vector3d: ${ this._x }, ${ this._y }, ${ this._z }]`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}