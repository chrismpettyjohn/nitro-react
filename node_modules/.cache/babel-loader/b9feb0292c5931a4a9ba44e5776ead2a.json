{"ast":null,"code":"import { RoomObjectVariable } from '../../RoomObjectVariable';\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\nexport class FurnitureBadgeDisplayVisualization extends FurnitureAnimatedVisualization {\n  constructor() {\n    super();\n    this._badgeId = void 0;\n    this._badgeAssetNameNormalScale = void 0;\n    this._badgeAssetNameSmallScale = void 0;\n    this._badgeVisibleInState = void 0;\n    this._badgeId = '';\n    this._badgeAssetNameNormalScale = '';\n    this._badgeAssetNameSmallScale = '';\n    this._badgeVisibleInState = -1;\n  }\n\n  updateModel(scale) {\n    let updateModel = super.updateModel(scale);\n    const badgeStatus = this.object.model.getValue(RoomObjectVariable.FURNITURE_BADGE_IMAGE_STATUS);\n    const badgeId = this.object.model.getValue(RoomObjectVariable.FURNITURE_BADGE_ASSET_NAME);\n\n    if (badgeStatus === -1) {\n      this._badgeAssetNameNormalScale = '';\n      this._badgeAssetNameSmallScale = '';\n    } else if (badgeStatus === 1 && badgeId !== this._badgeId) {\n      this._badgeId = badgeId;\n      this._badgeAssetNameNormalScale = this._badgeId;\n      if (this._badgeAssetNameSmallScale === '') this._badgeAssetNameSmallScale = this._badgeAssetNameNormalScale + '_32';\n      const visibleInState = this.object.model.getValue(RoomObjectVariable.FURNITURE_BADGE_VISIBLE_IN_STATE);\n      if (!isNaN(visibleInState)) this._badgeVisibleInState = visibleInState;\n      updateModel = true;\n    }\n\n    return updateModel;\n  }\n\n  getSpriteAssetName(scale, layerId) {\n    const tag = this.getLayerTag(scale, this.direction, layerId);\n    if (tag !== FurnitureBadgeDisplayVisualization.BADGE || this._badgeVisibleInState !== -1 && this.object.getState(0) !== this._badgeVisibleInState) return super.getSpriteAssetName(scale, layerId);\n    if (scale === 32) return this._badgeAssetNameSmallScale;\n    return this._badgeAssetNameNormalScale;\n  }\n\n  getLayerXOffset(scale, direction, layerId) {\n    let offset = super.getLayerXOffset(scale, direction, layerId);\n\n    if (this.getLayerTag(scale, direction, layerId) === FurnitureBadgeDisplayVisualization.BADGE) {\n      const asset = this.getAsset(scale === 32 ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale, layerId);\n\n      if (asset) {\n        if (scale === 64) offset += (40 - asset.width) / 2;else offset += (20 - asset.width) / 2;\n      }\n    }\n\n    return offset;\n  }\n\n  getLayerYOffset(scale, direction, layerId) {\n    let offset = super.getLayerYOffset(scale, direction, layerId);\n\n    if (this.getLayerTag(scale, direction, layerId) === FurnitureBadgeDisplayVisualization.BADGE) {\n      const asset = this.getAsset(scale === 32 ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale, layerId);\n\n      if (asset) {\n        if (scale === 64) offset += (40 - asset.height) / 2;else offset += (20 - asset.height) / 2;\n      }\n    }\n\n    return offset;\n  }\n\n}\nFurnitureBadgeDisplayVisualization.BADGE = 'BADGE';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurnitureBadgeDisplayVisualization.ts"],"names":["RoomObjectVariable","FurnitureAnimatedVisualization","FurnitureBadgeDisplayVisualization","constructor","_badgeId","_badgeAssetNameNormalScale","_badgeAssetNameSmallScale","_badgeVisibleInState","updateModel","scale","badgeStatus","object","model","getValue","FURNITURE_BADGE_IMAGE_STATUS","badgeId","FURNITURE_BADGE_ASSET_NAME","visibleInState","FURNITURE_BADGE_VISIBLE_IN_STATE","isNaN","getSpriteAssetName","layerId","tag","getLayerTag","direction","BADGE","getState","getLayerXOffset","offset","asset","getAsset","width","getLayerYOffset","height"],"mappings":"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","sourcesContent":["import { RoomObjectVariable } from '../../RoomObjectVariable';\r\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\r\n\r\nexport class FurnitureBadgeDisplayVisualization extends FurnitureAnimatedVisualization\r\n{\r\n    private static BADGE: string = 'BADGE';\r\n\r\n    private _badgeId: string;\r\n    private _badgeAssetNameNormalScale: string;\r\n    private _badgeAssetNameSmallScale: string;\r\n    private _badgeVisibleInState: number;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._badgeId = '';\r\n        this._badgeAssetNameNormalScale = '';\r\n        this._badgeAssetNameSmallScale = '';\r\n        this._badgeVisibleInState = -1;\r\n    }\r\n\r\n    protected updateModel(scale: number): boolean\r\n    {\r\n        let updateModel = super.updateModel(scale);\r\n\r\n        const badgeStatus = this.object.model.getValue<number>(RoomObjectVariable.FURNITURE_BADGE_IMAGE_STATUS);\r\n        const badgeId = this.object.model.getValue<string>(RoomObjectVariable.FURNITURE_BADGE_ASSET_NAME);\r\n\r\n        if(badgeStatus === -1)\r\n        {\r\n            this._badgeAssetNameNormalScale = '';\r\n            this._badgeAssetNameSmallScale = '';\r\n        }\r\n\r\n        else if((badgeStatus === 1) && (badgeId !== this._badgeId))\r\n        {\r\n            this._badgeId = badgeId;\r\n            this._badgeAssetNameNormalScale = this._badgeId;\r\n\r\n            if(this._badgeAssetNameSmallScale === '') this._badgeAssetNameSmallScale = this._badgeAssetNameNormalScale + '_32';\r\n\r\n            const visibleInState = this.object.model.getValue<number>(RoomObjectVariable.FURNITURE_BADGE_VISIBLE_IN_STATE);\r\n\r\n            if(!isNaN(visibleInState)) this._badgeVisibleInState = visibleInState;\r\n\r\n            updateModel = true;\r\n        }\r\n\r\n        return updateModel;\r\n    }\r\n\r\n    protected getSpriteAssetName(scale: number, layerId: number): string\r\n    {\r\n        const tag = this.getLayerTag(scale, this.direction, layerId);\r\n\r\n        if((tag !== FurnitureBadgeDisplayVisualization.BADGE) || ((this._badgeVisibleInState !== -1) && (this.object.getState(0) !== this._badgeVisibleInState))) return super.getSpriteAssetName(scale, layerId);\r\n\r\n        if(scale === 32) return this._badgeAssetNameSmallScale;\r\n\r\n        return this._badgeAssetNameNormalScale;\r\n    }\r\n\r\n    protected getLayerXOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        let offset = super.getLayerXOffset(scale, direction, layerId);\r\n\r\n        if(this.getLayerTag(scale, direction, layerId) === FurnitureBadgeDisplayVisualization.BADGE)\r\n        {\r\n            const asset = this.getAsset(((scale === 32) ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale), layerId);\r\n\r\n            if(asset)\r\n            {\r\n                if(scale === 64) offset += ((40 - asset.width) / 2);\r\n                else offset += ((20 - asset.width) / 2);\r\n            }\r\n        }\r\n\r\n        return offset;\r\n    }\r\n\r\n    protected getLayerYOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        let offset = super.getLayerYOffset(scale, direction, layerId);\r\n\r\n        if(this.getLayerTag(scale, direction, layerId) === FurnitureBadgeDisplayVisualization.BADGE)\r\n        {\r\n            const asset = this.getAsset(((scale === 32) ? this._badgeAssetNameSmallScale : this._badgeAssetNameNormalScale), layerId);\r\n\r\n            if(asset)\r\n            {\r\n                if(scale === 64) offset += ((40 - asset.height) / 2);\r\n                else offset += ((20 - asset.height) / 2);\r\n            }\r\n        }\r\n\r\n        return offset;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}