{"ast":null,"code":"import { Vector3d } from '../../../../../../room/utils/Vector3d';\nimport { ObjectRolling } from '../../../../../room/utils/ObjectRolling';\nexport class ObjectsRollingParser {\n  constructor() {\n    this._rollerId = void 0;\n    this._itemsRolling = void 0;\n    this._unitRolling = void 0;\n  }\n\n  flush() {\n    this._rollerId = 0;\n    this._itemsRolling = [];\n    this._unitRolling = null;\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    const x = wrapper.readInt();\n    const y = wrapper.readInt();\n    const nextX = wrapper.readInt();\n    const nextY = wrapper.readInt();\n    let totalItems = wrapper.readInt();\n\n    while (totalItems > 0) {\n      const id = wrapper.readInt();\n      const height = parseFloat(wrapper.readString());\n      const nextHeight = parseFloat(wrapper.readString());\n      const rollingData = new ObjectRolling(id, new Vector3d(x, y, height), new Vector3d(nextX, nextY, nextHeight));\n\n      this._itemsRolling.push(rollingData);\n\n      totalItems--;\n    }\n\n    this._rollerId = wrapper.readInt();\n    if (!wrapper.bytesAvailable) return true;\n    const movementType = wrapper.readInt();\n    const unitId = wrapper.readInt();\n    const height = parseFloat(wrapper.readString());\n    const nextHeight = parseFloat(wrapper.readString());\n\n    switch (movementType) {\n      case 0:\n        break;\n\n      case 1:\n        this._unitRolling = new ObjectRolling(unitId, new Vector3d(x, y, height), new Vector3d(nextX, nextY, nextHeight), ObjectRolling.MOVE);\n        break;\n\n      case 2:\n        this._unitRolling = new ObjectRolling(unitId, new Vector3d(x, y, height), new Vector3d(nextX, nextY, nextHeight), ObjectRolling.SLIDE);\n        break;\n    }\n\n    return true;\n  }\n\n  get rollerId() {\n    return this._rollerId;\n  }\n\n  get itemsRolling() {\n    return this._itemsRolling;\n  }\n\n  get unitRolling() {\n    return this._unitRolling;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/room/engine/ObjectsRollingParser.ts"],"names":["Vector3d","ObjectRolling","ObjectsRollingParser","_rollerId","_itemsRolling","_unitRolling","flush","parse","wrapper","x","readInt","y","nextX","nextY","totalItems","id","height","parseFloat","readString","nextHeight","rollingData","push","bytesAvailable","movementType","unitId","MOVE","SLIDE","rollerId","itemsRolling","unitRolling"],"mappings":"AACA,SAASA,QAAT,QAAyB,uCAAzB;AACA,SAASC,aAAT,QAA8B,yCAA9B;AAEA,OAAO,MAAMC,oBAAN,CACP;AAAA;AAAA,SACYC,SADZ;AAAA,SAEYC,aAFZ;AAAA,SAGYC,YAHZ;AAAA;;AAKWC,EAAAA,KAAK,GACZ;AACI,SAAKH,SAAL,GAAiB,CAAjB;AAEA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,YAAL,GAAoB,IAApB;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,UAAMC,CAAC,GAAGD,OAAO,CAACE,OAAR,EAAV;AACA,UAAMC,CAAC,GAAGH,OAAO,CAACE,OAAR,EAAV;AACA,UAAME,KAAK,GAAGJ,OAAO,CAACE,OAAR,EAAd;AACA,UAAMG,KAAK,GAAGL,OAAO,CAACE,OAAR,EAAd;AAEA,QAAII,UAAU,GAAGN,OAAO,CAACE,OAAR,EAAjB;;AAEA,WAAMI,UAAU,GAAG,CAAnB,EACA;AACI,YAAMC,EAAE,GAAGP,OAAO,CAACE,OAAR,EAAX;AACA,YAAMM,MAAM,GAAGC,UAAU,CAACT,OAAO,CAACU,UAAR,EAAD,CAAzB;AACA,YAAMC,UAAU,GAAGF,UAAU,CAACT,OAAO,CAACU,UAAR,EAAD,CAA7B;AACA,YAAME,WAAW,GAAG,IAAInB,aAAJ,CAAkBc,EAAlB,EAAsB,IAAIf,QAAJ,CAAaS,CAAb,EAAgBE,CAAhB,EAAmBK,MAAnB,CAAtB,EAAkD,IAAIhB,QAAJ,CAAaY,KAAb,EAAoBC,KAApB,EAA2BM,UAA3B,CAAlD,CAApB;;AAEA,WAAKf,aAAL,CAAmBiB,IAAnB,CAAwBD,WAAxB;;AAEAN,MAAAA,UAAU;AACb;;AAED,SAAKX,SAAL,GAAiBK,OAAO,CAACE,OAAR,EAAjB;AAEA,QAAG,CAACF,OAAO,CAACc,cAAZ,EAA4B,OAAO,IAAP;AAE5B,UAAMC,YAAY,GAAGf,OAAO,CAACE,OAAR,EAArB;AACA,UAAMc,MAAM,GAAGhB,OAAO,CAACE,OAAR,EAAf;AACA,UAAMM,MAAM,GAAGC,UAAU,CAACT,OAAO,CAACU,UAAR,EAAD,CAAzB;AACA,UAAMC,UAAU,GAAGF,UAAU,CAACT,OAAO,CAACU,UAAR,EAAD,CAA7B;;AAEA,YAAOK,YAAP;AAEI,WAAK,CAAL;AAAQ;;AACR,WAAK,CAAL;AACI,aAAKlB,YAAL,GAAoB,IAAIJ,aAAJ,CAAkBuB,MAAlB,EAA0B,IAAIxB,QAAJ,CAAaS,CAAb,EAAgBE,CAAhB,EAAmBK,MAAnB,CAA1B,EAAsD,IAAIhB,QAAJ,CAAaY,KAAb,EAAoBC,KAApB,EAA2BM,UAA3B,CAAtD,EAA8FlB,aAAa,CAACwB,IAA5G,CAApB;AACA;;AACJ,WAAK,CAAL;AACI,aAAKpB,YAAL,GAAoB,IAAIJ,aAAJ,CAAkBuB,MAAlB,EAA0B,IAAIxB,QAAJ,CAAaS,CAAb,EAAgBE,CAAhB,EAAmBK,MAAnB,CAA1B,EAAsD,IAAIhB,QAAJ,CAAaY,KAAb,EAAoBC,KAApB,EAA2BM,UAA3B,CAAtD,EAA8FlB,aAAa,CAACyB,KAA5G,CAApB;AACA;AARR;;AAWA,WAAO,IAAP;AACH;;AAEkB,MAARC,QAAQ,GACnB;AACI,WAAO,KAAKxB,SAAZ;AACH;;AAEsB,MAAZyB,YAAY,GACvB;AACI,WAAO,KAAKxB,aAAZ;AACH;;AAEqB,MAAXyB,WAAW,GACtB;AACI,WAAO,KAAKxB,YAAZ;AACH;;AA1EL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\nimport { Vector3d } from '../../../../../../room/utils/Vector3d';\r\nimport { ObjectRolling } from '../../../../../room/utils/ObjectRolling';\r\n\r\nexport class ObjectsRollingParser implements IMessageParser\r\n{\r\n    private _rollerId: number;\r\n    private _itemsRolling: ObjectRolling[];\r\n    private _unitRolling: ObjectRolling;\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._rollerId = 0;\r\n\r\n        this._itemsRolling = [];\r\n        this._unitRolling = null;\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        const x = wrapper.readInt();\r\n        const y = wrapper.readInt();\r\n        const nextX = wrapper.readInt();\r\n        const nextY = wrapper.readInt();\r\n\r\n        let totalItems = wrapper.readInt();\r\n\r\n        while(totalItems > 0)\r\n        {\r\n            const id = wrapper.readInt();\r\n            const height = parseFloat(wrapper.readString());\r\n            const nextHeight = parseFloat(wrapper.readString());\r\n            const rollingData = new ObjectRolling(id, new Vector3d(x, y, height), new Vector3d(nextX, nextY, nextHeight));\r\n\r\n            this._itemsRolling.push(rollingData);\r\n\r\n            totalItems--;\r\n        }\r\n\r\n        this._rollerId = wrapper.readInt();\r\n\r\n        if(!wrapper.bytesAvailable) return true;\r\n\r\n        const movementType = wrapper.readInt();\r\n        const unitId = wrapper.readInt();\r\n        const height = parseFloat(wrapper.readString());\r\n        const nextHeight = parseFloat(wrapper.readString());\r\n\r\n        switch(movementType)\r\n        {\r\n            case 0: break;\r\n            case 1:\r\n                this._unitRolling = new ObjectRolling(unitId, new Vector3d(x, y, height), new Vector3d(nextX, nextY, nextHeight), ObjectRolling.MOVE);\r\n                break;\r\n            case 2:\r\n                this._unitRolling = new ObjectRolling(unitId, new Vector3d(x, y, height), new Vector3d(nextX, nextY, nextHeight), ObjectRolling.SLIDE);\r\n                break;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get rollerId(): number\r\n    {\r\n        return this._rollerId;\r\n    }\r\n\r\n    public get itemsRolling(): ObjectRolling[]\r\n    {\r\n        return this._itemsRolling;\r\n    }\r\n\r\n    public get unitRolling(): ObjectRolling\r\n    {\r\n        return this._unitRolling;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}