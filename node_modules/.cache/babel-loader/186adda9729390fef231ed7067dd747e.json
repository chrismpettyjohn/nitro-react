{"ast":null,"code":"export class CallForHelpPendingCallsMessageParser {\n  constructor() {\n    this._calls = void 0;\n  }\n\n  flush() {\n    this._calls = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    this._calls = [];\n    const count = wrapper.readInt();\n\n    for (let i = 0; i < count; i++) {\n      const callId = wrapper.readString();\n      const timestamp = wrapper.readString();\n      const message = wrapper.readString();\n\n      this._calls.push({\n        callId: callId,\n        timeStamp: timestamp,\n        message: message\n      });\n    }\n\n    return true;\n  }\n\n  get pendingCalls() {\n    return this._calls;\n  }\n\n  get count() {\n    return this._calls.length;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/help/CallForHelpPendingCallsMessageParser.ts"],"names":["CallForHelpPendingCallsMessageParser","_calls","flush","parse","wrapper","count","readInt","i","callId","readString","timestamp","message","push","timeStamp","pendingCalls","length"],"mappings":"AAGA,OAAO,MAAMA,oCAAN,CACP;AAAA;AAAA,SACYC,MADZ;AAAA;;AAGIC,EAAAA,KAAK,GACL;AACI,SAAKD,MAAL,GAAc,EAAd;AACA,WAAO,IAAP;AACH;;AAEDE,EAAAA,KAAK,CAACC,OAAD,EACL;AACI,SAAKH,MAAL,GAAc,EAAd;AAEA,UAAMI,KAAK,GAAGD,OAAO,CAACE,OAAR,EAAd;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAnB,EAA0BE,CAAC,EAA3B,EACA;AACI,YAAMC,MAAM,GAAGJ,OAAO,CAACK,UAAR,EAAf;AACA,YAAMC,SAAS,GAAGN,OAAO,CAACK,UAAR,EAAlB;AACA,YAAME,OAAO,GAAGP,OAAO,CAACK,UAAR,EAAhB;;AAEA,WAAKR,MAAL,CAAYW,IAAZ,CAAiB;AAAEJ,QAAAA,MAAM,EAAEA,MAAV;AAAkBK,QAAAA,SAAS,EAAEH,SAA7B;AAAwCC,QAAAA,OAAO,EAAEA;AAAjD,OAAjB;AACH;;AACD,WAAO,IAAP;AACH;;AAEsB,MAAZG,YAAY,GACvB;AACI,WAAO,KAAKb,MAAZ;AACH;;AAEe,MAALI,KAAK,GAChB;AACI,WAAO,KAAKJ,MAAL,CAAYc,MAAnB;AACH;;AAlCL","sourcesContent":["import { IMessageDataWrapper } from '../../../../../core/communication/messages/IMessageDataWrapper';\r\nimport { IMessageParser } from '../../../../../core/communication/messages/IMessageParser';\r\n\r\nexport class CallForHelpPendingCallsMessageParser implements IMessageParser\r\n{\r\n    private _calls: ICall[];\r\n\r\n    flush(): boolean\r\n    {\r\n        this._calls = [];\r\n        return true;\r\n    }\r\n\r\n    parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        this._calls = [];\r\n\r\n        const count = wrapper.readInt();\r\n\r\n        for(let i = 0; i < count; i++)\r\n        {\r\n            const callId = wrapper.readString();\r\n            const timestamp = wrapper.readString();\r\n            const message = wrapper.readString();\r\n\r\n            this._calls.push({ callId: callId, timeStamp: timestamp, message: message });\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public get pendingCalls(): ICall[]\r\n    {\r\n        return this._calls;\r\n    }\r\n\r\n    public get count(): number\r\n    {\r\n        return this._calls.length;\r\n    }\r\n}\r\n\r\nexport interface ICall\r\n{\r\n    callId: string;\r\n    timeStamp: string;\r\n    message: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}