{"ast":null,"code":"export class AnimationFrame {\n  constructor() {\n    this._id = void 0;\n    this._x = void 0;\n    this._y = void 0;\n    this._repeats = void 0;\n    this._frameRepeats = void 0;\n    this._remainingFrameRepeats = void 0;\n    this._activeSequence = void 0;\n    this._activeSequenceOffset = void 0;\n    this._isLastFrame = void 0;\n    this._isRecycled = void 0;\n  }\n\n  static allocate(id, x, y, repeats, frameRepeats, isLastFrame) {\n    let activeSequence = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : -1;\n    let sequenceOffset = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    const frame = AnimationFrame.POOL.length ? AnimationFrame.POOL.pop() : new AnimationFrame();\n    if (repeats < 1) repeats = 1;\n    if (frameRepeats < 0) frameRepeats = AnimationFrame.FRAME_REPEAT_FOREVER;\n    frame._id = id;\n    frame._x = x || 0;\n    frame._y = y || 0;\n    frame._repeats = repeats;\n    frame._frameRepeats = frameRepeats;\n    frame._remainingFrameRepeats = frameRepeats;\n    frame._isLastFrame = isLastFrame;\n    frame._isRecycled = false;\n\n    if (activeSequence >= 0) {\n      frame._activeSequence = activeSequence;\n      frame._activeSequenceOffset = sequenceOffset;\n    } else {\n      frame._activeSequence = -1;\n      frame._activeSequenceOffset = 0;\n    }\n\n    return frame;\n  }\n\n  get id() {\n    if (this._id >= 0) return this._id;\n    return -this._id * Math.random();\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get repeats() {\n    return this._repeats;\n  }\n\n  get frameRepeats() {\n    return this._frameRepeats;\n  }\n\n  get isLastFrame() {\n    return this._isLastFrame;\n  }\n\n  get remainingFrameRepeats() {\n    if (this._frameRepeats < 0) return AnimationFrame.FRAME_REPEAT_FOREVER;\n    return this._remainingFrameRepeats;\n  }\n\n  set remainingFrameRepeats(k) {\n    if (k < 0) k = 0;\n    if (this._frameRepeats > 0 && k > this._frameRepeats) k = this._frameRepeats;\n    this._remainingFrameRepeats = k;\n  }\n\n  get activeSequence() {\n    return this._activeSequence;\n  }\n\n  get activeSequenceOffset() {\n    return this._activeSequenceOffset;\n  }\n\n  recycle() {\n    if (this._isRecycled) return;\n    this._isRecycled = true;\n    if (AnimationFrame.POOL.length < AnimationFrame.POOL_SIZE_LIMIT) AnimationFrame.POOL.push(this);\n  }\n\n}\nAnimationFrame.FRAME_REPEAT_FOREVER = -1;\nAnimationFrame.SEQUENCE_NOT_DEFINED = -1;\nAnimationFrame.POOL_SIZE_LIMIT = 3000;\nAnimationFrame.POOL = [];","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/AnimationFrame.ts"],"names":["AnimationFrame","_id","_x","_y","_repeats","_frameRepeats","_remainingFrameRepeats","_activeSequence","_activeSequenceOffset","_isLastFrame","_isRecycled","allocate","id","x","y","repeats","frameRepeats","isLastFrame","activeSequence","sequenceOffset","frame","POOL","length","pop","FRAME_REPEAT_FOREVER","Math","random","remainingFrameRepeats","k","activeSequenceOffset","recycle","POOL_SIZE_LIMIT","push","SEQUENCE_NOT_DEFINED"],"mappings":"AACA,OAAO,MAAMA,cAAN,CACP;AAAA;AAAA,SAOYC,GAPZ;AAAA,SAQYC,EARZ;AAAA,SASYC,EATZ;AAAA,SAUYC,QAVZ;AAAA,SAWYC,aAXZ;AAAA,SAYYC,sBAZZ;AAAA,SAaYC,eAbZ;AAAA,SAcYC,qBAdZ;AAAA,SAeYC,YAfZ;AAAA,SAgBYC,WAhBZ;AAAA;;AAkB0B,SAARC,QAAQ,CAACC,EAAD,EAAaC,CAAb,EAAwBC,CAAxB,EAAmCC,OAAnC,EAAoDC,YAApD,EAA0EC,WAA1E,EACtB;AAAA,QADsHC,cACtH,uEAD+I,CAAC,CAChJ;AAAA,QADmJC,cACnJ,uEAD4K,CAC5K;AACI,UAAMC,KAAK,GAAIpB,cAAc,CAACqB,IAAf,CAAoBC,MAArB,GAA+BtB,cAAc,CAACqB,IAAf,CAAoBE,GAApB,EAA/B,GAA2D,IAAIvB,cAAJ,EAAzE;AAEA,QAAGe,OAAO,GAAG,CAAb,EAAgBA,OAAO,GAAG,CAAV;AAEhB,QAAGC,YAAY,GAAG,CAAlB,EAAqBA,YAAY,GAAGhB,cAAc,CAACwB,oBAA9B;AAErBJ,IAAAA,KAAK,CAACnB,GAAN,GAAYW,EAAZ;AACAQ,IAAAA,KAAK,CAAClB,EAAN,GAAWW,CAAC,IAAI,CAAhB;AACAO,IAAAA,KAAK,CAACjB,EAAN,GAAWW,CAAC,IAAI,CAAhB;AACAM,IAAAA,KAAK,CAAChB,QAAN,GAAiBW,OAAjB;AACAK,IAAAA,KAAK,CAACf,aAAN,GAAsBW,YAAtB;AACAI,IAAAA,KAAK,CAACd,sBAAN,GAA+BU,YAA/B;AACAI,IAAAA,KAAK,CAACX,YAAN,GAAqBQ,WAArB;AACAG,IAAAA,KAAK,CAACV,WAAN,GAAoB,KAApB;;AAEA,QAAGQ,cAAc,IAAI,CAArB,EACA;AACIE,MAAAA,KAAK,CAACb,eAAN,GAAwBW,cAAxB;AACAE,MAAAA,KAAK,CAACZ,qBAAN,GAA8BW,cAA9B;AACH,KAJD,MAMA;AACIC,MAAAA,KAAK,CAACb,eAAN,GAAwB,CAAC,CAAzB;AACAa,MAAAA,KAAK,CAACZ,qBAAN,GAA8B,CAA9B;AACH;;AAED,WAAOY,KAAP;AACH;;AAEY,MAAFR,EAAE,GACb;AACI,QAAG,KAAKX,GAAL,IAAY,CAAf,EAAkB,OAAO,KAAKA,GAAZ;AAElB,WAAO,CAAE,KAAKA,GAAP,GAAcwB,IAAI,CAACC,MAAL,EAArB;AACH;;AAEW,MAADb,CAAC,GACZ;AACI,WAAO,KAAKX,EAAZ;AACH;;AAEW,MAADY,CAAC,GACZ;AACI,WAAO,KAAKX,EAAZ;AACH;;AAEiB,MAAPY,OAAO,GAClB;AACI,WAAO,KAAKX,QAAZ;AACH;;AAEsB,MAAZY,YAAY,GACvB;AACI,WAAO,KAAKX,aAAZ;AACH;;AAEqB,MAAXY,WAAW,GACtB;AACI,WAAO,KAAKR,YAAZ;AACH;;AAE+B,MAArBkB,qBAAqB,GAChC;AACI,QAAG,KAAKtB,aAAL,GAAqB,CAAxB,EAA2B,OAAOL,cAAc,CAACwB,oBAAtB;AAE3B,WAAO,KAAKlB,sBAAZ;AACH;;AAE+B,MAArBqB,qBAAqB,CAACC,CAAD,EAChC;AACI,QAAGA,CAAC,GAAG,CAAP,EAAUA,CAAC,GAAG,CAAJ;AAEV,QAAI,KAAKvB,aAAL,GAAqB,CAAtB,IAA6BuB,CAAC,GAAG,KAAKvB,aAAzC,EAAyDuB,CAAC,GAAG,KAAKvB,aAAT;AAEzD,SAAKC,sBAAL,GAA8BsB,CAA9B;AACH;;AAEwB,MAAdV,cAAc,GACzB;AACI,WAAO,KAAKX,eAAZ;AACH;;AAE8B,MAApBsB,oBAAoB,GAC/B;AACI,WAAO,KAAKrB,qBAAZ;AACH;;AAEMsB,EAAAA,OAAO,GACd;AACI,QAAG,KAAKpB,WAAR,EAAqB;AAErB,SAAKA,WAAL,GAAmB,IAAnB;AAEA,QAAGV,cAAc,CAACqB,IAAf,CAAoBC,MAApB,GAA6BtB,cAAc,CAAC+B,eAA/C,EAAgE/B,cAAc,CAACqB,IAAf,CAAoBW,IAApB,CAAyB,IAAzB;AACnE;;AAlHL;AADahC,c,CAEKwB,oB,GAA+B,CAAC,C;AAFrCxB,c,CAGKiC,oB,GAA+B,CAAC,C;AAHrCjC,c,CAKM+B,e,GAA0B,I;AALhC/B,c,CAMMqB,I,GAAyB,E","sourcesContent":["\r\nexport class AnimationFrame\r\n{\r\n    public static FRAME_REPEAT_FOREVER: number = -1;\r\n    public static SEQUENCE_NOT_DEFINED: number = -1;\r\n\r\n    private static POOL_SIZE_LIMIT: number = 3000;\r\n    private static POOL: AnimationFrame[] = [];\r\n\r\n    private _id: number;\r\n    private _x: number;\r\n    private _y: number;\r\n    private _repeats: number;\r\n    private _frameRepeats: number;\r\n    private _remainingFrameRepeats: number;\r\n    private _activeSequence: number;\r\n    private _activeSequenceOffset: number;\r\n    private _isLastFrame: boolean;\r\n    private _isRecycled: boolean;\r\n\r\n    public static allocate(id: number, x: number, y: number, repeats: number, frameRepeats: number, isLastFrame: boolean, activeSequence: number = -1, sequenceOffset: number = 0): AnimationFrame\r\n    {\r\n        const frame = (AnimationFrame.POOL.length) ? AnimationFrame.POOL.pop() : new AnimationFrame();\r\n\r\n        if(repeats < 1) repeats = 1;\r\n\r\n        if(frameRepeats < 0) frameRepeats = AnimationFrame.FRAME_REPEAT_FOREVER;\r\n\r\n        frame._id = id;\r\n        frame._x = x || 0;\r\n        frame._y = y || 0;\r\n        frame._repeats = repeats;\r\n        frame._frameRepeats = frameRepeats;\r\n        frame._remainingFrameRepeats = frameRepeats;\r\n        frame._isLastFrame = isLastFrame;\r\n        frame._isRecycled = false;\r\n\r\n        if(activeSequence >= 0)\r\n        {\r\n            frame._activeSequence = activeSequence;\r\n            frame._activeSequenceOffset = sequenceOffset;\r\n        }\r\n        else\r\n        {\r\n            frame._activeSequence = -1;\r\n            frame._activeSequenceOffset = 0;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    public get id(): number\r\n    {\r\n        if(this._id >= 0) return this._id;\r\n\r\n        return -(this._id) * Math.random();\r\n    }\r\n\r\n    public get x(): number\r\n    {\r\n        return this._x;\r\n    }\r\n\r\n    public get y(): number\r\n    {\r\n        return this._y;\r\n    }\r\n\r\n    public get repeats(): number\r\n    {\r\n        return this._repeats;\r\n    }\r\n\r\n    public get frameRepeats(): number\r\n    {\r\n        return this._frameRepeats;\r\n    }\r\n\r\n    public get isLastFrame(): boolean\r\n    {\r\n        return this._isLastFrame;\r\n    }\r\n\r\n    public get remainingFrameRepeats(): number\r\n    {\r\n        if(this._frameRepeats < 0) return AnimationFrame.FRAME_REPEAT_FOREVER;\r\n\r\n        return this._remainingFrameRepeats;\r\n    }\r\n\r\n    public set remainingFrameRepeats(k: number)\r\n    {\r\n        if(k < 0) k = 0;\r\n\r\n        if((this._frameRepeats > 0) && (k > this._frameRepeats)) k = this._frameRepeats;\r\n\r\n        this._remainingFrameRepeats = k;\r\n    }\r\n\r\n    public get activeSequence(): number\r\n    {\r\n        return this._activeSequence;\r\n    }\r\n\r\n    public get activeSequenceOffset(): number\r\n    {\r\n        return this._activeSequenceOffset;\r\n    }\r\n\r\n    public recycle(): void\r\n    {\r\n        if(this._isRecycled) return;\r\n\r\n        this._isRecycled = true;\r\n\r\n        if(AnimationFrame.POOL.length < AnimationFrame.POOL_SIZE_LIMIT) AnimationFrame.POOL.push(this);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}