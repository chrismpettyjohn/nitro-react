{"ast":null,"code":"import { NitroLogger } from '../../../core/common/logger/NitroLogger';\nimport { EventDispatcher } from '../../../core/events/EventDispatcher';\nimport { NitroEvent } from '../../../core/events/NitroEvent';\nexport class AvatarStructureDownload extends EventDispatcher {\n  constructor(downloadUrl, dataReceiver) {\n    super();\n    this._dataReceiver = void 0;\n    this._dataReceiver = dataReceiver;\n    this.download(downloadUrl);\n  }\n\n  download(url) {\n    const request = new XMLHttpRequest();\n\n    try {\n      request.open('GET', url);\n      request.send();\n\n      request.onloadend = e => {\n        const response = request.responseText;\n        if (!response || !response.length) throw new Error('invalid_figure_data');\n        if (this._dataReceiver) this._dataReceiver.appendJSON(JSON.parse(response));\n        this.dispatchEvent(new NitroEvent(AvatarStructureDownload.AVATAR_STRUCTURE_DONE));\n      };\n\n      request.onerror = e => {\n        throw new Error('invalid_avatar_figure_data');\n      };\n    } catch (e) {\n      NitroLogger.log(e);\n    }\n  }\n\n}\nAvatarStructureDownload.AVATAR_STRUCTURE_DONE = 'AVATAR_STRUCTURE_DONE';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/AvatarStructureDownload.ts"],"names":["NitroLogger","EventDispatcher","NitroEvent","AvatarStructureDownload","constructor","downloadUrl","dataReceiver","_dataReceiver","download","url","request","XMLHttpRequest","open","send","onloadend","e","response","responseText","length","Error","appendJSON","JSON","parse","dispatchEvent","AVATAR_STRUCTURE_DONE","onerror","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,yCAA5B;AACA,SAASC,eAAT,QAAgC,sCAAhC;AACA,SAASC,UAAT,QAA2B,iCAA3B;AAGA,OAAO,MAAMC,uBAAN,SAAsCF,eAAtC,CACP;AAKIG,EAAAA,WAAW,CAACC,WAAD,EAAsBC,YAAtB,EACX;AACI;AADJ,SAHQC,aAGR;AAGI,SAAKA,aAAL,GAAqBD,YAArB;AAEA,SAAKE,QAAL,CAAcH,WAAd;AACH;;AAEOG,EAAAA,QAAQ,CAACC,GAAD,EAChB;AACI,UAAMC,OAAO,GAAG,IAAIC,cAAJ,EAAhB;;AAEA,QACA;AACID,MAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBH,GAApB;AAEAC,MAAAA,OAAO,CAACG,IAAR;;AAEAH,MAAAA,OAAO,CAACI,SAAR,GAAoBC,CAAC,IACrB;AACI,cAAMC,QAAQ,GAAGN,OAAO,CAACO,YAAzB;AAEA,YAAG,CAACD,QAAD,IAAa,CAACA,QAAQ,CAACE,MAA1B,EAAkC,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAElC,YAAG,KAAKZ,aAAR,EAAuB,KAAKA,aAAL,CAAmBa,UAAnB,CAA8BC,IAAI,CAACC,KAAL,CAAWN,QAAX,CAA9B;AAEvB,aAAKO,aAAL,CAAmB,IAAIrB,UAAJ,CAAeC,uBAAuB,CAACqB,qBAAvC,CAAnB;AACH,OATD;;AAWAd,MAAAA,OAAO,CAACe,OAAR,GAAkBV,CAAC,IACnB;AACI,cAAM,IAAII,KAAJ,CAAU,4BAAV,CAAN;AACH,OAHD;AAIH,KArBD,CAuBA,OAAOJ,CAAP,EACA;AACIf,MAAAA,WAAW,CAAC0B,GAAZ,CAAgBX,CAAhB;AACH;AACJ;;AA7CL;AADaZ,uB,CAEKqB,qB,GAAgC,uB","sourcesContent":["import { NitroLogger } from '../../../core/common/logger/NitroLogger';\r\nimport { EventDispatcher } from '../../../core/events/EventDispatcher';\r\nimport { NitroEvent } from '../../../core/events/NitroEvent';\r\nimport { IFigureSetData } from './IFigureSetData';\r\n\r\nexport class AvatarStructureDownload extends EventDispatcher\r\n{\r\n    public static AVATAR_STRUCTURE_DONE: string = 'AVATAR_STRUCTURE_DONE';\r\n\r\n    private _dataReceiver: IFigureSetData;\r\n\r\n    constructor(downloadUrl: string, dataReceiver: IFigureSetData)\r\n    {\r\n        super();\r\n\r\n        this._dataReceiver = dataReceiver;\r\n\r\n        this.download(downloadUrl);\r\n    }\r\n\r\n    private download(url: string): void\r\n    {\r\n        const request = new XMLHttpRequest();\r\n\r\n        try\r\n        {\r\n            request.open('GET', url);\r\n\r\n            request.send();\r\n\r\n            request.onloadend = e =>\r\n            {\r\n                const response = request.responseText;\r\n\r\n                if(!response || !response.length) throw new Error('invalid_figure_data');\r\n\r\n                if(this._dataReceiver) this._dataReceiver.appendJSON(JSON.parse(response));\r\n\r\n                this.dispatchEvent(new NitroEvent(AvatarStructureDownload.AVATAR_STRUCTURE_DONE));\r\n            };\r\n\r\n            request.onerror = e =>\r\n            {\r\n                throw new Error('invalid_avatar_figure_data');\r\n            };\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(e);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}