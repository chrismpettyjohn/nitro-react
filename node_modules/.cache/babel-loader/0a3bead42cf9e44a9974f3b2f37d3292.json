{"ast":null,"code":"import { EventDispatcher } from '../../../core/events/EventDispatcher';\nimport { NitroEvent } from '../../../core/events/NitroEvent';\nimport { ProductData } from './ProductData';\nexport class ProductDataLoader extends EventDispatcher {\n  constructor(products) {\n    super();\n    this._products = void 0;\n    this._products = products;\n  }\n\n  dispose() {\n    this._products = null;\n  }\n\n  loadProductData(url) {\n    if (!url) return;\n    fetch(url).then(response => response.json()).then(data => this.onProductDataLoadedEvent(data)).catch(err => this.onProductDataError(err));\n  }\n\n  onProductDataLoadedEvent(data) {\n    if (!data) return;\n    this.parseProducts(data.productdata);\n    this.dispatchEvent(new NitroEvent(ProductDataLoader.PDP_PRODUCT_DATA_READY));\n  }\n\n  onProductDataError(error) {\n    if (!error) return;\n    this.dispatchEvent(new NitroEvent(ProductDataLoader.PDP_PRODUCT_DATA_FAILED));\n  }\n\n  parseProducts(data) {\n    if (!data) return;\n\n    for (const product of data.product) product && this._products.set(product.code, new ProductData(product.code, product.name, product.description));\n  }\n\n}\nProductDataLoader.PDP_PRODUCT_DATA_READY = 'PDP_PRODUCT_DATA_READY';\nProductDataLoader.PDP_PRODUCT_DATA_FAILED = 'PDP_PRODUCT_DATA_FAILED';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/session/product/ProductDataLoader.ts"],"names":["EventDispatcher","NitroEvent","ProductData","ProductDataLoader","constructor","products","_products","dispose","loadProductData","url","fetch","then","response","json","data","onProductDataLoadedEvent","catch","err","onProductDataError","parseProducts","productdata","dispatchEvent","PDP_PRODUCT_DATA_READY","error","PDP_PRODUCT_DATA_FAILED","product","set","code","name","description"],"mappings":"AAAA,SAASA,eAAT,QAAgC,sCAAhC;AACA,SAASC,UAAT,QAA2B,iCAA3B;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,iBAAN,SAAgCH,eAAhC,CACP;AAMII,EAAAA,WAAW,CAACC,QAAD,EACX;AACI;AADJ,SAHQC,SAGR;AAGI,SAAKA,SAAL,GAAiBD,QAAjB;AACH;;AAEME,EAAAA,OAAO,GACd;AACI,SAAKD,SAAL,GAAiB,IAAjB;AACH;;AAEME,EAAAA,eAAe,CAACC,GAAD,EACtB;AACI,QAAG,CAACA,GAAJ,EAAS;AAETC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI,KAAKC,wBAAL,CAA8BD,IAA9B,CAFlB,EAGKE,KAHL,CAGWC,GAAG,IAAI,KAAKC,kBAAL,CAAwBD,GAAxB,CAHlB;AAIH;;AAEOF,EAAAA,wBAAwB,CAACD,IAAD,EAChC;AACI,QAAG,CAACA,IAAJ,EAAU;AAEV,SAAKK,aAAL,CAAmBL,IAAI,CAACM,WAAxB;AAEA,SAAKC,aAAL,CAAmB,IAAIpB,UAAJ,CAAeE,iBAAiB,CAACmB,sBAAjC,CAAnB;AACH;;AAEOJ,EAAAA,kBAAkB,CAACK,KAAD,EAC1B;AACI,QAAG,CAACA,KAAJ,EAAW;AAEX,SAAKF,aAAL,CAAmB,IAAIpB,UAAJ,CAAeE,iBAAiB,CAACqB,uBAAjC,CAAnB;AACH;;AAEOL,EAAAA,aAAa,CAACL,IAAD,EACrB;AACI,QAAG,CAACA,IAAJ,EAAU;;AAEV,SAAI,MAAMW,OAAV,IAAqBX,IAAI,CAACW,OAA1B,EAAoCA,OAAO,IAAI,KAAKnB,SAAL,CAAeoB,GAAf,CAAmBD,OAAO,CAACE,IAA3B,EAAiC,IAAIzB,WAAJ,CAAgBuB,OAAO,CAACE,IAAxB,EAA8BF,OAAO,CAACG,IAAtC,EAA4CH,OAAO,CAACI,WAApD,CAAjC,CAAZ;AACtC;;AAjDL;AADa1B,iB,CAEKmB,sB,GAAiC,wB;AAFtCnB,iB,CAGKqB,uB,GAAkC,yB","sourcesContent":["import { EventDispatcher } from '../../../core/events/EventDispatcher';\r\nimport { NitroEvent } from '../../../core/events/NitroEvent';\r\nimport { IProductData } from './IProductData';\r\nimport { ProductData } from './ProductData';\r\n\r\nexport class ProductDataLoader extends EventDispatcher\r\n{\r\n    public static PDP_PRODUCT_DATA_READY: string = 'PDP_PRODUCT_DATA_READY';\r\n    public static PDP_PRODUCT_DATA_FAILED: string = 'PDP_PRODUCT_DATA_FAILED';\r\n\r\n    private _products: Map<string, IProductData>;\r\n\r\n    constructor(products: Map<string, IProductData>)\r\n    {\r\n        super();\r\n\r\n        this._products = products;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._products = null;\r\n    }\r\n\r\n    public loadProductData(url: string): void\r\n    {\r\n        if(!url) return;\r\n\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => this.onProductDataLoadedEvent(data))\r\n            .catch(err => this.onProductDataError(err));\r\n    }\r\n\r\n    private onProductDataLoadedEvent(data: { [index: string]: any }): void\r\n    {\r\n        if(!data) return;\r\n\r\n        this.parseProducts(data.productdata);\r\n\r\n        this.dispatchEvent(new NitroEvent(ProductDataLoader.PDP_PRODUCT_DATA_READY));\r\n    }\r\n\r\n    private onProductDataError(error: Error): void\r\n    {\r\n        if(!error) return;\r\n\r\n        this.dispatchEvent(new NitroEvent(ProductDataLoader.PDP_PRODUCT_DATA_FAILED));\r\n    }\r\n\r\n    private parseProducts(data: { [index: string]: any }): void\r\n    {\r\n        if(!data) return;\r\n\r\n        for(const product of data.product) (product && this._products.set(product.code, new ProductData(product.code, product.name, product.description)));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}