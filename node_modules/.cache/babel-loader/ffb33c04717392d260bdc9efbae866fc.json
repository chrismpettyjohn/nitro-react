{"ast":null,"code":"import { Disposable } from '../../../core/common/disposable/Disposable';\nexport class RoomObjectLogicBase extends Disposable {\n  constructor() {\n    super();\n    this._events = void 0;\n    this._object = void 0;\n    this._time = void 0;\n    this._object = null;\n    this._events = null;\n    this._time = 0;\n  }\n\n  initialize(data) {\n    return;\n  }\n\n  onDispose() {\n    this._object = null;\n  }\n\n  update(time) {\n    this._time = time;\n    return;\n  }\n\n  processUpdateMessage(message) {\n    if (!message || !this._object) return;\n\n    this._object.setLocation(message.location);\n\n    this._object.setDirection(message.direction);\n  }\n\n  getEventTypes() {\n    return [];\n  }\n\n  mergeTypes(k, _arg_2) {\n    const types = k.concat();\n\n    for (const type of _arg_2) {\n      if (!type || types.indexOf(type) >= 0) continue;\n      types.push(type);\n    }\n\n    return types;\n  }\n\n  mouseEvent(event, geometry) {\n    return;\n  }\n\n  useObject() {\n    return;\n  }\n\n  setObject(object) {\n    if (this._object === object) return;\n\n    if (this._object) {\n      this._object.setLogic(null);\n    }\n\n    if (!object) {\n      this.dispose();\n      this._object = null;\n      return;\n    }\n\n    this._object = object;\n\n    this._object.setLogic(this);\n  }\n\n  tearDown() {\n    return;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  get eventDispatcher() {\n    return this._events;\n  }\n\n  set eventDispatcher(events) {\n    this._events = events;\n  }\n\n  get widget() {\n    return null;\n  }\n\n  get contextMenu() {\n    return null;\n  }\n\n  get time() {\n    return this._time;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/object/logic/RoomObjectLogicBase.ts"],"names":["Disposable","RoomObjectLogicBase","constructor","_events","_object","_time","initialize","data","onDispose","update","time","processUpdateMessage","message","setLocation","location","setDirection","direction","getEventTypes","mergeTypes","k","_arg_2","types","concat","type","indexOf","push","mouseEvent","event","geometry","useObject","setObject","object","setLogic","dispose","tearDown","eventDispatcher","events","widget","contextMenu"],"mappings":"AAAA,SAASA,UAAT,QAA2B,4CAA3B;AAQA,OAAO,MAAMC,mBAAN,SAAkCD,UAAlC,CACP;AAMIE,EAAAA,WAAW,GACX;AACI;AADJ,SANQC,OAMR;AAAA,SALQC,OAKR;AAAA,SAHQC,KAGR;AAGI,SAAKD,OAAL,GAAe,IAAf;AACA,SAAKD,OAAL,GAAe,IAAf;AAEA,SAAKE,KAAL,GAAa,CAAb;AACH;;AAEMC,EAAAA,UAAU,CAACC,IAAD,EACjB;AACI;AACH;;AAESC,EAAAA,SAAS,GACnB;AACI,SAAKJ,OAAL,GAAe,IAAf;AACH;;AAEMK,EAAAA,MAAM,CAACC,IAAD,EACb;AACI,SAAKL,KAAL,GAAaK,IAAb;AAEA;AACH;;AAEMC,EAAAA,oBAAoB,CAACC,OAAD,EAC3B;AACI,QAAG,CAACA,OAAD,IAAY,CAAC,KAAKR,OAArB,EAA8B;;AAE9B,SAAKA,OAAL,CAAaS,WAAb,CAAyBD,OAAO,CAACE,QAAjC;;AACA,SAAKV,OAAL,CAAaW,YAAb,CAA0BH,OAAO,CAACI,SAAlC;AACH;;AAEMC,EAAAA,aAAa,GACpB;AACI,WAAO,EAAP;AACH;;AAESC,EAAAA,UAAU,CAACC,CAAD,EAAcC,MAAd,EACpB;AACI,UAAMC,KAAK,GAAGF,CAAC,CAACG,MAAF,EAAd;;AAEA,SAAI,MAAMC,IAAV,IAAkBH,MAAlB,EACA;AACI,UAAG,CAACG,IAAD,IAAUF,KAAK,CAACG,OAAN,CAAcD,IAAd,KAAuB,CAApC,EAAwC;AAExCF,MAAAA,KAAK,CAACI,IAAN,CAAWF,IAAX;AACH;;AAED,WAAOF,KAAP;AACH;;AAEMK,EAAAA,UAAU,CAACC,KAAD,EAA8BC,QAA9B,EACjB;AACI;AACH;;AAEMC,EAAAA,SAAS,GAChB;AACI;AACH;;AAEMC,EAAAA,SAAS,CAACC,MAAD,EAChB;AACI,QAAG,KAAK3B,OAAL,KAAiB2B,MAApB,EAA4B;;AAE5B,QAAG,KAAK3B,OAAR,EACA;AACI,WAAKA,OAAL,CAAa4B,QAAb,CAAsB,IAAtB;AACH;;AAED,QAAG,CAACD,MAAJ,EACA;AACI,WAAKE,OAAL;AAEA,WAAK7B,OAAL,GAAe,IAAf;AAEA;AACH;;AAED,SAAKA,OAAL,GAAe2B,MAAf;;AACA,SAAK3B,OAAL,CAAa4B,QAAb,CAAsB,IAAtB;AACH;;AAEME,EAAAA,QAAQ,GACf;AACI;AACH;;AAEgB,MAANH,MAAM,GACjB;AACI,WAAO,KAAK3B,OAAZ;AACH;;AAEyB,MAAf+B,eAAe,GAC1B;AACI,WAAO,KAAKhC,OAAZ;AACH;;AAEyB,MAAfgC,eAAe,CAACC,MAAD,EAC1B;AACI,SAAKjC,OAAL,GAAeiC,MAAf;AACH;;AAEgB,MAANC,MAAM,GACjB;AACI,WAAO,IAAP;AACH;;AAEqB,MAAXC,WAAW,GACtB;AACI,WAAO,IAAP;AACH;;AAEc,MAAJ5B,IAAI,GACf;AACI,WAAO,KAAKL,KAAZ;AACH;;AA7HL","sourcesContent":["import { Disposable } from '../../../core/common/disposable/Disposable';\r\nimport { IEventDispatcher } from '../../../core/events/IEventDispatcher';\r\nimport { RoomSpriteMouseEvent } from '../../events/RoomSpriteMouseEvent';\r\nimport { RoomObjectUpdateMessage } from '../../messages/RoomObjectUpdateMessage';\r\nimport { IRoomGeometry } from '../../utils/IRoomGeometry';\r\nimport { IRoomObjectController } from '../IRoomObjectController';\r\nimport { IRoomObjectEventHandler } from './IRoomObjectEventHandler';\r\n\r\nexport class RoomObjectLogicBase extends Disposable implements IRoomObjectEventHandler\r\n{\r\n    private _events: IEventDispatcher;\r\n    private _object: IRoomObjectController;\r\n\r\n    private _time: number;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._object = null;\r\n        this._events = null;\r\n\r\n        this._time = 0;\r\n    }\r\n\r\n    public initialize(data: unknown): void\r\n    {\r\n        return;\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        this._object = null;\r\n    }\r\n\r\n    public update(time: number): void\r\n    {\r\n        this._time = time;\r\n\r\n        return;\r\n    }\r\n\r\n    public processUpdateMessage(message: RoomObjectUpdateMessage): void\r\n    {\r\n        if(!message || !this._object) return;\r\n\r\n        this._object.setLocation(message.location);\r\n        this._object.setDirection(message.direction);\r\n    }\r\n\r\n    public getEventTypes(): string[]\r\n    {\r\n        return [];\r\n    }\r\n\r\n    protected mergeTypes(k: string[], _arg_2: string[]): string[]\r\n    {\r\n        const types = k.concat();\r\n\r\n        for(const type of _arg_2)\r\n        {\r\n            if(!type || (types.indexOf(type) >= 0)) continue;\r\n\r\n            types.push(type);\r\n        }\r\n\r\n        return types;\r\n    }\r\n\r\n    public mouseEvent(event: RoomSpriteMouseEvent, geometry: IRoomGeometry): void\r\n    {\r\n        return;\r\n    }\r\n\r\n    public useObject(): void\r\n    {\r\n        return;\r\n    }\r\n\r\n    public setObject(object: IRoomObjectController): void\r\n    {\r\n        if(this._object === object) return;\r\n\r\n        if(this._object)\r\n        {\r\n            this._object.setLogic(null);\r\n        }\r\n\r\n        if(!object)\r\n        {\r\n            this.dispose();\r\n\r\n            this._object = null;\r\n\r\n            return;\r\n        }\r\n\r\n        this._object = object;\r\n        this._object.setLogic(this);\r\n    }\r\n\r\n    public tearDown(): void\r\n    {\r\n        return;\r\n    }\r\n\r\n    public get object(): IRoomObjectController\r\n    {\r\n        return this._object;\r\n    }\r\n\r\n    public get eventDispatcher(): IEventDispatcher\r\n    {\r\n        return this._events;\r\n    }\r\n\r\n    public set eventDispatcher(events: IEventDispatcher)\r\n    {\r\n        this._events = events;\r\n    }\r\n\r\n    public get widget(): string\r\n    {\r\n        return null;\r\n    }\r\n\r\n    public get contextMenu(): string\r\n    {\r\n        return null;\r\n    }\r\n\r\n    public get time(): number\r\n    {\r\n        return this._time;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}