{"ast":null,"code":"import { Point, Rectangle } from '@pixi/math';\nimport { NitroContainer, NitroSprite } from '../../../core';\nimport { TextureUtils } from '../../utils/TextureUtils';\nimport { RoomObjectSprite } from './RoomObjectSprite';\nexport class RoomObjectSpriteVisualization {\n  constructor() {\n    this._id = void 0;\n    this._object = void 0;\n    this._asset = void 0;\n    this._sprites = void 0;\n    this._scale = void 0;\n    this._updateObjectCounter = void 0;\n    this._updateModelCounter = void 0;\n    this._updateSpriteCounter = void 0;\n    this._id = RoomObjectSpriteVisualization.VISUALIZATION_COUNTER++;\n    this._object = null;\n    this._asset = null;\n    this._sprites = [];\n    this._scale = -1;\n    this._updateObjectCounter = -1;\n    this._updateModelCounter = -1;\n    this._updateSpriteCounter = -1;\n  }\n\n  initialize(data) {\n    return false;\n  }\n\n  update(geometry, time, update, skipUpdate) {\n    return;\n  }\n\n  reset() {\n    this._scale = -1;\n  }\n\n  dispose() {\n    if (this._sprites) {\n      while (this._sprites.length) {\n        const sprite = this._sprites[0];\n        if (sprite) sprite.dispose();\n\n        this._sprites.pop();\n      }\n\n      this._sprites = null;\n    }\n\n    this._object = null;\n    this._asset = null;\n  }\n\n  getSprite(index) {\n    if (index >= 0 && index < this._sprites.length) return this._sprites[index];\n    return null;\n  }\n\n  getSpriteList() {\n    return null;\n  }\n\n  createSprite() {\n    return this.createSpriteAtIndex(this._sprites.length);\n  }\n\n  createSpriteAtIndex(index) {\n    const sprite = new RoomObjectSprite();\n\n    if (index >= this._sprites.length) {\n      this._sprites.push(sprite);\n    } else {\n      this._sprites.splice(index, 0, sprite);\n    }\n\n    return sprite;\n  }\n\n  createSprites(count) {\n    while (this._sprites.length > count) {\n      const sprite = this._sprites[this._sprites.length - 1];\n      if (sprite) sprite.dispose();\n\n      this._sprites.pop();\n    }\n\n    while (this._sprites.length < count) {\n      this._sprites.push(new RoomObjectSprite());\n    }\n  }\n\n  get image() {\n    return this.getImage(0, -1);\n  }\n\n  getImage(bgColor, originalId) {\n    const boundingRectangle = this.getBoundingRectangle();\n    if (boundingRectangle.width * boundingRectangle.height === 0) return null;\n    const spriteCount = this.totalSprites;\n    const spriteList = [];\n    let index = 0;\n\n    while (index < spriteCount) {\n      const objectSprite = this.getSprite(index);\n      if (objectSprite && objectSprite.visible && objectSprite.texture) spriteList.push(objectSprite);\n      index++;\n    }\n\n    spriteList.sort((a, b) => {\n      return b.relativeDepth - a.relativeDepth;\n    });\n    const container = new NitroContainer();\n    index = 0;\n\n    while (index < spriteList.length) {\n      const objectSprite = spriteList[index];\n      const texture = objectSprite.texture;\n\n      if (texture) {\n        const sprite = new NitroSprite(texture);\n        sprite.alpha = objectSprite.alpha / 255;\n        sprite.tint = objectSprite.color;\n        sprite.x = objectSprite.offsetX;\n        sprite.y = objectSprite.offsetY;\n        sprite.blendMode = objectSprite.blendMode;\n        sprite.filters = objectSprite.filters;\n        if (objectSprite.flipH) sprite.scale.x = -1;\n        if (objectSprite.flipV) sprite.scale.y = -1;\n        container.addChild(sprite);\n      }\n\n      index++;\n    }\n\n    const texture = TextureUtils.generateTexture(container);\n    if (!texture) return null;\n    return texture;\n  }\n\n  getBoundingRectangle() {\n    const totalSprites = this.totalSprites;\n    const rectangle = new Rectangle();\n    let iterator = 0;\n\n    while (iterator < totalSprites) {\n      const sprite = this.getSprite(iterator);\n\n      if (sprite && sprite.texture && sprite.visible) {\n        const offsetX = sprite.flipH ? -sprite.width + sprite.offsetX : sprite.offsetX;\n        const offsetY = sprite.flipV ? -sprite.height + sprite.offsetY : sprite.offsetY;\n        const point = new Point(offsetX, offsetY);\n\n        if (iterator === 0) {\n          rectangle.x = point.x;\n          rectangle.y = point.y;\n          rectangle.width = sprite.width;\n          rectangle.height = sprite.height;\n        } else {\n          if (point.x < rectangle.x) rectangle.x = point.x;\n          if (point.y < rectangle.y) rectangle.y = point.y;\n          if (point.x + sprite.width > rectangle.right) rectangle.width = point.x + sprite.width - rectangle.x;\n          if (point.y + sprite.height > rectangle.bottom) rectangle.height = point.y + sprite.height - rectangle.y;\n        }\n      }\n\n      iterator++;\n    }\n\n    return rectangle;\n  }\n\n  get instanceId() {\n    return this._id;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  set object(object) {\n    this._object = object;\n  }\n\n  get asset() {\n    return this._asset;\n  }\n\n  set asset(asset) {\n    if (this._asset) this._asset.removeReference();\n    this._asset = asset;\n    if (this._asset) this._asset.addReference();\n  }\n\n  get sprites() {\n    return this._sprites;\n  }\n\n  get totalSprites() {\n    return this._sprites.length;\n  }\n\n  get updateObjectCounter() {\n    return this._updateObjectCounter;\n  }\n\n  set updateObjectCounter(count) {\n    this._updateObjectCounter = count;\n  }\n\n  get updateModelCounter() {\n    return this._updateModelCounter;\n  }\n\n  set updateModelCounter(count) {\n    this._updateModelCounter = count;\n  }\n\n  get updateSpriteCounter() {\n    return this._updateSpriteCounter;\n  }\n\n  set updateSpriteCounter(count) {\n    this._updateSpriteCounter = count;\n  }\n\n  get spriteCount() {\n    return this._sprites.length;\n  }\n\n}\nRoomObjectSpriteVisualization.VISUALIZATION_COUNTER = 0;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/object/visualization/RoomObjectSpriteVisualization.ts"],"names":["Point","Rectangle","NitroContainer","NitroSprite","TextureUtils","RoomObjectSprite","RoomObjectSpriteVisualization","constructor","_id","_object","_asset","_sprites","_scale","_updateObjectCounter","_updateModelCounter","_updateSpriteCounter","VISUALIZATION_COUNTER","initialize","data","update","geometry","time","skipUpdate","reset","dispose","length","sprite","pop","getSprite","index","getSpriteList","createSprite","createSpriteAtIndex","push","splice","createSprites","count","image","getImage","bgColor","originalId","boundingRectangle","getBoundingRectangle","width","height","spriteCount","totalSprites","spriteList","objectSprite","visible","texture","sort","a","b","relativeDepth","container","alpha","tint","color","x","offsetX","y","offsetY","blendMode","filters","flipH","scale","flipV","addChild","generateTexture","rectangle","iterator","point","right","bottom","instanceId","object","asset","removeReference","addReference","sprites","updateObjectCounter","updateModelCounter","updateSpriteCounter"],"mappings":"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","sourcesContent":["import { RenderTexture } from '@pixi/core';\r\nimport { Point, Rectangle } from '@pixi/math';\r\nimport { NitroContainer, NitroSprite } from '../../../core';\r\nimport { RoomObjectSpriteData } from '../../data/RoomObjectSpriteData';\r\nimport { IRoomGeometry } from '../../utils/IRoomGeometry';\r\nimport { TextureUtils } from '../../utils/TextureUtils';\r\nimport { IRoomObjectController } from '../IRoomObjectController';\r\nimport { IRoomObjectSprite } from './IRoomObjectSprite';\r\nimport { IRoomObjectSpriteVisualization } from './IRoomObjectSpriteVisualization';\r\nimport { IObjectVisualizationData } from './IRoomObjectVisualizationData';\r\nimport { RoomObjectSprite } from './RoomObjectSprite';\r\nimport { IGraphicAssetCollection } from './utils/IGraphicAssetCollection';\r\n\r\nexport class RoomObjectSpriteVisualization implements IRoomObjectSpriteVisualization\r\n{\r\n    private static VISUALIZATION_COUNTER: number = 0;\r\n\r\n    private _id: number;\r\n    private _object: IRoomObjectController;\r\n    private _asset: IGraphicAssetCollection;\r\n    private _sprites: IRoomObjectSprite[];\r\n\r\n    protected _scale: number;\r\n\r\n    private _updateObjectCounter: number;\r\n    private _updateModelCounter: number;\r\n    private _updateSpriteCounter: number;\r\n\r\n    constructor()\r\n    {\r\n        this._id = RoomObjectSpriteVisualization.VISUALIZATION_COUNTER++;\r\n        this._object = null;\r\n        this._asset = null;\r\n        this._sprites = [];\r\n\r\n        this._scale = -1;\r\n\r\n        this._updateObjectCounter = -1;\r\n        this._updateModelCounter = -1;\r\n        this._updateSpriteCounter = -1;\r\n    }\r\n\r\n    public initialize(data: IObjectVisualizationData): boolean\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public update(geometry: IRoomGeometry, time: number, update: boolean, skipUpdate: boolean): void\r\n    {\r\n        return;\r\n    }\r\n\r\n    protected reset(): void\r\n    {\r\n        this._scale = -1;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._sprites)\r\n        {\r\n            while(this._sprites.length)\r\n            {\r\n                const sprite = (this._sprites[0] as RoomObjectSprite);\r\n\r\n                if(sprite) sprite.dispose();\r\n\r\n                this._sprites.pop();\r\n            }\r\n\r\n            this._sprites = null;\r\n        }\r\n\r\n        this._object = null;\r\n        this._asset = null;\r\n    }\r\n\r\n    public getSprite(index: number): IRoomObjectSprite\r\n    {\r\n        if((index >= 0) && (index < this._sprites.length)) return this._sprites[index];\r\n\r\n        return null;\r\n    }\r\n\r\n    public getSpriteList(): RoomObjectSpriteData[]\r\n    {\r\n        return null;\r\n    }\r\n\r\n    public createSprite(): IRoomObjectSprite\r\n    {\r\n        return this.createSpriteAtIndex(this._sprites.length);\r\n    }\r\n\r\n    public createSpriteAtIndex(index: number): IRoomObjectSprite\r\n    {\r\n        const sprite = new RoomObjectSprite();\r\n\r\n        if(index >= this._sprites.length)\r\n        {\r\n            this._sprites.push(sprite);\r\n        }\r\n        else\r\n        {\r\n            this._sprites.splice(index, 0, sprite);\r\n        }\r\n\r\n        return sprite;\r\n    }\r\n\r\n    protected createSprites(count: number): void\r\n    {\r\n        while(this._sprites.length > count)\r\n        {\r\n            const sprite = this._sprites[(this._sprites.length - 1)] as RoomObjectSprite;\r\n\r\n            if(sprite) sprite.dispose();\r\n\r\n            this._sprites.pop();\r\n        }\r\n\r\n        while(this._sprites.length < count)\r\n        {\r\n            this._sprites.push(new RoomObjectSprite());\r\n        }\r\n    }\r\n\r\n    public get image(): RenderTexture\r\n    {\r\n        return this.getImage(0, -1);\r\n    }\r\n\r\n    public getImage(bgColor: number, originalId: number): RenderTexture\r\n    {\r\n        const boundingRectangle = this.getBoundingRectangle();\r\n\r\n        if((boundingRectangle.width * boundingRectangle.height) === 0) return null;\r\n\r\n        const spriteCount = this.totalSprites;\r\n        const spriteList: IRoomObjectSprite[] = [];\r\n\r\n        let index = 0;\r\n\r\n        while(index < spriteCount)\r\n        {\r\n            const objectSprite = this.getSprite(index);\r\n\r\n            if(objectSprite && objectSprite.visible && objectSprite.texture) spriteList.push(objectSprite);\r\n\r\n            index++;\r\n        }\r\n\r\n        spriteList.sort((a, b) =>\r\n        {\r\n            return b.relativeDepth - a.relativeDepth;\r\n        });\r\n\r\n        const container = new NitroContainer();\r\n\r\n        index = 0;\r\n\r\n        while(index < spriteList.length)\r\n        {\r\n            const objectSprite = spriteList[index];\r\n            const texture = objectSprite.texture;\r\n\r\n            if(texture)\r\n            {\r\n                const sprite = new NitroSprite(texture);\r\n\r\n                sprite.alpha = (objectSprite.alpha / 255);\r\n                sprite.tint = objectSprite.color;\r\n                sprite.x = objectSprite.offsetX;\r\n                sprite.y = objectSprite.offsetY;\r\n                sprite.blendMode = objectSprite.blendMode;\r\n                sprite.filters = objectSprite.filters;\r\n\r\n                if(objectSprite.flipH) sprite.scale.x = -1;\r\n\r\n                if(objectSprite.flipV) sprite.scale.y = -1;\r\n\r\n                container.addChild(sprite);\r\n            }\r\n\r\n            index++;\r\n        }\r\n\r\n        const texture = TextureUtils.generateTexture(container);\r\n\r\n        if(!texture) return null;\r\n\r\n        return texture;\r\n    }\r\n\r\n    public getBoundingRectangle(): Rectangle\r\n    {\r\n        const totalSprites = this.totalSprites;\r\n        const rectangle = new Rectangle();\r\n\r\n        let iterator = 0;\r\n\r\n        while(iterator < totalSprites)\r\n        {\r\n            const sprite = this.getSprite(iterator);\r\n\r\n            if(sprite && sprite.texture && sprite.visible)\r\n            {\r\n                const offsetX = ((sprite.flipH) ? (-(sprite.width) + sprite.offsetX) : sprite.offsetX);\r\n                const offsetY = ((sprite.flipV) ? (-(sprite.height) + sprite.offsetY) : sprite.offsetY);\r\n\r\n                const point = new Point(offsetX, offsetY);\r\n\r\n                if(iterator === 0)\r\n                {\r\n                    rectangle.x = point.x;\r\n                    rectangle.y = point.y;\r\n                    rectangle.width = sprite.width;\r\n                    rectangle.height = sprite.height;\r\n                }\r\n                else\r\n                {\r\n                    if(point.x < rectangle.x) rectangle.x = point.x;\r\n\r\n                    if(point.y < rectangle.y) rectangle.y = point.y;\r\n\r\n                    if((point.x + sprite.width) > rectangle.right) rectangle.width = ((point.x + sprite.width) - rectangle.x);\r\n\r\n                    if((point.y + sprite.height) > rectangle.bottom) rectangle.height = ((point.y + sprite.height) - rectangle.y);\r\n                }\r\n            }\r\n\r\n            iterator++;\r\n        }\r\n\r\n        return rectangle;\r\n    }\r\n\r\n    public get instanceId(): number\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get object(): IRoomObjectController\r\n    {\r\n        return this._object;\r\n    }\r\n\r\n    public set object(object: IRoomObjectController)\r\n    {\r\n        this._object = object;\r\n    }\r\n\r\n    public get asset(): IGraphicAssetCollection\r\n    {\r\n        return this._asset;\r\n    }\r\n\r\n    public set asset(asset: IGraphicAssetCollection)\r\n    {\r\n        if(this._asset) this._asset.removeReference();\r\n\r\n        this._asset = asset;\r\n\r\n        if(this._asset) this._asset.addReference();\r\n    }\r\n\r\n    public get sprites(): IRoomObjectSprite[]\r\n    {\r\n        return this._sprites;\r\n    }\r\n\r\n    public get totalSprites(): number\r\n    {\r\n        return this._sprites.length;\r\n    }\r\n\r\n    public get updateObjectCounter(): number\r\n    {\r\n        return this._updateObjectCounter;\r\n    }\r\n\r\n    public set updateObjectCounter(count: number)\r\n    {\r\n        this._updateObjectCounter = count;\r\n    }\r\n\r\n    public get updateModelCounter(): number\r\n    {\r\n        return this._updateModelCounter;\r\n    }\r\n\r\n    public set updateModelCounter(count: number)\r\n    {\r\n        this._updateModelCounter = count;\r\n    }\r\n\r\n    public get updateSpriteCounter(): number\r\n    {\r\n        return this._updateSpriteCounter;\r\n    }\r\n\r\n    public set updateSpriteCounter(count: number)\r\n    {\r\n        this._updateSpriteCounter = count;\r\n    }\r\n\r\n    public get spriteCount(): number\r\n    {\r\n        return this._sprites.length;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}