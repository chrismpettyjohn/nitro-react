{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/room/widgets/room-thumbnail/RoomThumbnailWidgetView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { GetRoomEngine } from '../../../../api';\nimport { LayoutMiniCameraView } from '../../../../common';\nimport { RoomWidgetThumbnailEvent } from '../../../../events';\nimport { UseUiEvent } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RoomThumbnailWidgetView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const {\n    roomSession = null\n  } = useRoomContext();\n  const onNitroEvent = useCallback(event => {\n    switch (event.type) {\n      case RoomWidgetThumbnailEvent.SHOW_THUMBNAIL:\n        setIsVisible(true);\n        return;\n\n      case RoomWidgetThumbnailEvent.HIDE_THUMBNAIL:\n        setIsVisible(false);\n        return;\n\n      case RoomWidgetThumbnailEvent.TOGGLE_THUMBNAIL:\n        setIsVisible(value => !value);\n        return;\n    }\n  }, []);\n  UseUiEvent(RoomWidgetThumbnailEvent.SHOW_THUMBNAIL, onNitroEvent);\n  UseUiEvent(RoomWidgetThumbnailEvent.HIDE_THUMBNAIL, onNitroEvent);\n  UseUiEvent(RoomWidgetThumbnailEvent.TOGGLE_THUMBNAIL, onNitroEvent);\n  const receiveTexture = useCallback(texture => {\n    GetRoomEngine().saveTextureAsScreenshot(texture, true);\n    setIsVisible(false);\n  }, []);\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(LayoutMiniCameraView, {\n    roomId: roomSession.roomId,\n    textureReceiver: receiveTexture,\n    onClose: () => setIsVisible(false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n\n_s(RoomThumbnailWidgetView, \"4YPWgCbFW9CRYGuABn03fAY85Ts=\", false, function () {\n  return [useRoomContext];\n});\n\n_c = RoomThumbnailWidgetView;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomThumbnailWidgetView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/room/widgets/room-thumbnail/RoomThumbnailWidgetView.tsx"],"names":["useCallback","useState","GetRoomEngine","LayoutMiniCameraView","RoomWidgetThumbnailEvent","UseUiEvent","useRoomContext","RoomThumbnailWidgetView","props","isVisible","setIsVisible","roomSession","onNitroEvent","event","type","SHOW_THUMBNAIL","HIDE_THUMBNAIL","TOGGLE_THUMBNAIL","value","receiveTexture","texture","saveTextureAsScreenshot","roomId"],"mappings":";;;AACA,SAAaA,WAAb,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,wBAAT,QAAyC,oBAAzC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,cAAT,QAA+B,mBAA/B;;AAEA,OAAO,MAAMC,uBAA+B,GAAGC,KAAK,IACpD;AAAA;;AACI,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAEU,IAAAA,WAAW,GAAG;AAAhB,MAAyBL,cAAc,EAA7C;AAEA,QAAMM,YAAY,GAAGZ,WAAW,CAAEa,KAAD,IACjC;AACI,YAAOA,KAAK,CAACC,IAAb;AAEI,WAAKV,wBAAwB,CAACW,cAA9B;AACIL,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;;AACJ,WAAKN,wBAAwB,CAACY,cAA9B;AACIN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA;;AACJ,WAAKN,wBAAwB,CAACa,gBAA9B;AACIP,QAAAA,YAAY,CAACQ,KAAK,IAAI,CAACA,KAAX,CAAZ;AACA;AAVR;AAYH,GAd+B,EAc7B,EAd6B,CAAhC;AAgBAb,EAAAA,UAAU,CAACD,wBAAwB,CAACW,cAA1B,EAA0CH,YAA1C,CAAV;AACAP,EAAAA,UAAU,CAACD,wBAAwB,CAACY,cAA1B,EAA0CJ,YAA1C,CAAV;AACAP,EAAAA,UAAU,CAACD,wBAAwB,CAACa,gBAA1B,EAA4CL,YAA5C,CAAV;AAEA,QAAMO,cAAc,GAAGnB,WAAW,CAAEoB,OAAD,IACnC;AACIlB,IAAAA,aAAa,GAAGmB,uBAAhB,CAAwCD,OAAxC,EAAiD,IAAjD;AAEAV,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GALiC,EAK/B,EAL+B,CAAlC;AAOA,MAAG,CAACD,SAAJ,EAAe,OAAO,IAAP;AAEf,sBAAO,QAAC,oBAAD;AAAsB,IAAA,MAAM,EAAGE,WAAW,CAACW,MAA3C;AAAoD,IAAA,eAAe,EAAGH,cAAtE;AAAuF,IAAA,OAAO,EAAG,MAAMT,YAAY,CAAC,KAAD;AAAnH;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAnCM;;GAAMH,uB;UAGsBD,c;;;KAHtBC,uB","sourcesContent":["import { NitroRenderTexture } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useState } from 'react';\nimport { GetRoomEngine } from '../../../../api';\nimport { LayoutMiniCameraView } from '../../../../common';\nimport { RoomWidgetThumbnailEvent } from '../../../../events';\nimport { UseUiEvent } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\n\nexport const RoomThumbnailWidgetView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const { roomSession = null } = useRoomContext();\n\n    const onNitroEvent = useCallback((event: RoomWidgetThumbnailEvent) =>\n    {\n        switch(event.type)\n        {\n            case RoomWidgetThumbnailEvent.SHOW_THUMBNAIL:\n                setIsVisible(true);\n                return;\n            case RoomWidgetThumbnailEvent.HIDE_THUMBNAIL:\n                setIsVisible(false);\n                return;   \n            case RoomWidgetThumbnailEvent.TOGGLE_THUMBNAIL:\n                setIsVisible(value => !value);\n                return;\n        }\n    }, []);\n\n    UseUiEvent(RoomWidgetThumbnailEvent.SHOW_THUMBNAIL, onNitroEvent);\n    UseUiEvent(RoomWidgetThumbnailEvent.HIDE_THUMBNAIL, onNitroEvent);\n    UseUiEvent(RoomWidgetThumbnailEvent.TOGGLE_THUMBNAIL, onNitroEvent);\n\n    const receiveTexture = useCallback((texture: NitroRenderTexture) =>\n    {\n        GetRoomEngine().saveTextureAsScreenshot(texture, true);\n\n        setIsVisible(false);\n    }, []);\n\n    if(!isVisible) return null;\n\n    return <LayoutMiniCameraView roomId={ roomSession.roomId } textureReceiver={ receiveTexture } onClose={ () => setIsVisible(false) } />\n};\n"]},"metadata":{},"sourceType":"module"}