{"ast":null,"code":"import { ActionDefinition } from './ActionDefinition';\nexport class AvatarActionManager {\n  constructor(k, data) {\n    this._assets = void 0;\n    this._actions = void 0;\n    this._defaultAction = void 0;\n    this._assets = k;\n    this._actions = new Map();\n    this._defaultAction = null;\n    this.updateActions(data);\n  }\n\n  updateActions(data) {\n    if (!data) return;\n\n    for (const action of data.actions) {\n      if (!action || !action.state) continue;\n      const definition = new ActionDefinition(action);\n\n      this._actions.set(definition.state, definition);\n    }\n\n    if (data.actionOffsets) this.parseActionOffsets(data.actionOffsets);\n  }\n\n  parseActionOffsets(offsets) {\n    if (!offsets || !offsets.length) return;\n\n    for (const offset of offsets) {\n      const action = this._actions.get(offset.action);\n\n      if (!action) continue;\n\n      for (const canvasOffset of offset.offsets) {\n        const size = canvasOffset.size || '';\n        const direction = canvasOffset.direction;\n        if (size === '' || direction === undefined) continue;\n        const x = canvasOffset.x || 0;\n        const y = canvasOffset.y || 0;\n        const z = canvasOffset.z || 0;\n        action.setOffsets(size, direction, [x, y, z]);\n      }\n    }\n  }\n\n  getActionDefinition(id) {\n    if (!id) return null;\n\n    for (const action of this._actions.values()) {\n      if (!action || action.id !== id) continue;\n      return action;\n    }\n\n    return null;\n  }\n\n  getActionDefinitionWithState(state) {\n    const existing = this._actions.get(state);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  getDefaultAction() {\n    if (this._defaultAction) return this._defaultAction;\n\n    for (const action of this._actions.values()) {\n      if (!action || !action.isDefault) continue;\n      this._defaultAction = action;\n      return action;\n    }\n\n    return null;\n  }\n\n  getCanvasOffsets(k, _arg_2, _arg_3) {\n    let canvasOffsets = [];\n\n    for (const activeAction of k) {\n      if (!activeAction) continue;\n\n      const action = this._actions.get(activeAction.actionType);\n\n      const offsets = action && action.getOffsets(_arg_2, _arg_3);\n      if (offsets) canvasOffsets = offsets;\n    }\n\n    return canvasOffsets;\n  }\n\n  sortActions(actions) {\n    if (!actions) return null;\n    actions = this.filterActions(actions);\n    const validatedActions = [];\n\n    for (const action of actions) {\n      if (!action) continue;\n\n      const definition = this._actions.get(action.actionType);\n\n      if (!definition) continue;\n      action.definition = definition;\n      validatedActions.push(action);\n    }\n\n    validatedActions.sort(this.sortByPrecedence);\n    return validatedActions;\n  }\n\n  filterActions(actions) {\n    let preventions = [];\n    const activeActions = [];\n\n    for (const action of actions) {\n      if (!action) continue;\n\n      const localAction = this._actions.get(action.actionType);\n\n      if (localAction) preventions = preventions.concat(localAction.getPrevents(action.actionParameter));\n    }\n\n    for (const action of actions) {\n      if (!action) continue;\n      let actionType = action.actionType;\n      if (action.actionType === 'fx') actionType = actionType + ('.' + action.actionParameter);\n      if (preventions.indexOf(actionType) >= 0) continue;\n      activeActions.push(action);\n    }\n\n    return activeActions;\n  }\n\n  sortByPrecedence(actionOne, actionTwo) {\n    if (!actionOne || !actionTwo) return 0;\n    const precedenceOne = actionOne.definition.precedence;\n    const precedenceTwo = actionTwo.definition.precedence;\n    if (precedenceOne < precedenceTwo) return 1;\n    if (precedenceOne > precedenceTwo) return -1;\n    return 0;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/actions/AvatarActionManager.ts"],"names":["ActionDefinition","AvatarActionManager","constructor","k","data","_assets","_actions","_defaultAction","Map","updateActions","action","actions","state","definition","set","actionOffsets","parseActionOffsets","offsets","length","offset","get","canvasOffset","size","direction","undefined","x","y","z","setOffsets","getActionDefinition","id","values","getActionDefinitionWithState","existing","getDefaultAction","isDefault","getCanvasOffsets","_arg_2","_arg_3","canvasOffsets","activeAction","actionType","getOffsets","sortActions","filterActions","validatedActions","push","sort","sortByPrecedence","preventions","activeActions","localAction","concat","getPrevents","actionParameter","indexOf","actionOne","actionTwo","precedenceOne","precedence","precedenceTwo"],"mappings":"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","sourcesContent":["import { IAssetManager } from '../../../core/asset/IAssetManager';\r\nimport { ActionDefinition } from './ActionDefinition';\r\nimport { IActiveActionData } from './IActiveActionData';\r\n\r\nexport class AvatarActionManager\r\n{\r\n    private _assets: IAssetManager;\r\n    private _actions: Map<string, ActionDefinition>;\r\n    private _defaultAction: ActionDefinition;\r\n\r\n    constructor(k: IAssetManager, data: any)\r\n    {\r\n        this._assets = k;\r\n        this._actions = new Map();\r\n        this._defaultAction = null;\r\n\r\n        this.updateActions(data);\r\n    }\r\n\r\n    public updateActions(data: any): void\r\n    {\r\n        if(!data) return;\r\n\r\n        for(const action of data.actions)\r\n        {\r\n            if(!action || !action.state) continue;\r\n\r\n            const definition = new ActionDefinition(action);\r\n\r\n            this._actions.set(definition.state, definition);\r\n        }\r\n\r\n        if(data.actionOffsets) this.parseActionOffsets(data.actionOffsets);\r\n    }\r\n\r\n    private parseActionOffsets(offsets: any): void\r\n    {\r\n        if(!offsets || !offsets.length) return;\r\n\r\n        for(const offset of offsets)\r\n        {\r\n            const action = this._actions.get(offset.action);\r\n\r\n            if(!action) continue;\r\n\r\n            for(const canvasOffset of offset.offsets)\r\n            {\r\n                const size = (canvasOffset.size || '');\r\n                const direction = canvasOffset.direction;\r\n\r\n                if((size === '') || (direction === undefined)) continue;\r\n\r\n                const x = (canvasOffset.x || 0);\r\n                const y = (canvasOffset.y || 0);\r\n                const z = (canvasOffset.z || 0);\r\n\r\n                action.setOffsets(size, direction, [ x, y, z ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getActionDefinition(id: string): ActionDefinition\r\n    {\r\n        if(!id) return null;\r\n\r\n        for(const action of this._actions.values())\r\n        {\r\n            if(!action || (action.id !== id)) continue;\r\n\r\n            return action;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getActionDefinitionWithState(state: string): ActionDefinition\r\n    {\r\n        const existing = this._actions.get(state);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getDefaultAction(): ActionDefinition\r\n    {\r\n        if(this._defaultAction) return this._defaultAction;\r\n\r\n        for(const action of this._actions.values())\r\n        {\r\n            if(!action || !action.isDefault) continue;\r\n\r\n            this._defaultAction = action;\r\n\r\n            return action;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getCanvasOffsets(k: IActiveActionData[], _arg_2: string, _arg_3: number): number[]\r\n    {\r\n        let canvasOffsets: number[] = [];\r\n\r\n        for(const activeAction of k)\r\n        {\r\n            if(!activeAction) continue;\r\n\r\n            const action = this._actions.get(activeAction.actionType);\r\n            const offsets = action && action.getOffsets(_arg_2, _arg_3);\r\n\r\n            if(offsets) canvasOffsets = offsets;\r\n        }\r\n\r\n        return canvasOffsets;\r\n    }\r\n\r\n    public sortActions(actions: IActiveActionData[]): IActiveActionData[]\r\n    {\r\n        if(!actions) return null;\r\n\r\n        actions = this.filterActions(actions);\r\n\r\n        const validatedActions: IActiveActionData[] = [];\r\n\r\n        for(const action of actions)\r\n        {\r\n            if(!action) continue;\r\n\r\n            const definition = this._actions.get(action.actionType);\r\n\r\n            if(!definition) continue;\r\n\r\n            action.definition = definition;\r\n\r\n            validatedActions.push(action);\r\n        }\r\n\r\n        validatedActions.sort(this.sortByPrecedence);\r\n\r\n        return validatedActions;\r\n    }\r\n\r\n    private filterActions(actions: IActiveActionData[]): IActiveActionData[]\r\n    {\r\n        let preventions: string[] = [];\r\n        const activeActions: IActiveActionData[] = [];\r\n\r\n        for(const action of actions)\r\n        {\r\n            if(!action) continue;\r\n\r\n            const localAction = this._actions.get(action.actionType);\r\n\r\n            if(localAction) preventions = preventions.concat(localAction.getPrevents(action.actionParameter));\r\n        }\r\n\r\n        for(const action of actions)\r\n        {\r\n            if(!action) continue;\r\n\r\n            let actionType = action.actionType;\r\n\r\n            if(action.actionType === 'fx') actionType = (actionType + ('.' + action.actionParameter));\r\n\r\n            if(preventions.indexOf(actionType) >= 0) continue;\r\n\r\n            activeActions.push(action);\r\n        }\r\n\r\n        return activeActions;\r\n    }\r\n\r\n    private sortByPrecedence(actionOne: IActiveActionData, actionTwo: IActiveActionData): number\r\n    {\r\n        if(!actionOne || !actionTwo) return 0;\r\n\r\n        const precedenceOne = actionOne.definition.precedence;\r\n        const precedenceTwo = actionTwo.definition.precedence;\r\n\r\n        if(precedenceOne < precedenceTwo) return 1;\r\n\r\n        if(precedenceOne > precedenceTwo) return -1;\r\n\r\n        return 0;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}