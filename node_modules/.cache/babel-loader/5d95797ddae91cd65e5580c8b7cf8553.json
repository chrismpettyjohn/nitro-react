{"ast":null,"code":"import { PollChoice } from './PollChoice';\nimport { PollQuestion } from './PollQuestion';\nexport class PollContentsParser {\n  constructor() {\n    this._id = -1;\n    this._startMessage = '';\n    this._endMessage = '';\n    this._numQuestions = 0;\n    this._questionArray = [];\n    this._npsPoll = false;\n  }\n\n  flush() {\n    this._id = -1;\n    this._startMessage = '';\n    this._endMessage = '';\n    this._numQuestions = 0;\n    this._questionArray = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    this._id = wrapper.readInt();\n    this._startMessage = wrapper.readString();\n    this._endMessage = wrapper.readString();\n    this._numQuestions = wrapper.readInt();\n\n    for (let i = 0; i < this._numQuestions; i++) {\n      const question = this.parsePollQuestion(wrapper);\n      const childrenCount = wrapper.readInt();\n\n      for (let j = 0; j < childrenCount; j++) {\n        question.children.push(this.parsePollQuestion(wrapper));\n      }\n\n      this._questionArray.push(question);\n    }\n\n    this._npsPoll = wrapper.readBoolean();\n    return true;\n  }\n\n  parsePollQuestion(k) {\n    const pollQuestion = new PollQuestion();\n    pollQuestion.questionId = k.readInt();\n    pollQuestion.sortOrder = k.readInt();\n    pollQuestion.questionType = k.readInt();\n    pollQuestion.questionText = k.readString();\n    pollQuestion.questionCategory = k.readInt();\n    pollQuestion.questionAnswerType = k.readInt();\n    pollQuestion.questionAnswerCount = k.readInt();\n\n    if (pollQuestion.questionType == 1 || pollQuestion.questionType == 2) {\n      for (let i = 0; i < pollQuestion.questionAnswerCount; i++) {\n        pollQuestion.questionChoices.push(new PollChoice(k.readString(), k.readString(), k.readInt()));\n      }\n    }\n\n    return pollQuestion;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get startMessage() {\n    return this._startMessage;\n  }\n\n  get endMessage() {\n    return this._endMessage;\n  }\n\n  get numQuestions() {\n    return this._numQuestions;\n  }\n\n  get questionArray() {\n    return this._questionArray;\n  }\n\n  get npsPoll() {\n    return this._npsPoll;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/poll/PollContentsParser.ts"],"names":["PollChoice","PollQuestion","PollContentsParser","_id","_startMessage","_endMessage","_numQuestions","_questionArray","_npsPoll","flush","parse","wrapper","readInt","readString","i","question","parsePollQuestion","childrenCount","j","children","push","readBoolean","k","pollQuestion","questionId","sortOrder","questionType","questionText","questionCategory","questionAnswerType","questionAnswerCount","questionChoices","id","startMessage","endMessage","numQuestions","questionArray","npsPoll"],"mappings":"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","sourcesContent":["import { IMessageDataWrapper } from '../../../../../core/communication/messages/IMessageDataWrapper';\r\nimport { IMessageParser } from '../../../../../core/communication/messages/IMessageParser';\r\nimport { PollChoice } from './PollChoice';\r\nimport { PollQuestion } from './PollQuestion';\r\n\r\nexport class PollContentsParser implements IMessageParser\r\n{\r\n    private _id = -1;\r\n    private _startMessage = '';\r\n    private _endMessage = '';\r\n    private _numQuestions = 0;\r\n    private _questionArray:PollQuestion[] = [];\r\n    private _npsPoll = false;\r\n\r\n    flush(): boolean\r\n    {\r\n        this._id = -1;\r\n        this._startMessage = '';\r\n        this._endMessage = '';\r\n        this._numQuestions = 0;\r\n        this._questionArray = [];\r\n        return true;\r\n    }\r\n\r\n    parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        this._id = wrapper.readInt();\r\n        this._startMessage = wrapper.readString();\r\n        this._endMessage = wrapper.readString();\r\n        this._numQuestions = wrapper.readInt();\r\n\r\n        for(let i = 0; i < this._numQuestions; i++)\r\n        {\r\n            const question = this.parsePollQuestion(wrapper);\r\n            const childrenCount = wrapper.readInt();\r\n\r\n            for(let j = 0; j < childrenCount; j++)\r\n            {\r\n                question.children.push(this.parsePollQuestion(wrapper));\r\n            }\r\n\r\n            this._questionArray.push(question);\r\n        }\r\n\r\n        this._npsPoll = wrapper.readBoolean();\r\n        return true;\r\n    }\r\n\r\n    private parsePollQuestion(k:IMessageDataWrapper):PollQuestion\r\n    {\r\n        const pollQuestion = new PollQuestion();\r\n        pollQuestion.questionId = k.readInt();\r\n        pollQuestion.sortOrder = k.readInt();\r\n        pollQuestion.questionType = k.readInt();\r\n        pollQuestion.questionText = k.readString();\r\n        pollQuestion.questionCategory = k.readInt();\r\n        pollQuestion.questionAnswerType = k.readInt();\r\n        pollQuestion.questionAnswerCount = k.readInt();\r\n        if(((pollQuestion.questionType == 1) || (pollQuestion.questionType == 2)))\r\n        {\r\n            for(let i = 0; i < pollQuestion.questionAnswerCount; i++)\r\n            {\r\n                pollQuestion.questionChoices.push(new PollChoice(k.readString(), k.readString(), k.readInt()));\r\n            }\r\n        }\r\n        return pollQuestion;\r\n    }\r\n\r\n    public get id():number\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get startMessage():string\r\n    {\r\n        return this._startMessage;\r\n    }\r\n\r\n    public get endMessage():string\r\n    {\r\n        return this._endMessage;\r\n    }\r\n\r\n    public get numQuestions():number\r\n    {\r\n        return this._numQuestions;\r\n    }\r\n\r\n    public get questionArray():PollQuestion[]\r\n    {\r\n        return this._questionArray;\r\n    }\r\n\r\n    public get npsPoll():boolean\r\n    {\r\n        return this._npsPoll;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}