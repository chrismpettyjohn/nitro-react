{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/draggable-window/DraggableWindow.tsx\",\n    _s = $RefreshSig$();\n\nimport { MouseEventType, TouchEventType } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Base } from '..';\nimport { DraggableWindowPosition } from './DraggableWindowPosition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CURRENT_WINDOWS = [];\nconst POS_MEMORY = new Map();\nconst BOUNDS_THRESHOLD_TOP = 0;\nconst BOUNDS_THRESHOLD_LEFT = 0;\nexport const DraggableWindow = props => {\n  _s();\n\n  const {\n    uniqueKey = null,\n    handleSelector = '.drag-handler',\n    windowPosition = DraggableWindowPosition.CENTER,\n    disableDrag = false,\n    dragStyle = {},\n    children = null,\n    offsetLeft = 0,\n    offsetTop = 0\n  } = props;\n  const [delta, setDelta] = useState(null);\n  const [offset, setOffset] = useState(null);\n  const [start, setStart] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragHandler, setDragHandler] = useState(null);\n  const elementRef = useRef();\n  const bringToTop = useCallback(() => {\n    let zIndex = 400;\n\n    for (const existingWindow of CURRENT_WINDOWS) {\n      zIndex += 1;\n      existingWindow.style.zIndex = zIndex.toString();\n    }\n  }, []);\n  const moveCurrentWindow = useCallback(() => {\n    const index = CURRENT_WINDOWS.indexOf(elementRef.current);\n\n    if (index === -1) {\n      CURRENT_WINDOWS.push(elementRef.current);\n    } else if (index === CURRENT_WINDOWS.length - 1) return;else if (index >= 0) {\n      CURRENT_WINDOWS.splice(index, 1);\n      CURRENT_WINDOWS.push(elementRef.current);\n    }\n\n    bringToTop();\n  }, [bringToTop]);\n  const onMouseDown = useCallback(event => {\n    moveCurrentWindow();\n  }, [moveCurrentWindow]);\n  const onTouchStart = useCallback(event => {\n    moveCurrentWindow();\n  }, [moveCurrentWindow]);\n  const startDragging = useCallback((startX, startY) => {\n    setStart({\n      x: startX,\n      y: startY\n    });\n    setIsDragging(true);\n  }, []);\n  const onDragMouseDown = useCallback(event => {\n    startDragging(event.clientX, event.clientY);\n  }, [startDragging]);\n  const onTouchDown = useCallback(event => {\n    const touch = event.touches[0];\n    startDragging(touch.clientX, touch.clientY);\n  }, [startDragging]);\n  const onDragMouseMove = useCallback(event => {\n    setDelta({\n      x: event.clientX - start.x,\n      y: event.clientY - start.y\n    });\n  }, [start]);\n  const onDragTouchMove = useCallback(event => {\n    const touch = event.touches[0];\n    setDelta({\n      x: touch.clientX - start.x,\n      y: touch.clientY - start.y\n    });\n  }, [start]);\n  const completeDrag = useCallback(() => {\n    if (!elementRef.current || !dragHandler) return;\n    let offsetX = offset.x + delta.x;\n    let offsetY = offset.y + delta.y;\n    const left = elementRef.current.offsetLeft + offsetX;\n    const top = elementRef.current.offsetTop + offsetY;\n\n    if (top < BOUNDS_THRESHOLD_TOP) {\n      offsetY = -elementRef.current.offsetTop;\n    } else if (top + dragHandler.offsetHeight >= document.body.offsetHeight - BOUNDS_THRESHOLD_TOP) {\n      offsetY = document.body.offsetHeight - elementRef.current.offsetHeight - elementRef.current.offsetTop;\n    }\n\n    if (left + elementRef.current.offsetWidth < BOUNDS_THRESHOLD_LEFT) {\n      offsetX = -elementRef.current.offsetLeft;\n    } else if (left >= document.body.offsetWidth - BOUNDS_THRESHOLD_LEFT) {\n      offsetX = document.body.offsetWidth - elementRef.current.offsetWidth - elementRef.current.offsetLeft;\n    }\n\n    setDelta({\n      x: 0,\n      y: 0\n    });\n    setOffset({\n      x: offsetX,\n      y: offsetY\n    });\n    setIsDragging(false);\n    if (uniqueKey !== null) POS_MEMORY.set(uniqueKey, {\n      x: offsetX,\n      y: offsetY\n    });\n  }, [dragHandler, delta, offset, uniqueKey]);\n  const onDragMouseUp = useCallback(event => {\n    completeDrag();\n  }, [completeDrag]);\n  const onDragTouchUp = useCallback(event => {\n    completeDrag();\n  }, [completeDrag]);\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n    CURRENT_WINDOWS.push(element);\n    bringToTop();\n\n    if (!disableDrag) {\n      const handle = element.querySelector(handleSelector);\n      if (handle) setDragHandler(handle);\n    }\n\n    let offsetX = 0;\n    let offsetY = 0;\n\n    switch (windowPosition) {\n      case DraggableWindowPosition.TOP_CENTER:\n        element.style.top = 50 + offsetTop + 'px';\n        element.style.left = `calc(50vw - ${element.offsetWidth / 2 + offsetLeft}px)`;\n        break;\n\n      case DraggableWindowPosition.CENTER:\n        element.style.top = `calc(50vh - ${element.offsetHeight / 2 + offsetTop}px)`;\n        element.style.left = `calc(50vw - ${element.offsetWidth / 2 + offsetLeft}px)`;\n        break;\n\n      case DraggableWindowPosition.TOP_LEFT:\n        element.style.top = 50 + offsetTop + 'px';\n        element.style.left = 50 + offsetLeft + 'px';\n        break;\n    }\n\n    if (uniqueKey !== null) {\n      const memory = POS_MEMORY.get(uniqueKey);\n\n      if (memory) {\n        offsetX = memory.x;\n        offsetY = memory.y;\n      }\n    }\n\n    setDelta({\n      x: 0,\n      y: 0\n    });\n    setOffset({\n      x: offsetX,\n      y: offsetY\n    });\n    return () => {\n      const index = CURRENT_WINDOWS.indexOf(element);\n      if (index >= 0) CURRENT_WINDOWS.splice(index, 1);\n    };\n  }, [handleSelector, windowPosition, uniqueKey, disableDrag, offsetLeft, offsetTop, bringToTop]);\n  useEffect(() => {\n    if (!offset && !delta) return;\n    const element = elementRef.current;\n    if (!element) return;\n    element.style.transform = `translate(${offset.x + delta.x}px, ${offset.y + delta.y}px)`;\n    element.style.visibility = 'visible';\n  }, [offset, delta]);\n  useEffect(() => {\n    if (!dragHandler) return;\n    dragHandler.addEventListener(MouseEventType.MOUSE_DOWN, onDragMouseDown);\n    dragHandler.addEventListener(TouchEventType.TOUCH_START, onTouchDown);\n    return () => {\n      dragHandler.removeEventListener(MouseEventType.MOUSE_DOWN, onDragMouseDown);\n      dragHandler.removeEventListener(TouchEventType.TOUCH_START, onTouchDown);\n    };\n  }, [dragHandler, onDragMouseDown, onTouchDown]);\n  useEffect(() => {\n    if (!isDragging) return;\n    document.addEventListener(MouseEventType.MOUSE_UP, onDragMouseUp);\n    document.addEventListener(TouchEventType.TOUCH_END, onDragTouchUp);\n    document.addEventListener(MouseEventType.MOUSE_MOVE, onDragMouseMove);\n    document.addEventListener(TouchEventType.TOUCH_MOVE, onDragTouchMove);\n    return () => {\n      document.removeEventListener(MouseEventType.MOUSE_UP, onDragMouseUp);\n      document.removeEventListener(TouchEventType.TOUCH_END, onDragTouchUp);\n      document.removeEventListener(MouseEventType.MOUSE_MOVE, onDragMouseMove);\n      document.removeEventListener(TouchEventType.TOUCH_MOVE, onDragTouchMove);\n    };\n  }, [isDragging, onDragMouseUp, onDragMouseMove, onDragTouchUp, onDragTouchMove]);\n  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(Base, {\n    position: \"absolute\",\n    innerRef: elementRef,\n    className: \"draggable-window\",\n    onMouseDownCapture: onMouseDown,\n    onTouchStartCapture: onTouchStart,\n    style: dragStyle,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 13\n  }, this), document.getElementById('draggable-windows-container'));\n};\n\n_s(DraggableWindow, \"crbypTjEQAwggOtLXwhFfBZ/f94=\");\n\n_c = DraggableWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"DraggableWindow\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/draggable-window/DraggableWindow.tsx"],"names":["MouseEventType","TouchEventType","useCallback","useEffect","useRef","useState","createPortal","Base","DraggableWindowPosition","CURRENT_WINDOWS","POS_MEMORY","Map","BOUNDS_THRESHOLD_TOP","BOUNDS_THRESHOLD_LEFT","DraggableWindow","props","uniqueKey","handleSelector","windowPosition","CENTER","disableDrag","dragStyle","children","offsetLeft","offsetTop","delta","setDelta","offset","setOffset","start","setStart","x","y","isDragging","setIsDragging","dragHandler","setDragHandler","elementRef","bringToTop","zIndex","existingWindow","style","toString","moveCurrentWindow","index","indexOf","current","push","length","splice","onMouseDown","event","onTouchStart","startDragging","startX","startY","onDragMouseDown","clientX","clientY","onTouchDown","touch","touches","onDragMouseMove","onDragTouchMove","completeDrag","offsetX","offsetY","left","top","offsetHeight","document","body","offsetWidth","set","onDragMouseUp","onDragTouchUp","element","handle","querySelector","TOP_CENTER","TOP_LEFT","memory","get","transform","visibility","addEventListener","MOUSE_DOWN","TOUCH_START","removeEventListener","MOUSE_UP","TOUCH_END","MOUSE_MOVE","TOUCH_MOVE","getElementById"],"mappings":"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","sourcesContent":["import { MouseEventType, TouchEventType } from '@nitrots/nitro-renderer';\nimport { CSSProperties, FC, Key, MouseEvent as ReactMouseEvent, TouchEvent as ReactTouchEvent, useCallback, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Base } from '..';\nimport { DraggableWindowPosition } from './DraggableWindowPosition';\n\nconst CURRENT_WINDOWS: HTMLElement[] = [];\nconst POS_MEMORY: Map<Key, { x: number, y: number }> = new Map();\nconst BOUNDS_THRESHOLD_TOP: number = 0;\nconst BOUNDS_THRESHOLD_LEFT: number = 0;\n\nexport interface DraggableWindowProps\n{\n    uniqueKey?: Key;\n    handleSelector?: string;\n    windowPosition?: string;\n    disableDrag?: boolean;\n    dragStyle?: CSSProperties;\n    offsetLeft?: number;\n    offsetTop?: number;\n}\n\nexport const DraggableWindow: FC<DraggableWindowProps> = props =>\n{\n    const { uniqueKey = null, handleSelector = '.drag-handler', windowPosition = DraggableWindowPosition.CENTER, disableDrag = false, dragStyle = {}, children = null, offsetLeft = 0, offsetTop = 0 } = props;\n    const [ delta, setDelta ] = useState<{ x: number, y: number }>(null);\n    const [ offset, setOffset ] = useState<{ x: number, y: number }>(null);\n    const [ start, setStart ] = useState<{ x: number, y: number }>({ x: 0, y: 0 });\n    const [ isDragging, setIsDragging ] = useState(false);\n    const [ dragHandler, setDragHandler ] = useState<HTMLElement>(null);\n    const elementRef = useRef<HTMLDivElement>();\n\n    const bringToTop = useCallback(() =>\n    {\n        let zIndex = 400;\n\n        for(const existingWindow of CURRENT_WINDOWS)\n        {\n            zIndex += 1;\n\n            existingWindow.style.zIndex = zIndex.toString();\n        }\n    }, []);\n\n    const moveCurrentWindow = useCallback(() =>\n    {\n        const index = CURRENT_WINDOWS.indexOf(elementRef.current);\n\n        if(index === -1)\n        {\n            CURRENT_WINDOWS.push(elementRef.current);\n        }\n\n        else if(index === (CURRENT_WINDOWS.length - 1)) return;\n\n        else if(index >= 0)\n        {\n            CURRENT_WINDOWS.splice(index, 1);\n\n            CURRENT_WINDOWS.push(elementRef.current);\n        }\n\n        bringToTop();\n    }, [ bringToTop ]);\n\n    const onMouseDown = useCallback((event: ReactMouseEvent<HTMLDivElement>) =>\n    {\n        moveCurrentWindow();\n    }, [ moveCurrentWindow ]);\n\n    const onTouchStart = useCallback((event: ReactTouchEvent<HTMLDivElement>) =>\n    {\n        moveCurrentWindow();\n    }, [ moveCurrentWindow ]);\n\n    const startDragging = useCallback((startX: number, startY: number) =>\n    {\n        setStart({ x: startX, y: startY });\n        setIsDragging(true);\n    }, []);\n\n    const onDragMouseDown = useCallback((event: MouseEvent) =>\n    {\n        startDragging(event.clientX, event.clientY);\n    }, [ startDragging ]);\n\n    const onTouchDown = useCallback((event: TouchEvent) =>\n    {\n        const touch = event.touches[0];\n\n        startDragging(touch.clientX, touch.clientY);\n    }, [ startDragging ]);\n\n    const onDragMouseMove = useCallback((event: MouseEvent) =>\n    {\n        setDelta({ x: (event.clientX - start.x), y: (event.clientY - start.y) });\n    }, [ start ]);\n\n    const onDragTouchMove = useCallback((event: TouchEvent) =>\n    {\n        const touch = event.touches[0];\n\n        setDelta({ x: (touch.clientX - start.x), y: (touch.clientY - start.y) });\n    }, [ start ]);\n\n    const completeDrag = useCallback(() =>\n    {\n        if(!elementRef.current || !dragHandler) return;\n        \n        let offsetX = (offset.x + delta.x);\n        let offsetY = (offset.y + delta.y);\n\n        const left = elementRef.current.offsetLeft + offsetX;\n        const top = elementRef.current.offsetTop + offsetY;\n\n        if(top < BOUNDS_THRESHOLD_TOP)\n        {\n            offsetY = -elementRef.current.offsetTop;\n        }\n\n        else if((top + dragHandler.offsetHeight) >= (document.body.offsetHeight - BOUNDS_THRESHOLD_TOP))\n        {\n            offsetY = (document.body.offsetHeight - elementRef.current.offsetHeight) - elementRef.current.offsetTop;\n        }\n\n        if((left + elementRef.current.offsetWidth) < BOUNDS_THRESHOLD_LEFT)\n        {\n            offsetX = -elementRef.current.offsetLeft;\n        }\n\n        else if(left >= (document.body.offsetWidth - BOUNDS_THRESHOLD_LEFT))\n        {\n            offsetX = (document.body.offsetWidth - elementRef.current.offsetWidth) - elementRef.current.offsetLeft;\n        }\n\n        setDelta({ x: 0, y: 0 });\n        setOffset({ x: offsetX, y: offsetY });\n        setIsDragging(false);\n\n        if(uniqueKey !== null) POS_MEMORY.set(uniqueKey, { x: offsetX, y: offsetY });\n    }, [ dragHandler, delta, offset, uniqueKey ]);\n\n    const onDragMouseUp = useCallback((event: MouseEvent) =>\n    {\n        completeDrag();\n    }, [ completeDrag ]);\n\n    const onDragTouchUp = useCallback((event: TouchEvent) =>\n    {\n        completeDrag();\n    }, [ completeDrag ]);\n\n    useEffect(() =>\n    {\n        const element = (elementRef.current as HTMLElement);\n\n        if(!element) return;\n\n        CURRENT_WINDOWS.push(element);\n\n        bringToTop();\n\n        if(!disableDrag)\n        {\n            const handle = (element.querySelector(handleSelector) as HTMLElement);\n\n            if(handle) setDragHandler(handle);\n        }\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        switch(windowPosition)\n        {\n            case DraggableWindowPosition.TOP_CENTER:\n                element.style.top = 50 + offsetTop + 'px';\n                element.style.left = `calc(50vw - ${ (element.offsetWidth / 2 + offsetLeft) }px)`;\n                break;\n            case DraggableWindowPosition.CENTER:\n                element.style.top = `calc(50vh - ${ (element.offsetHeight / 2) + offsetTop }px)`;\n                element.style.left = `calc(50vw - ${ (element.offsetWidth / 2) + offsetLeft }px)`;\n                break;\n            case DraggableWindowPosition.TOP_LEFT:\n                element.style.top = 50 + offsetTop + 'px';\n                element.style.left = 50 + offsetLeft + 'px';\n                break;\n        }\n\n        if(uniqueKey !== null)\n        {\n            const memory = POS_MEMORY.get(uniqueKey);\n\n            if(memory)\n            {\n                offsetX = memory.x;\n                offsetY = memory.y;\n            }\n        }\n\n        setDelta({ x: 0, y: 0 });\n        setOffset({ x: offsetX, y: offsetY });\n\n        return () =>\n        {\n            const index = CURRENT_WINDOWS.indexOf(element);\n\n            if(index >= 0) CURRENT_WINDOWS.splice(index, 1);\n        }\n    }, [ handleSelector, windowPosition, uniqueKey, disableDrag, offsetLeft, offsetTop, bringToTop ]);\n\n    useEffect(() =>\n    {\n        if(!offset && !delta) return;\n        \n        const element = (elementRef.current as HTMLElement);\n\n        if(!element) return;\n\n        element.style.transform = `translate(${ offset.x + delta.x }px, ${ offset.y + delta.y }px)`;\n        element.style.visibility = 'visible';\n    }, [ offset, delta ]);\n\n    useEffect(() =>\n    {\n        if(!dragHandler) return;\n\n        dragHandler.addEventListener(MouseEventType.MOUSE_DOWN, onDragMouseDown);\n        dragHandler.addEventListener(TouchEventType.TOUCH_START, onTouchDown);\n\n        return () =>\n        {\n            dragHandler.removeEventListener(MouseEventType.MOUSE_DOWN, onDragMouseDown);\n            dragHandler.removeEventListener(TouchEventType.TOUCH_START, onTouchDown);\n        }\n    }, [ dragHandler, onDragMouseDown, onTouchDown ]);\n\n    useEffect(() =>\n    {\n        if(!isDragging) return;\n\n        document.addEventListener(MouseEventType.MOUSE_UP, onDragMouseUp);\n        document.addEventListener(TouchEventType.TOUCH_END, onDragTouchUp);\n        document.addEventListener(MouseEventType.MOUSE_MOVE, onDragMouseMove);\n        document.addEventListener(TouchEventType.TOUCH_MOVE, onDragTouchMove);\n\n        return () =>\n        {\n            document.removeEventListener(MouseEventType.MOUSE_UP, onDragMouseUp);\n            document.removeEventListener(TouchEventType.TOUCH_END, onDragTouchUp);\n            document.removeEventListener(MouseEventType.MOUSE_MOVE, onDragMouseMove);\n            document.removeEventListener(TouchEventType.TOUCH_MOVE, onDragTouchMove);\n        }\n    }, [ isDragging, onDragMouseUp, onDragMouseMove, onDragTouchUp, onDragTouchMove ]);\n\n    return (\n        createPortal(\n            <Base position=\"absolute\" innerRef={ elementRef } className=\"draggable-window\" onMouseDownCapture={ onMouseDown } onTouchStartCapture={ onTouchStart } style={ dragStyle }>\n                { children }\n            </Base>, document.getElementById('draggable-windows-container'))\n    );\n}\n"]},"metadata":{},"sourceType":"module"}