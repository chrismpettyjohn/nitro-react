{"ast":null,"code":"import { Matrix, Point } from '@pixi/math';\nimport { PlaneMask } from './PlaneMask';\nimport { PlaneMaskVisualization } from './PlaneMaskVisualization';\nexport class PlaneMaskManager {\n  constructor() {\n    this._assetCollection = void 0;\n    this._masks = void 0;\n    this._data = void 0;\n    this._assetCollection = null;\n    this._masks = new Map();\n    this._data = null;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  dispose() {\n    this._assetCollection = null;\n    this._data = null;\n\n    if (this._masks && this._masks.size) {\n      for (const mask of this._masks.values()) {\n        if (!mask) continue;\n        mask.dispose();\n      }\n\n      this._masks.clear();\n    }\n  }\n\n  initialize(k) {\n    this._data = k;\n  }\n\n  initializeAssetCollection(k) {\n    if (!this.data) return;\n    this._assetCollection = k;\n    this.parseMasks(this.data, k);\n  }\n\n  parseMasks(k, _arg_2) {\n    if (!k || !_arg_2) return;\n\n    if (k.masks && k.masks.length) {\n      let index = 0;\n\n      while (index < k.masks.length) {\n        const mask = k.masks[index];\n\n        if (mask) {\n          const id = mask.id;\n\n          const existing = this._masks.get(id);\n\n          if (existing) continue;\n          const newMask = new PlaneMask();\n\n          if (mask.visualizations && mask.visualizations.length) {\n            let visualIndex = 0;\n\n            while (visualIndex < mask.visualizations.length) {\n              const visualization = mask.visualizations[visualIndex];\n\n              if (visualization) {\n                const size = visualization.size;\n                const maskVisualization = newMask.createMaskVisualization(size);\n\n                if (maskVisualization) {\n                  const assetName = this.parseMaskBitmaps(visualization.bitmaps, maskVisualization, _arg_2);\n                  newMask.setAssetName(size, assetName);\n                }\n              }\n\n              visualIndex++;\n            }\n          }\n\n          this._masks.set(id, newMask);\n        }\n\n        index++;\n      }\n    }\n  }\n\n  parseMaskBitmaps(k, _arg_2, _arg_3) {\n    if (!k || !k.length) return null;\n    let graphicName = null;\n\n    for (const bitmap of k) {\n      if (!bitmap) continue;\n      const assetName = bitmap.assetName;\n\n      const asset = _arg_3.getAsset(assetName);\n\n      if (!asset) continue;\n      let normalMinX = PlaneMaskVisualization.MIN_NORMAL_COORDINATE_VALUE;\n      let normalMaxX = PlaneMaskVisualization.MAX_NORMAL_COORDINATE_VALUE;\n      let normalMinY = PlaneMaskVisualization.MIN_NORMAL_COORDINATE_VALUE;\n      let normalMaxY = PlaneMaskVisualization.MAX_NORMAL_COORDINATE_VALUE;\n      if (bitmap.normalMinX !== undefined) normalMinX = bitmap.normalMinX;\n      if (bitmap.normalMaxX !== undefined) normalMaxX = bitmap.normalMaxX;\n      if (bitmap.normalMinY !== undefined) normalMinY = bitmap.normalMinY;\n      if (bitmap.normalMaxY !== undefined) normalMaxY = bitmap.normalMaxY;\n      if (!asset.flipH) graphicName = assetName;\n\n      _arg_2.addBitmap(asset, normalMinX, normalMaxX, normalMinY, normalMaxY);\n    }\n\n    return graphicName;\n  }\n\n  updateMask(k, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6) {\n    const mask = this._masks.get(_arg_2);\n\n    if (!mask) return true;\n    const asset = mask.getGraphicAsset(_arg_3, _arg_4);\n    if (!asset) return true;\n    const texture = asset.texture;\n    if (!texture) return true;\n    const point = new Point(_arg_5 + asset.offsetX, _arg_6 + asset.offsetY);\n    const matrix = new Matrix();\n    let a = 1;\n    let b = 1;\n    let c = 0;\n    let d = 0;\n\n    if (asset.flipH) {\n      a = -1;\n      c = -texture.width;\n    }\n\n    if (asset.flipV) {\n      b = -1;\n      d = -texture.height;\n    }\n\n    matrix.scale(a, b);\n    matrix.translate(point.x + c, point.y + d);\n    k.beginTextureFill({\n      texture,\n      matrix\n    }).drawRect(matrix.tx, matrix.ty, texture.width, texture.height).endFill();\n    return true;\n  }\n\n  getMask(k) {\n    if (!this._masks || !this._masks.size) return null;\n    return this._masks.get(k) || null;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/mask/PlaneMaskManager.ts"],"names":["Matrix","Point","PlaneMask","PlaneMaskVisualization","PlaneMaskManager","constructor","_assetCollection","_masks","_data","Map","data","dispose","size","mask","values","clear","initialize","k","initializeAssetCollection","parseMasks","_arg_2","masks","length","index","id","existing","get","newMask","visualizations","visualIndex","visualization","maskVisualization","createMaskVisualization","assetName","parseMaskBitmaps","bitmaps","setAssetName","set","_arg_3","graphicName","bitmap","asset","getAsset","normalMinX","MIN_NORMAL_COORDINATE_VALUE","normalMaxX","MAX_NORMAL_COORDINATE_VALUE","normalMinY","normalMaxY","undefined","flipH","addBitmap","updateMask","_arg_4","_arg_5","_arg_6","getGraphicAsset","texture","point","offsetX","offsetY","matrix","a","b","c","d","width","flipV","height","scale","translate","x","y","beginTextureFill","drawRect","tx","ty","endFill","getMask"],"mappings":"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","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { Matrix, Point } from '@pixi/math';\r\nimport { IGraphicAssetCollection } from '../../../../../../room/object/visualization/utils/IGraphicAssetCollection';\r\nimport { IVector3D } from '../../../../../../room/utils/IVector3D';\r\nimport { PlaneMask } from './PlaneMask';\r\nimport { PlaneMaskVisualization } from './PlaneMaskVisualization';\r\n\r\nexport class PlaneMaskManager\r\n{\r\n    private _assetCollection: IGraphicAssetCollection;\r\n    private _masks: Map<string, PlaneMask>;\r\n    private _data: any;\r\n\r\n    constructor()\r\n    {\r\n        this._assetCollection = null;\r\n        this._masks = new Map();\r\n        this._data = null;\r\n    }\r\n\r\n    public get data(): any\r\n    {\r\n        return this._data;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._assetCollection = null;\r\n        this._data = null;\r\n\r\n        if(this._masks && this._masks.size)\r\n        {\r\n            for(const mask of this._masks.values())\r\n            {\r\n                if(!mask) continue;\r\n\r\n                mask.dispose();\r\n            }\r\n\r\n            this._masks.clear();\r\n        }\r\n    }\r\n\r\n    public initialize(k: any): void\r\n    {\r\n        this._data = k;\r\n    }\r\n\r\n    public initializeAssetCollection(k: IGraphicAssetCollection): void\r\n    {\r\n        if(!this.data) return;\r\n\r\n        this._assetCollection = k;\r\n\r\n        this.parseMasks(this.data, k);\r\n    }\r\n\r\n    private parseMasks(k: any, _arg_2: IGraphicAssetCollection): void\r\n    {\r\n        if(!k || !_arg_2) return;\r\n\r\n        if(k.masks && k.masks.length)\r\n        {\r\n            let index = 0;\r\n\r\n            while(index < k.masks.length)\r\n            {\r\n                const mask = k.masks[index];\r\n\r\n                if(mask)\r\n                {\r\n                    const id = mask.id;\r\n                    const existing = this._masks.get(id);\r\n\r\n                    if(existing) continue;\r\n\r\n                    const newMask = new PlaneMask();\r\n\r\n                    if(mask.visualizations && mask.visualizations.length)\r\n                    {\r\n                        let visualIndex = 0;\r\n\r\n                        while(visualIndex < mask.visualizations.length)\r\n                        {\r\n                            const visualization = mask.visualizations[visualIndex];\r\n\r\n                            if(visualization)\r\n                            {\r\n                                const size = visualization.size as number;\r\n                                const maskVisualization = newMask.createMaskVisualization(size);\r\n\r\n                                if(maskVisualization)\r\n                                {\r\n                                    const assetName = this.parseMaskBitmaps(visualization.bitmaps, maskVisualization, _arg_2);\r\n\r\n                                    newMask.setAssetName(size, assetName);\r\n                                }\r\n                            }\r\n\r\n                            visualIndex++;\r\n                        }\r\n                    }\r\n\r\n                    this._masks.set(id, newMask);\r\n                }\r\n\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private parseMaskBitmaps(k: any, _arg_2: PlaneMaskVisualization, _arg_3: IGraphicAssetCollection): string\r\n    {\r\n        if(!k || !k.length) return null;\r\n\r\n        let graphicName: string = null;\r\n\r\n        for(const bitmap of k)\r\n        {\r\n            if(!bitmap) continue;\r\n\r\n            const assetName = bitmap.assetName;\r\n            const asset = _arg_3.getAsset(assetName);\r\n\r\n            if(!asset) continue;\r\n\r\n            let normalMinX = PlaneMaskVisualization.MIN_NORMAL_COORDINATE_VALUE;\r\n            let normalMaxX = PlaneMaskVisualization.MAX_NORMAL_COORDINATE_VALUE;\r\n            let normalMinY = PlaneMaskVisualization.MIN_NORMAL_COORDINATE_VALUE;\r\n            let normalMaxY = PlaneMaskVisualization.MAX_NORMAL_COORDINATE_VALUE;\r\n\r\n            if(bitmap.normalMinX !== undefined) normalMinX = bitmap.normalMinX;\r\n            if(bitmap.normalMaxX !== undefined) normalMaxX = bitmap.normalMaxX;\r\n            if(bitmap.normalMinY !== undefined) normalMinY = bitmap.normalMinY;\r\n            if(bitmap.normalMaxY !== undefined) normalMaxY = bitmap.normalMaxY;\r\n\r\n            if(!asset.flipH) graphicName = assetName;\r\n\r\n            _arg_2.addBitmap(asset, normalMinX, normalMaxX, normalMinY, normalMaxY);\r\n        }\r\n\r\n        return graphicName;\r\n    }\r\n\r\n    public updateMask(k: Graphics, _arg_2: string, _arg_3: number, _arg_4: IVector3D, _arg_5: number, _arg_6: number): boolean\r\n    {\r\n        const mask = this._masks.get(_arg_2);\r\n\r\n        if(!mask) return true;\r\n\r\n        const asset = mask.getGraphicAsset(_arg_3, _arg_4);\r\n\r\n        if(!asset) return true;\r\n\r\n        const texture = asset.texture;\r\n\r\n        if(!texture) return true;\r\n\r\n        const point = new Point((_arg_5 + asset.offsetX), (_arg_6 + asset.offsetY));\r\n\r\n        const matrix = new Matrix();\r\n\r\n        let a = 1;\r\n        let b = 1;\r\n        let c = 0;\r\n        let d = 0;\r\n\r\n        if(asset.flipH)\r\n        {\r\n            a = -1;\r\n            c = -(texture.width);\r\n        }\r\n\r\n        if(asset.flipV)\r\n        {\r\n            b = -1;\r\n            d = -(texture.height);\r\n        }\r\n\r\n        matrix.scale(a, b);\r\n        matrix.translate((point.x + c), (point.y + d));\r\n\r\n        k\r\n            .beginTextureFill({ texture, matrix })\r\n            .drawRect(matrix.tx, matrix.ty, texture.width, texture.height)\r\n            .endFill();\r\n\r\n        return true;\r\n    }\r\n\r\n    public getMask(k: string): PlaneMask\r\n    {\r\n        if(!this._masks || !this._masks.size) return null;\r\n\r\n        return this._masks.get(k) || null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}