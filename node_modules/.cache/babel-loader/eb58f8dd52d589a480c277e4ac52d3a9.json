{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { PetAddedToInventoryEvent, PetInventoryEvent, PetRemovedFromInventory, RequestPetsComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryUnseenTracker } from '.';\nimport { UseMessageEventHook } from '..';\nimport { addSinglePetItem, mergePetFragments, processPetFragment, removePetItemById, SendMessageComposer, UnseenItemCategory } from '../../api';\nimport { useSharedVisibility } from '../useSharedVisibility';\nlet petMsgFragments = null;\n\nconst useInventoryPetsState = () => {\n  _s();\n\n  const [needsUpdate, setNeedsUpdate] = useState(true);\n  const [petItems, setPetItems] = useState([]);\n  const [selectedPet, setSelectedPet] = useState(null);\n  const {\n    isVisible = false,\n    activate = null,\n    deactivate = null\n  } = useSharedVisibility();\n  const {\n    isUnseen = null,\n    resetCategory = null\n  } = useInventoryUnseenTracker();\n  const onPetInventoryEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!petMsgFragments) petMsgFragments = new Array(parser.totalFragments);\n    const fragment = mergePetFragments(parser.fragment, parser.totalFragments, parser.fragmentNumber, petMsgFragments);\n    if (!fragment) return;\n    setPetItems(prevValue => {\n      const newValue = [...prevValue];\n      processPetFragment(newValue, fragment, isUnseen);\n      return newValue;\n    });\n    petMsgFragments = null;\n  }, [isUnseen]);\n  UseMessageEventHook(PetInventoryEvent, onPetInventoryEvent);\n  const onPetAddedToInventoryEvent = useCallback(event => {\n    const parser = event.getParser();\n    setPetItems(prevValue => {\n      const newValue = [...prevValue];\n      addSinglePetItem(parser.pet, newValue, isUnseen(UnseenItemCategory.PET, parser.pet.id));\n      return newValue;\n    });\n  }, [isUnseen]);\n  UseMessageEventHook(PetAddedToInventoryEvent, onPetAddedToInventoryEvent);\n  const onPetRemovedFromInventory = useCallback(event => {\n    const parser = event.getParser();\n    setPetItems(prevValue => {\n      const newValue = [...prevValue];\n      removePetItemById(parser.petId, newValue);\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(PetRemovedFromInventory, onPetRemovedFromInventory);\n  useEffect(() => {\n    if (!petItems || !petItems.length) return;\n    setSelectedPet(prevValue => {\n      let newValue = prevValue;\n      if (newValue && petItems.indexOf(newValue) === -1) newValue = null;\n      if (!newValue) newValue = petItems[0];\n      return newValue;\n    });\n  }, [petItems]);\n  useEffect(() => {\n    if (!isVisible) return;\n    return () => {\n      resetCategory(UnseenItemCategory.PET);\n    };\n  }, [isVisible, resetCategory]);\n  useEffect(() => {\n    if (!isVisible || !needsUpdate) return;\n    SendMessageComposer(new RequestPetsComposer());\n    setNeedsUpdate(false);\n  }, [isVisible, needsUpdate]);\n  return {\n    petItems,\n    selectedPet,\n    setSelectedPet,\n    activate,\n    deactivate\n  };\n};\n\n_s(useInventoryPetsState, \"RLpz6GlZMcPqyzb5A1dNQv8tyLg=\", false, function () {\n  return [useSharedVisibility, useInventoryUnseenTracker];\n});\n\nexport const useInventoryPets = () => {\n  _s2();\n\n  return useBetween(useInventoryPetsState);\n};\n\n_s2(useInventoryPets, \"diiQ3+ccnY3J9PmIrayiMDIOaiY=\", false, function () {\n  return [useBetween];\n});","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/hooks/inventory/useInventoryPets.ts"],"names":["PetAddedToInventoryEvent","PetInventoryEvent","PetRemovedFromInventory","RequestPetsComposer","useCallback","useEffect","useState","useBetween","useInventoryUnseenTracker","UseMessageEventHook","addSinglePetItem","mergePetFragments","processPetFragment","removePetItemById","SendMessageComposer","UnseenItemCategory","useSharedVisibility","petMsgFragments","useInventoryPetsState","needsUpdate","setNeedsUpdate","petItems","setPetItems","selectedPet","setSelectedPet","isVisible","activate","deactivate","isUnseen","resetCategory","onPetInventoryEvent","event","parser","getParser","Array","totalFragments","fragment","fragmentNumber","prevValue","newValue","onPetAddedToInventoryEvent","pet","PET","id","onPetRemovedFromInventory","petId","length","indexOf","useInventoryPets"],"mappings":"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","sourcesContent":["import { PetAddedToInventoryEvent, PetData, PetInventoryEvent, PetRemovedFromInventory, RequestPetsComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryUnseenTracker } from '.';\nimport { UseMessageEventHook } from '..';\nimport { addSinglePetItem, IPetItem, mergePetFragments, processPetFragment, removePetItemById, SendMessageComposer, UnseenItemCategory } from '../../api';\nimport { useSharedVisibility } from '../useSharedVisibility';\n\nlet petMsgFragments: Map<number, PetData>[] = null;\n\nconst useInventoryPetsState = () =>\n{\n    const [ needsUpdate, setNeedsUpdate ] = useState(true);\n    const [ petItems, setPetItems ] = useState<IPetItem[]>([]);\n    const [ selectedPet, setSelectedPet ] = useState<IPetItem>(null);\n    const { isVisible = false, activate = null, deactivate = null } = useSharedVisibility();\n    const { isUnseen = null, resetCategory = null } = useInventoryUnseenTracker();\n\n    const onPetInventoryEvent = useCallback((event: PetInventoryEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!petMsgFragments) petMsgFragments = new Array(parser.totalFragments);\n\n        const fragment = mergePetFragments(parser.fragment, parser.totalFragments, parser.fragmentNumber, petMsgFragments);\n\n        if(!fragment) return;\n\n        setPetItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            processPetFragment(newValue, fragment, isUnseen);\n\n            return newValue;\n        });\n\n        petMsgFragments = null;\n    }, [ isUnseen ]);\n\n    UseMessageEventHook(PetInventoryEvent, onPetInventoryEvent);\n\n    const onPetAddedToInventoryEvent = useCallback((event: PetAddedToInventoryEvent) =>\n    {\n        const parser = event.getParser();\n\n        setPetItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            addSinglePetItem(parser.pet, newValue, isUnseen(UnseenItemCategory.PET, parser.pet.id));\n\n            return newValue;\n        });\n    }, [ isUnseen ]);\n\n    UseMessageEventHook(PetAddedToInventoryEvent, onPetAddedToInventoryEvent);\n\n    const onPetRemovedFromInventory = useCallback((event: PetRemovedFromInventory) =>\n    {\n        const parser = event.getParser();\n\n        setPetItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            removePetItemById(parser.petId, newValue);\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(PetRemovedFromInventory, onPetRemovedFromInventory);\n\n    useEffect(() =>\n    {\n        if(!petItems || !petItems.length) return;\n\n        setSelectedPet(prevValue =>\n        {\n            let newValue = prevValue;\n\n            if(newValue && (petItems.indexOf(newValue) === -1)) newValue = null;\n\n            if(!newValue) newValue = petItems[0];\n\n            return newValue;\n        });\n    }, [ petItems ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible) return;\n\n        return () =>\n        {\n            resetCategory(UnseenItemCategory.PET);\n        }\n    }, [ isVisible, resetCategory ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible || !needsUpdate) return;\n\n        SendMessageComposer(new RequestPetsComposer());\n\n        setNeedsUpdate(false);\n    }, [ isVisible, needsUpdate ]);\n\n    return { petItems, selectedPet, setSelectedPet, activate, deactivate };\n}\n\nexport const useInventoryPets = () => useBetween(useInventoryPetsState);\n"]},"metadata":{},"sourceType":"module"}