{"ast":null,"code":"import { ColorData } from '../data/ColorData';\nimport { LayerData } from '../data/LayerData';\nimport { SizeData } from '../data/SizeData';\nexport class FurnitureVisualizationData {\n  constructor() {\n    this._type = void 0;\n    this._sizes = void 0;\n    this._sizeDatas = void 0;\n    this._lastSize = void 0;\n    this._lastSizeScale = void 0;\n    this._lastSizeData = void 0;\n    this._lastSizeDataScale = void 0;\n    this._type = '';\n    this._sizes = [];\n    this._sizeDatas = new Map();\n    this._lastSize = -1;\n    this._lastSizeScale = -1;\n    this._lastSizeData = null;\n    this._lastSizeDataScale = -1;\n  }\n\n  initialize(asset) {\n    this.reset();\n    if (!asset) return false;\n    this._type = asset.name;\n\n    if (!this.defineVisualizations(asset.visualizations)) {\n      this.reset();\n      return false;\n    }\n\n    return true;\n  }\n\n  dispose() {\n    if (this._sizeDatas && this._sizeDatas.size) {\n      for (const size of this._sizeDatas.values()) size && size.dispose();\n\n      this._sizeDatas = null;\n    }\n\n    this._lastSizeData = null;\n    this._sizes = null;\n  }\n\n  reset() {\n    this._type = '';\n\n    if (this._sizeDatas && this._sizeDatas.size) {\n      for (const size of this._sizeDatas.values()) size && size.dispose();\n    }\n\n    this._sizeDatas.clear();\n\n    this._sizes = [];\n    this._lastSizeData = null;\n    this._lastSizeDataScale = -1;\n  }\n\n  createSizeData(scale, layerCount, angle) {\n    return new SizeData(layerCount, angle);\n  }\n\n  defineVisualizations(visualizations) {\n    if (!visualizations) return false;\n\n    for (const visualizationId in visualizations) {\n      const visualization = visualizations[visualizationId];\n      const layerCount = visualization.layerCount;\n      const angle = visualization.angle;\n      let size = visualization.size;\n      if (size < 1) size = 1;\n      if (this._sizeDatas.get(size)) return false;\n      const sizeData = this.createSizeData(size, layerCount, angle);\n      if (!sizeData) return false;\n\n      for (const key in visualization) {\n        //@ts-ignore\n        const data = visualization[key];\n\n        if (!this.processVisualElement(sizeData, key, data)) {\n          sizeData.dispose();\n          return false;\n        }\n      }\n\n      this._sizeDatas.set(size, sizeData);\n\n      this._sizes.push(size);\n    }\n\n    this._sizes.sort();\n\n    return true;\n  }\n\n  processVisualElement(sizeData, key, data) {\n    if (!sizeData || !key || !data) return false;\n\n    switch (key) {\n      case 'layers':\n        if (!sizeData.processLayers(data)) return false;\n        break;\n\n      case 'directions':\n        if (!sizeData.processDirections(data)) return false;\n        break;\n\n      case 'colors':\n        if (!sizeData.processColors(data)) return false;\n        break;\n    }\n\n    return true;\n  }\n\n  getValidSize(scale) {\n    if (scale === this._lastSizeScale) return this._lastSize;\n    const sizeIndex = this.getSizeIndex(scale);\n    let newScale = -1;\n    if (sizeIndex < this._sizes.length) newScale = this._sizes[sizeIndex];\n    this._lastSizeScale = scale;\n    this._lastSize = newScale;\n    return newScale;\n  }\n\n  getSizeIndex(size) {\n    if (size <= 0) return 0;\n    let index = 0;\n    let iterator = 1;\n\n    while (iterator < this._sizes.length) {\n      if (this._sizes[iterator] > size) {\n        if (this._sizes[iterator] / size < size / this._sizes[iterator - 1]) index = iterator;\n        break;\n      }\n\n      index = iterator;\n      iterator++;\n    }\n\n    return index;\n  }\n\n  getSizeData(size) {\n    if (size === this._lastSizeDataScale) return this._lastSizeData;\n    const sizeIndex = this.getSizeIndex(size);\n    if (sizeIndex < this._sizes.length) this._lastSizeData = this._sizeDatas.get(this._sizes[sizeIndex]);else this._lastSizeData = null;\n    this._lastSizeDataScale = size;\n    return this._lastSizeData;\n  }\n\n  getLayerCount(scale) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_COUNT;\n    return size.layerCount;\n  }\n\n  getValidDirection(scale, direction) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_DIRECTION;\n    return size.getValidDirection(direction);\n  }\n\n  getLayerTag(scale, direction, layerId) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_TAG;\n    return size.getLayerTag(direction, layerId);\n  }\n\n  getLayerInk(scale, direction, layerId) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_INK;\n    return size.getLayerInk(direction, layerId);\n  }\n\n  getLayerAlpha(scale, direction, layerId) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_ALPHA;\n    return size.getLayerAlpha(direction, layerId);\n  }\n\n  getLayerColor(scale, layerId, colorId) {\n    const size = this.getSizeData(scale);\n    if (!size) return ColorData.DEFAULT_COLOR;\n    return size.getLayerColor(layerId, colorId);\n  }\n\n  getLayerIgnoreMouse(scale, direction, layerId) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_IGNORE_MOUSE;\n    return size.getLayerIgnoreMouse(direction, layerId);\n  }\n\n  getLayerXOffset(scale, direction, layerId) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_XOFFSET;\n    return size.getLayerXOffset(direction, layerId);\n  }\n\n  getLayerYOffset(scale, direction, layerId) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_YOFFSET;\n    return size.getLayerYOffset(direction, layerId);\n  }\n\n  getLayerZOffset(scale, direction, layerId) {\n    const size = this.getSizeData(scale);\n    if (!size) return LayerData.DEFAULT_ZOFFSET;\n    return size.getLayerZOffset(direction, layerId);\n  }\n\n  get type() {\n    return this._type;\n  }\n\n}\nFurnitureVisualizationData.LAYER_LETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurnitureVisualizationData.ts"],"names":["ColorData","LayerData","SizeData","FurnitureVisualizationData","constructor","_type","_sizes","_sizeDatas","_lastSize","_lastSizeScale","_lastSizeData","_lastSizeDataScale","Map","initialize","asset","reset","name","defineVisualizations","visualizations","dispose","size","values","clear","createSizeData","scale","layerCount","angle","visualizationId","visualization","get","sizeData","key","data","processVisualElement","set","push","sort","processLayers","processDirections","processColors","getValidSize","sizeIndex","getSizeIndex","newScale","length","index","iterator","getSizeData","getLayerCount","DEFAULT_COUNT","getValidDirection","direction","DEFAULT_DIRECTION","getLayerTag","layerId","DEFAULT_TAG","getLayerInk","DEFAULT_INK","getLayerAlpha","DEFAULT_ALPHA","getLayerColor","colorId","DEFAULT_COLOR","getLayerIgnoreMouse","DEFAULT_IGNORE_MOUSE","getLayerXOffset","DEFAULT_XOFFSET","getLayerYOffset","DEFAULT_YOFFSET","getLayerZOffset","DEFAULT_ZOFFSET","type","LAYER_LETTERS"],"mappings":"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","sourcesContent":["import { IAssetData } from '../../../../../core/asset/interfaces';\r\nimport { IAssetVisualizationData } from '../../../../../core/asset/interfaces/visualization';\r\nimport { IObjectVisualizationData } from '../../../../../room/object/visualization/IRoomObjectVisualizationData';\r\nimport { ColorData } from '../data/ColorData';\r\nimport { LayerData } from '../data/LayerData';\r\nimport { SizeData } from '../data/SizeData';\r\n\r\nexport class FurnitureVisualizationData implements IObjectVisualizationData\r\n{\r\n    public static LAYER_LETTERS: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\r\n\r\n    private _type: string;\r\n    private _sizes: number[];\r\n    private _sizeDatas: Map<number, SizeData>;\r\n    private _lastSize: number;\r\n    private _lastSizeScale: number;\r\n    private _lastSizeData: SizeData;\r\n    private _lastSizeDataScale: number;\r\n\r\n    constructor()\r\n    {\r\n        this._type = '';\r\n        this._sizes = [];\r\n        this._sizeDatas = new Map();\r\n        this._lastSize = -1;\r\n        this._lastSizeScale = -1;\r\n        this._lastSizeData = null;\r\n        this._lastSizeDataScale = -1;\r\n    }\r\n\r\n    public initialize(asset: IAssetData): boolean\r\n    {\r\n        this.reset();\r\n\r\n        if(!asset) return false;\r\n\r\n        this._type = asset.name;\r\n\r\n        if(!this.defineVisualizations(asset.visualizations))\r\n        {\r\n            this.reset();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._sizeDatas && this._sizeDatas.size)\r\n        {\r\n            for(const size of this._sizeDatas.values()) size && size.dispose();\r\n\r\n            this._sizeDatas = null;\r\n        }\r\n\r\n        this._lastSizeData = null;\r\n        this._sizes = null;\r\n    }\r\n\r\n    private reset(): void\r\n    {\r\n        this._type = '';\r\n\r\n        if(this._sizeDatas && this._sizeDatas.size)\r\n        {\r\n            for(const size of this._sizeDatas.values()) size && size.dispose();\r\n        }\r\n\r\n        this._sizeDatas.clear();\r\n\r\n        this._sizes = [];\r\n        this._lastSizeData = null;\r\n        this._lastSizeDataScale = -1;\r\n    }\r\n\r\n    protected createSizeData(scale: number, layerCount: number, angle: number): SizeData\r\n    {\r\n        return new SizeData(layerCount, angle);\r\n    }\r\n\r\n    protected defineVisualizations(visualizations: IAssetVisualizationData[]): boolean\r\n    {\r\n        if(!visualizations) return false;\r\n\r\n        for(const visualizationId in visualizations)\r\n        {\r\n            const visualization = visualizations[visualizationId];\r\n\r\n            const layerCount = visualization.layerCount;\r\n            const angle = visualization.angle;\r\n\r\n            let size = visualization.size;\r\n\r\n            if(size < 1) size = 1;\r\n\r\n            if(this._sizeDatas.get(size)) return false;\r\n\r\n            const sizeData = this.createSizeData(size, layerCount, angle);\r\n\r\n            if(!sizeData) return false;\r\n\r\n            for(const key in visualization)\r\n            {\r\n                //@ts-ignore\r\n                const data = visualization[key];\r\n\r\n                if(!this.processVisualElement(sizeData, key, data))\r\n                {\r\n                    sizeData.dispose();\r\n\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            this._sizeDatas.set(size, sizeData);\r\n\r\n            this._sizes.push(size);\r\n        }\r\n\r\n        this._sizes.sort();\r\n\r\n        return true;\r\n    }\r\n\r\n    protected processVisualElement(sizeData: SizeData, key: string, data: any): boolean\r\n    {\r\n        if(!sizeData || !key || !data) return false;\r\n\r\n        switch(key)\r\n        {\r\n            case 'layers':\r\n                if(!sizeData.processLayers(data)) return false;\r\n                break;\r\n            case 'directions':\r\n                if(!sizeData.processDirections(data)) return false;\r\n                break;\r\n            case 'colors':\r\n                if(!sizeData.processColors(data)) return false;\r\n                break;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public getValidSize(scale: number): number\r\n    {\r\n        if(scale === this._lastSizeScale) return this._lastSize;\r\n\r\n        const sizeIndex = this.getSizeIndex(scale);\r\n\r\n        let newScale = -1;\r\n\r\n        if(sizeIndex < this._sizes.length) newScale = this._sizes[sizeIndex];\r\n\r\n        this._lastSizeScale = scale;\r\n        this._lastSize = newScale;\r\n\r\n        return newScale;\r\n    }\r\n\r\n    private getSizeIndex(size: number): number\r\n    {\r\n        if(size <= 0) return 0;\r\n\r\n        let index = 0;\r\n        let iterator = 1;\r\n\r\n        while(iterator < this._sizes.length)\r\n        {\r\n            if(this._sizes[iterator] > size)\r\n            {\r\n                if((this._sizes[iterator] / size) < (size / this._sizes[(iterator - 1)])) index = iterator;\r\n\r\n                break;\r\n            }\r\n\r\n            index = iterator;\r\n\r\n            iterator++;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    protected getSizeData(size: number): SizeData\r\n    {\r\n        if(size === this._lastSizeDataScale) return this._lastSizeData;\r\n\r\n        const sizeIndex = this.getSizeIndex(size);\r\n\r\n        if(sizeIndex < this._sizes.length) this._lastSizeData = this._sizeDatas.get(this._sizes[sizeIndex]);\r\n        else this._lastSizeData = null;\r\n\r\n        this._lastSizeDataScale = size;\r\n\r\n        return this._lastSizeData;\r\n    }\r\n\r\n    public getLayerCount(scale: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_COUNT;\r\n\r\n        return size.layerCount;\r\n    }\r\n\r\n    public getValidDirection(scale: number, direction: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_DIRECTION;\r\n\r\n        return size.getValidDirection(direction);\r\n    }\r\n\r\n    public getLayerTag(scale: number, direction: number, layerId: number): string\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_TAG;\r\n\r\n        return size.getLayerTag(direction, layerId);\r\n    }\r\n\r\n    public getLayerInk(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_INK;\r\n\r\n        return size.getLayerInk(direction, layerId);\r\n    }\r\n\r\n    public getLayerAlpha(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_ALPHA;\r\n\r\n        return size.getLayerAlpha(direction, layerId);\r\n    }\r\n\r\n    public getLayerColor(scale: number, layerId: number, colorId: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return ColorData.DEFAULT_COLOR;\r\n\r\n        return size.getLayerColor(layerId, colorId);\r\n    }\r\n\r\n    public getLayerIgnoreMouse(scale: number, direction: number, layerId: number): boolean\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_IGNORE_MOUSE;\r\n\r\n        return size.getLayerIgnoreMouse(direction, layerId);\r\n    }\r\n\r\n    public getLayerXOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_XOFFSET;\r\n\r\n        return size.getLayerXOffset(direction, layerId);\r\n    }\r\n\r\n    public getLayerYOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_YOFFSET;\r\n\r\n        return size.getLayerYOffset(direction, layerId);\r\n    }\r\n\r\n    public getLayerZOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const size = this.getSizeData(scale);\r\n\r\n        if(!size) return LayerData.DEFAULT_ZOFFSET;\r\n\r\n        return size.getLayerZOffset(direction, layerId);\r\n    }\r\n\r\n    public get type(): string\r\n    {\r\n        return this._type;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}