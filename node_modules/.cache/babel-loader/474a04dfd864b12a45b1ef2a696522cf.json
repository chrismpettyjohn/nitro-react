{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/camera/views/editor/CameraWidgetEditorView.tsx\",\n    _s = $RefreshSig$();\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { RoomCameraWidgetSelectedEffect } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactSlider from 'react-slider';\nimport { GetRoomCameraWidgetManager, LocalizeText } from '../../../../api';\nimport { Button, ButtonGroup, Column, Flex, Grid, LayoutImage, NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView, Text } from '../../../../common';\nimport { CameraEditorTabs } from '../../common/CameraEditorTabs';\nimport { CameraPictureThumbnail } from '../../common/CameraPictureThumbnail';\nimport { CameraWidgetEffectListView } from './effect-list/CameraWidgetEffectListView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TABS = [CameraEditorTabs.COLORMATRIX, CameraEditorTabs.COMPOSITE];\nexport const CameraWidgetEditorView = props => {\n  _s();\n\n  const {\n    picture = null,\n    availableEffects = null,\n    myLevel = 1,\n    onClose = null,\n    onCancel = null,\n    onCheckout = null\n  } = props;\n  const [currentTab, setCurrentTab] = useState(TABS[0]);\n  const [selectedEffectName, setSelectedEffectName] = useState(null);\n  const [selectedEffects, setSelectedEffects] = useState([]);\n  const [effectsThumbnails, setEffectsThumbnails] = useState([]);\n  const [isZoomed, setIsZoomed] = useState(false);\n  const getColorMatrixEffects = useMemo(() => {\n    return availableEffects.filter(effect => effect.colorMatrix);\n  }, [availableEffects]);\n  const getCompositeEffects = useMemo(() => {\n    return availableEffects.filter(effect => effect.texture);\n  }, [availableEffects]);\n  const getEffectList = useCallback(() => {\n    if (currentTab === CameraEditorTabs.COLORMATRIX) {\n      return getColorMatrixEffects;\n    }\n\n    return getCompositeEffects;\n  }, [currentTab, getColorMatrixEffects, getCompositeEffects]);\n  const getSelectedEffectIndex = useCallback(name => {\n    if (!name || !name.length || !selectedEffects || !selectedEffects.length) return -1;\n    return selectedEffects.findIndex(effect => effect.effect.name === name);\n  }, [selectedEffects]);\n  const getCurrentEffectIndex = useMemo(() => {\n    return getSelectedEffectIndex(selectedEffectName);\n  }, [selectedEffectName, getSelectedEffectIndex]);\n  const getCurrentEffect = useMemo(() => {\n    if (!selectedEffectName) return null;\n    return selectedEffects[getCurrentEffectIndex] || null;\n  }, [selectedEffectName, getCurrentEffectIndex, selectedEffects]);\n  const setSelectedEffectAlpha = useCallback(alpha => {\n    const index = getCurrentEffectIndex;\n    if (index === -1) return;\n    setSelectedEffects(prevValue => {\n      const clone = [...prevValue];\n      const currentEffect = clone[index];\n      clone[getCurrentEffectIndex] = new RoomCameraWidgetSelectedEffect(currentEffect.effect, alpha);\n      return clone;\n    });\n  }, [getCurrentEffectIndex, setSelectedEffects]);\n  const getCurrentPictureUrl = useMemo(() => {\n    return GetRoomCameraWidgetManager().applyEffects(picture.texture, selectedEffects, isZoomed).src;\n  }, [picture, selectedEffects, isZoomed]);\n  const processAction = useCallback(function (type) {\n    let effectName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    switch (type) {\n      case 'close':\n        onClose();\n        return;\n\n      case 'cancel':\n        onCancel();\n        return;\n\n      case 'checkout':\n        onCheckout(getCurrentPictureUrl);\n        return;\n\n      case 'change_tab':\n        setCurrentTab(String(effectName));\n        return;\n\n      case 'select_effect':\n        {\n          let existingIndex = getSelectedEffectIndex(effectName);\n          if (existingIndex >= 0) return;\n          const effect = availableEffects.find(effect => effect.name === effectName);\n          if (!effect) return;\n          setSelectedEffects(prevValue => {\n            return [...prevValue, new RoomCameraWidgetSelectedEffect(effect, 1)];\n          });\n          setSelectedEffectName(effect.name);\n          return;\n        }\n\n      case 'remove_effect':\n        {\n          let existingIndex = getSelectedEffectIndex(effectName);\n          if (existingIndex === -1) return;\n          setSelectedEffects(prevValue => {\n            const clone = [...prevValue];\n            clone.splice(existingIndex, 1);\n            return clone;\n          });\n          if (selectedEffectName === effectName) setSelectedEffectName(null);\n          return;\n        }\n\n      case 'clear_effects':\n        setSelectedEffectName(null);\n        setSelectedEffects([]);\n        return;\n\n      case 'download':\n        {\n          const image = new Image();\n          image.src = getCurrentPictureUrl;\n          const newWindow = window.open('');\n          newWindow.document.write(image.outerHTML);\n          return;\n        }\n\n      case 'zoom':\n        setIsZoomed(!isZoomed);\n        return;\n    }\n  }, [isZoomed, availableEffects, selectedEffectName, getCurrentPictureUrl, getSelectedEffectIndex, onCancel, onCheckout, onClose, setIsZoomed, setSelectedEffects]);\n  useEffect(() => {\n    const thumbnails = [];\n\n    for (const effect of availableEffects) {\n      thumbnails.push(new CameraPictureThumbnail(effect.name, GetRoomCameraWidgetManager().applyEffects(picture.texture, [new RoomCameraWidgetSelectedEffect(effect, 1)], false).src));\n    }\n\n    setEffectsThumbnails(thumbnails);\n  }, [picture, availableEffects]);\n  return /*#__PURE__*/_jsxDEV(NitroCardView, {\n    className: \"nitro-camera-editor\",\n    children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n      headerText: LocalizeText('camera.editor.button.text'),\n      onCloseClick: event => processAction('close')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardTabsView, {\n      children: TABS.map(tab => {\n        return /*#__PURE__*/_jsxDEV(NitroCardTabsItemView, {\n          isActive: currentTab === tab,\n          onClick: event => processAction('change_tab', tab),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: 'icon icon-camera-' + tab\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 149\n          }, this)\n        }, tab, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          size: 5,\n          overflow: \"hidden\",\n          children: /*#__PURE__*/_jsxDEV(CameraWidgetEffectListView, {\n            myLevel: myLevel,\n            selectedEffects: selectedEffects,\n            effects: getEffectList(),\n            thumbnails: effectsThumbnails,\n            processAction: processAction\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          size: 7,\n          justifyContent: \"between\",\n          overflow: \"hidden\",\n          children: [/*#__PURE__*/_jsxDEV(Column, {\n            center: true,\n            children: [/*#__PURE__*/_jsxDEV(LayoutImage, {\n              imageUrl: getCurrentPictureUrl,\n              className: \"picture-preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this), selectedEffectName && /*#__PURE__*/_jsxDEV(Column, {\n              center: true,\n              fullWidth: true,\n              gap: 1,\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: LocalizeText('camera.effect.name.' + selectedEffectName)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ReactSlider, {\n                className: 'nitro-slider',\n                min: 0,\n                max: 1,\n                step: 0.01,\n                value: getCurrentEffect.alpha,\n                onChange: event => setSelectedEffectAlpha(event),\n                renderThumb: (props, state) => /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n                  children: state.valueNow\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 73\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"between\",\n            children: [/*#__PURE__*/_jsxDEV(ButtonGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: event => processAction('clear_effects'),\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: \"trash\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: event => processAction('download'),\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: \"save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: event => processAction('zoom'),\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: isZoomed ? 'search-minus' : 'search-plus'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              gap: 1,\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: event => processAction('cancel'),\n                children: LocalizeText('generic.cancel')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: event => processAction('checkout'),\n                children: LocalizeText('camera.preview.button.text')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CameraWidgetEditorView, \"SzrXhPXCIbG4MaFS2wCrosCuKC8=\");\n\n_c = CameraWidgetEditorView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CameraWidgetEditorView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/camera/views/editor/CameraWidgetEditorView.tsx"],"names":["FontAwesomeIcon","RoomCameraWidgetSelectedEffect","useCallback","useEffect","useMemo","useState","ReactSlider","GetRoomCameraWidgetManager","LocalizeText","Button","ButtonGroup","Column","Flex","Grid","LayoutImage","NitroCardContentView","NitroCardHeaderView","NitroCardTabsItemView","NitroCardTabsView","NitroCardView","Text","CameraEditorTabs","CameraPictureThumbnail","CameraWidgetEffectListView","TABS","COLORMATRIX","COMPOSITE","CameraWidgetEditorView","props","picture","availableEffects","myLevel","onClose","onCancel","onCheckout","currentTab","setCurrentTab","selectedEffectName","setSelectedEffectName","selectedEffects","setSelectedEffects","effectsThumbnails","setEffectsThumbnails","isZoomed","setIsZoomed","getColorMatrixEffects","filter","effect","colorMatrix","getCompositeEffects","texture","getEffectList","getSelectedEffectIndex","name","length","findIndex","getCurrentEffectIndex","getCurrentEffect","setSelectedEffectAlpha","alpha","index","prevValue","clone","currentEffect","getCurrentPictureUrl","applyEffects","src","processAction","type","effectName","String","existingIndex","find","splice","image","Image","newWindow","window","open","document","write","outerHTML","thumbnails","push","event","map","tab","state","valueNow"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRoomCameraWidgetEffect, IRoomCameraWidgetSelectedEffect, RoomCameraWidgetSelectedEffect } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactSlider from 'react-slider';\nimport { GetRoomCameraWidgetManager, LocalizeText } from '../../../../api';\nimport { Button, ButtonGroup, Column, Flex, Grid, LayoutImage, NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView, Text } from '../../../../common';\nimport { CameraEditorTabs } from '../../common/CameraEditorTabs';\nimport { CameraPicture } from '../../common/CameraPicture';\nimport { CameraPictureThumbnail } from '../../common/CameraPictureThumbnail';\nimport { CameraWidgetEffectListView } from './effect-list/CameraWidgetEffectListView';\n\nexport interface CameraWidgetEditorViewProps\n{\n    picture: CameraPicture;\n    availableEffects: IRoomCameraWidgetEffect[];\n    myLevel: number;\n    onClose: () => void;\n    onCancel: () => void;\n    onCheckout: (pictureUrl: string) => void;\n}\n\nconst TABS: string[] = [ CameraEditorTabs.COLORMATRIX, CameraEditorTabs.COMPOSITE ];\n\nexport const CameraWidgetEditorView: FC<CameraWidgetEditorViewProps> = props =>\n{\n    const { picture = null, availableEffects = null, myLevel = 1, onClose = null, onCancel = null, onCheckout = null } = props;\n    const [ currentTab, setCurrentTab ] = useState(TABS[0]);\n    const [ selectedEffectName, setSelectedEffectName ] = useState<string>(null);\n    const [ selectedEffects, setSelectedEffects ] = useState<IRoomCameraWidgetSelectedEffect[]>([]);\n    const [ effectsThumbnails, setEffectsThumbnails ] = useState<CameraPictureThumbnail[]>([]);\n    const [ isZoomed, setIsZoomed ] = useState(false);\n\n    const getColorMatrixEffects = useMemo(() =>\n    {\n        return availableEffects.filter(effect => effect.colorMatrix);\n    }, [ availableEffects ]);\n\n    const getCompositeEffects = useMemo(() =>\n    {\n        return availableEffects.filter(effect => effect.texture);\n    }, [ availableEffects ]);\n\n    const getEffectList = useCallback(() =>\n    {\n        if(currentTab === CameraEditorTabs.COLORMATRIX)\n        {\n            return getColorMatrixEffects;\n        }\n\n        return getCompositeEffects;\n    }, [ currentTab, getColorMatrixEffects, getCompositeEffects ]);\n\n    const getSelectedEffectIndex = useCallback((name: string) =>\n    {\n        if(!name || !name.length || !selectedEffects || !selectedEffects.length) return -1;\n\n        return selectedEffects.findIndex(effect => (effect.effect.name === name));\n    }, [ selectedEffects ])\n\n    const getCurrentEffectIndex = useMemo(() =>\n    {\n        return getSelectedEffectIndex(selectedEffectName)\n    }, [ selectedEffectName, getSelectedEffectIndex ])\n\n    const getCurrentEffect = useMemo(() =>\n    {\n        if(!selectedEffectName) return null;\n\n        return (selectedEffects[getCurrentEffectIndex] || null);\n    }, [ selectedEffectName, getCurrentEffectIndex, selectedEffects ]);\n\n    const setSelectedEffectAlpha = useCallback((alpha: number) =>\n    {\n        const index = getCurrentEffectIndex;\n\n        if(index === -1) return;\n\n        setSelectedEffects(prevValue =>\n        {\n            const clone = [ ...prevValue ];\n            const currentEffect = clone[index];\n\n            clone[getCurrentEffectIndex] = new RoomCameraWidgetSelectedEffect(currentEffect.effect, alpha);\n\n            return clone;\n        });\n    }, [ getCurrentEffectIndex, setSelectedEffects ]);\n\n    const getCurrentPictureUrl = useMemo(() =>\n    {\n        return GetRoomCameraWidgetManager().applyEffects(picture.texture, selectedEffects, isZoomed).src;\n    }, [ picture, selectedEffects, isZoomed ]);\n\n    const processAction = useCallback((type: string, effectName: string = null) =>\n    {\n        switch(type)\n        {\n            case 'close':\n                onClose();\n                return;\n            case 'cancel':\n                onCancel();\n                return;\n            case 'checkout':\n                onCheckout(getCurrentPictureUrl);\n                return;\n            case 'change_tab':\n                setCurrentTab(String(effectName));\n                return;\n            case 'select_effect': {\n                let existingIndex = getSelectedEffectIndex(effectName);\n\n                if(existingIndex >= 0) return;\n                \n                const effect = availableEffects.find(effect => (effect.name === effectName));\n\n                if(!effect) return;\n\n                setSelectedEffects(prevValue =>\n                {\n                    return [ ...prevValue, new RoomCameraWidgetSelectedEffect(effect, 1) ];\n                });\n\n                setSelectedEffectName(effect.name);\n                return;\n            }\n            case 'remove_effect': {\n                let existingIndex = getSelectedEffectIndex(effectName);\n\n                if(existingIndex === -1) return;\n\n                setSelectedEffects(prevValue =>\n                {\n                    const clone = [ ...prevValue ];\n\n                    clone.splice(existingIndex, 1);\n\n                    return clone;\n                });\n\n                if(selectedEffectName === effectName) setSelectedEffectName(null);\n                return;\n            }\n            case 'clear_effects':\n                setSelectedEffectName(null);\n                setSelectedEffects([]);\n                return;\n            case 'download': {\n                const image = new Image();\n                            \n                image.src = getCurrentPictureUrl\n                            \n                const newWindow = window.open('');\n                newWindow.document.write(image.outerHTML);\n                return;\n            }\n            case 'zoom':\n                setIsZoomed(!isZoomed);\n                return;\n        }\n    }, [ isZoomed, availableEffects, selectedEffectName, getCurrentPictureUrl, getSelectedEffectIndex, onCancel, onCheckout, onClose, setIsZoomed, setSelectedEffects ]);\n\n    useEffect(() =>\n    {\n        const thumbnails: CameraPictureThumbnail[] = [];\n\n        for(const effect of availableEffects)\n        {\n            thumbnails.push(new CameraPictureThumbnail(effect.name, GetRoomCameraWidgetManager().applyEffects(picture.texture, [ new RoomCameraWidgetSelectedEffect(effect, 1) ], false).src));\n        }\n\n        setEffectsThumbnails(thumbnails);\n    }, [ picture, availableEffects ]);\n\n    return (\n        <NitroCardView className=\"nitro-camera-editor\">\n            <NitroCardHeaderView headerText={ LocalizeText('camera.editor.button.text') } onCloseClick={ event => processAction('close') } />\n            <NitroCardTabsView>\n                { TABS.map(tab =>\n                {\n                    return <NitroCardTabsItemView key={ tab } isActive={ currentTab === tab } onClick={ event => processAction('change_tab', tab) }><i className={ 'icon icon-camera-' + tab }></i></NitroCardTabsItemView>\n                }) }\n            </NitroCardTabsView>\n            <NitroCardContentView>\n                <Grid>\n                    <Column size={ 5 } overflow=\"hidden\">\n                        <CameraWidgetEffectListView myLevel={ myLevel } selectedEffects={ selectedEffects } effects={ getEffectList() } thumbnails={ effectsThumbnails } processAction={ processAction } />\n                    </Column>\n                    <Column size={ 7 } justifyContent=\"between\" overflow=\"hidden\">\n                        <Column center>\n                            <LayoutImage imageUrl={ getCurrentPictureUrl } className=\"picture-preview\" />\n                            { selectedEffectName &&\n                                <Column center fullWidth gap={ 1 }>\n                                    <Text>{ LocalizeText('camera.effect.name.' + selectedEffectName) }</Text>\n                                    <ReactSlider\n                                        className={ 'nitro-slider' }\n                                        min={ 0 }\n                                        max={ 1 }\n                                        step={ 0.01 }\n                                        value={ getCurrentEffect.alpha }\n                                        onChange={ event => setSelectedEffectAlpha(event) }\n                                        renderThumb={ (props, state) => <div { ...props }>{ state.valueNow }</div> } />\n                                </Column> }\n                        </Column>\n                        <Flex justifyContent=\"between\">\n                            <ButtonGroup>\n                                <Button onClick={ event => processAction('clear_effects') }>\n                                    <FontAwesomeIcon icon=\"trash\" />\n                                </Button>\n                                <Button onClick={ event => processAction('download') }>\n                                    <FontAwesomeIcon icon=\"save\" />\n                                </Button>\n                                <Button onClick={ event => processAction('zoom') }>\n                                    <FontAwesomeIcon icon={ isZoomed ? 'search-minus' : 'search-plus' } />\n                                </Button>\n                            </ButtonGroup>\n                            <Flex gap={ 1 }>\n                                <Button onClick={ event => processAction('cancel') }>\n                                    { LocalizeText('generic.cancel') }\n                                </Button>\n                                <Button onClick={ event => processAction('checkout') }>\n                                    { LocalizeText('camera.preview.button.text') }\n                                </Button>\n                            </Flex>\n                        </Flex>\n                    </Column>\n                </Grid>\n            </NitroCardContentView>\n        </NitroCardView>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}