{"ast":null,"code":"export {};","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { RenderTexture } from '@pixi/core';\r\nimport { DisplayObject } from '@pixi/display';\r\nimport { Point, Rectangle } from '@pixi/math';\r\nimport { INitroManager } from '../../core/common/INitroManager';\r\nimport { IRoomObject } from '../../room';\r\nimport { IRoomManager } from '../../room/IRoomManager';\r\nimport { IRoomObjectController } from '../../room/object/IRoomObjectController';\r\nimport { IRoomObjectLogicFactory } from '../../room/object/logic/IRoomObjectLogicFactory';\r\nimport { IRoomObjectVisualizationFactory } from '../../room/object/visualization/IRoomObjectVisualizationFactory';\r\nimport { IRoomRendererFactory } from '../../room/renderer/IRoomRendererFactory';\r\nimport { IRoomRenderingCanvas } from '../../room/renderer/IRoomRenderingCanvas';\r\nimport { IRoomGeometry } from '../../room/utils/IRoomGeometry';\r\nimport { IVector3D } from '../../room/utils/IVector3D';\r\nimport { PetCustomPart } from '../avatar/pets/PetCustomPart';\r\nimport { IRoomSessionManager } from '../session/IRoomSessionManager';\r\nimport { ISessionDataManager } from '../session/ISessionDataManager';\r\nimport { IGetImageListener } from './IGetImageListener';\r\nimport { ImageResult } from './ImageResult';\r\nimport { IObjectData } from './object/data/IObjectData';\r\nimport { RoomMapData } from './object/RoomMapData';\r\nimport { PetColorResult } from './PetColorResult';\r\nimport { RoomContentLoader } from './RoomContentLoader';\r\nimport { RoomObjectEventHandler } from './RoomObjectEventHandler';\r\n\r\nexport interface IRoomEngine extends INitroManager\r\n{\r\n    setActiveRoomId(roomId: number): void;\r\n    onRoomEngineInitalized(flag: boolean): void;\r\n    disableUpdate(flag: boolean): void;\r\n    runUpdate(): void;\r\n    createRoomInstance(roomId: number, roomMap: RoomMapData): void;\r\n    getRoomInstanceDisplay(roomId: number, id: number, width: number, height: number, scale: number): DisplayObject;\r\n    setRoomInstanceRenderingCanvasScale(roomId: number, canvasId: number, scale: number, point?: Point, offsetPoint?: Point, override?: boolean, asDelta?: boolean): void;\r\n    setRoomInstanceRenderingCanvasMask(roomId: number, canvasId: number, flag: boolean): void;\r\n    getRoomInstanceRenderingCanvas(roomId: number, canvasId?: number): IRoomRenderingCanvas;\r\n    getRoomInstanceRenderingCanvasOffset(roomId: number, canvasId?: number): Point;\r\n    setRoomInstanceRenderingCanvasOffset(roomId: number, canvasId: number, point: Point): boolean;\r\n    getRoomInstanceRenderingCanvasScale(roomId?: number, canvasId?: number): number;\r\n    initializeRoomInstanceRenderingCanvas(roomId: number, canvasId: number, width: number, height: number): void;\r\n    updateRoomInstancePlaneVisibility(roomId: number, wallVisible: boolean, floorVisible?: boolean): boolean;\r\n    updateRoomInstancePlaneThickness(roomId: number, wallThickness: number, floorThickness: number): boolean;\r\n    updateRoomInstancePlaneType(roomId: number, floorType?: string, wallType?: string, landscapeType?: string, _arg_5?: boolean): boolean;\r\n    updateObjectRoomColor(k: number, _arg_2: number, _arg_3: number, _arg_4: boolean): boolean;\r\n    getRoomInstanceGeometry(roomId: number, canvasId?: number): IRoomGeometry;\r\n    getRoomInstanceVariable<T>(roomId: number, key: string): T;\r\n    getTotalObjectsForManager(roomId: number, category: number): number;\r\n    getRoomObject(roomId: number, objectId: number, category: number): IRoomObjectController;\r\n    getRoomObjectByIndex(roomId: number, index: number, category: number): IRoomObjectController;\r\n    removeRoomObjectFloor(roomId: number, objectId: number, userId?: number, _arg_4?: boolean): void;\r\n    removeRoomObjectWall(roomId: number, objectId: number, userId?: number): void;\r\n    removeRoomObjectUser(roomId: number, objectId: number): void;\r\n    getRoomObjects(roomId: number, category: number): IRoomObject[];\r\n    getRoomObjectCount(roomId: number, categoryId: number): number;\r\n    getRoomObjectBoundingRectangle(roomId: number, objectId: number, category: number, canvasId: number): Rectangle;\r\n    getRoomObjectScreenLocation(roomId: number, objectId: number, objectType: number, canvasId?: number): Point;\r\n    getGenericRoomObjectImage(type: string, value: string, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor?: number, extras?: string, objectData?: IObjectData, state?: number, frameCount?: number, posture?: string, originalId?: number): ImageResult;\r\n    getFurnitureFloorIconUrl(typeId: number): string;\r\n    getFurnitureFloorIcon(typeId: number, listener: IGetImageListener, extras?: string, objectData?: IObjectData): ImageResult;\r\n    getFurnitureWallIconUrl(typeId: number, extra?: string): string;\r\n    getFurnitureWallIcon(typeId: number, listener: IGetImageListener, extras?: string): ImageResult;\r\n    updateRoomObjectWallLocation(roomId: number, objectId: number, location: IVector3D): boolean;\r\n    addRoomObjectUser(roomId: number, objectId: number, location: IVector3D, direction: IVector3D, headDirection: number, type: number, figure: string): boolean;\r\n    updateRoomObjectUserLocation(roomId: number, objectId: number, location: IVector3D, targetLocation: IVector3D, canStandUp?: boolean, baseY?: number, direction?: IVector3D, headDirection?: number): boolean;\r\n    addFurnitureFloor(roomId: number, id: number, typeId: number, location: IVector3D, direction: IVector3D, state: number, objectData: IObjectData, extra?: number, expires?: number, usagePolicy?: number, ownerId?: number, ownerName?: string, synchronized?: boolean, realRoomObject?: boolean, sizeZ?: number): boolean;\r\n    addFurnitureFloorByTypeName(roomId: number, id: number, typeName: string, location: IVector3D, direction: IVector3D, state: number, objectData: IObjectData, extra?: number, expires?: number, usagePolicy?: number, ownerId?: number, ownerName?: string, synchronized?: boolean, realRoomObject?: boolean, sizeZ?: number): boolean;\r\n    addFurnitureWall(roomId: number, id: number, typeId: number, location: IVector3D, direction: IVector3D, state: number, extra: string, expires?: number, usagePolicy?: number, ownerId?: number, ownerName?: string, realRoomObject?: boolean): boolean;\r\n    initalizeTemporaryObjectsByType(type: string, _arg_2: boolean): void;\r\n    updateRoomObjectFloor(roomId: number, objectId: number, location: IVector3D, direction: IVector3D, state: number, data: IObjectData, extra?: number): boolean;\r\n    updateRoomObjectWall(roomId: number, objectId: number, location: IVector3D, direction: IVector3D, state: number, extra?: string): boolean;\r\n    updateRoomObjectUserAction(roomId: number, objectId: number, action: string, value: number, parameter?: string): boolean;\r\n    updateRoomObjectUserFigure(roomId: number, objectId: number, figure: string, gender?: string, subType?: string, isRiding?: boolean): boolean;\r\n    updateRoomObjectUserEffect(roomId: number, objectId: number, effectId: number, delay?: number): boolean;\r\n    updateRoomObjectUserGesture(roomId: number, objectId: number, gestureId: number): boolean;\r\n    updateRoomObjectUserPosture(roomId: number, objectId: number, type: string, parameter?: string): boolean;\r\n    getFurnitureFloorImage(typeId: number, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor?: number, extras?: string, state?: number, frameCount?: number, objectData?: IObjectData): ImageResult;\r\n    getFurnitureWallImage(typeId: number, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor?: number, extras?: string, state?: number, frameCount?: number): ImageResult;\r\n    getRoomObjectImage(roomId: number, objectId: number, category: number, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor?: number): ImageResult;\r\n    getRoomObjectPetImage(typeId: number, paletteId: number, color: number, direction: IVector3D, scale: number, listener: IGetImageListener, headOnly?: boolean, bgColor?: number, customParts?: PetCustomPart[], posture?: string): ImageResult;\r\n    selectRoomObject(roomId: number, objectId: number, objectCategory: number): void;\r\n    setSelectedAvatar(roomId: number, objectId: number): void;\r\n    cancelRoomObjectInsert(): void;\r\n    getPetColorResult(petIndex: number, paletteIndex: number): PetColorResult;\r\n    getPetColorResultsForTag(petIndex: number, tagName: string): PetColorResult[];\r\n    cancelRoomObjectPlacement(): void;\r\n    getFurnitureFloorName(typeId: number): string;\r\n    useRoomObject(objectId: number, category: number): boolean;\r\n    objectInitialized(roomId: string, objectId: number, category: number): void;\r\n    changeObjectModelData(roomId: number, objectId: number, category: number, numberKey: string, numberValue: number): boolean;\r\n    changeObjectState(roomId: number, objectId: number, category: number): void;\r\n    processRoomObjectOperation(objectId: number, category: number, operation: string): boolean;\r\n    modifyRoomObjectDataWithMap(objectId: number, category: number, operation: string, data: Map<string, string>): boolean\r\n    modifyRoomObjectData(objectId: number, category: number, colorHex: string, data: string): boolean\r\n    processRoomObjectPlacement(placementSource: string, id: number, category: number, typeId: number, legacyString?: string, stuffData?: IObjectData, state?: number, frameNumber?: number, posture?: string): boolean;\r\n    dispatchMouseEvent(canvasId: number, x: number, y: number, type: string, altKey: boolean, ctrlKey: boolean, shiftKey: boolean, buttonDown: boolean): void;\r\n    createTextureFromRoom(roomId: number, canvasId?: number, bounds?: Rectangle): RenderTexture;\r\n    saveTextureAsScreenshot(texture: RenderTexture, saveAsThumbnail?: boolean): void;\r\n    saveBase64AsScreenshot(base64: string, saveAsThumbnail?: boolean): void;\r\n    deleteRoomObject(objectId: number, objectCategory: number): boolean;\r\n    sessionDataManager: ISessionDataManager;\r\n    roomSessionManager: IRoomSessionManager;\r\n    roomManager: IRoomManager;\r\n    objectEventHandler: RoomObjectEventHandler;\r\n    roomRendererFactory: IRoomRendererFactory;\r\n    visualizationFactory: IRoomObjectVisualizationFactory;\r\n    logicFactory: IRoomObjectLogicFactory;\r\n    roomContentLoader: RoomContentLoader;\r\n    activeRoomId: number;\r\n    ready: boolean;\r\n    disposed: boolean;\r\n    selectedAvatarId: number;\r\n    isDecorating: boolean;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}