{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/navigator/NavigatorView.tsx\",\n    _s = $RefreshSig$();\n\nimport { ConvertGlobalRoomIdMessageComposer, HabboWebTools, LegacyExternalInterface, NavigatorInitComposer, NavigatorSearchComposer, RoomSessionEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { AddEventLinkTracker, DoorStateType, LocalizeText, RemoveLinkEventTracker, SendMessageComposer, TryVisitRoom } from '../../api';\nimport { Base, Column, NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, Text, NitroCardView, Flex } from '../../common';\nimport { UseRoomSessionManagerEvent, useSharedNavigatorData } from '../../hooks';\nimport { NavigatorContextProvider } from './NavigatorContext';\nimport { NavigatorMessageHandler } from './NavigatorMessageHandler';\nimport { NavigatorDoorStateView } from './views/NavigatorDoorStateView';\nimport { NavigatorRoomCreatorView } from './views/NavigatorRoomCreatorView';\nimport { NavigatorRoomInfoView } from './views/NavigatorRoomInfoView';\nimport { NavigatorRoomLinkView } from './views/NavigatorRoomLinkView';\nimport { NavigatorRoomSettingsView } from './views/room-settings/NavigatorRoomSettingsView';\nimport { NavigatorSearchResultView } from './views/search/NavigatorSearchResultView';\nimport { NavigatorSearchView } from './views/search/NavigatorSearchView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const NavigatorView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isReady, setIsReady] = useState(false);\n  const [isCreatorOpen, setCreatorOpen] = useState(false);\n  const [isRoomInfoOpen, setRoomInfoOpen] = useState(false);\n  const [isRoomLinkOpen, setRoomLinkOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [needsInit, setNeedsInit] = useState(true);\n  const [needsSearch, setNeedsSearch] = useState(false);\n  const [categories, setCategories] = useState(null);\n  const [topLevelContext, setTopLevelContext] = useState(null);\n  const [topLevelContexts, setTopLevelContexts] = useState(null);\n  const [navigatorData, setNavigatorData] = useSharedNavigatorData();\n  const [doorData, setDoorData] = useState({\n    roomInfo: null,\n    state: DoorStateType.NONE\n  });\n  const [searchResult, setSearchResult] = useState(null);\n  const pendingSearch = useRef(null);\n  const onRoomSessionEvent = useCallback(event => {\n    switch (event.type) {\n      case RoomSessionEvent.CREATED:\n        setIsVisible(false);\n        setCreatorOpen(false);\n        return;\n    }\n  }, []);\n  UseRoomSessionManagerEvent(RoomSessionEvent.CREATED, onRoomSessionEvent);\n  const sendSearch = useCallback((searchValue, contextCode) => {\n    SendMessageComposer(new NavigatorSearchComposer(contextCode, searchValue));\n    setIsLoading(true);\n  }, []);\n  const reloadCurrentSearch = useCallback(() => {\n    if (!isReady) {\n      setNeedsSearch(true);\n      return;\n    }\n\n    if (pendingSearch.current) {\n      sendSearch(pendingSearch.current.value, pendingSearch.current.code);\n      pendingSearch.current = null;\n      return;\n    }\n\n    if (searchResult) {\n      sendSearch(searchResult.data, searchResult.code);\n      return;\n    }\n\n    if (!topLevelContext) return;\n    sendSearch('', topLevelContext.code);\n  }, [isReady, searchResult, topLevelContext, sendSearch]);\n  const linkReceived = useCallback(url => {\n    const parts = url.split('/');\n    if (parts.length < 2) return;\n\n    switch (parts[1]) {\n      case 'show':\n        {\n          setIsVisible(true);\n          setNeedsSearch(true);\n          return;\n        }\n\n      case 'hide':\n        setIsVisible(false);\n        return;\n\n      case 'toggle':\n        {\n          if (isVisible) {\n            setIsVisible(false);\n            return;\n          }\n\n          setIsVisible(true);\n          setNeedsSearch(true);\n          return;\n        }\n\n      case 'toggle-room-info':\n        setRoomInfoOpen(value => !value);\n        return;\n\n      case 'toggle-room-link':\n        setRoomLinkOpen(value => !value);\n        return;\n\n      case 'goto':\n        if (parts.length <= 2) return;\n\n        switch (parts[2]) {\n          case 'home':\n            if (navigatorData.homeRoomId <= 0) return;\n            TryVisitRoom(navigatorData.homeRoomId);\n            break;\n\n          default:\n            {\n              const roomId = parseInt(parts[2]);\n              TryVisitRoom(roomId);\n            }\n        }\n\n        return;\n\n      case 'create':\n        setCreatorOpen(value => !value);\n        return;\n\n      case 'close-creator':\n        setCreatorOpen(false);\n        return;\n\n      case 'search':\n        if (parts.length > 2) {\n          const topLevelContextCode = parts[2];\n          let searchValue = '';\n          if (parts.length > 3) searchValue = parts[3];\n          pendingSearch.current = {\n            value: searchValue,\n            code: topLevelContextCode\n          };\n          setIsVisible(true);\n          setNeedsSearch(true);\n        }\n\n        return;\n    }\n  }, [isVisible, navigatorData]);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived,\n      eventUrlPrefix: 'navigator/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, [linkReceived]);\n  useEffect(() => {\n    if (!searchResult) return;\n    setIsLoading(false);\n  }, [searchResult]);\n  useEffect(() => {\n    if (!isVisible || !isReady || !needsSearch) return;\n    reloadCurrentSearch();\n    setNeedsSearch(false);\n  }, [isVisible, isReady, needsSearch, reloadCurrentSearch]);\n  useEffect(() => {\n    if (isReady || !topLevelContext) return;\n    setIsReady(true);\n  }, [isReady, topLevelContext]);\n  useEffect(() => {\n    if (!isVisible || !needsInit) return;\n    SendMessageComposer(new NavigatorInitComposer());\n    setNeedsInit(false);\n  }, [isVisible, needsInit]);\n  useEffect(() => {\n    LegacyExternalInterface.addCallback(HabboWebTools.OPENROOM, function (k) {\n      let _arg_2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      let _arg_3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      return SendMessageComposer(new ConvertGlobalRoomIdMessageComposer(k));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(NavigatorContextProvider, {\n    value: {\n      categories,\n      setCategories,\n      topLevelContext,\n      setTopLevelContext,\n      topLevelContexts,\n      setTopLevelContexts,\n      navigatorData,\n      setNavigatorData,\n      doorData,\n      setDoorData,\n      searchResult,\n      setSearchResult\n    },\n    children: [/*#__PURE__*/_jsxDEV(NavigatorMessageHandler, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), isVisible && /*#__PURE__*/_jsxDEV(NitroCardView, {\n      uniqueKey: \"navigator\",\n      className: \"nitro-navigator\",\n      children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n        headerText: LocalizeText('navigator.title'),\n        onCloseClick: event => setIsVisible(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardTabsView, {\n        children: topLevelContexts && topLevelContexts.length > 0 && topLevelContexts.map((context, index) => {\n          return /*#__PURE__*/_jsxDEV(NitroCardTabsItemView, {\n            isActive: topLevelContext === context,\n            onClick: event => sendSearch('', context.code),\n            children: LocalizeText('navigator.toplevelview.' + context.code)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n        position: \"relative\",\n        children: [isLoading && /*#__PURE__*/_jsxDEV(Base, {\n          fit: true,\n          position: \"absolute\",\n          className: \"top-0 start-0 z-index-1 bg-muted opacity-0-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(NavigatorSearchView, {\n            sendSearch: sendSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Column, {\n            overflow: \"auto\",\n            children: searchResult && searchResult.results.map((result, index) => /*#__PURE__*/_jsxDEV(NavigatorSearchResultView, {\n              searchResult: result\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 96\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Flex, {\n          className: \"nav-bottom\",\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            className: \"nav-bottom-buttons position-absolute\",\n            children: [/*#__PURE__*/_jsxDEV(Flex, {\n              className: \"nav-create-room\",\n              onClick: event => setCreatorOpen(value => !value),\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                variant: \"white\",\n                bold: true,\n                className: \"nav-bottom-buttons-text\",\n                children: LocalizeText('navigator.createroom.create')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              className: \"nav-random-room\",\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                variant: \"white\",\n                bold: true,\n                className: \"nav-bottom-buttons-text\",\n                children: LocalizeText('navigator.random.room')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this), isCreatorOpen && /*#__PURE__*/_jsxDEV(NavigatorRoomCreatorView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(NavigatorDoorStateView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), isRoomInfoOpen && /*#__PURE__*/_jsxDEV(NavigatorRoomInfoView, {\n      onCloseClick: () => setRoomInfoOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 33\n    }, this), isRoomLinkOpen && /*#__PURE__*/_jsxDEV(NavigatorRoomLinkView, {\n      onCloseClick: () => setRoomLinkOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(NavigatorRoomSettingsView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NavigatorView, \"ruRBLbB4KPzkH7U8JlB1jKA3/Rc=\", false, function () {\n  return [useSharedNavigatorData];\n});\n\n_c = NavigatorView;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavigatorView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/navigator/NavigatorView.tsx"],"names":["ConvertGlobalRoomIdMessageComposer","HabboWebTools","LegacyExternalInterface","NavigatorInitComposer","NavigatorSearchComposer","RoomSessionEvent","useCallback","useEffect","useRef","useState","AddEventLinkTracker","DoorStateType","LocalizeText","RemoveLinkEventTracker","SendMessageComposer","TryVisitRoom","Base","Column","NitroCardContentView","NitroCardHeaderView","NitroCardTabsItemView","NitroCardTabsView","Text","NitroCardView","Flex","UseRoomSessionManagerEvent","useSharedNavigatorData","NavigatorContextProvider","NavigatorMessageHandler","NavigatorDoorStateView","NavigatorRoomCreatorView","NavigatorRoomInfoView","NavigatorRoomLinkView","NavigatorRoomSettingsView","NavigatorSearchResultView","NavigatorSearchView","NavigatorView","props","isVisible","setIsVisible","isReady","setIsReady","isCreatorOpen","setCreatorOpen","isRoomInfoOpen","setRoomInfoOpen","isRoomLinkOpen","setRoomLinkOpen","isLoading","setIsLoading","needsInit","setNeedsInit","needsSearch","setNeedsSearch","categories","setCategories","topLevelContext","setTopLevelContext","topLevelContexts","setTopLevelContexts","navigatorData","setNavigatorData","doorData","setDoorData","roomInfo","state","NONE","searchResult","setSearchResult","pendingSearch","onRoomSessionEvent","event","type","CREATED","sendSearch","searchValue","contextCode","reloadCurrentSearch","current","value","code","data","linkReceived","url","parts","split","length","homeRoomId","roomId","parseInt","topLevelContextCode","linkTracker","eventUrlPrefix","addCallback","OPENROOM","k","_arg_2","_arg_3","map","context","index","results","result"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ConvertGlobalRoomIdMessageComposer, HabboWebTools, ILinkEventTracker, LegacyExternalInterface, NavigatorCategoryDataParser, NavigatorInitComposer, NavigatorSearchComposer, NavigatorSearchResultSet, NavigatorTopLevelContext, RoomDataParser, RoomSessionEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { AddEventLinkTracker, DoorStateType, LocalizeText, RemoveLinkEventTracker, SendMessageComposer, TryVisitRoom } from '../../api';\nimport { Base, Column, NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, Text, NitroCardView, Flex } from '../../common';\nimport { UseRoomSessionManagerEvent, useSharedNavigatorData } from '../../hooks';\nimport { NavigatorContextProvider } from './NavigatorContext';\nimport { NavigatorMessageHandler } from './NavigatorMessageHandler';\nimport { NavigatorDoorStateView } from './views/NavigatorDoorStateView';\nimport { NavigatorRoomCreatorView } from './views/NavigatorRoomCreatorView';\nimport { NavigatorRoomInfoView } from './views/NavigatorRoomInfoView';\nimport { NavigatorRoomLinkView } from './views/NavigatorRoomLinkView';\nimport { NavigatorRoomSettingsView } from './views/room-settings/NavigatorRoomSettingsView';\nimport { NavigatorSearchResultView } from './views/search/NavigatorSearchResultView';\nimport { NavigatorSearchView } from './views/search/NavigatorSearchView';\n\nexport const NavigatorView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const [ isReady, setIsReady ] = useState(false);\n    const [ isCreatorOpen, setCreatorOpen ] = useState(false);\n    const [ isRoomInfoOpen, setRoomInfoOpen ] = useState(false);\n    const [ isRoomLinkOpen, setRoomLinkOpen ] = useState(false);\n    const [ isLoading, setIsLoading ] = useState(false);\n    const [ needsInit, setNeedsInit ] = useState(true);\n    const [ needsSearch, setNeedsSearch ] = useState(false);\n    const [ categories, setCategories ] = useState<NavigatorCategoryDataParser[]>(null);\n    const [ topLevelContext, setTopLevelContext ] = useState<NavigatorTopLevelContext>(null);\n    const [ topLevelContexts, setTopLevelContexts ] = useState<NavigatorTopLevelContext[]>(null);\n    const [ navigatorData, setNavigatorData ] = useSharedNavigatorData();\n    const [ doorData, setDoorData ] = useState<{ roomInfo: RoomDataParser, state: number }>({ roomInfo: null, state: DoorStateType.NONE });\n    const [ searchResult, setSearchResult ] = useState<NavigatorSearchResultSet>(null);\n    const pendingSearch = useRef<{ value: string, code: string }>(null);\n\n    const onRoomSessionEvent = useCallback((event: RoomSessionEvent) =>\n    {\n        switch(event.type)\n        {\n            case RoomSessionEvent.CREATED:\n                setIsVisible(false);\n                setCreatorOpen(false);\n                return;\n        }\n    }, []);\n\n    UseRoomSessionManagerEvent(RoomSessionEvent.CREATED, onRoomSessionEvent);\n\n    const sendSearch = useCallback((searchValue: string, contextCode: string) =>\n    {\n        SendMessageComposer(new NavigatorSearchComposer(contextCode, searchValue));\n\n        setIsLoading(true);\n    }, []);\n\n    const reloadCurrentSearch = useCallback(() =>\n    {\n        if(!isReady)\n        {\n            setNeedsSearch(true);\n            \n            return;\n        }\n\n        if(pendingSearch.current)\n        {\n            sendSearch(pendingSearch.current.value, pendingSearch.current.code);\n\n            pendingSearch.current = null;\n\n            return;\n        }\n\n        if(searchResult)\n        {\n            sendSearch(searchResult.data, searchResult.code);\n\n            return;\n        }\n\n        if(!topLevelContext) return;\n        \n        sendSearch('', topLevelContext.code);\n    }, [ isReady, searchResult, topLevelContext, sendSearch ]);\n\n    const linkReceived = useCallback((url: string) =>\n    {\n        const parts = url.split('/');\n\n        if(parts.length < 2) return;\n\n        switch(parts[1])\n        {\n            case 'show': {\n                setIsVisible(true);\n                setNeedsSearch(true);\n                return;\n            }\n            case 'hide':\n                setIsVisible(false);\n                return;\n            case 'toggle': {\n                if(isVisible)\n                {\n                    setIsVisible(false);\n\n                    return;\n                }\n\n                setIsVisible(true);\n                setNeedsSearch(true);\n                return;\n            }\n            case 'toggle-room-info':\n                setRoomInfoOpen(value => !value);\n                return;\n            case 'toggle-room-link':\n                setRoomLinkOpen(value => !value);\n                return;\n            case 'goto':\n                if(parts.length <= 2) return;\n\n                switch(parts[2])\n                {\n                    case 'home':\n                        if(navigatorData.homeRoomId <= 0) return;\n\n                        TryVisitRoom(navigatorData.homeRoomId);\n                        break;\n                    default: {\n                        const roomId = parseInt(parts[2]);\n\n                        TryVisitRoom(roomId);\n                    }\n                }\n                return;\n            case 'create':\n                setCreatorOpen(value => !value);\n                return;\n            case 'close-creator':\n                setCreatorOpen(false);\n                return;\n            case 'search':\n                if(parts.length > 2)\n                {\n                    const topLevelContextCode = parts[2];\n\n                    let searchValue = '';\n\n                    if(parts.length > 3) searchValue = parts[3];\n\n                    pendingSearch.current = { value: searchValue, code: topLevelContextCode };\n\n                    setIsVisible(true);\n                    setNeedsSearch(true);\n                }\n                return;\n        } \n    }, [ isVisible, navigatorData ]);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived,\n            eventUrlPrefix: 'navigator/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, [ linkReceived ]);\n\n    useEffect(() =>\n    {\n        if(!searchResult) return;\n\n        setIsLoading(false);\n    }, [ searchResult ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible || !isReady || !needsSearch) return;\n\n        reloadCurrentSearch();\n\n        setNeedsSearch(false);\n    }, [ isVisible, isReady, needsSearch, reloadCurrentSearch ]);\n\n    useEffect(() =>\n    {\n        if(isReady || !topLevelContext) return;\n\n        setIsReady(true);\n    }, [ isReady, topLevelContext ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible || !needsInit) return;\n\n        SendMessageComposer(new NavigatorInitComposer());\n\n        setNeedsInit(false);\n    }, [ isVisible, needsInit ]);\n\n    useEffect(() =>\n    {\n        LegacyExternalInterface.addCallback(HabboWebTools.OPENROOM, (k: string, _arg_2: boolean = false, _arg_3: string = null) => SendMessageComposer(new ConvertGlobalRoomIdMessageComposer(k)));\n    }, []);\n\n    return (\n        <NavigatorContextProvider value={ { categories, setCategories, topLevelContext, setTopLevelContext, topLevelContexts, setTopLevelContexts, navigatorData, setNavigatorData, doorData, setDoorData, searchResult, setSearchResult } }>\n            <NavigatorMessageHandler />\n            { isVisible &&\n                <NitroCardView uniqueKey=\"navigator\" className=\"nitro-navigator\">\n                    <NitroCardHeaderView headerText={ LocalizeText('navigator.title') } onCloseClick={ event => setIsVisible(false) } />\n                    <NitroCardTabsView>\n                        { topLevelContexts && (topLevelContexts.length > 0) && topLevelContexts.map((context, index) =>\n                        {\n                            return (\n                                <NitroCardTabsItemView key={ index } isActive={ ((topLevelContext === context)) } onClick={ event => sendSearch('', context.code) }>\n                                    { LocalizeText(('navigator.toplevelview.' + context.code)) }\n                                </NitroCardTabsItemView>\n                            );\n                        }) }\n                    </NitroCardTabsView>\n                    <NitroCardContentView position=\"relative\">\n                        { isLoading &&\n                            <Base fit position=\"absolute\" className=\"top-0 start-0 z-index-1 bg-muted opacity-0-5\" /> }\n                        <>\n                            <NavigatorSearchView sendSearch={ sendSearch } />\n                            <Column overflow=\"auto\">\n                                { (searchResult && searchResult.results.map((result, index) => <NavigatorSearchResultView key={ index } searchResult={ result } />)) }\n                            </Column>\n                        </>\n                        <Flex className=\"nav-bottom\">\n                            <Flex className=\"nav-bottom-buttons position-absolute\">\n                                <Flex className=\"nav-create-room\" onClick={ (event) => setCreatorOpen(value => !value) }>\n                                    <Text variant=\"white\" bold className=\"nav-bottom-buttons-text\">\n                                        { LocalizeText('navigator.createroom.create') }\n                                    </Text>\n                                </Flex>\n                                <Flex className=\"nav-random-room\">\n                                    <Text variant=\"white\" bold className=\"nav-bottom-buttons-text\">\n                                        { LocalizeText('navigator.random.room') }\n                                    </Text>\n                                </Flex>\n                            </Flex>\n                        </Flex>\n                    </NitroCardContentView>\n                </NitroCardView> }\n            { isCreatorOpen && <NavigatorRoomCreatorView /> }\n            <NavigatorDoorStateView />\n            { isRoomInfoOpen && <NavigatorRoomInfoView onCloseClick={ () => setRoomInfoOpen(false) } /> }\n            { isRoomLinkOpen && <NavigatorRoomLinkView onCloseClick={ () => setRoomLinkOpen(false) } /> }\n            <NavigatorRoomSettingsView />\n        </NavigatorContextProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}