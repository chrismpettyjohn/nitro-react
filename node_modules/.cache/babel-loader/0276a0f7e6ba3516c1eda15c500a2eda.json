{"ast":null,"code":"import { NitroLogger } from '../../../core/common/logger/NitroLogger';\nimport { RoomObjectVariable } from '../object/RoomObjectVariable';\nexport class TileObjectMap {\n  constructor(k, _arg_2) {\n    this._tileObjectMap = void 0;\n    this._width = void 0;\n    this._height = void 0;\n    this._tileObjectMap = new Map();\n    let index = 0;\n\n    while (index < _arg_2) {\n      this._tileObjectMap.set(index, new Map());\n\n      index++;\n    }\n\n    this._width = k;\n    this._height = _arg_2;\n  }\n\n  clear() {\n    for (const k of this._tileObjectMap.values()) {\n      if (!k) continue;\n      k.clear();\n    }\n\n    this._tileObjectMap.clear();\n  }\n\n  populate(k) {\n    this.clear();\n\n    for (const _local_2 of k) this.addRoomObject(_local_2);\n  }\n\n  dispose() {\n    this._tileObjectMap = null;\n    this._width = 0;\n    this._height = 0;\n  }\n\n  getObjectIntTile(k, _arg_2) {\n    if (k >= 0 && k < this._width && _arg_2 >= 0 && _arg_2 < this._height) {\n      const existing = this._tileObjectMap.get(_arg_2);\n\n      if (existing) return existing.get(k);\n    }\n\n    return null;\n  }\n\n  setObjectInTile(k, _arg_2, _arg_3) {\n    if (!_arg_3.isReady) {\n      NitroLogger.log('Assigning non initialized object to tile object map!');\n      return;\n    }\n\n    if (k >= 0 && k < this._width && _arg_2 >= 0 && _arg_2 < this._height) {\n      const existing = this._tileObjectMap.get(_arg_2);\n\n      if (existing) existing.set(k, _arg_3);\n    }\n  }\n\n  addRoomObject(k) {\n    if (!k || !k.model || !k.isReady) return;\n    const location = k.getLocation();\n    const direction = k.getDirection();\n    if (!location || !direction) return;\n    let sizeX = k.model.getValue(RoomObjectVariable.FURNITURE_SIZE_X);\n    let sizeY = k.model.getValue(RoomObjectVariable.FURNITURE_SIZE_Y);\n    if (sizeX < 1) sizeX = 1;\n    if (sizeY < 1) sizeY = 1;\n    const directionNumber = Math.trunc(direction.x + 45) % 360 / 90;\n    if (directionNumber === 1 || directionNumber === 3) [sizeX, sizeY] = [sizeY, sizeX];\n    let y = location.y;\n\n    while (y < location.y + sizeY) {\n      let x = location.x;\n\n      while (x < location.x + sizeX) {\n        const roomObject = this.getObjectIntTile(x, y);\n\n        if (!roomObject || !(roomObject === k) && roomObject.getLocation().z <= location.z) {\n          this.setObjectInTile(x, y, k);\n        }\n\n        x++;\n      }\n\n      y++;\n    }\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/utils/TileObjectMap.ts"],"names":["NitroLogger","RoomObjectVariable","TileObjectMap","constructor","k","_arg_2","_tileObjectMap","_width","_height","Map","index","set","clear","values","populate","_local_2","addRoomObject","dispose","getObjectIntTile","existing","get","setObjectInTile","_arg_3","isReady","log","model","location","getLocation","direction","getDirection","sizeX","getValue","FURNITURE_SIZE_X","sizeY","FURNITURE_SIZE_Y","directionNumber","Math","trunc","x","y","roomObject","z"],"mappings":"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","sourcesContent":["import { NitroLogger } from '../../../core/common/logger/NitroLogger';\r\nimport { IRoomObject } from '../../../room/object/IRoomObject';\r\nimport { RoomObjectVariable } from '../object/RoomObjectVariable';\r\n\r\nexport class TileObjectMap\r\n{\r\n    private _tileObjectMap: Map<number, Map<number, IRoomObject>>;\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    constructor(k: number, _arg_2: number)\r\n    {\r\n        this._tileObjectMap = new Map();\r\n\r\n        let index = 0;\r\n\r\n        while(index < _arg_2)\r\n        {\r\n            this._tileObjectMap.set(index, new Map());\r\n\r\n            index++;\r\n        }\r\n\r\n        this._width = k;\r\n        this._height = _arg_2;\r\n    }\r\n\r\n    public clear(): void\r\n    {\r\n        for(const k of this._tileObjectMap.values())\r\n        {\r\n            if(!k) continue;\r\n\r\n            k.clear();\r\n        }\r\n\r\n        this._tileObjectMap.clear();\r\n    }\r\n\r\n    public populate(k: IRoomObject[]): void\r\n    {\r\n        this.clear();\r\n\r\n        for(const _local_2 of k) this.addRoomObject(_local_2);\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._tileObjectMap = null;\r\n        this._width = 0;\r\n        this._height = 0;\r\n    }\r\n\r\n    public getObjectIntTile(k: number, _arg_2: number): IRoomObject\r\n    {\r\n        if((((k >= 0) && (k < this._width)) && (_arg_2 >= 0)) && (_arg_2 < this._height))\r\n        {\r\n            const existing = this._tileObjectMap.get(_arg_2);\r\n\r\n            if(existing) return existing.get(k);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public setObjectInTile(k: number, _arg_2: number, _arg_3:IRoomObject): void\r\n    {\r\n        if(!_arg_3.isReady)\r\n        {\r\n            NitroLogger.log('Assigning non initialized object to tile object map!');\r\n\r\n            return;\r\n        }\r\n\r\n        if((((k >= 0) && (k < this._width)) && (_arg_2 >= 0)) && (_arg_2 < this._height))\r\n        {\r\n            const existing = this._tileObjectMap.get(_arg_2);\r\n\r\n            if(existing) existing.set(k, _arg_3);\r\n        }\r\n    }\r\n\r\n    public addRoomObject(k: IRoomObject): void\r\n    {\r\n        if(!k || !k.model || !k.isReady) return;\r\n\r\n        const location = k.getLocation();\r\n        const direction = k.getDirection();\r\n\r\n        if(!location || !direction) return;\r\n\r\n        let sizeX = k.model.getValue<number>(RoomObjectVariable.FURNITURE_SIZE_X);\r\n        let sizeY = k.model.getValue<number>(RoomObjectVariable.FURNITURE_SIZE_Y);\r\n\r\n        if(sizeX < 1) sizeX = 1;\r\n        if(sizeY < 1) sizeY = 1;\r\n\r\n        const directionNumber = ((Math.trunc((direction.x + 45)) % 360) / 90);\r\n\r\n        if((directionNumber === 1) || (directionNumber === 3)) [ sizeX, sizeY ] = [ sizeY, sizeX ];\r\n\r\n        let y = location.y;\r\n\r\n        while(y < (location.y + sizeY))\r\n        {\r\n            let x = location.x;\r\n\r\n            while(x < (location.x + sizeX))\r\n            {\r\n                const roomObject = this.getObjectIntTile(x, y);\r\n\r\n                if((!(roomObject)) || ((!(roomObject === k)) && (roomObject.getLocation().z <= location.z)))\r\n                {\r\n                    this.setObjectInTile(x, y, k);\r\n                }\r\n\r\n                x++;\r\n            }\r\n\r\n            y++;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}