{"ast":null,"code":"import { Vector3d } from './Vector3d';\nexport class ColorConverter {\n  static hex2rgb(hex) {\n    let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    out[0] = (hex >> 16 & 0xFF) / 255;\n    out[1] = (hex >> 8 & 0xFF) / 255;\n    out[2] = (hex & 0xFF) / 255;\n    return out;\n  }\n\n  static hex2rgba(hex) {\n    let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    out[0] = (hex >> 16 & 0xFF) / 255;\n    out[1] = (hex >> 8 & 0xFF) / 255;\n    out[2] = (hex & 0xFF) / 255;\n    out[3] = hex & 0xFF;\n    return out;\n  }\n\n  static rgb2hex(rgb) {\n    return (rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + (rgb[2] * 255 | 0);\n  }\n\n  static rgba2hex(rgb) {\n    return (rgb[0] * 255 << 16) + (rgb[1] * 255 << 8) + (rgb[2] * 255 | 0) + (rgb[3] | 0);\n  }\n\n  static rgbStringToHex(rgb) {\n    const extracted = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n    return '#' + ColorConverter.getHex(extracted[1]) + ColorConverter.getHex(extracted[2]) + ColorConverter.getHex(extracted[3]);\n  }\n\n  static getHex(x) {\n    return isNaN(x) ? '00' : ColorConverter.HEX_DIGITS[(x - x % 16) / 16] + ColorConverter.HEX_DIGITS[x % 16];\n  }\n\n  static int2rgb(color) {\n    color >>>= 0;\n    const b = color & 0xFF;\n    const g = (color & 0xFF00) >>> 8;\n    const r = (color & 0xFF0000) >>> 16;\n    const a = ((color & 0xFF000000) >>> 24) / 255;\n    return 'rgba(' + [r, g, b, 1].join(',') + ')';\n  }\n\n  static rgbToHSL(k) {\n    const _local_2 = (k >> 16 & 0xFF) / 0xFF;\n\n    const _local_3 = (k >> 8 & 0xFF) / 0xFF;\n\n    const _local_4 = (k & 0xFF) / 0xFF;\n\n    const _local_5 = Math.max(_local_2, _local_3, _local_4);\n\n    const _local_6 = Math.min(_local_2, _local_3, _local_4);\n\n    const _local_7 = _local_5 - _local_6;\n\n    let _local_8 = 0;\n    let _local_9 = 0;\n    let _local_10 = 0;\n\n    if (_local_7 == 0) {\n      _local_8 = 0;\n    } else {\n      if (_local_5 == _local_2) {\n        if (_local_3 > _local_4) {\n          _local_8 = 60 * (_local_3 - _local_4) / _local_7;\n        } else {\n          _local_8 = 60 * (_local_3 - _local_4) / _local_7 + 360;\n        }\n      } else {\n        if (_local_5 == _local_3) {\n          _local_8 = 60 * (_local_4 - _local_2) / _local_7 + 120;\n        } else {\n          if (_local_5 == _local_4) {\n            _local_8 = 60 * (_local_2 - _local_3) / _local_7 + 240;\n          }\n        }\n      }\n    }\n\n    _local_9 = 0.5 * (_local_5 + _local_6);\n\n    if (_local_7 == 0) {\n      _local_10 = 0;\n    } else {\n      if (_local_9 <= 0.5) {\n        _local_10 = _local_7 / _local_9 * 0.5;\n      } else {\n        _local_10 = _local_7 / (1 - _local_9) * 0.5;\n      }\n    }\n\n    const _local_11 = Math.round(_local_8 / 360 * 0xFF);\n\n    const _local_12 = Math.round(_local_10 * 0xFF);\n\n    const _local_13 = Math.round(_local_9 * 0xFF);\n\n    const _local_14 = (_local_11 << 16) + (_local_12 << 8) + _local_13;\n\n    return _local_14;\n  }\n\n  static hslToRGB(k) {\n    let _local_12;\n\n    let _local_13;\n\n    let _local_14;\n\n    let _local_15;\n\n    let _local_16;\n\n    const _local_2 = (k >> 16 & 0xFF) / 0xFF;\n\n    const _local_3 = (k >> 8 & 0xFF) / 0xFF;\n\n    const _local_4 = (k & 0xFF) / 0xFF;\n\n    let _local_5 = 0;\n    let _local_6 = 0;\n    let _local_7 = 0;\n\n    if (_local_3 > 0) {\n      _local_12 = 0;\n      _local_13 = 0;\n\n      if (_local_4 < 0.5) {\n        _local_12 = _local_4 * (1 + _local_3);\n      } else {\n        _local_12 = _local_4 + _local_3 - _local_4 * _local_3;\n      }\n\n      _local_13 = 2 * _local_4 - _local_12;\n      _local_14 = _local_2 + 1 / 3;\n      _local_15 = _local_2;\n      _local_16 = _local_2 - 1 / 3;\n\n      if (_local_14 < 0) {\n        _local_14 = _local_14 + 1;\n      } else {\n        if (_local_14 > 1) {\n          _local_14--;\n        }\n      }\n\n      if (_local_15 < 0) {\n        _local_15 = _local_15 + 1;\n      } else {\n        if (_local_15 > 1) {\n          _local_15--;\n        }\n      }\n\n      if (_local_16 < 0) {\n        _local_16 = _local_16 + 1;\n      } else {\n        if (_local_16 > 1) {\n          _local_16--;\n        }\n      }\n\n      if (_local_14 * 6 < 1) {\n        _local_5 = _local_13 + (_local_12 - _local_13) * 6 * _local_14;\n      } else {\n        if (_local_14 * 2 < 1) {\n          _local_5 = _local_12;\n        } else {\n          if (_local_14 * 3 < 2) {\n            _local_5 = _local_13 + (_local_12 - _local_13) * 6 * (2 / 3 - _local_14);\n          } else {\n            _local_5 = _local_13;\n          }\n        }\n      }\n\n      if (_local_15 * 6 < 1) {\n        _local_6 = _local_13 + (_local_12 - _local_13) * 6 * _local_15;\n      } else {\n        if (_local_15 * 2 < 1) {\n          _local_6 = _local_12;\n        } else {\n          if (_local_15 * 3 < 2) {\n            _local_6 = _local_13 + (_local_12 - _local_13) * 6 * (2 / 3 - _local_15);\n          } else {\n            _local_6 = _local_13;\n          }\n        }\n      }\n\n      if (_local_16 * 6 < 1) {\n        _local_7 = _local_13 + (_local_12 - _local_13) * 6 * _local_16;\n      } else {\n        if (_local_16 * 2 < 1) {\n          _local_7 = _local_12;\n        } else {\n          if (_local_16 * 3 < 2) {\n            _local_7 = _local_13 + (_local_12 - _local_13) * 6 * (2 / 3 - _local_16);\n          } else {\n            _local_7 = _local_13;\n          }\n        }\n      }\n    } else {\n      _local_5 = _local_4;\n      _local_6 = _local_4;\n      _local_7 = _local_4;\n    }\n\n    const _local_8 = Math.round(_local_5 * 0xFF);\n\n    const _local_9 = Math.round(_local_6 * 0xFF);\n\n    const _local_10 = Math.round(_local_7 * 0xFF);\n\n    const _local_11 = (_local_8 << 16) + (_local_9 << 8) + _local_10;\n\n    return _local_11;\n  }\n\n  static rgb2xyz(k) {\n    let _local_2 = (k >> 16 & 0xFF) / 0xFF;\n\n    let _local_3 = (k >> 8 & 0xFF) / 0xFF;\n\n    let _local_4 = (k >> 0 & 0xFF) / 0xFF;\n\n    if (_local_2 > 0.04045) {\n      _local_2 = Math.pow((_local_2 + 0.055) / 1.055, 2.4);\n    } else {\n      _local_2 = _local_2 / 12.92;\n    }\n\n    if (_local_3 > 0.04045) {\n      _local_3 = Math.pow((_local_3 + 0.055) / 1.055, 2.4);\n    } else {\n      _local_3 = _local_3 / 12.92;\n    }\n\n    if (_local_4 > 0.04045) {\n      _local_4 = Math.pow((_local_4 + 0.055) / 1.055, 2.4);\n    } else {\n      _local_4 = _local_4 / 12.92;\n    }\n\n    _local_2 = _local_2 * 100;\n    _local_3 = _local_3 * 100;\n    _local_4 = _local_4 * 100;\n    return new Vector3d(_local_2 * 0.4124 + _local_3 * 0.3576 + _local_4 * 0.1805, _local_2 * 0.2126 + _local_3 * 0.7152 + _local_4 * 0.0722, _local_2 * 0.0193 + _local_3 * 0.1192 + _local_4 * 0.9505);\n  }\n\n  static xyz2CieLab(k) {\n    let _local_2 = k.x / 95.047;\n\n    let _local_3 = k.y / 100;\n\n    let _local_4 = k.z / 108.883;\n\n    if (_local_2 > 0.008856) {\n      _local_2 = Math.pow(_local_2, 1 / 3);\n    } else {\n      _local_2 = 7.787 * _local_2 + 16 / 116;\n    }\n\n    if (_local_3 > 0.008856) {\n      _local_3 = Math.pow(_local_3, 1 / 3);\n    } else {\n      _local_3 = 7.787 * _local_3 + 16 / 116;\n    }\n\n    if (_local_4 > 0.008856) {\n      _local_4 = Math.pow(_local_4, 1 / 3);\n    } else {\n      _local_4 = 7.787 * _local_4 + 16 / 116;\n    }\n\n    return new Vector3d(116 * _local_3 - 16, 500 * (_local_2 - _local_3), 200 * (_local_3 - _local_4));\n  }\n\n  static rgb2CieLab(k) {\n    return ColorConverter.xyz2CieLab(ColorConverter.rgb2xyz(k));\n  }\n\n}\nColorConverter.HEX_DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/utils/ColorConverter.ts"],"names":["Vector3d","ColorConverter","hex2rgb","hex","out","hex2rgba","rgb2hex","rgb","rgba2hex","rgbStringToHex","extracted","match","getHex","x","isNaN","HEX_DIGITS","int2rgb","color","b","g","r","a","join","rgbToHSL","k","_local_2","_local_3","_local_4","_local_5","Math","max","_local_6","min","_local_7","_local_8","_local_9","_local_10","_local_11","round","_local_12","_local_13","_local_14","hslToRGB","_local_15","_local_16","rgb2xyz","pow","xyz2CieLab","y","z","rgb2CieLab"],"mappings":"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","sourcesContent":["import { IVector3D } from './IVector3D';\r\nimport { Vector3d } from './Vector3d';\r\n\r\nexport class ColorConverter\r\n{\r\n    private static HEX_DIGITS = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' ];\r\n\r\n    public static hex2rgb(hex: number, out: Array<number> | Float32Array = []): Array<number> | Float32Array\r\n    {\r\n        out[0] = ((hex >> 16) & 0xFF) / 255;\r\n        out[1] = ((hex >> 8) & 0xFF) / 255;\r\n        out[2] = (hex & 0xFF) / 255;\r\n\r\n        return out;\r\n    }\r\n\r\n    public static hex2rgba(hex: number, out: Array<number> | Float32Array = []): Array<number> | Float32Array\r\n    {\r\n        out[0] = ((hex >> 16) & 0xFF) / 255;\r\n        out[1] = ((hex >> 8) & 0xFF) / 255;\r\n        out[2] = (hex & 0xFF) / 255;\r\n        out[3] = (hex & 0xFF);\r\n\r\n        return out;\r\n    }\r\n\r\n    public static rgb2hex(rgb: number[] | Float32Array): number\r\n    {\r\n        return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0));\r\n    }\r\n\r\n    public static rgba2hex(rgb: number[] | Float32Array): number\r\n    {\r\n        return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0) + (rgb[3] | 0));\r\n    }\r\n\r\n    public static rgbStringToHex(rgb: string): string\r\n    {\r\n        const extracted = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\r\n\r\n        return '#' + ColorConverter.getHex(extracted[1]) + ColorConverter.getHex(extracted[2]) + ColorConverter.getHex(extracted[3]);\r\n    }\r\n\r\n    public static getHex(x: any)\r\n    {\r\n        return isNaN(x) ? '00' : ColorConverter.HEX_DIGITS[(x - x % 16) / 16] + ColorConverter.HEX_DIGITS[x % 16];\r\n    }\r\n\r\n    public static int2rgb(color: number): string\r\n    {\r\n        color >>>= 0;\r\n        const b = color & 0xFF;\r\n        const g = (color & 0xFF00) >>> 8;\r\n        const r = (color & 0xFF0000) >>> 16;\r\n        const a = ( (color & 0xFF000000) >>> 24 ) / 255;\r\n\r\n        return 'rgba(' + [r, g, b, 1].join(',') + ')';\r\n    }\r\n\r\n    public static rgbToHSL(k: number): number\r\n    {\r\n        const _local_2: number = (((k >> 16) & 0xFF) / 0xFF);\r\n        const _local_3: number = (((k >> 8) & 0xFF) / 0xFF);\r\n        const _local_4: number = ((k & 0xFF) / 0xFF);\r\n        const _local_5: number = Math.max(_local_2, _local_3, _local_4);\r\n        const _local_6: number = Math.min(_local_2, _local_3, _local_4);\r\n        const _local_7: number = (_local_5 - _local_6);\r\n        let _local_8 = 0;\r\n        let _local_9 = 0;\r\n        let _local_10 = 0;\r\n        if(_local_7 == 0)\r\n        {\r\n            _local_8 = 0;\r\n        }\r\n        else\r\n        {\r\n            if(_local_5 == _local_2)\r\n            {\r\n                if(_local_3 > _local_4)\r\n                {\r\n                    _local_8 = ((60 * (_local_3 - _local_4)) / _local_7);\r\n                }\r\n                else\r\n                {\r\n                    _local_8 = (((60 * (_local_3 - _local_4)) / _local_7) + 360);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(_local_5 == _local_3)\r\n                {\r\n                    _local_8 = (((60 * (_local_4 - _local_2)) / _local_7) + 120);\r\n                }\r\n                else\r\n                {\r\n                    if(_local_5 == _local_4)\r\n                    {\r\n                        _local_8 = (((60 * (_local_2 - _local_3)) / _local_7) + 240);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _local_9 = (0.5 * (_local_5 + _local_6));\r\n        if(_local_7 == 0)\r\n        {\r\n            _local_10 = 0;\r\n        }\r\n        else\r\n        {\r\n            if(_local_9 <= 0.5)\r\n            {\r\n                _local_10 = ((_local_7 / _local_9) * 0.5);\r\n            }\r\n            else\r\n            {\r\n                _local_10 = ((_local_7 / (1 - _local_9)) * 0.5);\r\n            }\r\n        }\r\n        const _local_11: number = Math.round(((_local_8 / 360) * 0xFF));\r\n        const _local_12: number = Math.round((_local_10 * 0xFF));\r\n        const _local_13: number = Math.round((_local_9 * 0xFF));\r\n        const _local_14: number = (((_local_11 << 16) + (_local_12 << 8)) + _local_13);\r\n        return _local_14;\r\n    }\r\n\r\n    public static hslToRGB(k: number): number\r\n    {\r\n        let _local_12: number;\r\n        let _local_13: number;\r\n        let _local_14: number;\r\n        let _local_15: number;\r\n        let _local_16: number;\r\n        const _local_2: number = (((k >> 16) & 0xFF) / 0xFF);\r\n        const _local_3: number = (((k >> 8) & 0xFF) / 0xFF);\r\n        const _local_4: number = ((k & 0xFF) / 0xFF);\r\n        let _local_5 = 0;\r\n        let _local_6 = 0;\r\n        let _local_7 = 0;\r\n        if(_local_3 > 0)\r\n        {\r\n            _local_12 = 0;\r\n            _local_13 = 0;\r\n            if(_local_4 < 0.5)\r\n            {\r\n                _local_12 = (_local_4 * (1 + _local_3));\r\n            }\r\n            else\r\n            {\r\n                _local_12 = ((_local_4 + _local_3) - (_local_4 * _local_3));\r\n            }\r\n            _local_13 = ((2 * _local_4) - _local_12);\r\n            _local_14 = (_local_2 + (1 / 3));\r\n            _local_15 = _local_2;\r\n            _local_16 = (_local_2 - (1 / 3));\r\n            if(_local_14 < 0)\r\n            {\r\n                _local_14 = (_local_14 + 1);\r\n            }\r\n            else\r\n            {\r\n                if(_local_14 > 1)\r\n                {\r\n                    _local_14--;\r\n                }\r\n            }\r\n            if(_local_15 < 0)\r\n            {\r\n                _local_15 = (_local_15 + 1);\r\n            }\r\n            else\r\n            {\r\n                if(_local_15 > 1)\r\n                {\r\n                    _local_15--;\r\n                }\r\n            }\r\n            if(_local_16 < 0)\r\n            {\r\n                _local_16 = (_local_16 + 1);\r\n            }\r\n            else\r\n            {\r\n                if(_local_16 > 1)\r\n                {\r\n                    _local_16--;\r\n                }\r\n            }\r\n            if((_local_14 * 6) < 1)\r\n            {\r\n                _local_5 = (_local_13 + (((_local_12 - _local_13) * 6) * _local_14));\r\n            }\r\n            else\r\n            {\r\n                if((_local_14 * 2) < 1)\r\n                {\r\n                    _local_5 = _local_12;\r\n                }\r\n                else\r\n                {\r\n                    if((_local_14 * 3) < 2)\r\n                    {\r\n                        _local_5 = (_local_13 + (((_local_12 - _local_13) * 6) * ((2 / 3) - _local_14)));\r\n                    }\r\n                    else\r\n                    {\r\n                        _local_5 = _local_13;\r\n                    }\r\n                }\r\n            }\r\n            if((_local_15 * 6) < 1)\r\n            {\r\n                _local_6 = (_local_13 + (((_local_12 - _local_13) * 6) * _local_15));\r\n            }\r\n            else\r\n            {\r\n                if((_local_15 * 2) < 1)\r\n                {\r\n                    _local_6 = _local_12;\r\n                }\r\n                else\r\n                {\r\n                    if((_local_15 * 3) < 2)\r\n                    {\r\n                        _local_6 = (_local_13 + (((_local_12 - _local_13) * 6) * ((2 / 3) - _local_15)));\r\n                    }\r\n                    else\r\n                    {\r\n                        _local_6 = _local_13;\r\n                    }\r\n                }\r\n            }\r\n            if((_local_16 * 6) < 1)\r\n            {\r\n                _local_7 = (_local_13 + (((_local_12 - _local_13) * 6) * _local_16));\r\n            }\r\n            else\r\n            {\r\n                if((_local_16 * 2) < 1)\r\n                {\r\n                    _local_7 = _local_12;\r\n                }\r\n                else\r\n                {\r\n                    if((_local_16 * 3) < 2)\r\n                    {\r\n                        _local_7 = (_local_13 + (((_local_12 - _local_13) * 6) * ((2 / 3) - _local_16)));\r\n                    }\r\n                    else\r\n                    {\r\n                        _local_7 = _local_13;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            _local_5 = _local_4;\r\n            _local_6 = _local_4;\r\n            _local_7 = _local_4;\r\n        }\r\n        const _local_8: number = Math.round((_local_5 * 0xFF));\r\n        const _local_9: number = Math.round((_local_6 * 0xFF));\r\n        const _local_10: number = Math.round((_local_7 * 0xFF));\r\n        const _local_11: number = (((_local_8 << 16) + (_local_9 << 8)) + _local_10);\r\n        return _local_11;\r\n    }\r\n\r\n    public static rgb2xyz(k: number): IVector3D\r\n    {\r\n        let _local_2: number = (((k >> 16) & 0xFF) / 0xFF);\r\n        let _local_3: number = (((k >> 8) & 0xFF) / 0xFF);\r\n        let _local_4: number = (((k >> 0) & 0xFF) / 0xFF);\r\n        if(_local_2 > 0.04045)\r\n        {\r\n            _local_2 = Math.pow(((_local_2 + 0.055) / 1.055), 2.4);\r\n        }\r\n        else\r\n        {\r\n            _local_2 = (_local_2 / 12.92);\r\n        }\r\n        if(_local_3 > 0.04045)\r\n        {\r\n            _local_3 = Math.pow(((_local_3 + 0.055) / 1.055), 2.4);\r\n        }\r\n        else\r\n        {\r\n            _local_3 = (_local_3 / 12.92);\r\n        }\r\n        if(_local_4 > 0.04045)\r\n        {\r\n            _local_4 = Math.pow(((_local_4 + 0.055) / 1.055), 2.4);\r\n        }\r\n        else\r\n        {\r\n            _local_4 = (_local_4 / 12.92);\r\n        }\r\n        _local_2 = (_local_2 * 100);\r\n        _local_3 = (_local_3 * 100);\r\n        _local_4 = (_local_4 * 100);\r\n        return new Vector3d((((_local_2 * 0.4124) + (_local_3 * 0.3576)) + (_local_4 * 0.1805)), (((_local_2 * 0.2126) + (_local_3 * 0.7152)) + (_local_4 * 0.0722)), (((_local_2 * 0.0193) + (_local_3 * 0.1192)) + (_local_4 * 0.9505)));\r\n    }\r\n\r\n    public static xyz2CieLab(k:IVector3D):IVector3D\r\n    {\r\n        let _local_2: number = (k.x / 95.047);\r\n        let _local_3: number = (k.y / 100);\r\n        let _local_4: number = (k.z / 108.883);\r\n        if(_local_2 > 0.008856)\r\n        {\r\n            _local_2 = Math.pow(_local_2, (1 / 3));\r\n        }\r\n        else\r\n        {\r\n            _local_2 = ((7.787 * _local_2) + (16 / 116));\r\n        }\r\n        if(_local_3 > 0.008856)\r\n        {\r\n            _local_3 = Math.pow(_local_3, (1 / 3));\r\n        }\r\n        else\r\n        {\r\n            _local_3 = ((7.787 * _local_3) + (16 / 116));\r\n        }\r\n        if(_local_4 > 0.008856)\r\n        {\r\n            _local_4 = Math.pow(_local_4, (1 / 3));\r\n        }\r\n        else\r\n        {\r\n            _local_4 = ((7.787 * _local_4) + (16 / 116));\r\n        }\r\n        return new Vector3d(((116 * _local_3) - 16), (500 * (_local_2 - _local_3)), (200 * (_local_3 - _local_4)));\r\n    }\r\n\r\n    public static rgb2CieLab(k: number):IVector3D\r\n    {\r\n        return ColorConverter.xyz2CieLab(ColorConverter.rgb2xyz(k));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}