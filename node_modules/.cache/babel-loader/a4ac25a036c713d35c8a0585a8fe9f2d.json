{"ast":null,"code":"import { AdvancedMap } from '../../../../../core';\nexport class UserSongDisksInventoryMessageParser {\n  constructor() {\n    this._songDiskInventory = new AdvancedMap();\n  }\n\n  flush() {\n    this._songDiskInventory.reset();\n\n    return true;\n  }\n\n  parse(wrapper) {\n    const count = wrapper.readInt();\n\n    for (let i = 0; i < count; i++) {\n      this._songDiskInventory.add(wrapper.readInt(), wrapper.readInt());\n    }\n\n    return true;\n  }\n\n  getDiskId(k) {\n    if (k >= 0 && k < this._songDiskInventory.length) {\n      return this._songDiskInventory.getKey(k);\n    }\n\n    return -1;\n  }\n\n  getSongId(k) {\n    if (k >= 0 && k < this._songDiskInventory.length) {\n      return this._songDiskInventory.getWithIndex(k);\n    }\n\n    return -1;\n  }\n\n  get songDiskCount() {\n    return this._songDiskInventory.length;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/sound/UserSongDisksInventoryMessageParser.ts"],"names":["AdvancedMap","UserSongDisksInventoryMessageParser","_songDiskInventory","flush","reset","parse","wrapper","count","readInt","i","add","getDiskId","k","length","getKey","getSongId","getWithIndex","songDiskCount"],"mappings":"AAAA,SAASA,WAAT,QAAiE,qBAAjE;AAEA,OAAO,MAAMC,mCAAN,CACP;AAAA;AAAA,SACYC,kBADZ,GAC8D,IAAIF,WAAJ,EAD9D;AAAA;;AAGIG,EAAAA,KAAK,GACL;AACI,SAAKD,kBAAL,CAAwBE,KAAxB;;AACA,WAAO,IAAP;AACH;;AAEDC,EAAAA,KAAK,CAACC,OAAD,EACL;AACI,UAAMC,KAAK,GAAGD,OAAO,CAACE,OAAR,EAAd;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAnB,EAA0BE,CAAC,EAA3B,EACA;AACI,WAAKP,kBAAL,CAAwBQ,GAAxB,CAA4BJ,OAAO,CAACE,OAAR,EAA5B,EAA+CF,OAAO,CAACE,OAAR,EAA/C;AACH;;AACD,WAAO,IAAP;AACH;;AAEMG,EAAAA,SAAS,CAACC,CAAD,EAChB;AACI,QAAKA,CAAC,IAAI,CAAN,IAAaA,CAAC,GAAG,KAAKV,kBAAL,CAAwBW,MAA7C,EACA;AACI,aAAO,KAAKX,kBAAL,CAAwBY,MAAxB,CAA+BF,CAA/B,CAAP;AACH;;AACD,WAAO,CAAC,CAAR;AACH;;AAEMG,EAAAA,SAAS,CAACH,CAAD,EAChB;AACI,QAAKA,CAAC,IAAI,CAAN,IAAaA,CAAC,GAAG,KAAKV,kBAAL,CAAwBW,MAA7C,EACA;AACI,aAAO,KAAKX,kBAAL,CAAwBc,YAAxB,CAAqCJ,CAArC,CAAP;AACH;;AACD,WAAO,CAAC,CAAR;AACH;;AAEuB,MAAbK,aAAa,GACxB;AACI,WAAO,KAAKf,kBAAL,CAAwBW,MAA/B;AACH;;AAzCL","sourcesContent":["import { AdvancedMap, IMessageDataWrapper, IMessageParser } from '../../../../../core';\r\n\r\nexport class UserSongDisksInventoryMessageParser implements IMessageParser\r\n{\r\n    private _songDiskInventory: AdvancedMap<number, number> = new AdvancedMap();\r\n\r\n    flush(): boolean\r\n    {\r\n        this._songDiskInventory.reset();\r\n        return true;\r\n    }\r\n\r\n    parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        const count = wrapper.readInt();\r\n\r\n        for(let i = 0; i < count; i++)\r\n        {\r\n            this._songDiskInventory.add(wrapper.readInt(), wrapper.readInt());\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public getDiskId(k: number): number\r\n    {\r\n        if(((k >= 0) && (k < this._songDiskInventory.length)))\r\n        {\r\n            return this._songDiskInventory.getKey(k);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public getSongId(k: number): number\r\n    {\r\n        if(((k >= 0) && (k < this._songDiskInventory.length)))\r\n        {\r\n            return this._songDiskInventory.getWithIndex(k);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public get songDiskCount(): number\r\n    {\r\n        return this._songDiskInventory.length;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}