{"ast":null,"code":"import { AnimationFrame } from './AnimationFrame';\nimport { AnimationFrameSequenceData } from './AnimationFrameSequenceData';\nexport class AnimationLayerData {\n  constructor(loopCount, frameRepeat, isRandom) {\n    this._frameSequences = void 0;\n    this._frameCount = void 0;\n    this._loopCount = void 0;\n    this._frameRepeat = void 0;\n    this._isRandom = void 0;\n    this._frameSequences = [];\n    this._frameCount = -1;\n    this._loopCount = loopCount < 0 ? 0 : loopCount;\n    this._frameRepeat = frameRepeat < 1 ? 1 : frameRepeat;\n    this._isRandom = isRandom;\n  }\n\n  get frameCount() {\n    if (this._frameCount < 0) this.calculateLength();\n    return this._frameCount;\n  }\n\n  dispose() {\n    if (!this._frameSequences || !this._frameSequences.length) return;\n\n    for (const sequence of this._frameSequences) {\n      if (!sequence) continue;\n      sequence.dispose();\n    }\n\n    this._frameSequences = [];\n  }\n\n  addFrameSequence(loopCount, isRandom) {\n    const sequence = new AnimationFrameSequenceData(loopCount, isRandom);\n\n    this._frameSequences.push(sequence);\n\n    return sequence;\n  }\n\n  calculateLength() {\n    this._frameCount = 0;\n\n    for (const sequence of this._frameSequences) {\n      if (!sequence) continue;\n      this._frameCount += sequence.frameCount;\n    }\n  }\n\n  getFrame(direction, frameCount) {\n    if (this._frameCount < 1) return null;\n    frameCount = frameCount / this._frameRepeat;\n\n    if (!this._isRandom) {\n      const count = Math.floor(frameCount / this._frameCount);\n      frameCount = Math.floor(frameCount % this._frameCount);\n      let doesRepeat = false;\n      let sequence = null;\n\n      if (this._loopCount > 0 && count >= this._loopCount || this._loopCount <= 0 && this._frameCount === 1) {\n        frameCount = this._frameCount - 1;\n        doesRepeat = true;\n      }\n\n      let sequenceFrameCount = 0;\n      let sequenceId = 0;\n\n      while (sequenceId < this._frameSequences.length) {\n        sequence = this._frameSequences[sequenceId];\n\n        if (sequence) {\n          if (frameCount < sequenceFrameCount + sequence.frameCount) break;\n          sequenceFrameCount += sequence.frameCount;\n        }\n\n        sequenceId++;\n      }\n\n      return this.getFrameFromSpecificSequence(direction, sequence, sequenceId, frameCount - sequenceFrameCount, doesRepeat);\n    }\n\n    const sequenceId = Math.trunc(this._frameSequences.length * Math.random());\n    const sequence = this._frameSequences[sequenceId];\n    if (sequence.frameCount < 1) return null;\n    return this.getFrameFromSpecificSequence(direction, sequence, sequenceId, 0, false);\n  }\n\n  getFrameFromSequence(direction, sequenceId, offset, frameCount) {\n    if (sequenceId < 0 || sequenceId >= this._frameSequences.length) return null;\n    const sequence = this._frameSequences[sequenceId];\n    if (!sequence) return null;\n    if (offset >= sequence.frameCount) return this.getFrame(direction, frameCount);\n    return this.getFrameFromSpecificSequence(direction, sequence, sequenceId, offset, false);\n  }\n\n  getFrameFromSpecificSequence(direction, sequence, sequenceId, offset, doesRepeat) {\n    if (!sequence) return null;\n    const frameIndex = sequence.getFrameIndex(offset);\n    const frame = sequence.getFrame(frameIndex);\n    if (!frame) return null;\n    let x = frame.getX(direction);\n    let y = frame.getY(direction);\n    const randomX = frame.randomX;\n    const randomY = frame.randomY;\n    let repeats = frame.repeats;\n    let isLastFrame = false;\n    if (randomX) x = Math.trunc(x + randomX * Math.random());\n    if (randomY) y = Math.trunc(y + randomY * Math.random());\n    if (repeats > 1) repeats = sequence.getRepeats(frameIndex);\n    let frameRepeats = this._frameRepeat * repeats;\n    if (doesRepeat) frameRepeats = AnimationFrame.FRAME_REPEAT_FOREVER;\n\n    if (!this._isRandom && !sequence.isRandom) {\n      if (sequenceId === this._frameSequences.length - 1 && offset === sequence.frameCount - 1) isLastFrame = true;\n    }\n\n    return AnimationFrame.allocate(frame.id, x, y, repeats, frameRepeats, isLastFrame, sequenceId, offset);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/AnimationLayerData.ts"],"names":["AnimationFrame","AnimationFrameSequenceData","AnimationLayerData","constructor","loopCount","frameRepeat","isRandom","_frameSequences","_frameCount","_loopCount","_frameRepeat","_isRandom","frameCount","calculateLength","dispose","length","sequence","addFrameSequence","push","getFrame","direction","count","Math","floor","doesRepeat","sequenceFrameCount","sequenceId","getFrameFromSpecificSequence","trunc","random","getFrameFromSequence","offset","frameIndex","getFrameIndex","frame","x","getX","y","getY","randomX","randomY","repeats","isLastFrame","getRepeats","frameRepeats","FRAME_REPEAT_FOREVER","allocate","id"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AAEA,OAAO,MAAMC,kBAAN,CACP;AAOIC,EAAAA,WAAW,CAACC,SAAD,EAAoBC,WAApB,EAAyCC,QAAzC,EACX;AAAA,SAPQC,eAOR;AAAA,SANQC,WAMR;AAAA,SALQC,UAKR;AAAA,SAJQC,YAIR;AAAA,SAHQC,SAGR;AACI,SAAKJ,eAAL,GAAuB,EAAvB;AACA,SAAKC,WAAL,GAAmB,CAAC,CAApB;AACA,SAAKC,UAAL,GAAmBL,SAAS,GAAG,CAAb,GAAkB,CAAlB,GAAsBA,SAAxC;AACA,SAAKM,YAAL,GAAqBL,WAAW,GAAG,CAAf,GAAoB,CAApB,GAAwBA,WAA5C;AACA,SAAKM,SAAL,GAAiBL,QAAjB;AACH;;AAEoB,MAAVM,UAAU,GACrB;AACI,QAAG,KAAKJ,WAAL,GAAmB,CAAtB,EAAyB,KAAKK,eAAL;AAEzB,WAAO,KAAKL,WAAZ;AACH;;AAEMM,EAAAA,OAAO,GACd;AACI,QAAG,CAAC,KAAKP,eAAN,IAAyB,CAAC,KAAKA,eAAL,CAAqBQ,MAAlD,EAA0D;;AAE1D,SAAI,MAAMC,QAAV,IAAsB,KAAKT,eAA3B,EACA;AACI,UAAG,CAACS,QAAJ,EAAc;AAEdA,MAAAA,QAAQ,CAACF,OAAT;AACH;;AAED,SAAKP,eAAL,GAAuB,EAAvB;AACH;;AAEMU,EAAAA,gBAAgB,CAACb,SAAD,EAAoBE,QAApB,EACvB;AACI,UAAMU,QAAQ,GAAG,IAAIf,0BAAJ,CAA+BG,SAA/B,EAA0CE,QAA1C,CAAjB;;AAEA,SAAKC,eAAL,CAAqBW,IAArB,CAA0BF,QAA1B;;AAEA,WAAOA,QAAP;AACH;;AAEMH,EAAAA,eAAe,GACtB;AACI,SAAKL,WAAL,GAAmB,CAAnB;;AAEA,SAAI,MAAMQ,QAAV,IAAsB,KAAKT,eAA3B,EACA;AACI,UAAG,CAACS,QAAJ,EAAc;AAEd,WAAKR,WAAL,IAAoBQ,QAAQ,CAACJ,UAA7B;AACH;AACJ;;AAEMO,EAAAA,QAAQ,CAACC,SAAD,EAAoBR,UAApB,EACf;AACI,QAAG,KAAKJ,WAAL,GAAmB,CAAtB,EAAyB,OAAO,IAAP;AAEzBI,IAAAA,UAAU,GAAIA,UAAU,GAAG,KAAKF,YAAhC;;AAEA,QAAG,CAAC,KAAKC,SAAT,EACA;AACI,YAAMU,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWX,UAAU,GAAG,KAAKJ,WAA7B,CAAd;AACAI,MAAAA,UAAU,GAAGU,IAAI,CAACC,KAAL,CAAWX,UAAU,GAAG,KAAKJ,WAA7B,CAAb;AAEA,UAAIgB,UAAU,GAAG,KAAjB;AACA,UAAIR,QAAoC,GAAG,IAA3C;;AAEA,UAAK,KAAKP,UAAL,GAAkB,CAAnB,IAA0BY,KAAK,IAAI,KAAKZ,UAAzC,IAA2D,KAAKA,UAAL,IAAmB,CAApB,IAA2B,KAAKD,WAAL,KAAqB,CAA7G,EACA;AACII,QAAAA,UAAU,GAAI,KAAKJ,WAAL,GAAmB,CAAjC;AACAgB,QAAAA,UAAU,GAAG,IAAb;AACH;;AAED,UAAIC,kBAAkB,GAAG,CAAzB;AACA,UAAIC,UAAU,GAAG,CAAjB;;AAEA,aAAMA,UAAU,GAAG,KAAKnB,eAAL,CAAqBQ,MAAxC,EACA;AACIC,QAAAA,QAAQ,GAAG,KAAKT,eAAL,CAAqBmB,UAArB,CAAX;;AAEA,YAAGV,QAAH,EACA;AACI,cAAGJ,UAAU,GAAIa,kBAAkB,GAAGT,QAAQ,CAACJ,UAA/C,EAA4D;AAE5Da,UAAAA,kBAAkB,IAAIT,QAAQ,CAACJ,UAA/B;AACH;;AAEDc,QAAAA,UAAU;AACb;;AAED,aAAO,KAAKC,4BAAL,CAAkCP,SAAlC,EAA6CJ,QAA7C,EAAuDU,UAAvD,EAAoEd,UAAU,GAAGa,kBAAjF,EAAsGD,UAAtG,CAAP;AACH;;AAED,UAAME,UAAU,GAAGJ,IAAI,CAACM,KAAL,CAAW,KAAKrB,eAAL,CAAqBQ,MAArB,GAA8BO,IAAI,CAACO,MAAL,EAAzC,CAAnB;AACA,UAAMb,QAAQ,GAAG,KAAKT,eAAL,CAAqBmB,UAArB,CAAjB;AAEA,QAAGV,QAAQ,CAACJ,UAAT,GAAsB,CAAzB,EAA4B,OAAO,IAAP;AAE5B,WAAO,KAAKe,4BAAL,CAAkCP,SAAlC,EAA6CJ,QAA7C,EAAuDU,UAAvD,EAAmE,CAAnE,EAAsE,KAAtE,CAAP;AACH;;AAEMI,EAAAA,oBAAoB,CAACV,SAAD,EAAoBM,UAApB,EAAwCK,MAAxC,EAAwDnB,UAAxD,EAC3B;AACI,QAAIc,UAAU,GAAG,CAAd,IAAqBA,UAAU,IAAI,KAAKnB,eAAL,CAAqBQ,MAA3D,EAAoE,OAAO,IAAP;AAEpE,UAAMC,QAAQ,GAAG,KAAKT,eAAL,CAAqBmB,UAArB,CAAjB;AAEA,QAAG,CAACV,QAAJ,EAAc,OAAO,IAAP;AAEd,QAAGe,MAAM,IAAIf,QAAQ,CAACJ,UAAtB,EAAkC,OAAO,KAAKO,QAAL,CAAcC,SAAd,EAAyBR,UAAzB,CAAP;AAElC,WAAO,KAAKe,4BAAL,CAAkCP,SAAlC,EAA6CJ,QAA7C,EAAuDU,UAAvD,EAAmEK,MAAnE,EAA2E,KAA3E,CAAP;AACH;;AAEOJ,EAAAA,4BAA4B,CAACP,SAAD,EAAoBJ,QAApB,EAA0DU,UAA1D,EAA8EK,MAA9E,EAA8FP,UAA9F,EACpC;AACI,QAAG,CAACR,QAAJ,EAAc,OAAO,IAAP;AAEd,UAAMgB,UAAU,GAAGhB,QAAQ,CAACiB,aAAT,CAAuBF,MAAvB,CAAnB;AACA,UAAMG,KAAK,GAAGlB,QAAQ,CAACG,QAAT,CAAkBa,UAAlB,CAAd;AAEA,QAAG,CAACE,KAAJ,EAAW,OAAO,IAAP;AAEX,QAAIC,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWhB,SAAX,CAAR;AACA,QAAIiB,CAAC,GAAGH,KAAK,CAACI,IAAN,CAAWlB,SAAX,CAAR;AACA,UAAMmB,OAAO,GAAGL,KAAK,CAACK,OAAtB;AACA,UAAMC,OAAO,GAAGN,KAAK,CAACM,OAAtB;AACA,QAAIC,OAAO,GAAGP,KAAK,CAACO,OAApB;AACA,QAAIC,WAAW,GAAG,KAAlB;AAEA,QAAGH,OAAH,EAAYJ,CAAC,GAAGb,IAAI,CAACM,KAAL,CAAWO,CAAC,GAAGI,OAAO,GAAGjB,IAAI,CAACO,MAAL,EAAzB,CAAJ;AACZ,QAAGW,OAAH,EAAYH,CAAC,GAAGf,IAAI,CAACM,KAAL,CAAWS,CAAC,GAAGG,OAAO,GAAGlB,IAAI,CAACO,MAAL,EAAzB,CAAJ;AAEZ,QAAGY,OAAO,GAAG,CAAb,EAAgBA,OAAO,GAAGzB,QAAQ,CAAC2B,UAAT,CAAoBX,UAApB,CAAV;AAEhB,QAAIY,YAAY,GAAI,KAAKlC,YAAL,GAAoB+B,OAAxC;AAEA,QAAGjB,UAAH,EAAeoB,YAAY,GAAG5C,cAAc,CAAC6C,oBAA9B;;AAEf,QAAG,CAAC,KAAKlC,SAAN,IAAmB,CAACK,QAAQ,CAACV,QAAhC,EACA;AACI,UAAIoB,UAAU,KAAM,KAAKnB,eAAL,CAAqBQ,MAArB,GAA8B,CAA/C,IAAuDgB,MAAM,KAAMf,QAAQ,CAACJ,UAAT,GAAsB,CAA5F,EAAiG8B,WAAW,GAAG,IAAd;AACpG;;AAED,WAAO1C,cAAc,CAAC8C,QAAf,CAAwBZ,KAAK,CAACa,EAA9B,EAAkCZ,CAAlC,EAAqCE,CAArC,EAAwCI,OAAxC,EAAiDG,YAAjD,EAA+DF,WAA/D,EAA4EhB,UAA5E,EAAwFK,MAAxF,CAAP;AACH;;AAtJL","sourcesContent":["import { AnimationFrame } from './AnimationFrame';\r\nimport { AnimationFrameSequenceData } from './AnimationFrameSequenceData';\r\n\r\nexport class AnimationLayerData\r\n{\r\n    private _frameSequences: AnimationFrameSequenceData[];\r\n    private _frameCount: number;\r\n    private _loopCount: number;\r\n    private _frameRepeat: number;\r\n    private _isRandom: boolean;\r\n\r\n    constructor(loopCount: number, frameRepeat: number, isRandom: boolean)\r\n    {\r\n        this._frameSequences = [];\r\n        this._frameCount = -1;\r\n        this._loopCount = (loopCount < 0) ? 0 : loopCount;\r\n        this._frameRepeat = (frameRepeat < 1) ? 1 : frameRepeat;\r\n        this._isRandom = isRandom;\r\n    }\r\n\r\n    public get frameCount(): number\r\n    {\r\n        if(this._frameCount < 0) this.calculateLength();\r\n\r\n        return this._frameCount;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(!this._frameSequences || !this._frameSequences.length) return;\r\n\r\n        for(const sequence of this._frameSequences)\r\n        {\r\n            if(!sequence) continue;\r\n\r\n            sequence.dispose();\r\n        }\r\n\r\n        this._frameSequences = [];\r\n    }\r\n\r\n    public addFrameSequence(loopCount: number, isRandom: boolean): AnimationFrameSequenceData\r\n    {\r\n        const sequence = new AnimationFrameSequenceData(loopCount, isRandom);\r\n\r\n        this._frameSequences.push(sequence);\r\n\r\n        return sequence;\r\n    }\r\n\r\n    public calculateLength(): void\r\n    {\r\n        this._frameCount = 0;\r\n\r\n        for(const sequence of this._frameSequences)\r\n        {\r\n            if(!sequence) continue;\r\n\r\n            this._frameCount += sequence.frameCount;\r\n        }\r\n    }\r\n\r\n    public getFrame(direction: number, frameCount: number): AnimationFrame\r\n    {\r\n        if(this._frameCount < 1) return null;\r\n\r\n        frameCount = (frameCount / this._frameRepeat);\r\n\r\n        if(!this._isRandom)\r\n        {\r\n            const count = Math.floor(frameCount / this._frameCount);\r\n            frameCount = Math.floor(frameCount % this._frameCount);\r\n\r\n            let doesRepeat = false;\r\n            let sequence: AnimationFrameSequenceData = null;\r\n\r\n            if(((this._loopCount > 0) && (count >= this._loopCount)) || ((this._loopCount <= 0) && (this._frameCount === 1)))\r\n            {\r\n                frameCount = (this._frameCount - 1);\r\n                doesRepeat = true;\r\n            }\r\n\r\n            let sequenceFrameCount = 0;\r\n            let sequenceId = 0;\r\n\r\n            while(sequenceId < this._frameSequences.length)\r\n            {\r\n                sequence = this._frameSequences[sequenceId];\r\n\r\n                if(sequence)\r\n                {\r\n                    if(frameCount < (sequenceFrameCount + sequence.frameCount)) break;\r\n\r\n                    sequenceFrameCount += sequence.frameCount;\r\n                }\r\n\r\n                sequenceId++;\r\n            }\r\n\r\n            return this.getFrameFromSpecificSequence(direction, sequence, sequenceId, (frameCount - sequenceFrameCount), doesRepeat);\r\n        }\r\n\r\n        const sequenceId = Math.trunc(this._frameSequences.length * Math.random());\r\n        const sequence = this._frameSequences[sequenceId];\r\n\r\n        if(sequence.frameCount < 1) return null;\r\n\r\n        return this.getFrameFromSpecificSequence(direction, sequence, sequenceId, 0, false);\r\n    }\r\n\r\n    public getFrameFromSequence(direction: number, sequenceId: number, offset: number, frameCount: number): AnimationFrame\r\n    {\r\n        if((sequenceId < 0) || (sequenceId >= this._frameSequences.length)) return null;\r\n\r\n        const sequence = this._frameSequences[sequenceId];\r\n\r\n        if(!sequence) return null;\r\n\r\n        if(offset >= sequence.frameCount) return this.getFrame(direction, frameCount);\r\n\r\n        return this.getFrameFromSpecificSequence(direction, sequence, sequenceId, offset, false);\r\n    }\r\n\r\n    private getFrameFromSpecificSequence(direction: number, sequence: AnimationFrameSequenceData, sequenceId: number, offset: number, doesRepeat: boolean): AnimationFrame\r\n    {\r\n        if(!sequence) return null;\r\n\r\n        const frameIndex = sequence.getFrameIndex(offset);\r\n        const frame = sequence.getFrame(frameIndex);\r\n\r\n        if(!frame) return null;\r\n\r\n        let x = frame.getX(direction);\r\n        let y = frame.getY(direction);\r\n        const randomX = frame.randomX;\r\n        const randomY = frame.randomY;\r\n        let repeats = frame.repeats;\r\n        let isLastFrame = false;\r\n\r\n        if(randomX) x = Math.trunc(x + randomX * Math.random());\r\n        if(randomY) y = Math.trunc(y + randomY * Math.random());\r\n\r\n        if(repeats > 1) repeats = sequence.getRepeats(frameIndex);\r\n\r\n        let frameRepeats = (this._frameRepeat * repeats);\r\n\r\n        if(doesRepeat) frameRepeats = AnimationFrame.FRAME_REPEAT_FOREVER;\r\n\r\n        if(!this._isRandom && !sequence.isRandom)\r\n        {\r\n            if((sequenceId === (this._frameSequences.length - 1)) && (offset === (sequence.frameCount - 1))) isLastFrame = true;\r\n        }\r\n\r\n        return AnimationFrame.allocate(frame.id, x, y, repeats, frameRepeats, isLastFrame, sequenceId, offset);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}