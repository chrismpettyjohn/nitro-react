{"ast":null,"code":"import { PetCustomPart } from './PetCustomPart';\nexport class PetFigureData {\n  constructor(k) {\n    this._typeId = void 0;\n    this._paletteId = void 0;\n    this._color = void 0;\n    this._headOnly = void 0;\n    this._customParts = void 0;\n    this._customLayerIds = void 0;\n    this._customPartIds = void 0;\n    this._customPaletteIds = void 0;\n    this._typeId = this.getTypeId(k);\n    this._paletteId = this.getPaletteId(k);\n    this._color = this.getColor(k);\n    this._headOnly = this.getHeadOnly(k);\n\n    const _local_2 = this.getCustomData(k);\n\n    this._customLayerIds = this.getCustomLayerIds(_local_2);\n    this._customPartIds = this.getCustomPartIds(_local_2);\n    this._customPaletteIds = this.getCustomPaletteIds(_local_2);\n    this._customParts = [];\n    let i = 0;\n\n    while (i < this._customLayerIds.length) {\n      this._customParts.push(new PetCustomPart(this._customLayerIds[i], this._customPartIds[i], this._customPaletteIds[i]));\n\n      i++;\n    }\n  }\n\n  get typeId() {\n    return this._typeId;\n  }\n\n  get paletteId() {\n    return this._paletteId;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get customLayerIds() {\n    return this._customLayerIds;\n  }\n\n  get customPartIds() {\n    return this._customPartIds;\n  }\n\n  get customPaletteIds() {\n    return this._customPaletteIds;\n  }\n\n  get customParts() {\n    return this._customParts;\n  }\n\n  getCustomPart(k) {\n    if (this._customParts) {\n      for (const _local_2 of this._customParts) {\n        if (_local_2.layerId === k) return _local_2;\n      }\n    }\n\n    return null;\n  }\n\n  get hasCustomParts() {\n    return !(this._customLayerIds == null) && this._customLayerIds.length > 0;\n  }\n\n  get headOnly() {\n    return this._headOnly;\n  }\n\n  get figureString() {\n    let figure = this.typeId + ' ' + this.paletteId + ' ' + this.color.toString(16);\n    figure = figure + (' ' + this.customParts.length);\n\n    for (const _local_2 of this.customParts) {\n      figure = figure + (' ' + _local_2.layerId + ' ' + _local_2.partId + ' ' + _local_2.paletteId);\n    }\n\n    return figure;\n  }\n\n  getCustomData(k) {\n    let _local_2 = [];\n\n    if (k) {\n      const _local_3 = k.split(' ');\n\n      const _local_4 = this._headOnly ? 1 : 0;\n\n      const _local_5 = 4 + _local_4;\n\n      if (_local_3.length > _local_5) {\n        const _local_6 = 3 + _local_4;\n\n        const _local_7 = parseInt(_local_3[_local_6]);\n\n        _local_2 = _local_3.slice(_local_5, _local_5 + _local_7 * 3);\n      }\n    }\n\n    return _local_2;\n  }\n\n  getCustomLayerIds(data) {\n    const layerIds = [];\n    let i = 0;\n\n    while (i < data.length) {\n      layerIds.push(parseInt(data[i + 0]));\n      i = i + 3;\n    }\n\n    return layerIds;\n  }\n\n  getCustomPartIds(data) {\n    const partIds = [];\n    let i = 0;\n\n    while (i < data.length) {\n      partIds.push(parseInt(data[i + 1]));\n      i = i + 3;\n    }\n\n    return partIds;\n  }\n\n  getCustomPaletteIds(data) {\n    const paletteIds = [];\n    let i = 0;\n\n    while (i < data.length) {\n      paletteIds.push(parseInt(data[i + 2]));\n      i = i + 3;\n    }\n\n    return paletteIds;\n  }\n\n  getTypeId(data) {\n    if (data) {\n      const parts = data.split(' ');\n      if (parts.length >= 1) return parseInt(parts[0]);\n    }\n\n    return 0;\n  }\n\n  getPaletteId(data) {\n    if (data) {\n      const parts = data.split(' ');\n      if (parts.length >= 2) return parseInt(parts[1]);\n    }\n\n    return 0;\n  }\n\n  getColor(data) {\n    if (data) {\n      const parts = data.split(' ');\n      if (parts.length >= 3) return parseInt(parts[2], 16);\n    }\n\n    return 0xFFFFFF;\n  }\n\n  getHeadOnly(data) {\n    if (data) {\n      const parts = data.split(' ');\n      if (parts.length >= 4) return parts[3] === 'head';\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/pets/PetFigureData.ts"],"names":["PetCustomPart","PetFigureData","constructor","k","_typeId","_paletteId","_color","_headOnly","_customParts","_customLayerIds","_customPartIds","_customPaletteIds","getTypeId","getPaletteId","getColor","getHeadOnly","_local_2","getCustomData","getCustomLayerIds","getCustomPartIds","getCustomPaletteIds","i","length","push","typeId","paletteId","color","customLayerIds","customPartIds","customPaletteIds","customParts","getCustomPart","layerId","hasCustomParts","headOnly","figureString","figure","toString","partId","_local_3","split","_local_4","_local_5","_local_6","_local_7","parseInt","slice","data","layerIds","partIds","paletteIds","parts"],"mappings":"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","sourcesContent":["import { PetCustomPart } from './PetCustomPart';\r\n\r\nexport class PetFigureData\r\n{\r\n    private _typeId: number;\r\n    private _paletteId: number;\r\n    private _color: number;\r\n    private _headOnly: boolean;\r\n\r\n    private _customParts: PetCustomPart[];\r\n    private _customLayerIds: number[];\r\n    private _customPartIds: number[];\r\n    private _customPaletteIds: number[];\r\n\r\n    constructor(k: string)\r\n    {\r\n        this._typeId = this.getTypeId(k);\r\n        this._paletteId = this.getPaletteId(k);\r\n        this._color = this.getColor(k);\r\n        this._headOnly = this.getHeadOnly(k);\r\n\r\n        const _local_2 = this.getCustomData(k);\r\n\r\n        this._customLayerIds = this.getCustomLayerIds(_local_2);\r\n        this._customPartIds = this.getCustomPartIds(_local_2);\r\n        this._customPaletteIds = this.getCustomPaletteIds(_local_2);\r\n        this._customParts = [];\r\n\r\n        let i = 0;\r\n\r\n        while(i < this._customLayerIds.length)\r\n        {\r\n            this._customParts.push(new PetCustomPart(this._customLayerIds[i], this._customPartIds[i], this._customPaletteIds[i]));\r\n\r\n            i++;\r\n        }\r\n    }\r\n\r\n    public get typeId(): number\r\n    {\r\n        return this._typeId;\r\n    }\r\n\r\n    public get paletteId(): number\r\n    {\r\n        return this._paletteId;\r\n    }\r\n\r\n    public get color(): number\r\n    {\r\n        return this._color;\r\n    }\r\n\r\n    public get customLayerIds(): number[]\r\n    {\r\n        return this._customLayerIds;\r\n    }\r\n\r\n    public get customPartIds(): number[]\r\n    {\r\n        return this._customPartIds;\r\n    }\r\n\r\n    public get customPaletteIds(): number[]\r\n    {\r\n        return this._customPaletteIds;\r\n    }\r\n\r\n    public get customParts(): PetCustomPart[]\r\n    {\r\n        return this._customParts;\r\n    }\r\n\r\n    public getCustomPart(k: number): PetCustomPart\r\n    {\r\n        if(this._customParts)\r\n        {\r\n            for(const _local_2 of this._customParts)\r\n            {\r\n                if(_local_2.layerId === k) return _local_2;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get hasCustomParts(): boolean\r\n    {\r\n        return (!(this._customLayerIds == null)) && (this._customLayerIds.length > 0);\r\n    }\r\n\r\n    public get headOnly(): boolean\r\n    {\r\n        return this._headOnly;\r\n    }\r\n\r\n    public get figureString(): string\r\n    {\r\n        let figure = ((((this.typeId + ' ') + this.paletteId) + ' ') + this.color.toString(16));\r\n\r\n        figure = (figure + (' ' + this.customParts.length));\r\n\r\n        for(const _local_2 of this.customParts)\r\n        {\r\n            figure = (figure + (((((' ' + _local_2.layerId) + ' ') + _local_2.partId) + ' ') + _local_2.paletteId));\r\n        }\r\n\r\n        return figure;\r\n    }\r\n\r\n    private getCustomData(k: string): string[]\r\n    {\r\n        let _local_2: string[] = [];\r\n\r\n        if(k)\r\n        {\r\n            const _local_3 = k.split(' ');\r\n            const _local_4 = ((this._headOnly) ? 1 : 0);\r\n            const _local_5 = (4 + _local_4);\r\n\r\n            if(_local_3.length > _local_5)\r\n            {\r\n                const _local_6 = (3 + _local_4);\r\n                const _local_7 = parseInt(_local_3[_local_6]);\r\n\r\n                _local_2 = _local_3.slice(_local_5, (_local_5 + (_local_7 * 3)));\r\n            }\r\n        }\r\n\r\n        return _local_2;\r\n    }\r\n\r\n    private getCustomLayerIds(data: string[]): number[]\r\n    {\r\n        const layerIds: number[] = [];\r\n\r\n        let i = 0;\r\n\r\n        while(i < data.length)\r\n        {\r\n            layerIds.push(parseInt(data[(i + 0)]));\r\n\r\n            i = (i + 3);\r\n        }\r\n\r\n        return layerIds;\r\n    }\r\n\r\n    private getCustomPartIds(data: string[]): number[]\r\n    {\r\n        const partIds: number[] = [];\r\n\r\n        let i = 0;\r\n\r\n        while(i < data.length)\r\n        {\r\n            partIds.push(parseInt(data[(i + 1)]));\r\n\r\n            i = (i + 3);\r\n        }\r\n\r\n        return partIds;\r\n    }\r\n\r\n    private getCustomPaletteIds(data: string[]): number[]\r\n    {\r\n        const paletteIds: number[] = [];\r\n\r\n        let i = 0;\r\n\r\n        while(i < data.length)\r\n        {\r\n            paletteIds.push(parseInt(data[(i + 2)]));\r\n\r\n            i = (i + 3);\r\n        }\r\n\r\n        return paletteIds;\r\n    }\r\n\r\n    private getTypeId(data: string): number\r\n    {\r\n        if(data)\r\n        {\r\n            const parts = data.split(' ');\r\n\r\n            if(parts.length >= 1) return parseInt(parts[0]);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    private getPaletteId(data: string): number\r\n    {\r\n        if(data)\r\n        {\r\n            const parts = data.split(' ');\r\n\r\n            if(parts.length >= 2) return parseInt(parts[1]);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    private getColor(data: string): number\r\n    {\r\n        if(data)\r\n        {\r\n            const parts = data.split(' ');\r\n\r\n            if(parts.length >= 3) return parseInt(parts[2], 16);\r\n        }\r\n\r\n        return 0xFFFFFF;\r\n    }\r\n\r\n    private getHeadOnly(data: string): boolean\r\n    {\r\n        if(data)\r\n        {\r\n            const parts = data.split(' ');\r\n\r\n            if(parts.length >= 4) return parts[3] === 'head';\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}