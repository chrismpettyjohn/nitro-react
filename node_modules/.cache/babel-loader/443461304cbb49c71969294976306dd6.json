{"ast":null,"code":"import { EventDispatcher } from '../events/EventDispatcher';\nimport { Disposable } from './disposable/Disposable';\nimport { NitroLogger } from './logger/NitroLogger';\nexport class NitroManager extends Disposable {\n  constructor() {\n    let logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super();\n    this._logger = void 0;\n    this._events = void 0;\n    this._isLoaded = void 0;\n    this._isLoading = void 0;\n    this._logger = logger instanceof NitroLogger ? logger : new NitroLogger(this.constructor.name);\n    this._events = new EventDispatcher();\n    this._isLoaded = false;\n    this._isLoading = false;\n  }\n\n  init() {\n    if (this._isLoaded || this._isLoading || this.isDisposing) return;\n    this._isLoading = true;\n    this.onInit();\n    this._isLoaded = true;\n    this._isLoading = false;\n  }\n\n  onInit() {\n    return;\n  }\n\n  onDispose() {\n    if (this._events) this._events.dispose();\n    super.onDispose();\n  }\n\n  reload() {\n    this.dispose();\n    this.init();\n  }\n\n  get logger() {\n    return this._logger;\n  }\n\n  get events() {\n    return this._events;\n  }\n\n  get isLoaded() {\n    return this._isLoaded;\n  }\n\n  get isLoading() {\n    return this._isLoading;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/common/NitroManager.ts"],"names":["EventDispatcher","Disposable","NitroLogger","NitroManager","constructor","logger","_logger","_events","_isLoaded","_isLoading","name","init","isDisposing","onInit","onDispose","dispose","reload","events","isLoaded","isLoading"],"mappings":"AAAA,SAASA,eAAT,QAAgC,2BAAhC;AAEA,SAASC,UAAT,QAA2B,yBAA3B;AAGA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,OAAO,MAAMC,YAAN,SAA2BF,UAA3B,CACP;AAQIG,EAAAA,WAAW,GACX;AAAA,QADYC,MACZ,uEADmC,IACnC;AACI;AADJ,SARQC,OAQR;AAAA,SANQC,OAMR;AAAA,SAJQC,SAIR;AAAA,SAHQC,UAGR;AAGI,SAAKH,OAAL,GAAeD,MAAM,YAAYH,WAAlB,GAAgCG,MAAhC,GAAyC,IAAIH,WAAJ,CAAgB,KAAKE,WAAL,CAAiBM,IAAjC,CAAxD;AAEA,SAAKH,OAAL,GAAe,IAAIP,eAAJ,EAAf;AAEA,SAAKQ,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACH;;AAEME,EAAAA,IAAI,GACX;AACI,QAAG,KAAKH,SAAL,IAAkB,KAAKC,UAAvB,IAAqC,KAAKG,WAA7C,EAA0D;AAE1D,SAAKH,UAAL,GAAkB,IAAlB;AAEA,SAAKI,MAAL;AAEA,SAAKL,SAAL,GAAiB,IAAjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACH;;AAESI,EAAAA,MAAM,GAChB;AACI;AACH;;AAESC,EAAAA,SAAS,GACnB;AACI,QAAG,KAAKP,OAAR,EAAiB,KAAKA,OAAL,CAAaQ,OAAb;AAEjB,UAAMD,SAAN;AACH;;AAEME,EAAAA,MAAM,GACb;AACI,SAAKD,OAAL;AACA,SAAKJ,IAAL;AACH;;AAEgB,MAANN,MAAM,GACjB;AACI,WAAO,KAAKC,OAAZ;AACH;;AAEgB,MAANW,MAAM,GACjB;AACI,WAAO,KAAKV,OAAZ;AACH;;AAEkB,MAARW,QAAQ,GACnB;AACI,WAAO,KAAKV,SAAZ;AACH;;AAEmB,MAATW,SAAS,GACpB;AACI,WAAO,KAAKV,UAAZ;AACH;;AApEL","sourcesContent":["import { EventDispatcher } from '../events/EventDispatcher';\r\nimport { IEventDispatcher } from '../events/IEventDispatcher';\r\nimport { Disposable } from './disposable/Disposable';\r\nimport { INitroManager } from './INitroManager';\r\nimport { INitroLogger } from './logger/INitroLogger';\r\nimport { NitroLogger } from './logger/NitroLogger';\r\n\r\nexport class NitroManager extends Disposable implements INitroManager\r\n{\r\n    private _logger: INitroLogger;\r\n\r\n    private _events: IEventDispatcher;\r\n\r\n    private _isLoaded: boolean;\r\n    private _isLoading: boolean;\r\n\r\n    constructor(logger: INitroLogger = null)\r\n    {\r\n        super();\r\n\r\n        this._logger = logger instanceof NitroLogger ? logger : new NitroLogger(this.constructor.name);\r\n\r\n        this._events = new EventDispatcher();\r\n\r\n        this._isLoaded = false;\r\n        this._isLoading = false;\r\n    }\r\n\r\n    public init(): void\r\n    {\r\n        if(this._isLoaded || this._isLoading || this.isDisposing) return;\r\n\r\n        this._isLoading = true;\r\n\r\n        this.onInit();\r\n\r\n        this._isLoaded = true;\r\n        this._isLoading = false;\r\n    }\r\n\r\n    protected onInit(): void\r\n    {\r\n        return;\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        if(this._events) this._events.dispose();\r\n\r\n        super.onDispose();\r\n    }\r\n\r\n    public reload(): void\r\n    {\r\n        this.dispose();\r\n        this.init();\r\n    }\r\n\r\n    public get logger(): INitroLogger\r\n    {\r\n        return this._logger;\r\n    }\r\n\r\n    public get events(): IEventDispatcher\r\n    {\r\n        return this._events;\r\n    }\r\n\r\n    public get isLoaded(): boolean\r\n    {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    public get isLoading(): boolean\r\n    {\r\n        return this._isLoading;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}