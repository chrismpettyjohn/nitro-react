{"ast":null,"code":"import { AnimationFrameData } from './AnimationFrameData';\nimport { AnimationFrameDirectionalData } from './AnimationFrameDirectionalData';\nexport class AnimationFrameSequenceData {\n  constructor(loopCount, isRandom) {\n    this._frames = void 0;\n    this._frameIndexes = void 0;\n    this._frameRepeats = void 0;\n    this._isRandom = void 0;\n    this._loopCount = void 0;\n    this._frames = [];\n    this._frameIndexes = [];\n    this._frameRepeats = [];\n    this._isRandom = isRandom;\n    this._loopCount = loopCount < 1 ? 1 : loopCount;\n  }\n\n  get isRandom() {\n    return this._isRandom;\n  }\n\n  get frameCount() {\n    return this._frameIndexes.length * this._loopCount;\n  }\n\n  dispose() {\n    this._frames = [];\n  }\n\n  initialize() {\n    let frameIndex = this._frameIndexes.length - 1;\n    let realIndex = -1;\n    let nextIndex = 1;\n\n    while (frameIndex >= 0) {\n      if (this._frameIndexes[frameIndex] === realIndex) {\n        nextIndex++;\n      } else {\n        realIndex = this._frameIndexes[frameIndex];\n        nextIndex = 1;\n      }\n\n      this._frameRepeats[frameIndex] = nextIndex;\n      frameIndex--;\n    }\n  }\n\n  addFrame(id, x, y, randomX, randomY, directionalOffset) {\n    let repeats = 1;\n\n    if (this._frames.length > 0) {\n      const frame = this._frames[this._frames.length - 1];\n\n      if (frame.id === id && !frame.hasDirectionalOffsets() && frame.x === x && frame.y === y && frame.randomX === randomX && randomX === 0 && frame.randomY === randomY && randomY === 0) {\n        repeats += frame.repeats;\n\n        this._frames.pop();\n      }\n    }\n\n    const frame = directionalOffset ? new AnimationFrameDirectionalData(id, x, y, randomX, randomY, directionalOffset, repeats) : new AnimationFrameData(id, x, y, randomX, randomY, repeats);\n\n    this._frames.push(frame);\n\n    this._frameIndexes.push(this._frames.length - 1);\n\n    this._frameRepeats.push(1);\n  }\n\n  getFrame(frameCount) {\n    if (!this._frames.length || frameCount < 0 || frameCount >= this.frameCount) return null;\n    return this._frames[this._frameIndexes[frameCount % this._frameIndexes.length]];\n  }\n\n  getFrameIndex(frameCount) {\n    if (frameCount < 0 || frameCount >= this.frameCount) return -1;\n\n    if (this._isRandom) {\n      frameCount = Math.round(Math.random() * this._frameIndexes.length);\n      if (frameCount === this._frameIndexes.length) frameCount--;\n    }\n\n    return frameCount;\n  }\n\n  getRepeats(frameCount) {\n    if (frameCount < 0 || frameCount >= this.frameCount) return 0;\n    return this._frameRepeats[frameCount % this._frameRepeats.length];\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/AnimationFrameSequenceData.ts"],"names":["AnimationFrameData","AnimationFrameDirectionalData","AnimationFrameSequenceData","constructor","loopCount","isRandom","_frames","_frameIndexes","_frameRepeats","_isRandom","_loopCount","frameCount","length","dispose","initialize","frameIndex","realIndex","nextIndex","addFrame","id","x","y","randomX","randomY","directionalOffset","repeats","frame","hasDirectionalOffsets","pop","push","getFrame","getFrameIndex","Math","round","random","getRepeats"],"mappings":"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","sourcesContent":["import { AnimationFrameData } from './AnimationFrameData';\r\nimport { AnimationFrameDirectionalData } from './AnimationFrameDirectionalData';\r\nimport { DirectionalOffsetData } from './DirectionalOffsetData';\r\n\r\nexport class AnimationFrameSequenceData\r\n{\r\n    private _frames: AnimationFrameData[];\r\n    private _frameIndexes: number[];\r\n    private _frameRepeats: number[];\r\n    private _isRandom: boolean;\r\n    private _loopCount: number;\r\n\r\n    constructor(loopCount: number, isRandom: boolean)\r\n    {\r\n        this._frames = [];\r\n        this._frameIndexes = [];\r\n        this._frameRepeats = [];\r\n        this._isRandom = isRandom;\r\n        this._loopCount = (loopCount < 1) ? 1 : loopCount;\r\n    }\r\n\r\n    public get isRandom(): boolean\r\n    {\r\n        return this._isRandom;\r\n    }\r\n\r\n    public get frameCount(): number\r\n    {\r\n        return (this._frameIndexes.length * this._loopCount);\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._frames = [];\r\n    }\r\n\r\n    public initialize(): void\r\n    {\r\n        let frameIndex: number = (this._frameIndexes.length - 1);\r\n        let realIndex = -1;\r\n        let nextIndex = 1;\r\n\r\n        while(frameIndex >= 0)\r\n        {\r\n            if(this._frameIndexes[frameIndex] === realIndex)\r\n            {\r\n                nextIndex++;\r\n            }\r\n            else\r\n            {\r\n                realIndex = this._frameIndexes[frameIndex];\r\n                nextIndex = 1;\r\n            }\r\n\r\n            this._frameRepeats[frameIndex] = nextIndex;\r\n\r\n            frameIndex--;\r\n        }\r\n    }\r\n\r\n    public addFrame(id: number, x: number, y: number, randomX: number, randomY: number, directionalOffset: DirectionalOffsetData): void\r\n    {\r\n        let repeats = 1;\r\n\r\n        if(this._frames.length > 0)\r\n        {\r\n            const frame = this._frames[(this._frames.length - 1)];\r\n\r\n            if((((((((frame.id === id) && (!(frame.hasDirectionalOffsets()))) && (frame.x === x)) && (frame.y === y)) && (frame.randomX === randomX)) && (randomX === 0)) && (frame.randomY === randomY)) && (randomY === 0))\r\n            {\r\n                repeats += frame.repeats;\r\n\r\n                this._frames.pop();\r\n            }\r\n        }\r\n\r\n        const frame = (directionalOffset) ? new AnimationFrameDirectionalData(id, x, y, randomX, randomY, directionalOffset, repeats) : new AnimationFrameData(id, x, y, randomX, randomY, repeats);\r\n\r\n        this._frames.push(frame);\r\n        this._frameIndexes.push((this._frames.length - 1));\r\n        this._frameRepeats.push(1);\r\n    }\r\n\r\n    public getFrame(frameCount: number): AnimationFrameData\r\n    {\r\n        if((!this._frames.length || (frameCount < 0)) || (frameCount >= this.frameCount)) return null;\r\n\r\n        return this._frames[this._frameIndexes[(frameCount % this._frameIndexes.length)]];\r\n    }\r\n\r\n    public getFrameIndex(frameCount: number): number\r\n    {\r\n        if(((frameCount < 0) || (frameCount >= this.frameCount))) return -1;\r\n\r\n        if(this._isRandom)\r\n        {\r\n            frameCount = Math.round((Math.random() * this._frameIndexes.length));\r\n\r\n            if(frameCount === this._frameIndexes.length) frameCount--;\r\n        }\r\n\r\n        return frameCount;\r\n    }\r\n\r\n    public getRepeats(frameCount: number): number\r\n    {\r\n        if(((frameCount < 0) || (frameCount >= this.frameCount))) return 0;\r\n\r\n        return this._frameRepeats[(frameCount % this._frameRepeats.length)];\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}