{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { AdvancedMap, TradingAcceptComposer, TradingAcceptEvent, TradingCancelComposer, TradingCloseComposer, TradingCloseEvent, TradingCloseParser, TradingCompletedEvent, TradingConfirmationComposer, TradingConfirmationEvent, TradingListItemEvent, TradingListItemRemoveComposer, TradingNotOpenEvent, TradingOpenEvent, TradingOpenFailedEvent, TradingOtherNotAllowedEvent, TradingUnacceptComposer, TradingYouAreNotAllowedEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryFurni } from '.';\nimport { UseMessageEventHook } from '..';\nimport { CloneObject, GetRoomSession, GetSessionDataManager, LocalizeText, NotificationUtilities, parseTradeItems, SendMessageComposer, TradeState, TradeUserData, TradingNotificationMessage, TradingNotificationType } from '../../api';\n\nconst useInventoryTradeState = () => {\n  _s();\n\n  const [ownUser, setOwnUser] = useState(null);\n  const [otherUser, setOtherUser] = useState(null);\n  const [tradeState, setTradeState] = useState(TradeState.TRADING_STATE_READY);\n  const {\n    groupItems = [],\n    setGroupItems = null,\n    activate = null,\n    deactivate = null\n  } = useInventoryFurni();\n  const isTrading = tradeState >= TradeState.TRADING_STATE_RUNNING;\n\n  const progressTrade = () => {\n    switch (tradeState) {\n      case TradeState.TRADING_STATE_RUNNING:\n        if (!otherUser.itemCount && !ownUser.accepts) {\n          NotificationUtilities.simpleAlert(LocalizeText('inventory.trading.warning.other_not_offering'), null, null, null);\n        }\n\n        if (ownUser.accepts) {\n          SendMessageComposer(new TradingUnacceptComposer());\n        } else {\n          SendMessageComposer(new TradingAcceptComposer());\n        }\n\n        return;\n\n      case TradeState.TRADING_STATE_CONFIRMING:\n        SendMessageComposer(new TradingConfirmationComposer());\n        setTradeState(TradeState.TRADING_STATE_CONFIRMED);\n        return;\n    }\n  };\n\n  const removeItem = group => {\n    const item = group.getLastItem();\n    if (!item) return;\n    SendMessageComposer(new TradingListItemRemoveComposer(item.id));\n  };\n\n  const stopTrading = () => {\n    if (!isTrading) return;\n\n    switch (tradeState) {\n      case TradeState.TRADING_STATE_RUNNING:\n        SendMessageComposer(new TradingCloseComposer());\n        return;\n\n      default:\n        SendMessageComposer(new TradingCancelComposer());\n        return;\n    }\n  };\n\n  const onTradingAcceptEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!ownUser || !otherUser) return;\n\n    if (ownUser.userId === parser.userID) {\n      setOwnUser(prevValue => {\n        const newValue = CloneObject(prevValue);\n        newValue.accepts = parser.userAccepts;\n        return newValue;\n      });\n    } else if (otherUser.userId === parser.userID) {\n      setOtherUser(prevValue => {\n        const newValue = CloneObject(prevValue);\n        newValue.accepts = parser.userAccepts;\n        return newValue;\n      });\n    }\n  }, [ownUser, otherUser]);\n  UseMessageEventHook(TradingAcceptEvent, onTradingAcceptEvent);\n  const onTradingCloseEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    if (parser.reason === TradingCloseParser.ERROR_WHILE_COMMIT) {\n      TradingNotificationMessage(TradingNotificationType.ERROR_WHILE_COMMIT);\n    } else {\n      if (ownUser && parser.userID !== ownUser.userId) {\n        TradingNotificationMessage(TradingNotificationType.THEY_CANCELLED);\n      }\n    }\n\n    setOwnUser(null);\n    setOtherUser(null);\n    setTradeState(TradeState.TRADING_STATE_READY);\n  }, [ownUser]);\n  UseMessageEventHook(TradingCloseEvent, onTradingCloseEvent);\n  const onTradingCompletedEvent = useCallback(event => {\n    const parser = event.getParser();\n    setOwnUser(null);\n    setOtherUser(null);\n    setTradeState(TradeState.TRADING_STATE_READY);\n  }, []);\n  UseMessageEventHook(TradingCompletedEvent, onTradingCompletedEvent);\n  const onTradingConfirmationEvent = useCallback(event => {\n    const parser = event.getParser();\n    setTradeState(TradeState.TRADING_STATE_COUNTDOWN);\n  }, []);\n  UseMessageEventHook(TradingConfirmationEvent, onTradingConfirmationEvent);\n  const onTradingListItemEvent = useCallback(event => {\n    const parser = event.getParser();\n    const firstUserItems = parseTradeItems(parser.firstUserItemArray);\n    const secondUserItems = parseTradeItems(parser.secondUserItemArray);\n    setOwnUser(prevValue => {\n      const newValue = CloneObject(prevValue);\n\n      if (newValue.userId === parser.firstUserID) {\n        newValue.creditsCount = parser.firstUserNumCredits;\n        newValue.itemCount = parser.firstUserNumItems;\n        newValue.userItems = firstUserItems;\n      } else {\n        newValue.creditsCount = parser.secondUserNumCredits;\n        newValue.itemCount = parser.secondUserNumItems;\n        newValue.userItems = secondUserItems;\n      }\n\n      const tradeIds = [];\n\n      for (const groupItem of newValue.userItems.getValues()) {\n        let i = 0;\n\n        while (i < groupItem.getTotalCount()) {\n          const item = groupItem.getItemByIndex(i);\n          if (item) tradeIds.push(item.ref);\n          i++;\n        }\n      }\n\n      setGroupItems(prevValue => {\n        const newValue = [...prevValue];\n\n        for (const groupItem of newValue) groupItem.lockItemIds(tradeIds);\n\n        return newValue;\n      });\n      return newValue;\n    });\n    setOtherUser(prevValue => {\n      const newValue = CloneObject(prevValue);\n\n      if (newValue.userId === parser.firstUserID) {\n        newValue.creditsCount = parser.firstUserNumCredits;\n        newValue.itemCount = parser.firstUserNumItems;\n        newValue.userItems = firstUserItems;\n      } else {\n        newValue.creditsCount = parser.secondUserNumCredits;\n        newValue.itemCount = parser.secondUserNumItems;\n        newValue.userItems = secondUserItems;\n      }\n\n      return newValue;\n    });\n  }, [setGroupItems]);\n  UseMessageEventHook(TradingListItemEvent, onTradingListItemEvent);\n  const onTradingNotOpenEvent = useCallback(event => {\n    const parser = event.getParser();\n  }, []);\n  UseMessageEventHook(TradingNotOpenEvent, onTradingNotOpenEvent);\n  const onTradingOpenEvent = useCallback(event => {\n    const parser = event.getParser();\n    const firstUser = new TradeUserData();\n    const firstUserData = GetRoomSession().userDataManager.getUserData(parser.userID);\n    firstUser.userItems = new AdvancedMap();\n    const secondUser = new TradeUserData();\n    const secondUserData = GetRoomSession().userDataManager.getUserData(parser.otherUserID);\n    secondUser.userItems = new AdvancedMap();\n\n    if (firstUserData.webID === GetSessionDataManager().userId) {\n      firstUser.userId = firstUserData.webID;\n      firstUser.userName = firstUserData.name;\n      firstUser.canTrade = parser.userCanTrade;\n      secondUser.userId = secondUserData.webID;\n      secondUser.userName = secondUserData.name;\n      secondUser.canTrade = parser.otherUserCanTrade;\n    } else if (secondUserData.webID === GetSessionDataManager().userId) {\n      firstUser.userId = secondUserData.webID;\n      firstUser.userName = secondUserData.name;\n      firstUser.canTrade = parser.otherUserCanTrade;\n      secondUser.userId = firstUserData.webID;\n      secondUser.userName = firstUserData.name;\n      secondUser.canTrade = parser.userCanTrade;\n    }\n\n    setOwnUser(firstUser);\n    setOtherUser(secondUser);\n    setTradeState(TradeState.TRADING_STATE_RUNNING);\n  }, []);\n  UseMessageEventHook(TradingOpenEvent, onTradingOpenEvent);\n  const onTradingOpenFailedEvent = useCallback(event => {\n    const parser = event.getParser();\n    TradingNotificationMessage(parser.reason, parser.otherUserName);\n  }, []);\n  UseMessageEventHook(TradingOpenFailedEvent, onTradingOpenFailedEvent);\n  const onTradingOtherNotAllowedEvent = useCallback(event => {\n    const parser = event.getParser();\n    TradingNotificationMessage(TradingNotificationType.THEY_NOT_ALLOWED);\n  }, []);\n  UseMessageEventHook(TradingOtherNotAllowedEvent, onTradingOtherNotAllowedEvent);\n  const onTradingYouAreNotAllowedEvent = useCallback(event => {\n    const parser = event.getParser();\n    TradingNotificationMessage(TradingNotificationType.YOU_NOT_ALLOWED);\n  }, []);\n  UseMessageEventHook(TradingYouAreNotAllowedEvent, onTradingYouAreNotAllowedEvent);\n  useEffect(() => {\n    if (tradeState === TradeState.TRADING_STATE_READY) return;\n    const id = activate();\n    return () => deactivate(id);\n  }, [tradeState, activate, deactivate]);\n  return {\n    ownUser,\n    otherUser,\n    tradeState,\n    setTradeState,\n    isTrading,\n    groupItems,\n    progressTrade,\n    removeItem,\n    stopTrading\n  };\n};\n\n_s(useInventoryTradeState, \"Kk/75ZLNS0pWWBIRJWUlKTZ630w=\", false, function () {\n  return [useInventoryFurni];\n});\n\nexport const useInventoryTrade = () => {\n  _s2();\n\n  return useBetween(useInventoryTradeState);\n};\n\n_s2(useInventoryTrade, \"diiQ3+ccnY3J9PmIrayiMDIOaiY=\", false, function () {\n  return [useBetween];\n});","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/hooks/inventory/useInventoryTrade.ts"],"names":["AdvancedMap","TradingAcceptComposer","TradingAcceptEvent","TradingCancelComposer","TradingCloseComposer","TradingCloseEvent","TradingCloseParser","TradingCompletedEvent","TradingConfirmationComposer","TradingConfirmationEvent","TradingListItemEvent","TradingListItemRemoveComposer","TradingNotOpenEvent","TradingOpenEvent","TradingOpenFailedEvent","TradingOtherNotAllowedEvent","TradingUnacceptComposer","TradingYouAreNotAllowedEvent","useCallback","useEffect","useState","useBetween","useInventoryFurni","UseMessageEventHook","CloneObject","GetRoomSession","GetSessionDataManager","LocalizeText","NotificationUtilities","parseTradeItems","SendMessageComposer","TradeState","TradeUserData","TradingNotificationMessage","TradingNotificationType","useInventoryTradeState","ownUser","setOwnUser","otherUser","setOtherUser","tradeState","setTradeState","TRADING_STATE_READY","groupItems","setGroupItems","activate","deactivate","isTrading","TRADING_STATE_RUNNING","progressTrade","itemCount","accepts","simpleAlert","TRADING_STATE_CONFIRMING","TRADING_STATE_CONFIRMED","removeItem","group","item","getLastItem","id","stopTrading","onTradingAcceptEvent","event","parser","getParser","userId","userID","prevValue","newValue","userAccepts","onTradingCloseEvent","reason","ERROR_WHILE_COMMIT","THEY_CANCELLED","onTradingCompletedEvent","onTradingConfirmationEvent","TRADING_STATE_COUNTDOWN","onTradingListItemEvent","firstUserItems","firstUserItemArray","secondUserItems","secondUserItemArray","firstUserID","creditsCount","firstUserNumCredits","firstUserNumItems","userItems","secondUserNumCredits","secondUserNumItems","tradeIds","groupItem","getValues","i","getTotalCount","getItemByIndex","push","ref","lockItemIds","onTradingNotOpenEvent","onTradingOpenEvent","firstUser","firstUserData","userDataManager","getUserData","secondUser","secondUserData","otherUserID","webID","userName","name","canTrade","userCanTrade","otherUserCanTrade","onTradingOpenFailedEvent","otherUserName","onTradingOtherNotAllowedEvent","THEY_NOT_ALLOWED","onTradingYouAreNotAllowedEvent","YOU_NOT_ALLOWED","useInventoryTrade"],"mappings":"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","sourcesContent":["import { AdvancedMap, TradingAcceptComposer, TradingAcceptEvent, TradingCancelComposer, TradingCloseComposer, TradingCloseEvent, TradingCloseParser, TradingCompletedEvent, TradingConfirmationComposer, TradingConfirmationEvent, TradingListItemEvent, TradingListItemRemoveComposer, TradingNotOpenEvent, TradingOpenEvent, TradingOpenFailedEvent, TradingOtherNotAllowedEvent, TradingUnacceptComposer, TradingYouAreNotAllowedEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryFurni } from '.';\nimport { UseMessageEventHook } from '..';\nimport { CloneObject, GetRoomSession, GetSessionDataManager, GroupItem, LocalizeText, NotificationUtilities, parseTradeItems, SendMessageComposer, TradeState, TradeUserData, TradingNotificationMessage, TradingNotificationType } from '../../api';\n\nconst useInventoryTradeState = () =>\n{\n    const [ ownUser, setOwnUser ] = useState<TradeUserData>(null);\n    const [ otherUser, setOtherUser ] = useState<TradeUserData>(null);\n    const [ tradeState, setTradeState ] = useState(TradeState.TRADING_STATE_READY);\n    const { groupItems = [], setGroupItems = null, activate = null, deactivate = null } = useInventoryFurni();\n    const isTrading = (tradeState >= TradeState.TRADING_STATE_RUNNING);\n\n    const progressTrade = () =>\n    {\n        switch(tradeState)\n        {\n            case TradeState.TRADING_STATE_RUNNING:\n                if(!otherUser.itemCount && !ownUser.accepts)\n                {\n                    NotificationUtilities.simpleAlert(LocalizeText('inventory.trading.warning.other_not_offering'), null, null, null);\n                }\n\n                if(ownUser.accepts)\n                {\n                    SendMessageComposer(new TradingUnacceptComposer());\n                }\n                else\n                {\n                    SendMessageComposer(new TradingAcceptComposer());\n                }\n                return;\n            case TradeState.TRADING_STATE_CONFIRMING:\n                SendMessageComposer(new TradingConfirmationComposer());\n\n                setTradeState(TradeState.TRADING_STATE_CONFIRMED);\n                return;\n        }\n    }\n\n    const removeItem = (group: GroupItem) =>\n    {\n        const item = group.getLastItem();\n\n        if(!item) return;\n\n        SendMessageComposer(new TradingListItemRemoveComposer(item.id));\n    }\n\n    const stopTrading = () =>\n    {\n        if(!isTrading) return;\n\n        switch(tradeState)\n        {\n            case TradeState.TRADING_STATE_RUNNING:\n                SendMessageComposer(new TradingCloseComposer());\n                return;\n            default:\n                SendMessageComposer(new TradingCancelComposer());\n                return;\n        }\n    }\n\n    const onTradingAcceptEvent = useCallback((event: TradingAcceptEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!ownUser || !otherUser) return;\n\n        if(ownUser.userId === parser.userID)\n        {\n            setOwnUser(prevValue =>\n            {\n                const newValue = CloneObject(prevValue);\n\n                newValue.accepts = parser.userAccepts;\n\n                return newValue;\n            });\n        }\n\n        else if(otherUser.userId === parser.userID)\n        {\n            setOtherUser(prevValue =>\n            {\n                const newValue = CloneObject(prevValue);\n\n                newValue.accepts = parser.userAccepts;\n\n                return newValue;\n            });\n        }\n    }, [ ownUser, otherUser ]);\n\n    UseMessageEventHook(TradingAcceptEvent, onTradingAcceptEvent);\n\n    const onTradingCloseEvent = useCallback((event: TradingCloseEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(parser.reason === TradingCloseParser.ERROR_WHILE_COMMIT)\n        {\n            TradingNotificationMessage(TradingNotificationType.ERROR_WHILE_COMMIT);\n        }\n        else\n        {\n            if(ownUser && (parser.userID !== ownUser.userId))\n            {\n                TradingNotificationMessage(TradingNotificationType.THEY_CANCELLED);\n            }\n        }\n\n        setOwnUser(null);\n        setOtherUser(null);\n        setTradeState(TradeState.TRADING_STATE_READY);\n    }, [ ownUser ]);\n\n    UseMessageEventHook(TradingCloseEvent, onTradingCloseEvent);\n\n    const onTradingCompletedEvent = useCallback((event: TradingCompletedEvent) =>\n    {\n        const parser = event.getParser();\n\n        setOwnUser(null);\n        setOtherUser(null);\n        setTradeState(TradeState.TRADING_STATE_READY);\n    }, []);\n\n    UseMessageEventHook(TradingCompletedEvent, onTradingCompletedEvent);\n\n    const onTradingConfirmationEvent = useCallback((event: TradingConfirmationEvent) =>\n    {\n        const parser = event.getParser();\n\n        setTradeState(TradeState.TRADING_STATE_COUNTDOWN);\n    }, []);\n\n    UseMessageEventHook(TradingConfirmationEvent, onTradingConfirmationEvent);\n\n    const onTradingListItemEvent = useCallback((event: TradingListItemEvent) =>\n    {\n        const parser = event.getParser();\n        const firstUserItems = parseTradeItems(parser.firstUserItemArray);\n        const secondUserItems = parseTradeItems(parser.secondUserItemArray);\n\n        setOwnUser(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            if(newValue.userId === parser.firstUserID)\n            {\n                newValue.creditsCount = parser.firstUserNumCredits;\n                newValue.itemCount = parser.firstUserNumItems;\n                newValue.userItems = firstUserItems;\n            }\n            else\n            {\n                newValue.creditsCount = parser.secondUserNumCredits;\n                newValue.itemCount = parser.secondUserNumItems;\n                newValue.userItems = secondUserItems;\n            }\n\n            const tradeIds: number[] = [];\n\n            for(const groupItem of newValue.userItems.getValues())\n            {\n                let i = 0;\n\n                while(i < groupItem.getTotalCount())\n                {\n                    const item = groupItem.getItemByIndex(i);\n\n                    if(item) tradeIds.push(item.ref);\n\n                    i++;\n                }\n            }\n\n            setGroupItems(prevValue =>\n            {\n                const newValue = [ ...prevValue ];\n\n                for(const groupItem of newValue) groupItem.lockItemIds(tradeIds);\n\n                return newValue;\n            });\n\n            return newValue;\n        });\n\n        setOtherUser(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            if(newValue.userId === parser.firstUserID)\n            {\n                newValue.creditsCount = parser.firstUserNumCredits;\n                newValue.itemCount = parser.firstUserNumItems;\n                newValue.userItems = firstUserItems;\n            }\n            else\n            {\n                newValue.creditsCount = parser.secondUserNumCredits;\n                newValue.itemCount = parser.secondUserNumItems;\n                newValue.userItems = secondUserItems;\n            }\n\n            return newValue;\n        });\n    }, [ setGroupItems ]);\n\n    UseMessageEventHook(TradingListItemEvent, onTradingListItemEvent);\n\n    const onTradingNotOpenEvent = useCallback((event: TradingNotOpenEvent) =>\n    {\n        const parser = event.getParser();\n    }, []);\n\n    UseMessageEventHook(TradingNotOpenEvent, onTradingNotOpenEvent);\n\n    const onTradingOpenEvent = useCallback((event: TradingOpenEvent) =>\n    {\n        const parser = event.getParser();\n\n        const firstUser = new TradeUserData();\n        const firstUserData = GetRoomSession().userDataManager.getUserData(parser.userID);\n        \n        firstUser.userItems = new AdvancedMap();\n\n        const secondUser = new TradeUserData();\n        const secondUserData = GetRoomSession().userDataManager.getUserData(parser.otherUserID);\n\n        secondUser.userItems = new AdvancedMap();\n\n        if(firstUserData.webID === GetSessionDataManager().userId)\n        {\n            firstUser.userId = firstUserData.webID;\n            firstUser.userName = firstUserData.name;\n            firstUser.canTrade = parser.userCanTrade;\n\n            secondUser.userId = secondUserData.webID;\n            secondUser.userName = secondUserData.name;\n            secondUser.canTrade = parser.otherUserCanTrade;\n        }\n\n        else if(secondUserData.webID === GetSessionDataManager().userId)\n        {\n            firstUser.userId = secondUserData.webID;\n            firstUser.userName = secondUserData.name;\n            firstUser.canTrade = parser.otherUserCanTrade;\n\n            secondUser.userId = firstUserData.webID;\n            secondUser.userName = firstUserData.name;\n            secondUser.canTrade = parser.userCanTrade;\n        }\n        \n        setOwnUser(firstUser);\n        setOtherUser(secondUser);\n        setTradeState(TradeState.TRADING_STATE_RUNNING);\n    }, []);\n\n    UseMessageEventHook(TradingOpenEvent, onTradingOpenEvent);\n\n    const onTradingOpenFailedEvent = useCallback((event: TradingOpenFailedEvent) =>\n    {\n        const parser = event.getParser();\n\n        TradingNotificationMessage(parser.reason, parser.otherUserName);\n    }, []);\n\n    UseMessageEventHook(TradingOpenFailedEvent, onTradingOpenFailedEvent);\n\n    const onTradingOtherNotAllowedEvent = useCallback((event: TradingOtherNotAllowedEvent) =>\n    {\n        const parser = event.getParser();\n\n        TradingNotificationMessage(TradingNotificationType.THEY_NOT_ALLOWED);\n    }, []);\n\n    UseMessageEventHook(TradingOtherNotAllowedEvent, onTradingOtherNotAllowedEvent);\n\n    const onTradingYouAreNotAllowedEvent = useCallback((event: TradingYouAreNotAllowedEvent) =>\n    {\n        const parser = event.getParser();\n\n        TradingNotificationMessage(TradingNotificationType.YOU_NOT_ALLOWED);\n    }, []);\n\n    UseMessageEventHook(TradingYouAreNotAllowedEvent, onTradingYouAreNotAllowedEvent);\n\n    useEffect(() =>\n    {\n        if(tradeState === TradeState.TRADING_STATE_READY) return;\n\n        const id = activate();\n\n        return () => deactivate(id);\n    }, [ tradeState, activate, deactivate ]);\n\n    return { ownUser, otherUser, tradeState, setTradeState, isTrading, groupItems, progressTrade, removeItem, stopTrading };\n}\n\nexport const useInventoryTrade = () => useBetween(useInventoryTradeState);\n"]},"metadata":{},"sourceType":"module"}