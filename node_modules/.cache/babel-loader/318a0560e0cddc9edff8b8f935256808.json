{"ast":null,"code":"import { Disposable } from '../../../../../core/common/disposable/Disposable';\nimport { PlaneMaskManager } from './mask/PlaneMaskManager';\nimport { LandscapeRasterizer } from './rasterizer/animated/LandscapeRasterizer';\nimport { FloorRasterizer } from './rasterizer/basic/FloorRasterizer';\nimport { WallRasterizer } from './rasterizer/basic/WallRasterizer';\nexport class RoomVisualizationData extends Disposable {\n  constructor() {\n    super();\n    this._wallRasterizer = void 0;\n    this._floorRasterizer = void 0;\n    this._landscapeRasterizer = void 0;\n    this._maskManager = void 0;\n    this._initialized = void 0;\n    this._wallRasterizer = new WallRasterizer();\n    this._floorRasterizer = new FloorRasterizer();\n    this._landscapeRasterizer = new LandscapeRasterizer();\n    this._maskManager = new PlaneMaskManager();\n    this._initialized = false;\n  }\n\n  initialize(asset) {\n    //@ts-ignore\n    const wallData = asset.wallData;\n    if (wallData) this._wallRasterizer.initialize(wallData); //@ts-ignore\n\n    const floorData = asset.floorData;\n    if (floorData) this._floorRasterizer.initialize(floorData); //@ts-ignore\n\n    const landscapeData = asset.landscapeData;\n    if (landscapeData) this._landscapeRasterizer.initialize(landscapeData); //@ts-ignore\n\n    const maskData = asset.maskData;\n    if (maskData) this._maskManager.initialize(maskData);\n    return true;\n  }\n\n  onDispose() {\n    if (this._wallRasterizer) {\n      this._wallRasterizer.dispose();\n\n      this._wallRasterizer = null;\n    }\n\n    if (this._floorRasterizer) {\n      this._floorRasterizer.dispose();\n\n      this._floorRasterizer = null;\n    }\n\n    if (this._landscapeRasterizer) {\n      this._landscapeRasterizer.dispose();\n\n      this._landscapeRasterizer = null;\n    }\n\n    if (this._maskManager) {\n      this._maskManager.dispose();\n\n      this._maskManager = null;\n    }\n\n    super.onDispose();\n  }\n\n  setGraphicAssetCollection(collection) {\n    if (this._initialized) return;\n\n    this._wallRasterizer.initializeAssetCollection(collection);\n\n    this._floorRasterizer.initializeAssetCollection(collection);\n\n    this._landscapeRasterizer.initializeAssetCollection(collection);\n\n    this._maskManager.initializeAssetCollection(collection);\n\n    this._initialized = true;\n  }\n\n  clearCache() {\n    if (this._wallRasterizer) this._wallRasterizer.clearCache();\n    if (this._floorRasterizer) this._floorRasterizer.clearCache();\n    if (this._landscapeRasterizer) this._landscapeRasterizer.clearCache();\n  }\n\n  get wallRasterizer() {\n    return this._wallRasterizer;\n  }\n\n  get floorRasterizer() {\n    return this._floorRasterizer;\n  }\n\n  get landscapeRasterizer() {\n    return this._landscapeRasterizer;\n  }\n\n  get maskManager() {\n    return this._maskManager;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/RoomVisualizationData.ts"],"names":["Disposable","PlaneMaskManager","LandscapeRasterizer","FloorRasterizer","WallRasterizer","RoomVisualizationData","constructor","_wallRasterizer","_floorRasterizer","_landscapeRasterizer","_maskManager","_initialized","initialize","asset","wallData","floorData","landscapeData","maskData","onDispose","dispose","setGraphicAssetCollection","collection","initializeAssetCollection","clearCache","wallRasterizer","floorRasterizer","landscapeRasterizer","maskManager"],"mappings":"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","sourcesContent":["import { IAssetData } from '../../../../../core/asset/interfaces';\r\nimport { Disposable } from '../../../../../core/common/disposable/Disposable';\r\nimport { IObjectVisualizationData } from '../../../../../room/object/visualization/IRoomObjectVisualizationData';\r\nimport { IGraphicAssetCollection } from '../../../../../room/object/visualization/utils/IGraphicAssetCollection';\r\nimport { PlaneMaskManager } from './mask/PlaneMaskManager';\r\nimport { LandscapeRasterizer } from './rasterizer/animated/LandscapeRasterizer';\r\nimport { FloorRasterizer } from './rasterizer/basic/FloorRasterizer';\r\nimport { WallRasterizer } from './rasterizer/basic/WallRasterizer';\r\n\r\nexport class RoomVisualizationData extends Disposable implements IObjectVisualizationData\r\n{\r\n    private _wallRasterizer: WallRasterizer;\r\n    private _floorRasterizer: FloorRasterizer;\r\n    private _landscapeRasterizer: LandscapeRasterizer;\r\n    private _maskManager: PlaneMaskManager;\r\n    private _initialized: boolean;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._wallRasterizer = new WallRasterizer();\r\n        this._floorRasterizer = new FloorRasterizer();\r\n        this._landscapeRasterizer = new LandscapeRasterizer();\r\n        this._maskManager = new PlaneMaskManager();\r\n        this._initialized = false;\r\n    }\r\n\r\n    public initialize(asset: IAssetData): boolean\r\n    {\r\n        //@ts-ignore\r\n        const wallData = asset.wallData;\r\n\r\n        if(wallData) this._wallRasterizer.initialize(wallData);\r\n\r\n        //@ts-ignore\r\n        const floorData = asset.floorData;\r\n\r\n        if(floorData) this._floorRasterizer.initialize(floorData);\r\n\r\n        //@ts-ignore\r\n        const landscapeData = asset.landscapeData;\r\n\r\n        if(landscapeData) this._landscapeRasterizer.initialize(landscapeData);\r\n\r\n        //@ts-ignore\r\n        const maskData = asset.maskData;\r\n\r\n        if(maskData) this._maskManager.initialize(maskData);\r\n\r\n        return true;\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        if(this._wallRasterizer)\r\n        {\r\n            this._wallRasterizer.dispose();\r\n\r\n            this._wallRasterizer = null;\r\n        }\r\n\r\n        if(this._floorRasterizer)\r\n        {\r\n            this._floorRasterizer.dispose();\r\n\r\n            this._floorRasterizer = null;\r\n        }\r\n\r\n        if(this._landscapeRasterizer)\r\n        {\r\n            this._landscapeRasterizer.dispose();\r\n\r\n            this._landscapeRasterizer = null;\r\n        }\r\n\r\n        if(this._maskManager)\r\n        {\r\n            this._maskManager.dispose();\r\n\r\n            this._maskManager = null;\r\n        }\r\n\r\n        super.onDispose();\r\n    }\r\n\r\n    public setGraphicAssetCollection(collection: IGraphicAssetCollection): void\r\n    {\r\n        if(this._initialized) return;\r\n\r\n        this._wallRasterizer.initializeAssetCollection(collection);\r\n        this._floorRasterizer.initializeAssetCollection(collection);\r\n        this._landscapeRasterizer.initializeAssetCollection(collection);\r\n        this._maskManager.initializeAssetCollection(collection);\r\n\r\n        this._initialized = true;\r\n    }\r\n\r\n    public clearCache(): void\r\n    {\r\n        if(this._wallRasterizer) this._wallRasterizer.clearCache();\r\n\r\n        if(this._floorRasterizer) this._floorRasterizer.clearCache();\r\n\r\n        if(this._landscapeRasterizer) this._landscapeRasterizer.clearCache();\r\n    }\r\n\r\n    public get wallRasterizer(): WallRasterizer\r\n    {\r\n        return this._wallRasterizer;\r\n    }\r\n\r\n    public get floorRasterizer(): FloorRasterizer\r\n    {\r\n        return this._floorRasterizer;\r\n    }\r\n\r\n    public get landscapeRasterizer(): LandscapeRasterizer\r\n    {\r\n        return this._landscapeRasterizer;\r\n    }\r\n\r\n    public get maskManager(): PlaneMaskManager\r\n    {\r\n        return this._maskManager;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}