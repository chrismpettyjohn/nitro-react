{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { ColorConverter, NitroAdjustmentFilter, NitroSprite, NitroTexture, RoomBackgroundColorEvent, RoomEngineDimmerStateEvent, RoomId, RoomObjectHSLColorEnabledEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { GetNitroInstance, GetRoomEngine, RoomWidgetUpdateBackgroundColorPreviewEvent } from '../../api';\nimport { UseEventDispatcherHook, UseRoomEngineEvent } from '../../hooks';\nimport { useRoomContext } from './RoomContext';\nexport const RoomColorView = props => {\n  _s();\n\n  const [roomBackground, setRoomBackground] = useState(null);\n  const [roomFilter, setRoomFilter] = useState(null);\n  const [originalRoomBackgroundColor, setOriginalRoomBackgroundColor] = useState(0);\n  const {\n    roomSession = null,\n    widgetHandler = null,\n    eventDispatcher = null\n  } = useRoomContext();\n  const updateRoomBackgroundColor = useCallback(function (hue, saturation, lightness) {\n    let original = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (!roomBackground) return;\n    const newColor = ColorConverter.hslToRGB(((hue & 0xFF) << 16) + ((saturation & 0xFF) << 8) + (lightness & 0xFF));\n    if (original) setOriginalRoomBackgroundColor(newColor);\n\n    if (!hue && !saturation && !lightness) {\n      roomBackground.tint = 0;\n    } else {\n      roomBackground.tint = newColor;\n    }\n  }, [roomBackground]);\n  const updateRoomFilter = useCallback(color => {\n    if (!roomFilter) return;\n    const r = color >> 16 & 0xFF;\n    const g = color >> 8 & 0xFF;\n    const b = color & 0xFF;\n    roomFilter.red = r / 255;\n    roomFilter.green = g / 255;\n    roomFilter.blue = b / 255;\n  }, [roomFilter]);\n  const onRoomEngineEvent = useCallback(event => {\n    if (RoomId.isRoomPreviewerId(event.roomId)) return;\n\n    switch (event.type) {\n      case RoomObjectHSLColorEnabledEvent.ROOM_BACKGROUND_COLOR:\n        {\n          const hslColorEvent = event;\n          if (hslColorEvent.enable) updateRoomBackgroundColor(hslColorEvent.hue, hslColorEvent.saturation, hslColorEvent.lightness, true);else updateRoomBackgroundColor(0, 0, 0, true);\n          return;\n        }\n\n      case RoomBackgroundColorEvent.ROOM_COLOR:\n        {\n          const colorEvent = event;\n          let color = 0x000000;\n          let brightness = 0xFF;\n\n          if (!colorEvent.bgOnly) {\n            color = colorEvent.color;\n            brightness = colorEvent.brightness;\n          }\n\n          updateRoomFilter(ColorConverter.hslToRGB((ColorConverter.rgbToHSL(color) & 0xFFFF00) + brightness));\n          return;\n        }\n\n      case RoomEngineDimmerStateEvent.ROOM_COLOR:\n        {\n          widgetHandler.processEvent(event);\n        }\n    }\n  }, [widgetHandler, updateRoomBackgroundColor, updateRoomFilter]);\n  UseRoomEngineEvent(RoomObjectHSLColorEnabledEvent.ROOM_BACKGROUND_COLOR, onRoomEngineEvent);\n  UseRoomEngineEvent(RoomBackgroundColorEvent.ROOM_COLOR, onRoomEngineEvent);\n  UseRoomEngineEvent(RoomEngineDimmerStateEvent.ROOM_COLOR, onRoomEngineEvent);\n  const onRoomWidgetUpdateBackgroundColorPreviewEvent = useCallback(event => {\n    switch (event.type) {\n      case RoomWidgetUpdateBackgroundColorPreviewEvent.PREVIEW:\n        {\n          updateRoomBackgroundColor(event.hue, event.saturation, event.lightness);\n          return;\n        }\n\n      case RoomWidgetUpdateBackgroundColorPreviewEvent.CLEAR_PREVIEW:\n        {\n          if (!roomBackground) return;\n          roomBackground.tint = originalRoomBackgroundColor;\n          return;\n        }\n    }\n  }, [roomBackground, originalRoomBackgroundColor, updateRoomBackgroundColor]);\n  UseEventDispatcherHook(RoomWidgetUpdateBackgroundColorPreviewEvent.PREVIEW, eventDispatcher, onRoomWidgetUpdateBackgroundColorPreviewEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateBackgroundColorPreviewEvent.CLEAR_PREVIEW, eventDispatcher, onRoomWidgetUpdateBackgroundColorPreviewEvent);\n  useEffect(() => {\n    if (!roomSession) return;\n    const canvas = GetRoomEngine().getRoomInstanceRenderingCanvas(roomSession.roomId, 1);\n    if (!canvas) return;\n    const background = new NitroSprite(NitroTexture.WHITE);\n    const filter = new NitroAdjustmentFilter();\n    const master = canvas.master;\n    background.tint = 0;\n    background.width = GetNitroInstance().width;\n    background.height = GetNitroInstance().height;\n    master.addChildAt(background, 0);\n    master.filters = [filter];\n    setRoomBackground(background);\n    setRoomFilter(filter);\n\n    const resize = event => {\n      background.width = GetNitroInstance().width;\n      background.height = GetNitroInstance().height;\n    };\n\n    window.addEventListener('resize', resize);\n    return () => {\n      setRoomBackground(prevValue => {\n        if (prevValue) prevValue.destroy();\n        return null;\n      });\n      setRoomFilter(prevValue => {\n        if (prevValue) prevValue.destroy();\n        return null;\n      });\n      setOriginalRoomBackgroundColor(0);\n      window.removeEventListener('resize', resize);\n    };\n  }, [roomSession]);\n  return null;\n};\n\n_s(RoomColorView, \"7mPSBndeBmYeRGBN7wYcF2bBnkk=\", false, function () {\n  return [useRoomContext];\n});\n\n_c = RoomColorView;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomColorView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/room/RoomColorView.tsx"],"names":["ColorConverter","NitroAdjustmentFilter","NitroSprite","NitroTexture","RoomBackgroundColorEvent","RoomEngineDimmerStateEvent","RoomId","RoomObjectHSLColorEnabledEvent","useCallback","useEffect","useState","GetNitroInstance","GetRoomEngine","RoomWidgetUpdateBackgroundColorPreviewEvent","UseEventDispatcherHook","UseRoomEngineEvent","useRoomContext","RoomColorView","props","roomBackground","setRoomBackground","roomFilter","setRoomFilter","originalRoomBackgroundColor","setOriginalRoomBackgroundColor","roomSession","widgetHandler","eventDispatcher","updateRoomBackgroundColor","hue","saturation","lightness","original","newColor","hslToRGB","tint","updateRoomFilter","color","r","g","b","red","green","blue","onRoomEngineEvent","event","isRoomPreviewerId","roomId","type","ROOM_BACKGROUND_COLOR","hslColorEvent","enable","ROOM_COLOR","colorEvent","brightness","bgOnly","rgbToHSL","processEvent","onRoomWidgetUpdateBackgroundColorPreviewEvent","PREVIEW","CLEAR_PREVIEW","canvas","getRoomInstanceRenderingCanvas","background","WHITE","filter","master","width","height","addChildAt","filters","resize","window","addEventListener","prevValue","destroy","removeEventListener"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,qBAAzB,EAAgEC,WAAhE,EAA6EC,YAA7E,EAA2FC,wBAA3F,EAAqHC,0BAArH,EAAkKC,MAAlK,EAA0KC,8BAA1K,QAAgN,yBAAhN;AACA,SAAaC,WAAb,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,2CAA1C,QAA6F,WAA7F;AACA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,aAA3D;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAO,MAAMC,aAAqB,GAAGC,KAAK,IAC1C;AAAA;;AACI,QAAM,CAAEC,cAAF,EAAkBC,iBAAlB,IAAwCV,QAAQ,CAAc,IAAd,CAAtD;AACA,QAAM,CAAEW,UAAF,EAAcC,aAAd,IAAgCZ,QAAQ,CAAwB,IAAxB,CAA9C;AACA,QAAM,CAAEa,2BAAF,EAA+BC,8BAA/B,IAAkEd,QAAQ,CAAC,CAAD,CAAhF;AACA,QAAM;AAAEe,IAAAA,WAAW,GAAG,IAAhB;AAAsBC,IAAAA,aAAa,GAAG,IAAtC;AAA4CC,IAAAA,eAAe,GAAG;AAA9D,MAAuEX,cAAc,EAA3F;AAEA,QAAMY,yBAAyB,GAAGpB,WAAW,CAAC,UAACqB,GAAD,EAAcC,UAAd,EAAkCC,SAAlC,EAC9C;AAAA,QADmGC,QACnG,uEADuH,KACvH;AACI,QAAG,CAACb,cAAJ,EAAoB;AAEpB,UAAMc,QAAQ,GAAGjC,cAAc,CAACkC,QAAf,CAA0B,CAAC,CAACL,GAAG,GAAG,IAAP,KAAgB,EAAjB,KAAwB,CAACC,UAAU,GAAG,IAAd,KAAuB,CAA/C,CAAD,IAAuDC,SAAS,GAAG,IAAnE,CAAzB,CAAjB;AAEA,QAAGC,QAAH,EAAaR,8BAA8B,CAACS,QAAD,CAA9B;;AAEb,QAAG,CAACJ,GAAD,IAAQ,CAACC,UAAT,IAAuB,CAACC,SAA3B,EACA;AACIZ,MAAAA,cAAc,CAACgB,IAAf,GAAsB,CAAtB;AACH,KAHD,MAKA;AACIhB,MAAAA,cAAc,CAACgB,IAAf,GAAsBF,QAAtB;AACH;AACJ,GAhB4C,EAgB1C,CAAEd,cAAF,CAhB0C,CAA7C;AAkBA,QAAMiB,gBAAgB,GAAG5B,WAAW,CAAE6B,KAAD,IACrC;AACI,QAAG,CAAChB,UAAJ,EAAgB;AAEhB,UAAMiB,CAAC,GAAKD,KAAK,IAAI,EAAV,GAAgB,IAA3B;AACA,UAAME,CAAC,GAAKF,KAAK,IAAI,CAAV,GAAe,IAA1B;AACA,UAAMG,CAAC,GAAIH,KAAK,GAAG,IAAnB;AAEAhB,IAAAA,UAAU,CAACoB,GAAX,GAAkBH,CAAC,GAAG,GAAtB;AACAjB,IAAAA,UAAU,CAACqB,KAAX,GAAoBH,CAAC,GAAG,GAAxB;AACAlB,IAAAA,UAAU,CAACsB,IAAX,GAAmBH,CAAC,GAAG,GAAvB;AACH,GAXmC,EAWjC,CAAEnB,UAAF,CAXiC,CAApC;AAaA,QAAMuB,iBAAiB,GAAGpC,WAAW,CAAEqC,KAAD,IACtC;AACI,QAAGvC,MAAM,CAACwC,iBAAP,CAAyBD,KAAK,CAACE,MAA/B,CAAH,EAA2C;;AAE3C,YAAOF,KAAK,CAACG,IAAb;AAEI,WAAKzC,8BAA8B,CAAC0C,qBAApC;AAA2D;AACvD,gBAAMC,aAAa,GAAIL,KAAvB;AAEA,cAAGK,aAAa,CAACC,MAAjB,EAAyBvB,yBAAyB,CAACsB,aAAa,CAACrB,GAAf,EAAoBqB,aAAa,CAACpB,UAAlC,EAA8CoB,aAAa,CAACnB,SAA5D,EAAuE,IAAvE,CAAzB,CAAzB,KACKH,yBAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,IAAV,CAAzB;AAEL;AACH;;AACD,WAAKxB,wBAAwB,CAACgD,UAA9B;AAA0C;AACtC,gBAAMC,UAAU,GAAIR,KAApB;AAEA,cAAIR,KAAK,GAAG,QAAZ;AACA,cAAIiB,UAAU,GAAG,IAAjB;;AAEA,cAAG,CAACD,UAAU,CAACE,MAAf,EACA;AACIlB,YAAAA,KAAK,GAAGgB,UAAU,CAAChB,KAAnB;AACAiB,YAAAA,UAAU,GAAGD,UAAU,CAACC,UAAxB;AACH;;AAEDlB,UAAAA,gBAAgB,CAACpC,cAAc,CAACkC,QAAf,CAAyB,CAAClC,cAAc,CAACwD,QAAf,CAAwBnB,KAAxB,IAAiC,QAAlC,IAA8CiB,UAAvE,CAAD,CAAhB;AAEA;AACH;;AACD,WAAKjD,0BAA0B,CAAC+C,UAAhC;AAA4C;AACxC1B,UAAAA,aAAa,CAAC+B,YAAd,CAA2BZ,KAA3B;AACH;AA5BL;AA8BH,GAlCoC,EAkClC,CAAEnB,aAAF,EAAiBE,yBAAjB,EAA4CQ,gBAA5C,CAlCkC,CAArC;AAoCArB,EAAAA,kBAAkB,CAACR,8BAA8B,CAAC0C,qBAAhC,EAAuDL,iBAAvD,CAAlB;AACA7B,EAAAA,kBAAkB,CAACX,wBAAwB,CAACgD,UAA1B,EAAsCR,iBAAtC,CAAlB;AACA7B,EAAAA,kBAAkB,CAACV,0BAA0B,CAAC+C,UAA5B,EAAwCR,iBAAxC,CAAlB;AAEA,QAAMc,6CAA6C,GAAGlD,WAAW,CAAEqC,KAAD,IAClE;AACI,YAAOA,KAAK,CAACG,IAAb;AAEI,WAAKnC,2CAA2C,CAAC8C,OAAjD;AAA0D;AACtD/B,UAAAA,yBAAyB,CAACiB,KAAK,CAAChB,GAAP,EAAYgB,KAAK,CAACf,UAAlB,EAA8Be,KAAK,CAACd,SAApC,CAAzB;AACA;AACH;;AACD,WAAKlB,2CAA2C,CAAC+C,aAAjD;AAAgE;AAC5D,cAAG,CAACzC,cAAJ,EAAoB;AAEpBA,UAAAA,cAAc,CAACgB,IAAf,GAAsBZ,2BAAtB;AAEA;AACH;AAZL;AAcH,GAhBgE,EAgB9D,CAAEJ,cAAF,EAAkBI,2BAAlB,EAA+CK,yBAA/C,CAhB8D,CAAjE;AAkBAd,EAAAA,sBAAsB,CAACD,2CAA2C,CAAC8C,OAA7C,EAAsDhC,eAAtD,EAAuE+B,6CAAvE,CAAtB;AACA5C,EAAAA,sBAAsB,CAACD,2CAA2C,CAAC+C,aAA7C,EAA4DjC,eAA5D,EAA6E+B,6CAA7E,CAAtB;AAEAjD,EAAAA,SAAS,CAAC,MACV;AACI,QAAG,CAACgB,WAAJ,EAAiB;AAEjB,UAAMoC,MAAM,GAAGjD,aAAa,GAAGkD,8BAAhB,CAA+CrC,WAAW,CAACsB,MAA3D,EAAmE,CAAnE,CAAf;AAEA,QAAG,CAACc,MAAJ,EAAY;AAEZ,UAAME,UAAU,GAAG,IAAI7D,WAAJ,CAAgBC,YAAY,CAAC6D,KAA7B,CAAnB;AACA,UAAMC,MAAM,GAAG,IAAIhE,qBAAJ,EAAf;AACA,UAAMiE,MAAM,GAAIL,MAAM,CAACK,MAAvB;AAEAH,IAAAA,UAAU,CAAC5B,IAAX,GAAkB,CAAlB;AACA4B,IAAAA,UAAU,CAACI,KAAX,GAAmBxD,gBAAgB,GAAGwD,KAAtC;AACAJ,IAAAA,UAAU,CAACK,MAAX,GAAoBzD,gBAAgB,GAAGyD,MAAvC;AAEAF,IAAAA,MAAM,CAACG,UAAP,CAAkBN,UAAlB,EAA8B,CAA9B;AACAG,IAAAA,MAAM,CAACI,OAAP,GAAiB,CAAEL,MAAF,CAAjB;AAEA7C,IAAAA,iBAAiB,CAAC2C,UAAD,CAAjB;AACAzC,IAAAA,aAAa,CAAC2C,MAAD,CAAb;;AAEA,UAAMM,MAAM,GAAI1B,KAAD,IACf;AACIkB,MAAAA,UAAU,CAACI,KAAX,GAAmBxD,gBAAgB,GAAGwD,KAAtC;AACAJ,MAAAA,UAAU,CAACK,MAAX,GAAoBzD,gBAAgB,GAAGyD,MAAvC;AACH,KAJD;;AAMAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,MAAlC;AAEA,WAAO,MACP;AACInD,MAAAA,iBAAiB,CAACsD,SAAS,IAC3B;AACI,YAAGA,SAAH,EAAcA,SAAS,CAACC,OAAV;AAEd,eAAO,IAAP;AACH,OALgB,CAAjB;AAOArD,MAAAA,aAAa,CAACoD,SAAS,IACvB;AACI,YAAGA,SAAH,EAAcA,SAAS,CAACC,OAAV;AAEd,eAAO,IAAP;AACH,OALY,CAAb;AAOAnD,MAAAA,8BAA8B,CAAC,CAAD,CAA9B;AAEAgD,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,MAArC;AACH,KAnBD;AAoBH,GAlDQ,EAkDN,CAAE9C,WAAF,CAlDM,CAAT;AAoDA,SAAO,IAAP;AACH,CAxJM;;GAAMR,a;UAKoED,c;;;KALpEC,a","sourcesContent":["import { ColorConverter, NitroAdjustmentFilter, NitroContainer, NitroSprite, NitroTexture, RoomBackgroundColorEvent, RoomEngineDimmerStateEvent, RoomEngineEvent, RoomId, RoomObjectHSLColorEnabledEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { GetNitroInstance, GetRoomEngine, RoomWidgetUpdateBackgroundColorPreviewEvent } from '../../api';\nimport { UseEventDispatcherHook, UseRoomEngineEvent } from '../../hooks';\nimport { useRoomContext } from './RoomContext';\n\nexport const RoomColorView: FC<{}> = props =>\n{\n    const [ roomBackground, setRoomBackground ] = useState<NitroSprite>(null);\n    const [ roomFilter, setRoomFilter ] = useState<NitroAdjustmentFilter>(null);\n    const [ originalRoomBackgroundColor, setOriginalRoomBackgroundColor ] = useState(0);\n    const { roomSession = null, widgetHandler = null, eventDispatcher = null } = useRoomContext();\n\n    const updateRoomBackgroundColor = useCallback((hue: number, saturation: number, lightness: number, original: boolean = false) =>\n    {\n        if(!roomBackground) return;\n        \n        const newColor = ColorConverter.hslToRGB(((((hue & 0xFF) << 16) + ((saturation & 0xFF) << 8)) + (lightness & 0xFF)));\n\n        if(original) setOriginalRoomBackgroundColor(newColor);\n\n        if(!hue && !saturation && !lightness)\n        {\n            roomBackground.tint = 0;\n        }\n        else\n        {\n            roomBackground.tint = newColor;\n        }\n    }, [ roomBackground ]);\n\n    const updateRoomFilter = useCallback((color: number) =>\n    {\n        if(!roomFilter) return;\n\n        const r = ((color >> 16) & 0xFF);\n        const g = ((color >> 8) & 0xFF);\n        const b = (color & 0xFF);\n\n        roomFilter.red = (r / 255);\n        roomFilter.green = (g / 255);\n        roomFilter.blue = (b / 255);\n    }, [ roomFilter ]);\n\n    const onRoomEngineEvent = useCallback((event: RoomEngineEvent) =>\n    {\n        if(RoomId.isRoomPreviewerId(event.roomId)) return;\n\n        switch(event.type)\n        {\n            case RoomObjectHSLColorEnabledEvent.ROOM_BACKGROUND_COLOR: {\n                const hslColorEvent = (event as RoomObjectHSLColorEnabledEvent);\n\n                if(hslColorEvent.enable) updateRoomBackgroundColor(hslColorEvent.hue, hslColorEvent.saturation, hslColorEvent.lightness, true);\n                else updateRoomBackgroundColor(0, 0, 0, true);\n\n                return;\n            }\n            case RoomBackgroundColorEvent.ROOM_COLOR: {\n                const colorEvent = (event as RoomBackgroundColorEvent);\n\n                let color = 0x000000;\n                let brightness = 0xFF;\n\n                if(!colorEvent.bgOnly)\n                {\n                    color = colorEvent.color;\n                    brightness = colorEvent.brightness;\n                }\n                \n                updateRoomFilter(ColorConverter.hslToRGB(((ColorConverter.rgbToHSL(color) & 0xFFFF00) + brightness)));\n\n                return;\n            }\n            case RoomEngineDimmerStateEvent.ROOM_COLOR: {\n                widgetHandler.processEvent(event);\n            }\n        }\n    }, [ widgetHandler, updateRoomBackgroundColor, updateRoomFilter ]);\n\n    UseRoomEngineEvent(RoomObjectHSLColorEnabledEvent.ROOM_BACKGROUND_COLOR, onRoomEngineEvent);\n    UseRoomEngineEvent(RoomBackgroundColorEvent.ROOM_COLOR, onRoomEngineEvent);\n    UseRoomEngineEvent(RoomEngineDimmerStateEvent.ROOM_COLOR, onRoomEngineEvent);\n\n    const onRoomWidgetUpdateBackgroundColorPreviewEvent = useCallback((event: RoomWidgetUpdateBackgroundColorPreviewEvent) =>\n    {\n        switch(event.type)\n        {\n            case RoomWidgetUpdateBackgroundColorPreviewEvent.PREVIEW: {\n                updateRoomBackgroundColor(event.hue, event.saturation, event.lightness);\n                return;\n            }\n            case RoomWidgetUpdateBackgroundColorPreviewEvent.CLEAR_PREVIEW: {\n                if(!roomBackground) return;\n\n                roomBackground.tint = originalRoomBackgroundColor;\n                \n                return;\n            }\n        }\n    }, [ roomBackground, originalRoomBackgroundColor, updateRoomBackgroundColor ]);\n\n    UseEventDispatcherHook(RoomWidgetUpdateBackgroundColorPreviewEvent.PREVIEW, eventDispatcher, onRoomWidgetUpdateBackgroundColorPreviewEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateBackgroundColorPreviewEvent.CLEAR_PREVIEW, eventDispatcher, onRoomWidgetUpdateBackgroundColorPreviewEvent);\n\n    useEffect(() =>\n    {\n        if(!roomSession) return;\n\n        const canvas = GetRoomEngine().getRoomInstanceRenderingCanvas(roomSession.roomId, 1);\n\n        if(!canvas) return;\n\n        const background = new NitroSprite(NitroTexture.WHITE);\n        const filter = new NitroAdjustmentFilter();\n        const master = (canvas.master as NitroContainer);\n\n        background.tint = 0;\n        background.width = GetNitroInstance().width;\n        background.height = GetNitroInstance().height;\n\n        master.addChildAt(background, 0);\n        master.filters = [ filter ];\n\n        setRoomBackground(background);\n        setRoomFilter(filter);\n\n        const resize = (event: UIEvent) =>\n        {\n            background.width = GetNitroInstance().width;\n            background.height = GetNitroInstance().height;\n        }\n\n        window.addEventListener('resize', resize);\n\n        return () =>\n        {\n            setRoomBackground(prevValue =>\n            {\n                if(prevValue) prevValue.destroy();\n\n                return null;\n            });\n\n            setRoomFilter(prevValue =>\n            {\n                if(prevValue) prevValue.destroy();\n\n                return null;\n            });\n            \n            setOriginalRoomBackgroundColor(0);\n\n            window.removeEventListener('resize', resize);\n        }\n    }, [ roomSession ]);\n\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}