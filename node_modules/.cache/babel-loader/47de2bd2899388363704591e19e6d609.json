{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { ColorMatrixFilter } from '@pixi/filter-color-matrix';\nimport { EventDispatcher, NitroContainer, NitroSprite } from '../../core';\nimport { TextureUtils } from '../../room';\nimport { Nitro } from '../Nitro';\nimport { RoomCameraWidgetManagerEvent } from './events/RoomCameraWidgetManagerEvent';\nimport { RoomCameraWidgetEffect } from './RoomCameraWidgetEffect';\nexport class RoomCameraWidgetManager {\n  constructor() {\n    this._effects = void 0;\n    this._events = void 0;\n    this._isLoaded = void 0;\n    this._effects = new Map();\n    this._events = new EventDispatcher();\n    this._isLoaded = false;\n  }\n\n  init() {\n    if (this._isLoaded) return;\n    this._isLoaded = true;\n    const imagesUrl = Nitro.instance.getConfiguration('image.library.url') + 'Habbo-Stories/';\n    const effects = Nitro.instance.getConfiguration('camera.available.effects');\n\n    for (const effect of effects) {\n      if (!effect.enabled) continue;\n      const cameraEffect = new RoomCameraWidgetEffect(effect.name, effect.minLevel);\n\n      if (effect.colorMatrix.length) {\n        cameraEffect.colorMatrix = effect.colorMatrix;\n      } else {\n        cameraEffect.texture = Texture.from(imagesUrl + effect.name + '.png');\n        cameraEffect.blendMode = effect.blendMode;\n      }\n\n      this._effects.set(cameraEffect.name, cameraEffect);\n    }\n\n    this.events.dispatchEvent(new RoomCameraWidgetManagerEvent(RoomCameraWidgetManagerEvent.INITIALIZED));\n  }\n\n  applyEffects(texture, selectedEffects, isZoomed) {\n    const container = new NitroContainer();\n    const sprite = new NitroSprite(texture);\n    container.addChild(sprite);\n\n    for (const selectedEffect of selectedEffects) {\n      const effect = selectedEffect.effect;\n      if (!effect) continue;\n\n      if (effect.colorMatrix) {\n        const filter = new ColorMatrixFilter();\n        filter.matrix = effect.colorMatrix;\n        filter.alpha = selectedEffect.alpha;\n        if (!sprite.filters) sprite.filters = [];\n        sprite.filters.push(filter);\n      } else {\n        const effectSprite = new NitroSprite(effect.texture);\n        effectSprite.alpha = selectedEffect.alpha;\n        effectSprite.blendMode = effect.blendMode;\n        container.addChild(effectSprite);\n      }\n    }\n\n    return TextureUtils.generateImage(container);\n  }\n\n  get effects() {\n    return this._effects;\n  }\n\n  get events() {\n    return this._events;\n  }\n\n  get isLoaded() {\n    return this._isLoaded;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/camera/RoomCameraWidgetManager.ts"],"names":["Texture","ColorMatrixFilter","EventDispatcher","NitroContainer","NitroSprite","TextureUtils","Nitro","RoomCameraWidgetManagerEvent","RoomCameraWidgetEffect","RoomCameraWidgetManager","constructor","_effects","_events","_isLoaded","Map","init","imagesUrl","instance","getConfiguration","effects","effect","enabled","cameraEffect","name","minLevel","colorMatrix","length","texture","from","blendMode","set","events","dispatchEvent","INITIALIZED","applyEffects","selectedEffects","isZoomed","container","sprite","addChild","selectedEffect","filter","matrix","alpha","filters","push","effectSprite","generateImage","isLoaded"],"mappings":"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","sourcesContent":["import { Texture } from '@pixi/core';\r\nimport { ColorMatrix, ColorMatrixFilter } from '@pixi/filter-color-matrix';\r\nimport { EventDispatcher, IEventDispatcher, NitroContainer, NitroSprite } from '../../core';\r\nimport { TextureUtils } from '../../room';\r\nimport { Nitro } from '../Nitro';\r\nimport { RoomCameraWidgetManagerEvent } from './events/RoomCameraWidgetManagerEvent';\r\nimport { IRoomCameraWidgetEffect } from './IRoomCameraWidgetEffect';\r\nimport { IRoomCameraWidgetManager } from './IRoomCameraWidgetManager';\r\nimport { IRoomCameraWidgetSelectedEffect } from './IRoomCameraWidgetSelectedEffect';\r\nimport { RoomCameraWidgetEffect } from './RoomCameraWidgetEffect';\r\n\r\nexport class RoomCameraWidgetManager implements IRoomCameraWidgetManager\r\n{\r\n    private _effects: Map<string, IRoomCameraWidgetEffect>;\r\n    private _events: IEventDispatcher;\r\n    private _isLoaded: boolean;\r\n\r\n    constructor()\r\n    {\r\n        this._effects = new Map();\r\n        this._events = new EventDispatcher();\r\n        this._isLoaded = false;\r\n    }\r\n\r\n    public init(): void\r\n    {\r\n        if(this._isLoaded) return;\r\n\r\n        this._isLoaded = true;\r\n\r\n        const imagesUrl = Nitro.instance.getConfiguration<string>('image.library.url') + 'Habbo-Stories/';\r\n        const effects = Nitro.instance.getConfiguration<{ name: string, colorMatrix?: ColorMatrix, minLevel: number, blendMode?: number, enabled: boolean }[]>('camera.available.effects');\r\n\r\n        for(const effect of effects)\r\n        {\r\n            if(!effect.enabled) continue;\r\n\r\n            const cameraEffect = new RoomCameraWidgetEffect(effect.name, effect.minLevel);\r\n\r\n            if(effect.colorMatrix.length)\r\n            {\r\n                cameraEffect.colorMatrix = effect.colorMatrix;\r\n            }\r\n            else\r\n            {\r\n                cameraEffect.texture = Texture.from(imagesUrl + effect.name + '.png');\r\n                cameraEffect.blendMode = effect.blendMode;\r\n            }\r\n\r\n            this._effects.set(cameraEffect.name, cameraEffect);\r\n        }\r\n\r\n        this.events.dispatchEvent(new RoomCameraWidgetManagerEvent(RoomCameraWidgetManagerEvent.INITIALIZED));\r\n    }\r\n\r\n    public applyEffects(texture: Texture, selectedEffects: IRoomCameraWidgetSelectedEffect[], isZoomed: boolean): HTMLImageElement\r\n    {\r\n        const container = new NitroContainer();\r\n        const sprite = new NitroSprite(texture);\r\n\r\n        container.addChild(sprite);\r\n\r\n        for(const selectedEffect of selectedEffects)\r\n        {\r\n            const effect = selectedEffect.effect;\r\n\r\n            if(!effect) continue;\r\n\r\n            if(effect.colorMatrix)\r\n            {\r\n                const filter = new ColorMatrixFilter();\r\n\r\n                filter.matrix = effect.colorMatrix;\r\n                filter.alpha = selectedEffect.alpha;\r\n\r\n                if(!sprite.filters) sprite.filters = [];\r\n\r\n                sprite.filters.push(filter);\r\n            }\r\n            else\r\n            {\r\n                const effectSprite = new NitroSprite(effect.texture);\r\n                effectSprite.alpha = selectedEffect.alpha;\r\n                effectSprite.blendMode = effect.blendMode;\r\n\r\n                container.addChild(effectSprite);\r\n            }\r\n        }\r\n\r\n        return TextureUtils.generateImage(container);\r\n    }\r\n\r\n    public get effects(): Map<string, IRoomCameraWidgetEffect>\r\n    {\r\n        return this._effects;\r\n    }\r\n\r\n    public get events(): IEventDispatcher\r\n    {\r\n        return this._events;\r\n    }\r\n\r\n    public get isLoaded(): boolean\r\n    {\r\n        return this._isLoaded;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}