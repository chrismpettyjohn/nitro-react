{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/inventory/views/furniture/InventoryTradeView.tsx\",\n    _s = $RefreshSig$();\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { TradingListAddItemComposer, TradingListAddItemsComposer } from '@nitrots/nitro-renderer';\nimport { useEffect, useState } from 'react';\nimport { FurniCategory, getGuildFurniType, LocalizeText, NotificationAlertType, NotificationUtilities, SendMessageComposer, TradeState } from '../../../../api';\nimport { AutoGrid, Base, Button, Column, Flex, Grid, LayoutGridItem, Text } from '../../../../common';\nimport { useInventoryTrade } from '../../../../hooks';\nimport { InventoryFurnitureSearchView } from './InventoryFurnitureSearchView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ITEMS_TO_TRADE = 9;\nexport const InventoryTradeView = props => {\n  _s();\n\n  const {\n    cancelTrade = null\n  } = props;\n  const [groupItem, setGroupItem] = useState(null);\n  const [ownGroupItem, setOwnGroupItem] = useState(null);\n  const [otherGroupItem, setOtherGroupItem] = useState(null);\n  const [filteredGroupItems, setFilteredGroupItems] = useState(null);\n  const [countdownTick, setCountdownTick] = useState(3);\n  const {\n    ownUser = null,\n    otherUser = null,\n    groupItems = [],\n    tradeState = TradeState.TRADING_STATE_READY,\n    progressTrade = null,\n    removeItem = null,\n    setTradeState = null\n  } = useInventoryTrade();\n\n  const canTradeItem = (isWallItem, spriteId, category, groupable, stuffData) => {\n    if (!ownUser || ownUser.accepts || !ownUser.userItems) return false;\n    if (ownUser.userItems.length < MAX_ITEMS_TO_TRADE) return true;\n    if (!groupable) return false;\n    let type = spriteId.toString();\n\n    if (category === FurniCategory.POSTER) {\n      type = type + 'poster' + stuffData.getLegacyString();\n    } else {\n      if (category === FurniCategory.GUILD_FURNI) {\n        type = getGuildFurniType(spriteId, stuffData);\n      } else {\n        type = (isWallItem ? 'I' : 'S') + type;\n      }\n    }\n\n    return !!ownUser.userItems.getValue(type);\n  };\n\n  const attemptItemOffer = count => {\n    if (!groupItem) return;\n    const tradeItems = groupItem.getTradeItems(count);\n    if (!tradeItems || !tradeItems.length) return;\n    let coreItem = null;\n    const itemIds = [];\n\n    for (const item of tradeItems) {\n      itemIds.push(item.id);\n      if (!coreItem) coreItem = item;\n    }\n\n    const ownItemCount = ownUser.userItems.length;\n\n    if (ownItemCount + itemIds.length <= 1500) {\n      if (!coreItem.isGroupable && itemIds.length) {\n        SendMessageComposer(new TradingListAddItemComposer(itemIds.pop()));\n      } else {\n        const tradeIds = [];\n\n        for (const itemId of itemIds) {\n          if (canTradeItem(coreItem.isWallItem, coreItem.type, coreItem.category, coreItem.isGroupable, coreItem.stuffData)) {\n            tradeIds.push(itemId);\n          }\n        }\n\n        if (tradeIds.length) {\n          if (tradeIds.length === 1) {\n            SendMessageComposer(new TradingListAddItemComposer(tradeIds.pop()));\n          } else {\n            SendMessageComposer(new TradingListAddItemsComposer(...tradeIds));\n          }\n        }\n      }\n    } else {\n      NotificationUtilities.simpleAlert(LocalizeText('trading.items.too_many_items.desc'), NotificationAlertType.DEFAULT, null, null, LocalizeText('trading.items.too_many_items.title'));\n    }\n  };\n\n  const getLockIcon = accepts => {\n    const iconName = accepts ? 'locked' : 'open';\n    return /*#__PURE__*/_jsxDEV(\"i\", {\n      className: 'mt-auto pb-5 icon icon-lock-' + iconName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 16\n    }, this);\n  };\n\n  useEffect(() => {\n    if (tradeState !== TradeState.TRADING_STATE_COUNTDOWN) return;\n    setCountdownTick(3);\n    const interval = setInterval(() => {\n      setCountdownTick(prevValue => {\n        const newValue = prevValue - 1;\n        if (newValue === 0) clearInterval(interval);\n        return newValue;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [tradeState, setTradeState]);\n  useEffect(() => {\n    if (countdownTick !== 0) return;\n    setTradeState(TradeState.TRADING_STATE_CONFIRMING);\n  }, [countdownTick, setTradeState]);\n  if (tradeState === TradeState.TRADING_STATE_READY || !ownUser || !otherUser) return null;\n  return /*#__PURE__*/_jsxDEV(Column, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: /*#__PURE__*/_jsxDEV(Column, {\n        size: 4,\n        fullWidth: true,\n        overflow: \"hidden\",\n        className: \"trading-inventory\",\n        children: [/*#__PURE__*/_jsxDEV(InventoryFurnitureSearchView, {\n          groupItems: groupItems,\n          setGroupItems: setFilteredGroupItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          column: true,\n          fullHeight: true,\n          fullWidth: true,\n          justifyContent: \"between\",\n          overflow: \"hidden\",\n          gap: 2,\n          children: [/*#__PURE__*/_jsxDEV(AutoGrid, {\n            columnCount: 3,\n            children: filteredGroupItems && filteredGroupItems.length > 0 && filteredGroupItems.map((item, index) => {\n              const count = item.getUnlockedCount();\n              return /*#__PURE__*/_jsxDEV(LayoutGridItem, {\n                className: !count ? 'opacity-0-5 ' : '',\n                itemImage: item.iconUrl,\n                itemCount: count,\n                itemActive: groupItem === item,\n                itemUniqueNumber: item.stuffData.uniqueNumber,\n                onClick: event => count && setGroupItem(item),\n                children: count > 0 && groupItem === item && /*#__PURE__*/_jsxDEV(Button, {\n                  position: \"absolute\",\n                  variant: \"success\",\n                  className: \"trade-button bottom-1 end-1\",\n                  onClick: event => attemptItemOffer(1),\n                  children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: \"chevron-right\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 37\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Base, {\n            fullWidth: true,\n            className: \"badge bg-muted\",\n            children: groupItem ? groupItem.name : LocalizeText('catalog_selectproduct')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      fullWidth: true,\n      size: 8,\n      overflow: \"hidden\",\n      className: \"trade-bg p-2\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        overflow: \"hidden\",\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          size: 4,\n          overflow: \"hidden\",\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"between\",\n            alignItems: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: [LocalizeText('inventory.trading.you'), \" \", LocalizeText('inventory.trading.areoffering'), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AutoGrid, {\n            columnCount: 3,\n            children: Array.from(Array(MAX_ITEMS_TO_TRADE), (e, i) => {\n              const item = ownUser.userItems.getWithIndex(i) || null;\n              if (!item) return /*#__PURE__*/_jsxDEV(LayoutGridItem, {}, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 50\n              }, this);\n              return /*#__PURE__*/_jsxDEV(LayoutGridItem, {\n                itemActive: ownGroupItem === item,\n                itemImage: item.iconUrl,\n                itemCount: item.getTotalCount(),\n                itemUniqueNumber: item.stuffData.uniqueNumber,\n                onClick: event => setOwnGroupItem(item),\n                children: ownGroupItem === item && /*#__PURE__*/_jsxDEV(Button, {\n                  position: \"absolute\",\n                  variant: \"danger\",\n                  className: \"trade-button bottom-1 start-1\",\n                  onClick: event => removeItem(item),\n                  children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: \"chevron-left\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 41\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Base, {\n            fullWidth: true,\n            className: \"badge bg-muted\",\n            children: ownGroupItem ? ownGroupItem.name : LocalizeText('catalog_selectproduct')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), getLockIcon(ownUser.accepts), /*#__PURE__*/_jsxDEV(Column, {\n          size: 4,\n          overflow: \"hidden\",\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"between\",\n            alignItems: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: [otherUser.userName, \" \", LocalizeText('inventory.trading.isoffering'), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AutoGrid, {\n            columnCount: 3,\n            children: Array.from(Array(MAX_ITEMS_TO_TRADE), (e, i) => {\n              const item = otherUser.userItems.getWithIndex(i) || null;\n              if (!item) return /*#__PURE__*/_jsxDEV(LayoutGridItem, {}, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 50\n              }, this);\n              return /*#__PURE__*/_jsxDEV(LayoutGridItem, {\n                itemActive: otherGroupItem === item,\n                itemImage: item.iconUrl,\n                itemCount: item.getTotalCount(),\n                itemUniqueNumber: item.stuffData.uniqueNumber,\n                onClick: event => setOtherGroupItem(item)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Base, {\n            fullWidth: true,\n            className: \"badge bg-muted w-100\",\n            children: otherGroupItem ? otherGroupItem.name : LocalizeText('catalog_selectproduct')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), getLockIcon(otherUser.accepts)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        grow: true,\n        justifyContent: \"between\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: cancelTrade,\n          children: LocalizeText('generic.cancel')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), tradeState === TradeState.TRADING_STATE_READY && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          disabled: !ownUser.itemCount && !otherUser.itemCount,\n          onClick: progressTrade,\n          children: LocalizeText('inventory.trading.accept')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), tradeState === TradeState.TRADING_STATE_RUNNING && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          disabled: !ownUser.itemCount && !otherUser.itemCount,\n          onClick: progressTrade,\n          children: LocalizeText(ownUser.accepts ? 'inventory.trading.modify' : 'inventory.trading.accept')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), tradeState === TradeState.TRADING_STATE_COUNTDOWN && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          disabled: true,\n          children: LocalizeText('inventory.trading.countdown', ['counter'], [countdownTick.toString()])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this), tradeState === TradeState.TRADING_STATE_CONFIRMING && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: progressTrade,\n          children: LocalizeText('inventory.trading.button.restore')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this), tradeState === TradeState.TRADING_STATE_CONFIRMED && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          children: LocalizeText('inventory.trading.info.waiting')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InventoryTradeView, \"ezemuLH+5votIhya+yPRlwzBaj8=\", false, function () {\n  return [useInventoryTrade];\n});\n\n_c = InventoryTradeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryTradeView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/inventory/views/furniture/InventoryTradeView.tsx"],"names":["FontAwesomeIcon","TradingListAddItemComposer","TradingListAddItemsComposer","useEffect","useState","FurniCategory","getGuildFurniType","LocalizeText","NotificationAlertType","NotificationUtilities","SendMessageComposer","TradeState","AutoGrid","Base","Button","Column","Flex","Grid","LayoutGridItem","Text","useInventoryTrade","InventoryFurnitureSearchView","MAX_ITEMS_TO_TRADE","InventoryTradeView","props","cancelTrade","groupItem","setGroupItem","ownGroupItem","setOwnGroupItem","otherGroupItem","setOtherGroupItem","filteredGroupItems","setFilteredGroupItems","countdownTick","setCountdownTick","ownUser","otherUser","groupItems","tradeState","TRADING_STATE_READY","progressTrade","removeItem","setTradeState","canTradeItem","isWallItem","spriteId","category","groupable","stuffData","accepts","userItems","length","type","toString","POSTER","getLegacyString","GUILD_FURNI","getValue","attemptItemOffer","count","tradeItems","getTradeItems","coreItem","itemIds","item","push","id","ownItemCount","isGroupable","pop","tradeIds","itemId","simpleAlert","DEFAULT","getLockIcon","iconName","TRADING_STATE_COUNTDOWN","interval","setInterval","prevValue","newValue","clearInterval","TRADING_STATE_CONFIRMING","map","index","getUnlockedCount","iconUrl","uniqueNumber","event","name","Array","from","e","i","getWithIndex","getTotalCount","userName","itemCount","TRADING_STATE_RUNNING","TRADING_STATE_CONFIRMED"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IObjectData, TradingListAddItemComposer, TradingListAddItemsComposer } from '@nitrots/nitro-renderer';\nimport { FC, useEffect, useState } from 'react';\nimport { FurniCategory, getGuildFurniType, GroupItem, IFurnitureItem, LocalizeText, NotificationAlertType, NotificationUtilities, SendMessageComposer, TradeState } from '../../../../api';\nimport { AutoGrid, Base, Button, Column, Flex, Grid, LayoutGridItem, Text } from '../../../../common';\nimport { useInventoryTrade } from '../../../../hooks';\nimport { InventoryFurnitureSearchView } from './InventoryFurnitureSearchView';\n\ninterface InventoryTradeViewProps\n{\n    cancelTrade: () => void;\n}\n\nconst MAX_ITEMS_TO_TRADE: number = 9;\n\nexport const InventoryTradeView: FC<InventoryTradeViewProps> = props =>\n{\n    const { cancelTrade = null } = props;\n    const [ groupItem, setGroupItem ] = useState<GroupItem>(null);\n    const [ ownGroupItem, setOwnGroupItem ] = useState<GroupItem>(null);\n    const [ otherGroupItem, setOtherGroupItem ] = useState<GroupItem>(null);\n    const [ filteredGroupItems, setFilteredGroupItems ] = useState<GroupItem[]>(null);\n    const [ countdownTick, setCountdownTick ] = useState(3);\n    const { ownUser = null, otherUser = null, groupItems = [], tradeState = TradeState.TRADING_STATE_READY, progressTrade = null, removeItem = null, setTradeState = null } = useInventoryTrade();\n\n    const canTradeItem = (isWallItem: boolean, spriteId: number, category: number, groupable: boolean, stuffData: IObjectData) =>\n    {\n        if(!ownUser || ownUser.accepts || !ownUser.userItems) return false;\n\n        if(ownUser.userItems.length < MAX_ITEMS_TO_TRADE) return true;\n\n        if(!groupable) return false;\n\n        let type = spriteId.toString();\n\n        if(category === FurniCategory.POSTER)\n        {\n            type = ((type + 'poster') + stuffData.getLegacyString());\n        }\n        else\n        {\n            if(category === FurniCategory.GUILD_FURNI)\n            {\n                type = getGuildFurniType(spriteId, stuffData);\n            }\n            else\n            {\n                type = (((isWallItem) ? 'I' : 'S') + type);\n            }\n        }\n\n        return !!ownUser.userItems.getValue(type);\n    }\n\n    const attemptItemOffer = (count: number) =>\n    {\n        if(!groupItem) return;\n\n        const tradeItems = groupItem.getTradeItems(count);\n\n        if(!tradeItems || !tradeItems.length) return;\n\n        let coreItem: IFurnitureItem = null;\n        const itemIds: number[] = [];\n\n        for(const item of tradeItems)\n        {\n            itemIds.push(item.id);\n\n            if(!coreItem) coreItem = item;\n        }\n\n        const ownItemCount = ownUser.userItems.length;\n\n        if((ownItemCount + itemIds.length) <= 1500)\n        {\n            if(!coreItem.isGroupable && (itemIds.length))\n            {\n                SendMessageComposer(new TradingListAddItemComposer(itemIds.pop()));\n            }\n            else\n            {\n                const tradeIds: number[] = [];\n\n                for(const itemId of itemIds)\n                {\n                    if(canTradeItem(coreItem.isWallItem, coreItem.type, coreItem.category, coreItem.isGroupable, coreItem.stuffData))\n                    {\n                        tradeIds.push(itemId);\n                    }\n                }\n\n                if(tradeIds.length)\n                {\n                    if(tradeIds.length === 1)\n                    {\n                        SendMessageComposer(new TradingListAddItemComposer(tradeIds.pop()));\n                    }\n                    else\n                    {\n                        SendMessageComposer(new TradingListAddItemsComposer(...tradeIds));\n                    }\n                }\n            }\n        }\n        else\n        {\n            NotificationUtilities.simpleAlert(LocalizeText('trading.items.too_many_items.desc'), NotificationAlertType.DEFAULT, null, null, LocalizeText('trading.items.too_many_items.title'));\n        }\n    }\n\n    const getLockIcon = (accepts: boolean) =>\n    {\n        const iconName = accepts ? 'locked' : 'open';\n\n        return <i className={ 'mt-auto pb-5 icon icon-lock-' + iconName } />\n    }\n\n    useEffect(() =>\n    {\n        if(tradeState !== TradeState.TRADING_STATE_COUNTDOWN) return;\n\n        setCountdownTick(3);\n\n        const interval = setInterval(() =>\n        {\n            setCountdownTick(prevValue =>\n            {\n                const newValue = (prevValue - 1);\n\n                if(newValue === 0) clearInterval(interval);\n\n                return newValue;\n            });\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [ tradeState, setTradeState ]);\n\n    useEffect(() =>\n    {\n        if(countdownTick !== 0) return;\n\n        setTradeState(TradeState.TRADING_STATE_CONFIRMING);\n    }, [ countdownTick, setTradeState ]);\n\n    if((tradeState === TradeState.TRADING_STATE_READY) || !ownUser || !otherUser) return null;\n\n    return (\n        <Column>\n            <Flex>\n            <Column size={ 4 } fullWidth overflow=\"hidden\" className=\"trading-inventory\">\n                <InventoryFurnitureSearchView groupItems={ groupItems } setGroupItems={ setFilteredGroupItems } />\n                <Flex column fullHeight fullWidth justifyContent=\"between\" overflow=\"hidden\" gap={ 2 }>\n                    <AutoGrid columnCount={ 3 }>\n                        { filteredGroupItems && (filteredGroupItems.length > 0) && filteredGroupItems.map((item, index) =>\n                        {\n                            const count = item.getUnlockedCount();\n\n                            return (\n                                <LayoutGridItem key={ index } className={ !count ? 'opacity-0-5 ' : '' } itemImage={ item.iconUrl } itemCount={ count } itemActive={ (groupItem === item) } itemUniqueNumber={ item.stuffData.uniqueNumber } onClick={ event => (count && setGroupItem(item)) }>\n                                    { ((count > 0) && (groupItem === item)) &&\n                                    <Button position=\"absolute\" variant=\"success\" className=\"trade-button bottom-1 end-1\" onClick={ event => attemptItemOffer(1) }>\n                                        <FontAwesomeIcon icon=\"chevron-right\" />\n                                    </Button> }\n                                </LayoutGridItem>\n                            );\n                        }) }\n                    </AutoGrid>\n                    <Base fullWidth className=\"badge bg-muted\">\n                        { groupItem ? groupItem.name : LocalizeText('catalog_selectproduct') }\n                    </Base>\n                </Flex>\n            </Column>\n            </Flex>\n            <Column fullWidth size={ 8 } overflow=\"hidden\" className=\"trade-bg p-2\">\n                <Grid overflow=\"hidden\">\n                    <Column size={ 4 } overflow=\"hidden\">\n                        <Flex justifyContent=\"between\" alignItems=\"center\">\n                            <Text>{ LocalizeText('inventory.trading.you') } { LocalizeText('inventory.trading.areoffering') }:</Text>\n                        </Flex>\n                        <AutoGrid columnCount={ 3 }>\n                            { Array.from(Array(MAX_ITEMS_TO_TRADE), (e, i) =>\n                            {\n                                const item = (ownUser.userItems.getWithIndex(i) || null);\n\n                                if(!item) return <LayoutGridItem key={ i } />;\n\n                                return (\n                                    <LayoutGridItem key={ i } itemActive={ (ownGroupItem === item) } itemImage={ item.iconUrl } itemCount={ item.getTotalCount() } itemUniqueNumber={ item.stuffData.uniqueNumber } onClick={ event => setOwnGroupItem(item) }>\n                                        { (ownGroupItem === item) &&\n                                        <Button position=\"absolute\" variant=\"danger\" className=\"trade-button bottom-1 start-1\" onClick={ event => removeItem(item) }>\n                                            <FontAwesomeIcon icon=\"chevron-left\" />\n                                        </Button> }\n                                    </LayoutGridItem>\n                                );\n                            }) }\n                        </AutoGrid>\n                        <Base fullWidth className=\"badge bg-muted\">\n                            { ownGroupItem ? ownGroupItem.name : LocalizeText('catalog_selectproduct') }\n                        </Base>\n                    </Column>\n                    { getLockIcon(ownUser.accepts) }\n                    <Column size={ 4 } overflow=\"hidden\">\n                        <Flex justifyContent=\"between\" alignItems=\"center\">\n                            <Text>{ otherUser.userName } { LocalizeText('inventory.trading.isoffering') }:</Text>\n                        </Flex>\n                        <AutoGrid columnCount={ 3 }>\n                            { Array.from(Array(MAX_ITEMS_TO_TRADE), (e, i) =>\n                            {\n                                const item = (otherUser.userItems.getWithIndex(i) || null);\n\n                                if(!item) return <LayoutGridItem key={ i } />;\n\n                                return <LayoutGridItem key={ i } itemActive={ (otherGroupItem === item) } itemImage={ item.iconUrl } itemCount={ item.getTotalCount() } itemUniqueNumber={ item.stuffData.uniqueNumber } onClick={ event => setOtherGroupItem(item) } />;\n                            }) }\n                        </AutoGrid>\n                        <Base fullWidth className=\"badge bg-muted w-100\">\n                            { otherGroupItem ? otherGroupItem.name : LocalizeText('catalog_selectproduct') }\n                        </Base>\n                    </Column>\n                    { getLockIcon(otherUser.accepts) }\n                </Grid>\n                <Flex grow justifyContent=\"between\">\n                    <Button variant=\"danger\" onClick={ cancelTrade }>{ LocalizeText('generic.cancel') }</Button>\n                    { (tradeState === TradeState.TRADING_STATE_READY) &&\n                        <Button variant=\"secondary\" disabled={ (!ownUser.itemCount && !otherUser.itemCount) } onClick={ progressTrade }>{ LocalizeText('inventory.trading.accept') }</Button> }\n                    { (tradeState === TradeState.TRADING_STATE_RUNNING) &&\n                        <Button variant=\"secondary\" disabled={ (!ownUser.itemCount && !otherUser.itemCount) } onClick={ progressTrade }>{ LocalizeText(ownUser.accepts ? 'inventory.trading.modify' : 'inventory.trading.accept') }</Button> }\n                    { (tradeState === TradeState.TRADING_STATE_COUNTDOWN) &&\n                        <Button variant=\"secondary\" disabled>{ LocalizeText('inventory.trading.countdown', [ 'counter' ], [ countdownTick.toString() ]) }</Button> }\n                    { (tradeState === TradeState.TRADING_STATE_CONFIRMING) &&\n                        <Button variant=\"secondary\" onClick={ progressTrade }>{ LocalizeText('inventory.trading.button.restore') }</Button> }\n                    { (tradeState === TradeState.TRADING_STATE_CONFIRMED) &&\n                        <Button variant=\"secondary\">{ LocalizeText('inventory.trading.info.waiting') }</Button> }\n                </Flex>\n            </Column>\n        </Column>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}