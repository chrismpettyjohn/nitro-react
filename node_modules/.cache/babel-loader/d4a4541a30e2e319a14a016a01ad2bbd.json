{"ast":null,"code":"export class ColorData {\n  constructor(layerCount) {\n    this._colors = void 0;\n    this._colors = [];\n    this.createColors(layerCount);\n  }\n\n  createColors(count) {\n    if (!count) return;\n\n    for (let i = 0; i < count; i++) this._colors.push(ColorData.DEFAULT_COLOR);\n  }\n\n  dispose() {\n    this._colors = [];\n  }\n\n  getLayerColor(layerId) {\n    const existing = this._colors[layerId];\n    if (!existing) return ColorData.DEFAULT_COLOR;\n    return existing;\n  }\n\n  setColorLayer(layerId, color) {\n    const existing = this._colors[layerId];\n    if (!existing) return;\n    this._colors[layerId] = color;\n  }\n\n}\nColorData.DEFAULT_COLOR = 0xFFFFFF;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/ColorData.ts"],"names":["ColorData","constructor","layerCount","_colors","createColors","count","i","push","DEFAULT_COLOR","dispose","getLayerColor","layerId","existing","setColorLayer","color"],"mappings":"AAAA,OAAO,MAAMA,SAAN,CACP;AAKIC,EAAAA,WAAW,CAACC,UAAD,EACX;AAAA,SAHQC,OAGR;AACI,SAAKA,OAAL,GAAe,EAAf;AAEA,SAAKC,YAAL,CAAkBF,UAAlB;AACH;;AAEOE,EAAAA,YAAY,CAACC,KAAD,EACpB;AACI,QAAG,CAACA,KAAJ,EAAW;;AAEX,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAnB,EAA0BC,CAAC,EAA3B,EAA+B,KAAKH,OAAL,CAAaI,IAAb,CAAkBP,SAAS,CAACQ,aAA5B;AAClC;;AAEMC,EAAAA,OAAO,GACd;AACI,SAAKN,OAAL,GAAe,EAAf;AACH;;AAEMO,EAAAA,aAAa,CAACC,OAAD,EACpB;AACI,UAAMC,QAAQ,GAAG,KAAKT,OAAL,CAAaQ,OAAb,CAAjB;AAEA,QAAG,CAACC,QAAJ,EAAc,OAAOZ,SAAS,CAACQ,aAAjB;AAEd,WAAOI,QAAP;AACH;;AAEMC,EAAAA,aAAa,CAACF,OAAD,EAAkBG,KAAlB,EACpB;AACI,UAAMF,QAAQ,GAAG,KAAKT,OAAL,CAAaQ,OAAb,CAAjB;AAEA,QAAG,CAACC,QAAJ,EAAc;AAEd,SAAKT,OAAL,CAAaQ,OAAb,IAAwBG,KAAxB;AACH;;AAxCL;AADad,S,CAEKQ,a,GAAwB,Q","sourcesContent":["export class ColorData\r\n{\r\n    public static DEFAULT_COLOR: number = 0xFFFFFF;\r\n\r\n    private _colors: number[];\r\n\r\n    constructor(layerCount: number)\r\n    {\r\n        this._colors = [];\r\n\r\n        this.createColors(layerCount);\r\n    }\r\n\r\n    private createColors(count: number): void\r\n    {\r\n        if(!count) return;\r\n\r\n        for(let i = 0; i < count; i++) this._colors.push(ColorData.DEFAULT_COLOR);\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._colors = [];\r\n    }\r\n\r\n    public getLayerColor(layerId: number): number\r\n    {\r\n        const existing = this._colors[layerId];\r\n\r\n        if(!existing) return ColorData.DEFAULT_COLOR;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public setColorLayer(layerId: number, color: number): void\r\n    {\r\n        const existing = this._colors[layerId];\r\n\r\n        if(!existing) return;\r\n\r\n        this._colors[layerId] = color;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}