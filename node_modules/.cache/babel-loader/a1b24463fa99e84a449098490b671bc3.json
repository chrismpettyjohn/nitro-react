{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/groups/GroupsView.tsx\",\n    _s = $RefreshSig$();\n\nimport { GroupBadgePartsComposer, GroupBadgePartsEvent, GroupPurchasedEvent, GroupSettingsComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, RemoveLinkEventTracker, SendMessageComposer, TryVisitRoom } from '../../api';\nimport { UseMessageEventHook } from '../../hooks';\nimport { CompareId } from './common/CompareId';\nimport { GroupsContextProvider } from './GroupsContext';\nimport { GroupCreatorView } from './views/GroupCreatorView';\nimport { GroupInformationStandaloneView } from './views/GroupInformationStandaloneView';\nimport { GroupManagerView } from './views/GroupManagerView';\nimport { GroupMembersView } from './views/GroupMembersView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GroupsView = props => {\n  _s();\n\n  const [isCreatorVisible, setCreatorVisible] = useState(false);\n  const [groupCustomize, setGroupCustomize] = useState(null);\n  const onGroupPurchasedEvent = useCallback(event => {\n    const parser = event.getParser();\n    setCreatorVisible(false);\n    TryVisitRoom(parser.roomId);\n  }, []);\n  UseMessageEventHook(GroupPurchasedEvent, onGroupPurchasedEvent);\n  const onGroupBadgePartsEvent = useCallback(event => {\n    const parser = event.getParser();\n    const customize = {\n      badgeBases: [],\n      badgeSymbols: [],\n      badgePartColors: [],\n      groupColorsA: [],\n      groupColorsB: []\n    };\n    parser.bases.forEach((images, id) => customize.badgeBases.push({\n      id,\n      images\n    }));\n    parser.symbols.forEach((images, id) => customize.badgeSymbols.push({\n      id,\n      images\n    }));\n    parser.partColors.forEach((color, id) => customize.badgePartColors.push({\n      id,\n      color\n    }));\n    parser.colorsA.forEach((color, id) => customize.groupColorsA.push({\n      id,\n      color\n    }));\n    parser.colorsB.forEach((color, id) => customize.groupColorsB.push({\n      id,\n      color\n    }));\n    customize.badgeBases.sort(CompareId);\n    customize.badgeSymbols.sort(CompareId);\n    customize.badgePartColors.sort(CompareId);\n    customize.groupColorsA.sort(CompareId);\n    customize.groupColorsB.sort(CompareId);\n    setGroupCustomize(customize);\n  }, [setGroupCustomize]);\n  UseMessageEventHook(GroupBadgePartsEvent, onGroupBadgePartsEvent);\n  const linkReceived = useCallback(url => {\n    const parts = url.split('/');\n    if (parts.length < 2) return;\n\n    switch (parts[1]) {\n      case 'create':\n        setCreatorVisible(true);\n        return;\n\n      case 'manage':\n        if (!parts[2]) return;\n        setCreatorVisible(false);\n        SendMessageComposer(new GroupSettingsComposer(Number(parts[2])));\n        return;\n    }\n  }, []);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived,\n      eventUrlPrefix: 'groups/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, [linkReceived]);\n  useEffect(() => {\n    SendMessageComposer(new GroupBadgePartsComposer());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GroupsContextProvider, {\n    value: {\n      groupCustomize,\n      setGroupCustomize\n    },\n    children: [isCreatorVisible && /*#__PURE__*/_jsxDEV(GroupCreatorView, {\n      onClose: () => setCreatorVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this), !isCreatorVisible && /*#__PURE__*/_jsxDEV(GroupManagerView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GroupMembersView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GroupInformationStandaloneView, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GroupsView, \"L98EeJ6NejUbpYmJllR6LLfwue0=\");\n\n_c = GroupsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupsView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/groups/GroupsView.tsx"],"names":["GroupBadgePartsComposer","GroupBadgePartsEvent","GroupPurchasedEvent","GroupSettingsComposer","useCallback","useEffect","useState","AddEventLinkTracker","RemoveLinkEventTracker","SendMessageComposer","TryVisitRoom","UseMessageEventHook","CompareId","GroupsContextProvider","GroupCreatorView","GroupInformationStandaloneView","GroupManagerView","GroupMembersView","GroupsView","props","isCreatorVisible","setCreatorVisible","groupCustomize","setGroupCustomize","onGroupPurchasedEvent","event","parser","getParser","roomId","onGroupBadgePartsEvent","customize","badgeBases","badgeSymbols","badgePartColors","groupColorsA","groupColorsB","bases","forEach","images","id","push","symbols","partColors","color","colorsA","colorsB","sort","linkReceived","url","parts","split","length","Number","linkTracker","eventUrlPrefix"],"mappings":"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","sourcesContent":["import { GroupBadgePartsComposer, GroupBadgePartsEvent, GroupPurchasedEvent, GroupSettingsComposer, ILinkEventTracker } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, RemoveLinkEventTracker, SendMessageComposer, TryVisitRoom } from '../../api';\nimport { UseMessageEventHook } from '../../hooks';\nimport { CompareId } from './common/CompareId';\nimport { IGroupCustomize } from './common/IGroupCustomize';\nimport { GroupsContextProvider } from './GroupsContext';\nimport { GroupCreatorView } from './views/GroupCreatorView';\nimport { GroupInformationStandaloneView } from './views/GroupInformationStandaloneView';\nimport { GroupManagerView } from './views/GroupManagerView';\nimport { GroupMembersView } from './views/GroupMembersView';\n\nexport const GroupsView: FC<{}> = props =>\n{\n    const [ isCreatorVisible, setCreatorVisible ] = useState<boolean>(false);\n    const [ groupCustomize, setGroupCustomize ] = useState<IGroupCustomize>(null);\n\n    const onGroupPurchasedEvent = useCallback((event: GroupPurchasedEvent) =>\n    {\n        const parser = event.getParser();\n\n        setCreatorVisible(false);\n        TryVisitRoom(parser.roomId);\n    }, []);\n\n    UseMessageEventHook(GroupPurchasedEvent, onGroupPurchasedEvent);\n\n    const onGroupBadgePartsEvent = useCallback((event: GroupBadgePartsEvent) =>\n    {\n        const parser = event.getParser();\n\n        const customize: IGroupCustomize = {\n            badgeBases: [],\n            badgeSymbols: [],\n            badgePartColors: [],\n            groupColorsA: [],\n            groupColorsB: []\n        };\n\n        parser.bases.forEach((images, id) => customize.badgeBases.push({ id, images }));\n        parser.symbols.forEach((images, id) => customize.badgeSymbols.push({ id, images }));\n        parser.partColors.forEach((color, id) => customize.badgePartColors.push({ id, color }));\n        parser.colorsA.forEach((color, id) => customize.groupColorsA.push({ id, color }));\n        parser.colorsB.forEach((color, id) => customize.groupColorsB.push({ id, color }));\n\n        customize.badgeBases.sort(CompareId);\n        customize.badgeSymbols.sort(CompareId);\n        customize.badgePartColors.sort(CompareId);\n        customize.groupColorsA.sort(CompareId);\n        customize.groupColorsB.sort(CompareId);\n\n        setGroupCustomize(customize);\n    }, [ setGroupCustomize ]);\n\n    UseMessageEventHook(GroupBadgePartsEvent, onGroupBadgePartsEvent);\n\n    const linkReceived = useCallback((url: string) =>\n    {\n        const parts = url.split('/');\n\n        if(parts.length < 2) return;\n\n        switch(parts[1])\n        {\n            case 'create':\n                setCreatorVisible(true);\n                return;\n            case 'manage':\n                if(!parts[2]) return;\n\n                setCreatorVisible(false);\n                SendMessageComposer(new GroupSettingsComposer(Number(parts[2])));\n                return;\n        }\n    }, []);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived,\n            eventUrlPrefix: 'groups/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, [ linkReceived ]);\n\n    useEffect(() =>\n    {\n        SendMessageComposer(new GroupBadgePartsComposer());\n    }, []);\n    \n    return (\n        <GroupsContextProvider value={ { groupCustomize, setGroupCustomize } }>\n            { isCreatorVisible &&\n                <GroupCreatorView onClose={ () => setCreatorVisible(false) } /> }\n            { !isCreatorVisible &&\n                <GroupManagerView /> }\n            <GroupMembersView />\n            <GroupInformationStandaloneView />\n        </GroupsContextProvider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}