{"ast":null,"code":"export class AdvancedMap {\n  constructor() {\n    let map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this._length = void 0;\n    this._dictionary = void 0;\n    this._array = void 0;\n    this._keys = void 0;\n    this._length = 0;\n    this._dictionary = new Map();\n    this._array = [];\n    this._keys = [];\n    if (map) for (const [key, value] of map.entries()) this.add(key, value);\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  get disposed() {\n    return !this._dictionary;\n  }\n\n  dispose() {\n    if (!this._dictionary) {\n      for (const key of this._dictionary.keys()) this._dictionary.delete(key);\n\n      this._dictionary = null;\n    }\n\n    this._length = 0;\n    this._array = null;\n    this._keys = null;\n  }\n\n  reset() {\n    for (const key of this._dictionary.keys()) this._dictionary.delete(key);\n\n    this._length = 0;\n    this._array = [];\n    this._keys = [];\n  }\n\n  unshift(key, value) {\n    if (this._dictionary.get(key) !== null) return false;\n\n    this._dictionary.set(key, value);\n\n    this._array.unshift(value);\n\n    this._keys.unshift(key);\n\n    this._length++;\n    return true;\n  }\n\n  add(key, value) {\n    if (this._dictionary.get(key) !== undefined) return false;\n\n    this._dictionary.set(key, value);\n\n    this._array[this._length] = value;\n    this._keys[this._length] = key;\n    this._length++;\n    return true;\n  }\n\n  remove(key) {\n    const value = this._dictionary.get(key);\n\n    if (!value) return null;\n\n    const index = this._array.indexOf(value);\n\n    if (index >= 0) {\n      this._array.splice(index, 1);\n\n      this._keys.splice(index, 1);\n\n      this._length--;\n    }\n\n    this._dictionary.delete(key);\n\n    return value;\n  }\n\n  getWithIndex(index) {\n    if (index < 0 || index >= this._length) return null;\n    return this._array[index];\n  }\n\n  getKey(index) {\n    if (index < 0 || index >= this._length) return null;\n    return this._keys[index];\n  }\n\n  getKeys() {\n    return this._keys.slice();\n  }\n\n  hasKey(key) {\n    return this._keys.indexOf(key) > -1;\n  }\n\n  getValue(key) {\n    return this._dictionary.get(key);\n  }\n\n  getValues() {\n    return this._array.slice();\n  }\n\n  hasValue(value) {\n    return this._array.indexOf(value) > -1;\n  }\n\n  indexOf(value) {\n    return this._array.indexOf(value);\n  }\n\n  concatenate(newValues) {\n    for (const k of newValues._keys) this.add(k, newValues.getValue(k));\n  }\n\n  clone() {\n    const map = new AdvancedMap();\n    map.concatenate(this);\n    return map;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/utils/AdvancedMap.ts"],"names":["AdvancedMap","constructor","map","_length","_dictionary","_array","_keys","Map","key","value","entries","add","length","disposed","dispose","keys","delete","reset","unshift","get","set","undefined","remove","index","indexOf","splice","getWithIndex","getKey","getKeys","slice","hasKey","getValue","getValues","hasValue","concatenate","newValues","k","clone"],"mappings":"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","sourcesContent":["import { IDisposable } from '../common/disposable/IDisposable';\r\n\r\nexport class AdvancedMap<T, U> implements IDisposable\r\n{\r\n    private _length: number;\r\n    private _dictionary: Map<T, U>;\r\n    private _array: U[];\r\n    private _keys: T[];\r\n\r\n    constructor(map: Map<T, U> = null)\r\n    {\r\n        this._length = 0;\r\n        this._dictionary = new Map();\r\n        this._array = [];\r\n        this._keys = [];\r\n\r\n        if(map) for(const [ key, value ] of map.entries()) this.add(key, value);\r\n    }\r\n\r\n    public get length(): number\r\n    {\r\n        return this._length;\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return (!this._dictionary);\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(!this._dictionary)\r\n        {\r\n            for(const key of this._dictionary.keys()) this._dictionary.delete(key);\r\n\r\n            this._dictionary = null;\r\n        }\r\n\r\n        this._length = 0;\r\n        this._array = null;\r\n        this._keys = null;\r\n    }\r\n\r\n    public reset(): void\r\n    {\r\n        for(const key of this._dictionary.keys()) this._dictionary.delete(key);\r\n\r\n        this._length = 0;\r\n        this._array = [];\r\n        this._keys = [];\r\n    }\r\n\r\n    public unshift(key: T, value: U): boolean\r\n    {\r\n        if(this._dictionary.get(key) !== null) return false;\r\n\r\n        this._dictionary.set(key, value);\r\n\r\n        this._array.unshift(value);\r\n        this._keys.unshift(key);\r\n\r\n        this._length++;\r\n\r\n        return true;\r\n    }\r\n\r\n    public add(key: T, value: U): boolean\r\n    {\r\n        if(this._dictionary.get(key) !== undefined) return false;\r\n\r\n        this._dictionary.set(key, value);\r\n\r\n        this._array[this._length] = value;\r\n        this._keys[this._length] = key;\r\n\r\n        this._length++;\r\n\r\n        return true;\r\n    }\r\n\r\n    public remove(key: T): U\r\n    {\r\n        const value = this._dictionary.get(key);\r\n\r\n        if(!value) return null;\r\n\r\n        const index = this._array.indexOf(value);\r\n\r\n        if(index >= 0)\r\n        {\r\n            this._array.splice(index, 1);\r\n            this._keys.splice(index, 1);\r\n\r\n            this._length--;\r\n        }\r\n\r\n        this._dictionary.delete(key);\r\n\r\n        return value;\r\n    }\r\n\r\n    public getWithIndex(index: number): U\r\n    {\r\n        if((index < 0) || (index >= this._length)) return null;\r\n\r\n        return this._array[index];\r\n    }\r\n\r\n    public getKey(index: number): T\r\n    {\r\n        if((index < 0) || (index >= this._length)) return null;\r\n\r\n        return this._keys[index];\r\n    }\r\n\r\n    public getKeys(): T[]\r\n    {\r\n        return this._keys.slice();\r\n    }\r\n\r\n    public hasKey(key: T): boolean\r\n    {\r\n        return (this._keys.indexOf(key) > -1);\r\n    }\r\n\r\n    public getValue(key: T): U\r\n    {\r\n        return this._dictionary.get(key);\r\n    }\r\n\r\n    public getValues(): U[]\r\n    {\r\n        return this._array.slice();\r\n    }\r\n\r\n    public hasValue(value: U): boolean\r\n    {\r\n        return (this._array.indexOf(value) > -1);\r\n    }\r\n\r\n    public indexOf(value: U): number\r\n    {\r\n        return this._array.indexOf(value);\r\n    }\r\n\r\n    public concatenate(newValues: AdvancedMap<T, U>): void\r\n    {\r\n        for(const k of newValues._keys) this.add(k, newValues.getValue(k));\r\n    }\r\n\r\n    public clone(): AdvancedMap<T, U>\r\n    {\r\n        const map = new AdvancedMap<T, U>();\r\n\r\n        map.concatenate(this);\r\n\r\n        return map;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}