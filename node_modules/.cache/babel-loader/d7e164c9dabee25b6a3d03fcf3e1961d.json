{"ast":null,"code":"export class QuestionParser {\n  constructor() {\n    this._pollType = null;\n    this._pollId = -1;\n    this._questionId = -1;\n    this._duration = -1;\n    this._question = null;\n  }\n\n  flush() {\n    this._pollType = null;\n    this._pollId = -1;\n    this._questionId = -1;\n    this._duration = -1;\n    this._question = null;\n    return true;\n  }\n\n  parse(wrapper) {\n    this._pollType = wrapper.readString();\n    this._pollId = wrapper.readInt();\n    this._questionId = wrapper.readInt();\n    this._duration = wrapper.readInt();\n    const questionId = wrapper.readInt();\n    const questionNumber = wrapper.readInt();\n    const questionType = wrapper.readInt();\n    const questionContent = wrapper.readString();\n    this._question = {\n      id: questionId,\n      number: questionNumber,\n      type: questionType,\n      content: questionContent\n    };\n\n    if (this._question.type == 1 || this._question.type == 2) {\n      this._question.selection_min = wrapper.readInt();\n      const count = wrapper.readInt();\n      this._question.selections = [];\n      this._question.selection_values = [];\n      this._question.selection_count = count;\n      this._question.selection_max = count;\n\n      for (let i = 0; i < count; i++) {\n        this._question.selection_values.push(wrapper.readString());\n\n        this._question.selections.push(wrapper.readString());\n      }\n    }\n\n    return true;\n  }\n\n  get pollType() {\n    return this._pollType;\n  }\n\n  get pollId() {\n    return this._pollId;\n  }\n\n  get questionId() {\n    return this._questionId;\n  }\n\n  get duration() {\n    return this._duration;\n  }\n\n  get question() {\n    return this._question;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/poll/QuestionParser.ts"],"names":["QuestionParser","_pollType","_pollId","_questionId","_duration","_question","flush","parse","wrapper","readString","readInt","questionId","questionNumber","questionType","questionContent","id","number","type","content","selection_min","count","selections","selection_values","selection_count","selection_max","i","push","pollType","pollId","duration","question"],"mappings":"AAGA,OAAO,MAAMA,cAAN,CACP;AAAA;AAAA,SACYC,SADZ,GAC+B,IAD/B;AAAA,SAEYC,OAFZ,GAEqB,CAAC,CAFtB;AAAA,SAGYC,WAHZ,GAG0B,CAAC,CAH3B;AAAA,SAIYC,SAJZ,GAIwB,CAAC,CAJzB;AAAA,SAKYC,SALZ,GAKkC,IALlC;AAAA;;AAOIC,EAAAA,KAAK,GACL;AACI,SAAKL,SAAL,GAAiB,IAAjB;AACA,SAAKC,OAAL,GAAe,CAAC,CAAhB;AACA,SAAKC,WAAL,GAAmB,CAAC,CAApB;AACA,SAAKC,SAAL,GAAiB,CAAC,CAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,WAAO,IAAP;AACH;;AAEDE,EAAAA,KAAK,CAACC,OAAD,EACL;AACI,SAAKP,SAAL,GAAiBO,OAAO,CAACC,UAAR,EAAjB;AACA,SAAKP,OAAL,GAAeM,OAAO,CAACE,OAAR,EAAf;AACA,SAAKP,WAAL,GAAmBK,OAAO,CAACE,OAAR,EAAnB;AACA,SAAKN,SAAL,GAAiBI,OAAO,CAACE,OAAR,EAAjB;AAEA,UAAMC,UAAU,GAAGH,OAAO,CAACE,OAAR,EAAnB;AACA,UAAME,cAAc,GAAGJ,OAAO,CAACE,OAAR,EAAvB;AACA,UAAMG,YAAY,GAAGL,OAAO,CAACE,OAAR,EAArB;AACA,UAAMI,eAAe,GAAGN,OAAO,CAACC,UAAR,EAAxB;AAEA,SAAKJ,SAAL,GAAiB;AAAEU,MAAAA,EAAE,EAAEJ,UAAN;AAAkBK,MAAAA,MAAM,EAAEJ,cAA1B;AAA0CK,MAAAA,IAAI,EAAEJ,YAAhD;AAA8DK,MAAAA,OAAO,EAAEJ;AAAvE,KAAjB;;AAEA,QAAK,KAAKT,SAAL,CAAeY,IAAf,IAAuB,CAAxB,IAA+B,KAAKZ,SAAL,CAAeY,IAAf,IAAuB,CAA1D,EACA;AACI,WAAKZ,SAAL,CAAec,aAAf,GAA+BX,OAAO,CAACE,OAAR,EAA/B;AACA,YAAMU,KAAK,GAAGZ,OAAO,CAACE,OAAR,EAAd;AACA,WAAKL,SAAL,CAAegB,UAAf,GAA4B,EAA5B;AACA,WAAKhB,SAAL,CAAeiB,gBAAf,GAAkC,EAAlC;AACA,WAAKjB,SAAL,CAAekB,eAAf,GAAiCH,KAAjC;AACA,WAAKf,SAAL,CAAemB,aAAf,GAA+BJ,KAA/B;;AAEA,WAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,KAAnB,EAA0BK,CAAC,EAA3B,EACA;AACI,aAAKpB,SAAL,CAAeiB,gBAAf,CAAgCI,IAAhC,CAAqClB,OAAO,CAACC,UAAR,EAArC;;AACA,aAAKJ,SAAL,CAAegB,UAAf,CAA0BK,IAA1B,CAA+BlB,OAAO,CAACC,UAAR,EAA/B;AACH;AACJ;;AACD,WAAO,IAAP;AACH;;AAEkB,MAARkB,QAAQ,GACnB;AACI,WAAO,KAAK1B,SAAZ;AACH;;AAEgB,MAAN2B,MAAM,GACjB;AACI,WAAO,KAAK1B,OAAZ;AACH;;AAEoB,MAAVS,UAAU,GACrB;AACI,WAAO,KAAKR,WAAZ;AACH;;AAEkB,MAAR0B,QAAQ,GACnB;AACI,WAAO,KAAKzB,SAAZ;AACH;;AAEkB,MAAR0B,QAAQ,GACnB;AACI,WAAO,KAAKzB,SAAZ;AACH;;AAxEL","sourcesContent":["import { IMessageDataWrapper } from '../../../../../core';\r\nimport { IMessageParser } from '../../../../../core/communication/messages/IMessageParser';\r\n\r\nexport class QuestionParser implements IMessageParser\r\n{\r\n    private _pollType:string = null;\r\n    private _pollId= -1;\r\n    private _questionId = -1;\r\n    private _duration = -1;\r\n    private _question:IQuestion = null;\r\n\r\n    flush(): boolean\r\n    {\r\n        this._pollType = null;\r\n        this._pollId = -1;\r\n        this._questionId = -1;\r\n        this._duration = -1;\r\n        this._question = null;\r\n        return true;\r\n    }\r\n\r\n    parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        this._pollType = wrapper.readString();\r\n        this._pollId = wrapper.readInt();\r\n        this._questionId = wrapper.readInt();\r\n        this._duration = wrapper.readInt();\r\n\r\n        const questionId = wrapper.readInt();\r\n        const questionNumber = wrapper.readInt();\r\n        const questionType = wrapper.readInt();\r\n        const questionContent = wrapper.readString();\r\n\r\n        this._question = { id: questionId, number: questionNumber, type: questionType, content: questionContent };\r\n\r\n        if(((this._question.type == 1) || (this._question.type == 2)))\r\n        {\r\n            this._question.selection_min = wrapper.readInt();\r\n            const count = wrapper.readInt();\r\n            this._question.selections = [];\r\n            this._question.selection_values = [];\r\n            this._question.selection_count = count;\r\n            this._question.selection_max = count;\r\n\r\n            for(let i = 0; i < count; i++)\r\n            {\r\n                this._question.selection_values.push(wrapper.readString());\r\n                this._question.selections.push(wrapper.readString());\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public get pollType():string\r\n    {\r\n        return this._pollType;\r\n    }\r\n\r\n    public get pollId():number\r\n    {\r\n        return this._pollId;\r\n    }\r\n\r\n    public get questionId():number\r\n    {\r\n        return this._questionId;\r\n    }\r\n\r\n    public get duration():number\r\n    {\r\n        return this._duration;\r\n    }\r\n\r\n    public get question():IQuestion\r\n    {\r\n        return this._question;\r\n    }\r\n}\r\n\r\nexport interface IQuestion\r\n{\r\n    id: number;\r\n    number: number;\r\n    type: number;\r\n    content: string;\r\n    selection_min?: number;\r\n    selections?: string[];\r\n    selection_values?: string[];\r\n    selection_count?: number;\r\n    selection_max?: number;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}