{"ast":null,"code":"import { Nitro } from '../../Nitro';\nexport class Motions {\n  static get TIMER_TIME() {\n    return 1000 / Nitro.instance.ticker.FPS;\n  }\n\n  static runMotion(k) {\n    if (Motions._RUNNING_MOTIONS.indexOf(k) === -1 && Motions._QUEUED_MOTIONS.indexOf(k) === -1) {\n      if (Motions._IS_UPDATING) {\n        Motions._QUEUED_MOTIONS.push(k);\n      } else {\n        Motions._RUNNING_MOTIONS.push(k);\n\n        k.start();\n      }\n\n      Motions.startTimer();\n    }\n\n    return k;\n  }\n\n  static removeMotion(k) {\n    let _local_2 = Motions._RUNNING_MOTIONS.indexOf(k);\n\n    if (_local_2 > -1) {\n      if (Motions._IS_UPDATING) {\n        _local_2 = Motions._REMOVED_MOTIONS.indexOf(k);\n        if (_local_2 == -1) Motions._REMOVED_MOTIONS.push(k);\n      } else {\n        Motions._RUNNING_MOTIONS.splice(_local_2, 1);\n\n        if (k.running) k.stop();\n        if (!Motions._RUNNING_MOTIONS.length) Motions.stopTimer();\n      }\n    } else {\n      _local_2 = Motions._QUEUED_MOTIONS.indexOf(k);\n      if (_local_2 > -1) Motions._QUEUED_MOTIONS.splice(_local_2, 1);\n    }\n  }\n\n  static getMotionByTag(k) {\n    for (const _local_2 of Motions._RUNNING_MOTIONS) {\n      if (_local_2.tag == k) return _local_2;\n    }\n\n    for (const _local_2 of Motions._QUEUED_MOTIONS) {\n      if (_local_2.tag == k) return _local_2;\n    }\n\n    return null;\n  }\n\n  static getMotionByTarget(k) {\n    for (const _local_2 of Motions._RUNNING_MOTIONS) {\n      if (_local_2.target == k) return _local_2;\n    }\n\n    for (const _local_2 of Motions._QUEUED_MOTIONS) {\n      if (_local_2.target == k) return _local_2;\n    }\n\n    return null;\n  }\n\n  static getMotionByTagAndTarget(k, _arg_2) {\n    for (const _local_3 of Motions._RUNNING_MOTIONS) {\n      if (_local_3.tag == k && _local_3.target == _arg_2) return _local_3;\n    }\n\n    for (const _local_3 of Motions._QUEUED_MOTIONS) {\n      if (_local_3.tag == k && _local_3.target == _arg_2) return _local_3;\n    }\n\n    return null;\n  }\n\n  static get isRunning() {\n    return !!Motions._TIMER;\n  }\n\n  static get isUpdating() {\n    return Motions._IS_UPDATING;\n  }\n\n  static onTick() {\n    Motions._IS_UPDATING = true;\n    const _local_2 = Nitro.instance.time;\n    let _local_3 = null; // eslint-disable-next-line no-cond-assign\n\n    while (_local_3 = Motions._QUEUED_MOTIONS.pop()) Motions._RUNNING_MOTIONS.push(_local_3); // eslint-disable-next-line no-cond-assign\n\n\n    while (_local_3 = Motions._REMOVED_MOTIONS.pop()) {\n      Motions._RUNNING_MOTIONS.splice(Motions._RUNNING_MOTIONS.indexOf(_local_3), 1);\n\n      if (_local_3.running) _local_3.stop();\n    }\n\n    for (_local_3 of Motions._RUNNING_MOTIONS) {\n      if (_local_3.running) {\n        _local_3.tick(_local_2);\n\n        if (_local_3.complete) {\n          Motions.removeMotion(_local_3);\n        }\n      } else {\n        Motions.removeMotion(_local_3);\n      }\n    }\n\n    if (!Motions._RUNNING_MOTIONS.length) Motions.stopTimer();\n    Motions._IS_UPDATING = false;\n  }\n\n  static startTimer() {\n    if (!Motions._TIMER) {\n      Motions._TIMER = setInterval(Motions.onTick, Motions.TIMER_TIME);\n    }\n  }\n\n  static stopTimer() {\n    if (Motions._TIMER) {\n      clearInterval(Motions._TIMER);\n      Motions._TIMER = null;\n    }\n  }\n\n  getNumRunningMotions(k) {\n    let _local_2 = 0;\n\n    for (const _local_3 of Motions._RUNNING_MOTIONS) {\n      if (_local_3.target === k) _local_2++;\n    }\n\n    return _local_2;\n  }\n\n}\nMotions._QUEUED_MOTIONS = [];\nMotions._RUNNING_MOTIONS = [];\nMotions._REMOVED_MOTIONS = [];\nMotions._TIMER = null;\nMotions._IS_UPDATING = false;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/window/motion/Motions.ts"],"names":["Nitro","Motions","TIMER_TIME","instance","ticker","FPS","runMotion","k","_RUNNING_MOTIONS","indexOf","_QUEUED_MOTIONS","_IS_UPDATING","push","start","startTimer","removeMotion","_local_2","_REMOVED_MOTIONS","splice","running","stop","length","stopTimer","getMotionByTag","tag","getMotionByTarget","target","getMotionByTagAndTarget","_arg_2","_local_3","isRunning","_TIMER","isUpdating","onTick","time","pop","tick","complete","setInterval","clearInterval","getNumRunningMotions"],"mappings":"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","sourcesContent":["import { Nitro } from '../../Nitro';\r\nimport { Motion } from './Motion';\r\n\r\nexport class Motions\r\n{\r\n    private static _QUEUED_MOTIONS: Motion[] = [];\r\n    private static _RUNNING_MOTIONS: Motion[] = [];\r\n    private static _REMOVED_MOTIONS: Motion[] = [];\r\n    private static _TIMER: ReturnType<typeof setInterval> = null;\r\n    private static _IS_UPDATING: boolean = false;\r\n\r\n    public static get TIMER_TIME(): number\r\n    {\r\n        return (1000 / Nitro.instance.ticker.FPS);\r\n    }\r\n\r\n    public static runMotion(k: Motion): Motion\r\n    {\r\n        if(((Motions._RUNNING_MOTIONS.indexOf(k) === -1) && (Motions._QUEUED_MOTIONS.indexOf(k) === -1)))\r\n        {\r\n            if(Motions._IS_UPDATING)\r\n            {\r\n                Motions._QUEUED_MOTIONS.push(k);\r\n            }\r\n            else\r\n            {\r\n                Motions._RUNNING_MOTIONS.push(k);\r\n\r\n                k.start();\r\n            }\r\n\r\n            Motions.startTimer();\r\n        }\r\n\r\n        return k;\r\n    }\r\n\r\n    public static removeMotion(k:Motion): void\r\n    {\r\n        let _local_2: number = Motions._RUNNING_MOTIONS.indexOf(k);\r\n\r\n        if(_local_2 > -1)\r\n        {\r\n            if(Motions._IS_UPDATING)\r\n            {\r\n                _local_2 = Motions._REMOVED_MOTIONS.indexOf(k);\r\n\r\n                if(_local_2 == -1) Motions._REMOVED_MOTIONS.push(k);\r\n            }\r\n            else\r\n            {\r\n                Motions._RUNNING_MOTIONS.splice(_local_2, 1);\r\n\r\n                if(k.running) k.stop();\r\n\r\n                if(!Motions._RUNNING_MOTIONS.length) Motions.stopTimer();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            _local_2 = Motions._QUEUED_MOTIONS.indexOf(k);\r\n\r\n            if(_local_2 > -1) Motions._QUEUED_MOTIONS.splice(_local_2, 1);\r\n        }\r\n    }\r\n\r\n    public static getMotionByTag(k: string):Motion\r\n    {\r\n        for(const _local_2 of Motions._RUNNING_MOTIONS)\r\n        {\r\n            if(_local_2.tag == k) return _local_2;\r\n        }\r\n\r\n        for(const _local_2 of Motions._QUEUED_MOTIONS)\r\n        {\r\n            if(_local_2.tag == k) return _local_2;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMotionByTarget(k: HTMLElement):Motion\r\n    {\r\n        for(const _local_2 of Motions._RUNNING_MOTIONS)\r\n        {\r\n            if(_local_2.target == k) return _local_2;\r\n        }\r\n\r\n        for(const _local_2 of Motions._QUEUED_MOTIONS)\r\n        {\r\n            if(_local_2.target == k) return _local_2;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static getMotionByTagAndTarget(k: string, _arg_2: HTMLElement):Motion\r\n    {\r\n        for(const _local_3 of Motions._RUNNING_MOTIONS)\r\n        {\r\n            if(((_local_3.tag == k) && (_local_3.target == _arg_2))) return _local_3;\r\n        }\r\n\r\n        for(const _local_3 of Motions._QUEUED_MOTIONS)\r\n        {\r\n            if(((_local_3.tag == k) && (_local_3.target == _arg_2))) return _local_3;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static get isRunning(): boolean\r\n    {\r\n        return !!Motions._TIMER;\r\n    }\r\n\r\n    public static get isUpdating(): boolean\r\n    {\r\n        return Motions._IS_UPDATING;\r\n    }\r\n\r\n    private static onTick(): void\r\n    {\r\n        Motions._IS_UPDATING = true;\r\n\r\n        const _local_2: number = Nitro.instance.time;\r\n\r\n        let _local_3: Motion = null;\r\n\r\n        // eslint-disable-next-line no-cond-assign\r\n        while(_local_3 = Motions._QUEUED_MOTIONS.pop()) Motions._RUNNING_MOTIONS.push(_local_3);\r\n\r\n        // eslint-disable-next-line no-cond-assign\r\n        while(_local_3 = Motions._REMOVED_MOTIONS.pop())\r\n        {\r\n            Motions._RUNNING_MOTIONS.splice(Motions._RUNNING_MOTIONS.indexOf(_local_3), 1);\r\n\r\n            if(_local_3.running) _local_3.stop();\r\n        }\r\n\r\n        for(_local_3 of Motions._RUNNING_MOTIONS)\r\n        {\r\n            if(_local_3.running)\r\n            {\r\n                _local_3.tick(_local_2);\r\n\r\n                if(_local_3.complete)\r\n                {\r\n                    Motions.removeMotion(_local_3);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Motions.removeMotion(_local_3);\r\n            }\r\n        }\r\n\r\n        if(!Motions._RUNNING_MOTIONS.length) Motions.stopTimer();\r\n\r\n        Motions._IS_UPDATING = false;\r\n    }\r\n\r\n    private static startTimer(): void\r\n    {\r\n        if(!Motions._TIMER)\r\n        {\r\n            Motions._TIMER = setInterval(Motions.onTick, Motions.TIMER_TIME);\r\n        }\r\n    }\r\n\r\n    private static stopTimer(): void\r\n    {\r\n        if(Motions._TIMER)\r\n        {\r\n            clearInterval(Motions._TIMER);\r\n\r\n            Motions._TIMER = null;\r\n        }\r\n    }\r\n\r\n\r\n    public getNumRunningMotions(k: HTMLElement): number\r\n    {\r\n        let _local_2 = 0;\r\n\r\n        for(const _local_3 of Motions._RUNNING_MOTIONS)\r\n        {\r\n            if(_local_3.target === k) _local_2++;\r\n        }\r\n\r\n        return _local_2;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}