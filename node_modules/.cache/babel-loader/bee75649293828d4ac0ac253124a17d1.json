{"ast":null,"code":"import { PlaneBitmapData } from '../../utils/PlaneBitmapData';\nimport { FloorPlane } from './FloorPlane';\nimport { PlaneRasterizer } from './PlaneRasterizer';\nexport class FloorRasterizer extends PlaneRasterizer {\n  initializePlanes() {\n    if (!this.data) return;\n    const floors = this.data.floors;\n    if (floors && floors.length) this.parseFloors(floors);\n  }\n\n  parseFloors(k) {\n    if (!k) return;\n\n    for (const floorIndex in k) {\n      const floor = k[floorIndex];\n      if (!floor) continue;\n      const id = floor.id;\n      const visualization = floor.visualizations;\n      const plane = new FloorPlane();\n      this.parseVisualizations(plane, visualization);\n      if (!this.addPlane(id, plane)) plane.dispose();\n    }\n  }\n\n  render(canvas, id, width, height, scale, normal, useTexture) {\n    let offsetX = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let offsetY = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n    let maxX = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let maxY = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n    let timeSinceStartMs = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n    let plane = this.getPlane(id);\n    if (!plane) plane = this.getPlane(PlaneRasterizer.DEFAULT);\n    if (!plane) return null;\n    if (canvas) canvas.clear();\n    let graphic = plane.render(canvas, width, height, scale, normal, useTexture, offsetX, offsetY);\n\n    if (graphic && graphic !== canvas) {\n      graphic = graphic.clone();\n      if (!graphic) return null;\n    }\n\n    return new PlaneBitmapData(graphic, -1);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/FloorRasterizer.ts"],"names":["PlaneBitmapData","FloorPlane","PlaneRasterizer","FloorRasterizer","initializePlanes","data","floors","length","parseFloors","k","floorIndex","floor","id","visualization","visualizations","plane","parseVisualizations","addPlane","dispose","render","canvas","width","height","scale","normal","useTexture","offsetX","offsetY","maxX","maxY","timeSinceStartMs","getPlane","DEFAULT","clear","graphic","clone"],"mappings":"AAEA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,eAAN,SAA8BD,eAA9B,CACP;AACcE,EAAAA,gBAAgB,GAC1B;AACI,QAAG,CAAC,KAAKC,IAAT,EAAe;AAEf,UAAMC,MAAM,GAAG,KAAKD,IAAL,CAAUC,MAAzB;AAEA,QAAGA,MAAM,IAAIA,MAAM,CAACC,MAApB,EAA4B,KAAKC,WAAL,CAAiBF,MAAjB;AAC/B;;AAEOE,EAAAA,WAAW,CAACC,CAAD,EACnB;AACI,QAAG,CAACA,CAAJ,EAAO;;AAEP,SAAI,MAAMC,UAAV,IAAwBD,CAAxB,EACA;AACI,YAAME,KAAK,GAAGF,CAAC,CAACC,UAAD,CAAf;AAEA,UAAG,CAACC,KAAJ,EAAW;AAEX,YAAMC,EAAE,GAAGD,KAAK,CAACC,EAAjB;AACA,YAAMC,aAAa,GAAGF,KAAK,CAACG,cAA5B;AACA,YAAMC,KAAK,GAAG,IAAId,UAAJ,EAAd;AAEA,WAAKe,mBAAL,CAAyBD,KAAzB,EAAgCF,aAAhC;AAEA,UAAG,CAAC,KAAKI,QAAL,CAAcL,EAAd,EAAkBG,KAAlB,CAAJ,EAA8BA,KAAK,CAACG,OAAN;AACjC;AACJ;;AAEMC,EAAAA,MAAM,CAACC,MAAD,EAAmBR,EAAnB,EAA+BS,KAA/B,EAA8CC,MAA9C,EAA8DC,KAA9D,EAA6EC,MAA7E,EAAgGC,UAAhG,EACb;AAAA,QADkIC,OAClI,uEADoJ,CACpJ;AAAA,QADuJC,OACvJ,uEADyK,CACzK;AAAA,QAD4KC,IAC5K,uEAD2L,CAC3L;AAAA,QAD8LC,IAC9L,0EAD6M,CAC7M;AAAA,QADgNC,gBAChN,0EAD2O,CAC3O;AACI,QAAIf,KAAK,GAAG,KAAKgB,QAAL,CAAcnB,EAAd,CAAZ;AAEA,QAAG,CAACG,KAAJ,EAAWA,KAAK,GAAG,KAAKgB,QAAL,CAAc7B,eAAe,CAAC8B,OAA9B,CAAR;AAEX,QAAG,CAACjB,KAAJ,EAAW,OAAO,IAAP;AAEX,QAAGK,MAAH,EAAWA,MAAM,CAACa,KAAP;AAEX,QAAIC,OAAO,GAAGnB,KAAK,CAACI,MAAN,CAAaC,MAAb,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,KAApC,EAA2CC,MAA3C,EAAmDC,UAAnD,EAA+DC,OAA/D,EAAwEC,OAAxE,CAAd;;AAEA,QAAGO,OAAO,IAAKA,OAAO,KAAKd,MAA3B,EACA;AACIc,MAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,EAAV;AAEA,UAAG,CAACD,OAAJ,EAAa,OAAO,IAAP;AAChB;;AAED,WAAO,IAAIlC,eAAJ,CAAoBkC,OAApB,EAA6B,CAAC,CAA9B,CAAP;AACH;;AAlDL","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { PlaneBitmapData } from '../../utils/PlaneBitmapData';\r\nimport { FloorPlane } from './FloorPlane';\r\nimport { PlaneRasterizer } from './PlaneRasterizer';\r\n\r\nexport class FloorRasterizer extends PlaneRasterizer\r\n{\r\n    protected initializePlanes(): void\r\n    {\r\n        if(!this.data) return;\r\n\r\n        const floors = this.data.floors;\r\n\r\n        if(floors && floors.length) this.parseFloors(floors);\r\n    }\r\n\r\n    private parseFloors(k: any): void\r\n    {\r\n        if(!k) return;\r\n\r\n        for(const floorIndex in k)\r\n        {\r\n            const floor = k[floorIndex];\r\n\r\n            if(!floor) continue;\r\n\r\n            const id = floor.id;\r\n            const visualization = floor.visualizations;\r\n            const plane = new FloorPlane();\r\n\r\n            this.parseVisualizations(plane, visualization);\r\n\r\n            if(!this.addPlane(id, plane)) plane.dispose();\r\n        }\r\n    }\r\n\r\n    public render(canvas: Graphics, id: string, width: number, height: number, scale: number, normal: IVector3D, useTexture: boolean, offsetX: number = 0, offsetY: number = 0, maxX: number = 0, maxY: number = 0, timeSinceStartMs: number = 0): PlaneBitmapData\r\n    {\r\n        let plane = this.getPlane(id) as FloorPlane;\r\n\r\n        if(!plane) plane = this.getPlane(PlaneRasterizer.DEFAULT) as FloorPlane;\r\n\r\n        if(!plane) return null;\r\n\r\n        if(canvas) canvas.clear();\r\n\r\n        let graphic = plane.render(canvas, width, height, scale, normal, useTexture, offsetX, offsetY);\r\n\r\n        if(graphic && (graphic !== canvas))\r\n        {\r\n            graphic = graphic.clone();\r\n\r\n            if(!graphic) return null;\r\n        }\r\n\r\n        return new PlaneBitmapData(graphic, -1);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}