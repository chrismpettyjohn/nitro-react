{"ast":null,"code":"import { AdvancedMap, NitroLogger } from '../../../../../core';\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\nimport { FurnitureParticleSystem } from './FurnitureParticleSystem';\nexport class FurnitureFireworksVisualization extends FurnitureAnimatedVisualization {\n  constructor() {\n    super(...arguments);\n    this._particleSystems = void 0;\n    this._currentParticleSystem = void 0;\n  }\n\n  dispose() {\n    super.dispose();\n    this._currentParticleSystem = null;\n\n    if (this._particleSystems) {\n      for (const particleSystem of this._particleSystems.getValues()) particleSystem.dispose();\n\n      this._particleSystems = null;\n    }\n  }\n\n  updateObject(scale, direction) {\n    if (super.updateObject(scale, direction)) {\n      if (!this._particleSystems) {\n        this._Str_18684();\n\n        if (this._particleSystems) this._currentParticleSystem = this._particleSystems.getValue(scale);else NitroLogger.log('ERROR Particle systems could not be read! ' + this.object.type);\n      } else {\n        if (scale !== this._scale || this._particleSystems.getValue(scale) !== this._currentParticleSystem) {\n          const particleSystem = this._particleSystems.getValue(scale);\n\n          particleSystem._Str_17988(this._currentParticleSystem);\n\n          if (this._currentParticleSystem) this._currentParticleSystem.reset();\n          this._currentParticleSystem = particleSystem;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  updateSprites(scale, update, animation) {\n    super.updateSprites(scale, update, animation);\n    if (this._currentParticleSystem) this._currentParticleSystem.updateSprites();\n  }\n\n  updateAnimation(scale) {\n    if (this._currentParticleSystem) this._currentParticleSystem.updateAnimation();\n    return super.updateAnimation(scale);\n  }\n\n  setAnimation(id) {\n    if (this._currentParticleSystem) this._currentParticleSystem.setAnimation(id);\n    super.setAnimation(id);\n  }\n\n  getLayerYOffset(scale, direction, layerId) {\n    if (this._currentParticleSystem && this._currentParticleSystem.controlsSprite(layerId)) {\n      return this._currentParticleSystem.getLayerYOffset(scale, direction, layerId);\n    }\n\n    return super.getLayerYOffset(scale, direction, layerId);\n  }\n\n  _Str_18684() {\n    if (!this.object || !this.object.model) return false;\n    const fireworksData = this.object.model.getValue(RoomObjectVariable.FURNITURE_FIREWORKS_DATA);\n    if (!fireworksData || !fireworksData.length) return false;\n    this._particleSystems = new AdvancedMap();\n\n    for (const particleData of fireworksData) {\n      const size = particleData.size;\n      const particleSystem = new FurnitureParticleSystem(this);\n      particleSystem.parseData(particleData);\n\n      this._particleSystems.add(size, particleSystem);\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurnitureFireworksVisualization.ts"],"names":["AdvancedMap","NitroLogger","RoomObjectVariable","FurnitureAnimatedVisualization","FurnitureParticleSystem","FurnitureFireworksVisualization","_particleSystems","_currentParticleSystem","dispose","particleSystem","getValues","updateObject","scale","direction","_Str_18684","getValue","log","object","type","_scale","_Str_17988","reset","updateSprites","update","animation","updateAnimation","setAnimation","id","getLayerYOffset","layerId","controlsSprite","model","fireworksData","FURNITURE_FIREWORKS_DATA","length","particleData","size","parseData","add"],"mappings":"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","sourcesContent":["import { AdvancedMap, IParticleSystem, NitroLogger } from '../../../../../core';\r\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\r\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\r\nimport { FurnitureParticleSystem } from './FurnitureParticleSystem';\r\n\r\nexport class FurnitureFireworksVisualization extends FurnitureAnimatedVisualization\r\n{\r\n    private _particleSystems: AdvancedMap<number, FurnitureParticleSystem>;\r\n    private _currentParticleSystem: FurnitureParticleSystem;\r\n\r\n    public dispose():void\r\n    {\r\n        super.dispose();\r\n\r\n        this._currentParticleSystem = null;\r\n\r\n        if(this._particleSystems)\r\n        {\r\n            for(const particleSystem of this._particleSystems.getValues()) particleSystem.dispose();\r\n\r\n            this._particleSystems = null;\r\n        }\r\n    }\r\n\r\n    protected updateObject(scale: number, direction: number): boolean\r\n    {\r\n        if(super.updateObject(scale, direction))\r\n        {\r\n            if(!this._particleSystems)\r\n            {\r\n                this._Str_18684();\r\n\r\n                if(this._particleSystems) this._currentParticleSystem = this._particleSystems.getValue(scale);\r\n\r\n                else NitroLogger.log(('ERROR Particle systems could not be read! ' + this.object.type));\r\n            }\r\n            else\r\n            {\r\n                if((scale !== this._scale) || (this._particleSystems.getValue(scale) !== this._currentParticleSystem))\r\n                {\r\n                    const particleSystem = this._particleSystems.getValue(scale);\r\n\r\n                    particleSystem._Str_17988(this._currentParticleSystem);\r\n\r\n                    if(this._currentParticleSystem) this._currentParticleSystem.reset();\r\n\r\n                    this._currentParticleSystem = particleSystem;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected updateSprites(scale: number, update: boolean, animation: number):void\r\n    {\r\n        super.updateSprites(scale, update, animation);\r\n\r\n        if(this._currentParticleSystem) this._currentParticleSystem.updateSprites();\r\n    }\r\n\r\n    protected updateAnimation(scale: number): number\r\n    {\r\n        if(this._currentParticleSystem) this._currentParticleSystem.updateAnimation();\r\n\r\n        return super.updateAnimation(scale);\r\n    }\r\n\r\n    protected setAnimation(id: number):void\r\n    {\r\n        if(this._currentParticleSystem) this._currentParticleSystem.setAnimation(id);\r\n\r\n        super.setAnimation(id);\r\n    }\r\n\r\n    protected getLayerYOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if(this._currentParticleSystem && this._currentParticleSystem.controlsSprite(layerId))\r\n        {\r\n            return this._currentParticleSystem.getLayerYOffset(scale, direction, layerId);\r\n        }\r\n\r\n        return super.getLayerYOffset(scale, direction, layerId);\r\n    }\r\n\r\n    private _Str_18684(): boolean\r\n    {\r\n        if(!this.object || !this.object.model) return false;\r\n\r\n        const fireworksData = this.object.model.getValue<IParticleSystem[]>(RoomObjectVariable.FURNITURE_FIREWORKS_DATA);\r\n\r\n        if(!fireworksData || !fireworksData.length) return false;\r\n\r\n        this._particleSystems = new AdvancedMap();\r\n\r\n        for(const particleData of fireworksData)\r\n        {\r\n            const size = particleData.size;\r\n            const particleSystem = new FurnitureParticleSystem(this);\r\n\r\n            particleSystem.parseData(particleData);\r\n\r\n            this._particleSystems.add(size, particleSystem);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}