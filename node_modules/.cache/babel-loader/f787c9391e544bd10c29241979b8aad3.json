{"ast":null,"code":"export class AvatarImageBodyPartCache {\n  constructor() {\n    this._cache = void 0;\n    this._currentAction = void 0;\n    this._currentDirection = void 0;\n    this._disposed = void 0;\n    this._cache = new Map();\n  }\n\n  setAction(k, _arg_2) {\n    if (!this._currentAction) this._currentAction = k;\n\n    const _local_3 = this.getActionCache(this._currentAction);\n\n    if (_local_3) _local_3.setLastAccessTime(_arg_2);\n    this._currentAction = k;\n  }\n\n  dispose() {\n    if (!this._disposed) {\n      if (!this._cache) return;\n      this.disposeActions(0, 2147483647);\n\n      this._cache.clear();\n\n      this._cache = null;\n      this._disposed = true;\n    }\n  }\n\n  disposeActions(k, _arg_2) {\n    if (!this._cache || this._disposed) return;\n\n    for (const [key, cache] of this._cache.entries()) {\n      if (!cache) continue;\n\n      const _local_3 = cache.getLastAccessTime();\n\n      if (_arg_2 - _local_3 >= k) {\n        cache.dispose();\n\n        this._cache.delete(key);\n      }\n    }\n  }\n\n  getAction() {\n    return this._currentAction;\n  }\n\n  setDirection(k) {\n    this._currentDirection = k;\n  }\n\n  getDirection() {\n    return this._currentDirection;\n  }\n\n  getActionCache() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (!this._currentAction) return null;\n    if (!k) k = this._currentAction;\n    if (k.overridingAction) return this._cache.get(k.overridingAction);\n    return this._cache.get(k.id);\n  }\n\n  updateActionCache(k, _arg_2) {\n    if (k.overridingAction) this._cache.set(k.overridingAction, _arg_2);else this._cache.set(k.id, _arg_2);\n  }\n\n  debugInfo(k) {}\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/cache/AvatarImageBodyPartCache.ts"],"names":["AvatarImageBodyPartCache","constructor","_cache","_currentAction","_currentDirection","_disposed","Map","setAction","k","_arg_2","_local_3","getActionCache","setLastAccessTime","dispose","disposeActions","clear","key","cache","entries","getLastAccessTime","delete","getAction","setDirection","getDirection","overridingAction","get","id","updateActionCache","set","debugInfo"],"mappings":"AAGA,OAAO,MAAMA,wBAAN,CACP;AAMIC,EAAAA,WAAW,GACX;AAAA,SANQC,MAMR;AAAA,SALQC,cAKR;AAAA,SAJQC,iBAIR;AAAA,SAHQC,SAGR;AACI,SAAKH,MAAL,GAAc,IAAII,GAAJ,EAAd;AACH;;AAEMC,EAAAA,SAAS,CAACC,CAAD,EAAuBC,MAAvB,EAChB;AACI,QAAG,CAAC,KAAKN,cAAT,EAAyB,KAAKA,cAAL,GAAsBK,CAAtB;;AAEzB,UAAME,QAAQ,GAAG,KAAKC,cAAL,CAAoB,KAAKR,cAAzB,CAAjB;;AAEA,QAAGO,QAAH,EAAaA,QAAQ,CAACE,iBAAT,CAA2BH,MAA3B;AAEb,SAAKN,cAAL,GAAsBK,CAAtB;AACH;;AAEMK,EAAAA,OAAO,GACd;AACI,QAAG,CAAC,KAAKR,SAAT,EACA;AACI,UAAG,CAAC,KAAKH,MAAT,EAAiB;AAEjB,WAAKY,cAAL,CAAoB,CAApB,EAAuB,UAAvB;;AAEA,WAAKZ,MAAL,CAAYa,KAAZ;;AAEA,WAAKb,MAAL,GAAc,IAAd;AACA,WAAKG,SAAL,GAAiB,IAAjB;AACH;AACJ;;AAEMS,EAAAA,cAAc,CAACN,CAAD,EAAYC,MAAZ,EACrB;AACI,QAAG,CAAC,KAAKP,MAAN,IAAgB,KAAKG,SAAxB,EAAmC;;AAEnC,SAAI,MAAM,CAAEW,GAAF,EAAOC,KAAP,CAAV,IAA4B,KAAKf,MAAL,CAAYgB,OAAZ,EAA5B,EACA;AACI,UAAG,CAACD,KAAJ,EAAW;;AAEX,YAAMP,QAAQ,GAAGO,KAAK,CAACE,iBAAN,EAAjB;;AAEA,UAAIV,MAAM,GAAGC,QAAV,IAAuBF,CAA1B,EACA;AACIS,QAAAA,KAAK,CAACJ,OAAN;;AAEA,aAAKX,MAAL,CAAYkB,MAAZ,CAAmBJ,GAAnB;AACH;AACJ;AACJ;;AAEMK,EAAAA,SAAS,GAChB;AACI,WAAO,KAAKlB,cAAZ;AACH;;AAEMmB,EAAAA,YAAY,CAACd,CAAD,EACnB;AACI,SAAKJ,iBAAL,GAAyBI,CAAzB;AACH;;AAEMe,EAAAA,YAAY,GACnB;AACI,WAAO,KAAKnB,iBAAZ;AACH;;AAEMO,EAAAA,cAAc,GACrB;AAAA,QADsBH,CACtB,uEAD2C,IAC3C;AACI,QAAG,CAAC,KAAKL,cAAT,EAAyB,OAAO,IAAP;AAEzB,QAAG,CAACK,CAAJ,EAAOA,CAAC,GAAG,KAAKL,cAAT;AAEP,QAAGK,CAAC,CAACgB,gBAAL,EAAuB,OAAO,KAAKtB,MAAL,CAAYuB,GAAZ,CAAgBjB,CAAC,CAACgB,gBAAlB,CAAP;AAEvB,WAAO,KAAKtB,MAAL,CAAYuB,GAAZ,CAAgBjB,CAAC,CAACkB,EAAlB,CAAP;AACH;;AAEMC,EAAAA,iBAAiB,CAACnB,CAAD,EAAuBC,MAAvB,EACxB;AACI,QAAGD,CAAC,CAACgB,gBAAL,EAAuB,KAAKtB,MAAL,CAAY0B,GAAZ,CAAgBpB,CAAC,CAACgB,gBAAlB,EAAoCf,MAApC,EAAvB,KACK,KAAKP,MAAL,CAAY0B,GAAZ,CAAgBpB,CAAC,CAACkB,EAAlB,EAAsBjB,MAAtB;AACR;;AAEOoB,EAAAA,SAAS,CAACrB,CAAD,EACjB,CACC;;AA1FL","sourcesContent":["import { IActiveActionData } from '../actions/IActiveActionData';\r\nimport { AvatarImageActionCache } from './AvatarImageActionCache';\r\n\r\nexport class AvatarImageBodyPartCache\r\n{\r\n    private _cache: Map<string, AvatarImageActionCache>;\r\n    private _currentAction: IActiveActionData;\r\n    private _currentDirection: number;\r\n    private _disposed: boolean;\r\n\r\n    constructor()\r\n    {\r\n        this._cache = new Map();\r\n    }\r\n\r\n    public setAction(k: IActiveActionData, _arg_2: number): void\r\n    {\r\n        if(!this._currentAction) this._currentAction = k;\r\n\r\n        const _local_3 = this.getActionCache(this._currentAction);\r\n\r\n        if(_local_3) _local_3.setLastAccessTime(_arg_2);\r\n\r\n        this._currentAction = k;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(!this._disposed)\r\n        {\r\n            if(!this._cache) return;\r\n\r\n            this.disposeActions(0, 2147483647);\r\n\r\n            this._cache.clear();\r\n\r\n            this._cache = null;\r\n            this._disposed = true;\r\n        }\r\n    }\r\n\r\n    public disposeActions(k: number, _arg_2: number): void\r\n    {\r\n        if(!this._cache || this._disposed) return;\r\n\r\n        for(const [ key, cache ] of this._cache.entries())\r\n        {\r\n            if(!cache) continue;\r\n\r\n            const _local_3 = cache.getLastAccessTime();\r\n\r\n            if((_arg_2 - _local_3) >= k)\r\n            {\r\n                cache.dispose();\r\n\r\n                this._cache.delete(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getAction():IActiveActionData\r\n    {\r\n        return this._currentAction;\r\n    }\r\n\r\n    public setDirection(k: number): void\r\n    {\r\n        this._currentDirection = k;\r\n    }\r\n\r\n    public getDirection(): number\r\n    {\r\n        return this._currentDirection;\r\n    }\r\n\r\n    public getActionCache(k: IActiveActionData=null): AvatarImageActionCache\r\n    {\r\n        if(!this._currentAction) return null;\r\n\r\n        if(!k) k = this._currentAction;\r\n\r\n        if(k.overridingAction) return this._cache.get(k.overridingAction);\r\n\r\n        return this._cache.get(k.id);\r\n    }\r\n\r\n    public updateActionCache(k: IActiveActionData, _arg_2: AvatarImageActionCache): void\r\n    {\r\n        if(k.overridingAction) this._cache.set(k.overridingAction, _arg_2);\r\n        else this._cache.set(k.id, _arg_2);\r\n    }\r\n\r\n    private debugInfo(k: string): void\r\n    {\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}