{"ast":null,"code":"import { GroupDataBadgePart } from './utils/GroupDataBadgePart';\nexport class GroupSettingsParser {\n  constructor() {\n    this._roomId = void 0;\n    this._roomName = void 0;\n    this._id = void 0;\n    this._title = void 0;\n    this._description = void 0;\n    this._colorA = void 0;\n    this._colorB = void 0;\n    this._state = void 0;\n    this._canMembersDecorate = void 0;\n    this._badgeParts = void 0;\n    this._badgeCode = void 0;\n    this._membersCount = void 0;\n  }\n\n  flush() {\n    this._roomId = 0;\n    this._roomName = null;\n    this._id = 0;\n    this._title = null;\n    this._description = null;\n    this._colorA = 0;\n    this._colorB = 0;\n    this._state = 0;\n    this._canMembersDecorate = false;\n    this._badgeParts = new Map();\n    this._badgeCode = null;\n    this._membersCount = 0;\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    const hasRoomData = wrapper.readInt();\n\n    if (hasRoomData === 1) {\n      this._roomId = wrapper.readInt();\n      this._roomName = wrapper.readString();\n      wrapper.readBoolean();\n    }\n\n    wrapper.readBoolean();\n    this._id = wrapper.readInt();\n    this._title = wrapper.readString();\n    this._description = wrapper.readString();\n    wrapper.readInt();\n    this._colorA = wrapper.readInt();\n    this._colorB = wrapper.readInt();\n    this._state = wrapper.readInt();\n    this._canMembersDecorate = wrapper.readInt() === 0;\n    wrapper.readBoolean();\n    wrapper.readString();\n    const badgePartsCount = wrapper.readInt();\n\n    for (let i = 0; i < badgePartsCount; i++) {\n      const part = new GroupDataBadgePart(i === 0);\n      part.key = wrapper.readInt();\n      part.color = wrapper.readInt();\n      part.position = wrapper.readInt();\n\n      if (part.key === 0) {\n        part.position = 4;\n      }\n\n      this._badgeParts.set(i, part);\n    }\n\n    this._badgeCode = wrapper.readString();\n    this._membersCount = wrapper.readInt();\n    return true;\n  }\n\n  get roomId() {\n    return this._roomId;\n  }\n\n  get roomName() {\n    return this._roomName;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get title() {\n    return this._title;\n  }\n\n  get description() {\n    return this._description;\n  }\n\n  get colorA() {\n    return this._colorA;\n  }\n\n  get colorB() {\n    return this._colorB;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get canMembersDecorate() {\n    return this._canMembersDecorate;\n  }\n\n  get badgeParts() {\n    return this._badgeParts;\n  }\n\n  get badgeCode() {\n    return this._badgeCode;\n  }\n\n  get membersCount() {\n    return this._membersCount;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/group/GroupSettingsParser.ts"],"names":["GroupDataBadgePart","GroupSettingsParser","_roomId","_roomName","_id","_title","_description","_colorA","_colorB","_state","_canMembersDecorate","_badgeParts","_badgeCode","_membersCount","flush","Map","parse","wrapper","hasRoomData","readInt","readString","readBoolean","badgePartsCount","i","part","key","color","position","set","roomId","roomName","id","title","description","colorA","colorB","state","canMembersDecorate","badgeParts","badgeCode","membersCount"],"mappings":"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","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../core';\r\nimport { GroupDataBadgePart } from './utils/GroupDataBadgePart';\r\n\r\nexport class GroupSettingsParser implements IMessageParser\r\n{\r\n    private _roomId: number;\r\n    private _roomName: string;\r\n    private _id: number;\r\n    private _title: string;\r\n    private _description: string;\r\n    private _colorA: number;\r\n    private _colorB: number;\r\n    private _state: number;\r\n    private _canMembersDecorate: boolean;\r\n    private _badgeParts: Map<number, GroupDataBadgePart>;\r\n    private _badgeCode: string;\r\n    private _membersCount: number;\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._roomId = 0;\r\n        this._roomName = null;\r\n        this._id = 0;\r\n        this._title = null;\r\n        this._description = null;\r\n        this._colorA = 0;\r\n        this._colorB = 0;\r\n        this._state = 0;\r\n        this._canMembersDecorate = false;\r\n        this._badgeParts = new Map();\r\n        this._badgeCode = null;\r\n        this._membersCount = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        const hasRoomData = wrapper.readInt();\r\n\r\n        if(hasRoomData === 1)\r\n        {\r\n            this._roomId = wrapper.readInt();\r\n            this._roomName = wrapper.readString();\r\n            wrapper.readBoolean();\r\n        }\r\n\r\n        wrapper.readBoolean();\r\n\r\n        this._id = wrapper.readInt();\r\n        this._title = wrapper.readString();\r\n        this._description = wrapper.readString();\r\n\r\n        wrapper.readInt();\r\n\r\n        this._colorA = wrapper.readInt();\r\n        this._colorB = wrapper.readInt();\r\n        this._state = wrapper.readInt();\r\n        this._canMembersDecorate = wrapper.readInt() === 0;\r\n\r\n        wrapper.readBoolean();\r\n        wrapper.readString();\r\n\r\n        const badgePartsCount = wrapper.readInt();\r\n\r\n        for(let i = 0; i < badgePartsCount; i++)\r\n        {\r\n            const part = new GroupDataBadgePart(i === 0);\r\n\r\n            part.key = wrapper.readInt();\r\n            part.color = wrapper.readInt();\r\n            part.position = wrapper.readInt();\r\n\r\n            if(part.key === 0)\r\n            {\r\n                part.position = 4;\r\n            }\r\n\r\n            this._badgeParts.set(i, part);\r\n        }\r\n\r\n        this._badgeCode = wrapper.readString();\r\n        this._membersCount = wrapper.readInt();\r\n\r\n        return true;\r\n    }\r\n\r\n    public get roomId(): number\r\n    {\r\n        return this._roomId;\r\n    }\r\n\r\n    public get roomName(): string\r\n    {\r\n        return this._roomName;\r\n    }\r\n\r\n    public get id(): number\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get title(): string\r\n    {\r\n        return this._title;\r\n    }\r\n\r\n    public get description(): string\r\n    {\r\n        return this._description;\r\n    }\r\n\r\n    public get colorA(): number\r\n    {\r\n        return this._colorA;\r\n    }\r\n\r\n    public get colorB(): number\r\n    {\r\n        return this._colorB;\r\n    }\r\n\r\n    public get state(): number\r\n    {\r\n        return this._state;\r\n    }\r\n\r\n    public get canMembersDecorate(): boolean\r\n    {\r\n        return this._canMembersDecorate;\r\n    }\r\n\r\n    public get badgeParts(): Map<number, GroupDataBadgePart>\r\n    {\r\n        return this._badgeParts;\r\n    }\r\n\r\n    public get badgeCode(): string\r\n    {\r\n        return this._badgeCode;\r\n    }\r\n\r\n    public get membersCount(): number\r\n    {\r\n        return this._membersCount;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}