{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/camera/views/editor/effect-list/CameraWidgetEffectListView.tsx\";\nimport { Grid } from '../../../../../common';\nimport { CameraWidgetEffectListItemView } from './CameraWidgetEffectListItemView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CameraWidgetEffectListView = props => {\n  const {\n    myLevel = 0,\n    selectedEffects = [],\n    effects = [],\n    thumbnails = [],\n    processAction = null\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    columnCount: 3,\n    overflow: \"auto\",\n    children: effects && effects.length > 0 && effects.map((effect, index) => {\n      const thumbnailUrl = thumbnails.find(thumbnail => thumbnail.effectName === effect.name);\n      const isActive = selectedEffects.findIndex(selectedEffect => selectedEffect.effect.name === effect.name) > -1;\n      return /*#__PURE__*/_jsxDEV(CameraWidgetEffectListItemView, {\n        effect: effect,\n        thumbnailUrl: thumbnailUrl && thumbnailUrl.thumbnailUrl || null,\n        isActive: isActive,\n        isLocked: effect.minLevel > myLevel,\n        selectEffect: () => processAction('select_effect', effect.name),\n        removeEffect: () => processAction('remove_effect', effect.name)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_c = CameraWidgetEffectListView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CameraWidgetEffectListView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/camera/views/editor/effect-list/CameraWidgetEffectListView.tsx"],"names":["Grid","CameraWidgetEffectListItemView","CameraWidgetEffectListView","props","myLevel","selectedEffects","effects","thumbnails","processAction","length","map","effect","index","thumbnailUrl","find","thumbnail","effectName","name","isActive","findIndex","selectedEffect","minLevel"],"mappings":";AAEA,SAASA,IAAT,QAAqB,uBAArB;AAEA,SAASC,8BAAT,QAA+C,kCAA/C;;AAWA,OAAO,MAAMC,0BAA+D,GAAGC,KAAK,IACpF;AACI,QAAM;AAAEC,IAAAA,OAAO,GAAG,CAAZ;AAAeC,IAAAA,eAAe,GAAG,EAAjC;AAAqCC,IAAAA,OAAO,GAAG,EAA/C;AAAmDC,IAAAA,UAAU,GAAG,EAAhE;AAAoEC,IAAAA,aAAa,GAAG;AAApF,MAA6FL,KAAnG;AAEA,sBACI,QAAC,IAAD;AAAM,IAAA,WAAW,EAAG,CAApB;AAAwB,IAAA,QAAQ,EAAC,MAAjC;AAAA,cACMG,OAAO,IAAKA,OAAO,CAACG,MAAR,GAAiB,CAA7B,IAAmCH,OAAO,CAACI,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KACjD;AACI,YAAMC,YAAY,GAAIN,UAAU,CAACO,IAAX,CAAgBC,SAAS,IAAKA,SAAS,CAACC,UAAV,KAAyBL,MAAM,CAACM,IAA9D,CAAtB;AACA,YAAMC,QAAQ,GAAIb,eAAe,CAACc,SAAhB,CAA0BC,cAAc,IAAKA,cAAc,CAACT,MAAf,CAAsBM,IAAtB,KAA+BN,MAAM,CAACM,IAAnF,IAA4F,CAAC,CAA/G;AAEA,0BAAO,QAAC,8BAAD;AAA8C,QAAA,MAAM,EAAGN,MAAvD;AAAgE,QAAA,YAAY,EAAKE,YAAY,IAAIA,YAAY,CAACA,YAA9B,IAA+C,IAA/H;AAAuI,QAAA,QAAQ,EAAGK,QAAlJ;AAA6J,QAAA,QAAQ,EAAIP,MAAM,CAACU,QAAP,GAAkBjB,OAA3L;AAAsM,QAAA,YAAY,EAAG,MAAMI,aAAa,CAAC,eAAD,EAAkBG,MAAM,CAACM,IAAzB,CAAxO;AAAyQ,QAAA,YAAY,EAAG,MAAMT,aAAa,CAAC,eAAD,EAAkBG,MAAM,CAACM,IAAzB;AAA3S,SAAsCL,KAAtC;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KANoC;AADzC;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAfM;KAAMV,0B","sourcesContent":["import { IRoomCameraWidgetEffect, IRoomCameraWidgetSelectedEffect } from '@nitrots/nitro-renderer';\nimport { FC } from 'react';\nimport { Grid } from '../../../../../common';\nimport { CameraPictureThumbnail } from '../../../common/CameraPictureThumbnail';\nimport { CameraWidgetEffectListItemView } from './CameraWidgetEffectListItemView';\n\nexport interface CameraWidgetEffectListViewProps\n{\n    myLevel: number;\n    selectedEffects: IRoomCameraWidgetSelectedEffect[];\n    effects: IRoomCameraWidgetEffect[];\n    thumbnails: CameraPictureThumbnail[];\n    processAction: (type: string, name: string) => void;\n}\n\nexport const CameraWidgetEffectListView: FC<CameraWidgetEffectListViewProps> = props =>\n{\n    const { myLevel = 0, selectedEffects = [], effects = [], thumbnails = [], processAction = null } = props;\n\n    return (\n        <Grid columnCount={ 3 } overflow=\"auto\">\n            { effects && (effects.length > 0) && effects.map((effect, index) =>\n            {\n                const thumbnailUrl = (thumbnails.find(thumbnail => (thumbnail.effectName === effect.name)));\n                const isActive = (selectedEffects.findIndex(selectedEffect => (selectedEffect.effect.name === effect.name)) > -1);\n\n                return <CameraWidgetEffectListItemView key={ index } effect={ effect } thumbnailUrl={ ((thumbnailUrl && thumbnailUrl.thumbnailUrl) || null) } isActive={ isActive } isLocked={ (effect.minLevel > myLevel) } selectEffect={ () => processAction('select_effect', effect.name) } removeEffect={ () => processAction('remove_effect', effect.name) } />\n            }) }\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}