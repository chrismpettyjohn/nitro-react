{"ast":null,"code":"import { Disposable } from '../common/disposable/Disposable';\nimport { SocketConnection } from './connections/SocketConnection';\nexport class CommunicationManager extends Disposable {\n  constructor() {\n    super();\n    this._connections = void 0;\n    this._connections = [];\n  }\n\n  onDispose() {\n    if (!this._connections || !this._connections.length) return;\n\n    for (const connection of this._connections.values()) connection && connection.dispose();\n  }\n\n  createConnection() {\n    let stateListener = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const connection = new SocketConnection(this, stateListener);\n    if (!connection) return;\n\n    this._connections.push(connection);\n\n    return connection;\n  }\n\n  update(time) {\n    let index = 0;\n\n    while (index < this._connections.length) {\n      const connection = this._connections[index];\n      connection.processReceivedData();\n      if (this.disposed) return;\n      if (connection.disposed) this._connections.splice(index, 1);else index++;\n    }\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/communication/CommunicationManager.ts"],"names":["Disposable","SocketConnection","CommunicationManager","constructor","_connections","onDispose","length","connection","values","dispose","createConnection","stateListener","push","update","time","index","processReceivedData","disposed","splice"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iCAA3B;AAIA,SAASC,gBAAT,QAAiC,gCAAjC;AAGA,OAAO,MAAMC,oBAAN,SAAmCF,UAAnC,CACP;AAGIG,EAAAA,WAAW,GACX;AACI;AADJ,SAHQC,YAGR;AAGI,SAAKA,YAAL,GAAoB,EAApB;AACH;;AAESC,EAAAA,SAAS,GACnB;AACI,QAAG,CAAC,KAAKD,YAAN,IAAsB,CAAC,KAAKA,YAAL,CAAkBE,MAA5C,EAAoD;;AAEpD,SAAI,MAAMC,UAAV,IAAwB,KAAKH,YAAL,CAAkBI,MAAlB,EAAxB,EAAoDD,UAAU,IAAIA,UAAU,CAACE,OAAX,EAAd;AACvD;;AAEMC,EAAAA,gBAAgB,GACvB;AAAA,QADwBC,aACxB,uEADkE,IAClE;AACI,UAAMJ,UAAU,GAAG,IAAIN,gBAAJ,CAAqB,IAArB,EAA2BU,aAA3B,CAAnB;AAEA,QAAG,CAACJ,UAAJ,EAAgB;;AAEhB,SAAKH,YAAL,CAAkBQ,IAAlB,CAAuBL,UAAvB;;AAEA,WAAOA,UAAP;AACH;;AAEMM,EAAAA,MAAM,CAACC,IAAD,EACb;AACI,QAAIC,KAAK,GAAG,CAAZ;;AAEA,WAAMA,KAAK,GAAG,KAAKX,YAAL,CAAkBE,MAAhC,EACA;AACI,YAAMC,UAAU,GAAG,KAAKH,YAAL,CAAkBW,KAAlB,CAAnB;AAEAR,MAAAA,UAAU,CAACS,mBAAX;AAEA,UAAG,KAAKC,QAAR,EAAkB;AAElB,UAAGV,UAAU,CAACU,QAAd,EAAwB,KAAKb,YAAL,CAAkBc,MAAlB,CAAyBH,KAAzB,EAAgC,CAAhC,EAAxB,KACKA,KAAK;AACb;AACJ;;AA3CL","sourcesContent":["import { Disposable } from '../common/disposable/Disposable';\r\nimport { IUpdateReceiver } from '../common/IUpdateReceiver';\r\nimport { IConnection } from './connections/IConnection';\r\nimport { IConnectionStateListener } from './connections/IConnectionStateListener';\r\nimport { SocketConnection } from './connections/SocketConnection';\r\nimport { ICommunicationManager } from './ICommunicationManager';\r\n\r\nexport class CommunicationManager extends Disposable implements ICommunicationManager, IUpdateReceiver\r\n{\r\n    private _connections: IConnection[];\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._connections = [];\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        if(!this._connections || !this._connections.length) return;\r\n\r\n        for(const connection of this._connections.values()) connection && connection.dispose();\r\n    }\r\n\r\n    public createConnection(stateListener: IConnectionStateListener = null): IConnection\r\n    {\r\n        const connection = new SocketConnection(this, stateListener);\r\n\r\n        if(!connection) return;\r\n\r\n        this._connections.push(connection);\r\n\r\n        return connection;\r\n    }\r\n\r\n    public update(time: number): void\r\n    {\r\n        let index = 0;\r\n\r\n        while(index < this._connections.length)\r\n        {\r\n            const connection = this._connections[index];\r\n\r\n            connection.processReceivedData();\r\n\r\n            if(this.disposed) return;\r\n\r\n            if(connection.disposed) this._connections.splice(index, 1);\r\n            else index++;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}