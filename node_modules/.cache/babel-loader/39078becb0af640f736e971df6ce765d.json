{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/wired/views/actions/WiredActionMoveAndRotateFurniView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { LocalizeText, WiredFurniType } from '../../../../api';\nimport { Column, Flex, Text } from '../../../../common';\nimport { useWiredContext } from '../../WiredContext';\nimport { WiredActionBaseView } from './WiredActionBaseView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst directionOptions = [{\n  value: 0,\n  icon: 'ne'\n}, {\n  value: 2,\n  icon: 'se'\n}, {\n  value: 4,\n  icon: 'sw'\n}, {\n  value: 6,\n  icon: 'nw'\n}];\nconst rotationOptions = [0, 1, 2, 3, 4, 5, 6];\nexport const WiredActionMoveAndRotateFurniView = props => {\n  _s();\n\n  const [movement, setMovement] = useState(-1);\n  const [rotation, setRotation] = useState(-1);\n  const {\n    trigger = null,\n    setIntParams = null\n  } = useWiredContext();\n\n  const save = () => setIntParams([movement, rotation]);\n\n  useEffect(() => {\n    if (trigger.intData.length >= 2) {\n      setMovement(trigger.intData[0]);\n      setRotation(trigger.intData[1]);\n    } else {\n      setMovement(-1);\n      setRotation(-1);\n    }\n  }, [trigger]);\n  return /*#__PURE__*/_jsxDEV(WiredActionBaseView, {\n    requiresFurni: WiredFurniType.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT,\n    hasSpecialInput: true,\n    save: save,\n    children: [/*#__PURE__*/_jsxDEV(Column, {\n      gap: 1,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        gfbold: true,\n        children: LocalizeText('wiredfurni.params.startdir')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        gap: 1,\n        children: directionOptions.map(option => {\n          return /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            gap: 1,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"radio\",\n              name: \"movement\",\n              id: `movement${option.value}`,\n              checked: movement === option.value,\n              onChange: event => setMovement(option.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `icon icon-${option.icon}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 33\n            }, this)]\n          }, option.value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      gap: 1,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        gfbold: true,\n        children: LocalizeText('wiredfurni.params.turn')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), rotationOptions.map(option => {\n        return /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          gap: 1,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"radio\",\n            name: \"rotation\",\n            id: `rotation${option}`,\n            checked: rotation === option,\n            onChange: event => setRotation(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: LocalizeText(`wiredfurni.params.turn.${option}`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this)]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WiredActionMoveAndRotateFurniView, \"1b5ezF1CYHs8g85qgwlhfiGNaWs=\", false, function () {\n  return [useWiredContext];\n});\n\n_c = WiredActionMoveAndRotateFurniView;\n\nvar _c;\n\n$RefreshReg$(_c, \"WiredActionMoveAndRotateFurniView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/wired/views/actions/WiredActionMoveAndRotateFurniView.tsx"],"names":["useEffect","useState","LocalizeText","WiredFurniType","Column","Flex","Text","useWiredContext","WiredActionBaseView","directionOptions","value","icon","rotationOptions","WiredActionMoveAndRotateFurniView","props","movement","setMovement","rotation","setRotation","trigger","setIntParams","save","intData","length","STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT","map","option","event"],"mappings":"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","sourcesContent":["import { FC, useEffect, useState } from 'react';\nimport { LocalizeText, WiredFurniType } from '../../../../api';\nimport { Column, Flex, Text } from '../../../../common';\nimport { useWiredContext } from '../../WiredContext';\nimport { WiredActionBaseView } from './WiredActionBaseView';\n\nconst directionOptions: { value: number, icon: string }[] = [\n    {\n        value: 0,\n        icon: 'ne'\n    },\n    {\n        value: 2,\n        icon: 'se'\n    },\n    {\n        value: 4,\n        icon: 'sw'\n    },\n    {\n        value: 6,\n        icon: 'nw'\n    }\n];\n\nconst rotationOptions: number[] = [ 0, 1, 2, 3, 4, 5, 6 ];\n\nexport const WiredActionMoveAndRotateFurniView: FC<{}> = props =>\n{\n    const [ movement, setMovement ] = useState(-1);\n    const [ rotation, setRotation ] = useState(-1);\n    const { trigger = null, setIntParams = null } = useWiredContext();\n\n    const save = () => setIntParams([ movement, rotation ]);\n\n    useEffect(() =>\n    {\n        if(trigger.intData.length >= 2)\n        {\n            setMovement(trigger.intData[0]);\n            setRotation(trigger.intData[1]);\n        }\n        else\n        {\n            setMovement(-1);\n            setRotation(-1);\n        }\n    }, [ trigger ]);\n\n    return (\n        <WiredActionBaseView requiresFurni={ WiredFurniType.STUFF_SELECTION_OPTION_BY_ID_BY_TYPE_OR_FROM_CONTEXT } hasSpecialInput={ true } save={ save }>\n            <Column gap={ 1 }>\n                <Text gfbold>{ LocalizeText('wiredfurni.params.startdir') }</Text>\n                <Flex gap={ 1 }>\n                    { directionOptions.map(option =>\n                    {\n                        return (\n                            <Flex key={ option.value } alignItems=\"center\" gap={ 1 }>\n                                <input className=\"form-check-input\" type=\"radio\" name=\"movement\" id={ `movement${ option.value }` } checked={ (movement === option.value) } onChange={ event => setMovement(option.value) } />\n                                <Text>\n                                    <i className={ `icon icon-${ option.icon }` } />\n                                </Text>\n                            </Flex>\n                        )\n                    }) }\n                </Flex>\n            </Column>\n            <Column gap={ 1 }>\n                <Text gfbold>{ LocalizeText('wiredfurni.params.turn') }</Text>\n                { rotationOptions.map(option =>\n                {\n                    return (\n                        <Flex key={ option } alignItems=\"center\" gap={ 1 }>\n                            <input className=\"form-check-input\" type=\"radio\" name=\"rotation\" id={ `rotation${ option }` } checked={ (rotation === option) } onChange={ event => setRotation(option) } />\n                            <Text>{ LocalizeText(`wiredfurni.params.turn.${ option }`) }</Text>\n                        </Flex>\n                    )\n                }) }\n            </Column>\n        </WiredActionBaseView>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}