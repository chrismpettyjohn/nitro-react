{"ast":null,"code":"import { IgnoredUsersEvent } from '../communication/messages/incoming/user/IgnoredUsersEvent';\nimport { IgnoreResultEvent } from '../communication/messages/incoming/user/IgnoreResultEvent';\nimport { GetIgnoredUsersComposer } from '../communication/messages/outgoing/user/data/GetIgnoredUsersComposer';\nimport { IgnoreUserComposer } from '../communication/messages/outgoing/user/data/IgnoreUserComposer';\nimport { IgnoreUserIdComposer } from '../communication/messages/outgoing/user/data/IgnoreUserIdComposer';\nimport { UnignoreUserComposer } from '../communication/messages/outgoing/user/data/UnignoreUserComposer';\nexport class IgnoredUsersManager {\n  constructor(sessionDataManager) {\n    this._sessionDataManager = void 0;\n    this._ignoredUsers = void 0;\n    this._messages = void 0;\n    this._sessionDataManager = sessionDataManager;\n    this._ignoredUsers = [];\n  }\n\n  init() {\n    if (this._sessionDataManager && this._sessionDataManager.communication) {\n      this._messages = [new IgnoredUsersEvent(this.onIgnoredUsersEvent.bind(this)), new IgnoreResultEvent(this.onIgnoreResultEvent.bind(this))];\n\n      for (const message of this._messages) this._sessionDataManager.communication.registerMessageEvent(message);\n    }\n  }\n\n  dispose() {\n    if (this.disposed) return;\n\n    if (this._messages && this._messages.length) {\n      for (const message of this._messages) this._sessionDataManager.communication.removeMessageEvent(message);\n\n      this._messages = null;\n    }\n\n    this._sessionDataManager = null;\n  }\n\n  requestIgnoredUsers() {\n    this._sessionDataManager.send(new GetIgnoredUsersComposer(this._sessionDataManager.userName));\n  }\n\n  onIgnoredUsersEvent(event) {\n    if (!event) return;\n    const parser = event.getParser();\n    if (!parser) return;\n    this._ignoredUsers = parser.ignoredUsers;\n  }\n\n  onIgnoreResultEvent(event) {\n    if (!event) return;\n    const parser = event.getParser();\n    if (!parser) return;\n    const name = parser.name;\n\n    switch (parser.result) {\n      case 0:\n        return;\n\n      case 1:\n        this.addUserToIgnoreList(name);\n        return;\n\n      case 2:\n        this.addUserToIgnoreList(name);\n\n        this._ignoredUsers.shift();\n\n        return;\n\n      case 3:\n        this.removeUserFromIgnoreList(name);\n        return;\n    }\n  }\n\n  addUserToIgnoreList(name) {\n    if (this._ignoredUsers.indexOf(name) < 0) this._ignoredUsers.push(name);\n  }\n\n  removeUserFromIgnoreList(name) {\n    const index = this._ignoredUsers.indexOf(name);\n\n    if (index >= 0) this._ignoredUsers.splice(index, 1);\n  }\n\n  ignoreUserId(id) {\n    this._sessionDataManager.send(new IgnoreUserIdComposer(id));\n  }\n\n  ignoreUser(name) {\n    this._sessionDataManager.send(new IgnoreUserComposer(name));\n  }\n\n  unignoreUser(name) {\n    this._sessionDataManager.send(new UnignoreUserComposer(name));\n  }\n\n  isIgnored(name) {\n    return this._ignoredUsers.indexOf(name) >= 0;\n  }\n\n  get disposed() {\n    return !!this._sessionDataManager;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/session/IgnoredUsersManager.ts"],"names":["IgnoredUsersEvent","IgnoreResultEvent","GetIgnoredUsersComposer","IgnoreUserComposer","IgnoreUserIdComposer","UnignoreUserComposer","IgnoredUsersManager","constructor","sessionDataManager","_sessionDataManager","_ignoredUsers","_messages","init","communication","onIgnoredUsersEvent","bind","onIgnoreResultEvent","message","registerMessageEvent","dispose","disposed","length","removeMessageEvent","requestIgnoredUsers","send","userName","event","parser","getParser","ignoredUsers","name","result","addUserToIgnoreList","shift","removeUserFromIgnoreList","indexOf","push","index","splice","ignoreUserId","id","ignoreUser","unignoreUser","isIgnored"],"mappings":"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","sourcesContent":["import { IDisposable } from '../../core/common/disposable/IDisposable';\r\nimport { IMessageEvent } from '../../core/communication/messages/IMessageEvent';\r\nimport { IgnoredUsersEvent } from '../communication/messages/incoming/user/IgnoredUsersEvent';\r\nimport { IgnoreResultEvent } from '../communication/messages/incoming/user/IgnoreResultEvent';\r\nimport { GetIgnoredUsersComposer } from '../communication/messages/outgoing/user/data/GetIgnoredUsersComposer';\r\nimport { IgnoreUserComposer } from '../communication/messages/outgoing/user/data/IgnoreUserComposer';\r\nimport { IgnoreUserIdComposer } from '../communication/messages/outgoing/user/data/IgnoreUserIdComposer';\r\nimport { UnignoreUserComposer } from '../communication/messages/outgoing/user/data/UnignoreUserComposer';\r\nimport { SessionDataManager } from './SessionDataManager';\r\n\r\nexport class IgnoredUsersManager implements IDisposable\r\n{\r\n    private _sessionDataManager: SessionDataManager;\r\n    private _ignoredUsers: string[];\r\n\r\n    private _messages: IMessageEvent[];\r\n\r\n    constructor(sessionDataManager: SessionDataManager)\r\n    {\r\n        this._sessionDataManager = sessionDataManager;\r\n        this._ignoredUsers = [];\r\n    }\r\n\r\n    public init(): void\r\n    {\r\n        if(this._sessionDataManager && this._sessionDataManager.communication)\r\n        {\r\n            this._messages = [\r\n                new IgnoredUsersEvent(this.onIgnoredUsersEvent.bind(this)),\r\n                new IgnoreResultEvent(this.onIgnoreResultEvent.bind(this))\r\n            ];\r\n\r\n            for(const message of this._messages) this._sessionDataManager.communication.registerMessageEvent(message);\r\n        }\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this.disposed) return;\r\n\r\n        if(this._messages && this._messages.length)\r\n        {\r\n            for(const message of this._messages) this._sessionDataManager.communication.removeMessageEvent(message);\r\n\r\n            this._messages = null;\r\n        }\r\n\r\n        this._sessionDataManager = null;\r\n    }\r\n\r\n    public requestIgnoredUsers(): void\r\n    {\r\n        this._sessionDataManager.send(new GetIgnoredUsersComposer(this._sessionDataManager.userName));\r\n    }\r\n\r\n    private onIgnoredUsersEvent(event: IgnoredUsersEvent): void\r\n    {\r\n        if(!event) return;\r\n\r\n        const parser = event.getParser();\r\n\r\n        if(!parser) return;\r\n\r\n        this._ignoredUsers = parser.ignoredUsers;\r\n    }\r\n\r\n    private onIgnoreResultEvent(event: IgnoreResultEvent): void\r\n    {\r\n        if(!event) return;\r\n\r\n        const parser = event.getParser();\r\n\r\n        if(!parser) return;\r\n\r\n        const name = parser.name;\r\n\r\n        switch(parser.result)\r\n        {\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                this.addUserToIgnoreList(name);\r\n                return;\r\n            case 2:\r\n                this.addUserToIgnoreList(name);\r\n                this._ignoredUsers.shift();\r\n                return;\r\n            case 3:\r\n                this.removeUserFromIgnoreList(name);\r\n                return;\r\n        }\r\n    }\r\n\r\n    private addUserToIgnoreList(name: string): void\r\n    {\r\n        if(this._ignoredUsers.indexOf(name) < 0) this._ignoredUsers.push(name);\r\n    }\r\n\r\n    private removeUserFromIgnoreList(name: string): void\r\n    {\r\n        const index = this._ignoredUsers.indexOf(name);\r\n\r\n        if(index >= 0) this._ignoredUsers.splice(index, 1);\r\n    }\r\n\r\n    public ignoreUserId(id: number): void\r\n    {\r\n        this._sessionDataManager.send(new IgnoreUserIdComposer(id));\r\n    }\r\n\r\n    public ignoreUser(name: string): void\r\n    {\r\n        this._sessionDataManager.send(new IgnoreUserComposer(name));\r\n    }\r\n\r\n    public unignoreUser(name: string): void\r\n    {\r\n        this._sessionDataManager.send(new UnignoreUserComposer(name));\r\n    }\r\n\r\n    public isIgnored(name: string): boolean\r\n    {\r\n        return (this._ignoredUsers.indexOf(name) >= 0);\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return !!this._sessionDataManager;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}