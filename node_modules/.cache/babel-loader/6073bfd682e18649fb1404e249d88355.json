{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/Grid.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { Base } from './Base';\nimport { GridContextProvider } from './GridContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Grid = props => {\n  _s();\n\n  const {\n    inline = false,\n    gap = 2,\n    maxContent = false,\n    columnCount = 0,\n    center = false,\n    alignSelf = null,\n    alignItems = null,\n    justifyContent = null,\n    fullHeight = true,\n    classNames = [],\n    style = {},\n    ...rest\n  } = props;\n  const getClassNames = useMemo(() => {\n    const newClassNames = [];\n    if (inline) newClassNames.push('inline-grid');else newClassNames.push('grid');\n    if (gap) newClassNames.push('gap-' + gap);else if (gap === 0) newClassNames.push('gap-0');\n    if (maxContent) newClassNames.push('flex-basis-max-content');\n    if (alignSelf) newClassNames.push('align-self-' + alignSelf);\n    if (alignItems) newClassNames.push('align-items-' + alignItems);\n    if (justifyContent) newClassNames.push('justify-content-' + justifyContent);\n    if (!alignItems && !justifyContent && center) newClassNames.push('align-items-center', 'justify-content-center');\n    if (classNames.length) newClassNames.push(...classNames);\n    return newClassNames;\n  }, [inline, gap, maxContent, alignSelf, alignItems, justifyContent, center, classNames]);\n  const getStyle = useMemo(() => {\n    let newStyle = {};\n    if (columnCount) newStyle['--bs-columns'] = columnCount.toString();\n    if (Object.keys(style).length) newStyle = { ...newStyle,\n      ...style\n    };\n    return newStyle;\n  }, [columnCount, style]);\n  return /*#__PURE__*/_jsxDEV(GridContextProvider, {\n    value: {\n      isCssGrid: true\n    },\n    children: /*#__PURE__*/_jsxDEV(Base, {\n      fullHeight: fullHeight,\n      classNames: getClassNames,\n      style: getStyle,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"JAnVx+4W+r7coZiWP+qo7L5cH5o=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/Grid.tsx"],"names":["useMemo","Base","GridContextProvider","Grid","props","inline","gap","maxContent","columnCount","center","alignSelf","alignItems","justifyContent","fullHeight","classNames","style","rest","getClassNames","newClassNames","push","length","getStyle","newStyle","toString","Object","keys","isCssGrid"],"mappings":";;;AAAA,SAA4BA,OAA5B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAgC,QAAhC;AACA,SAASC,mBAAT,QAAoC,eAApC;;AAeA,OAAO,MAAMC,IAAmB,GAAGC,KAAK,IACxC;AAAA;;AACI,QAAM;AAAEC,IAAAA,MAAM,GAAG,KAAX;AAAkBC,IAAAA,GAAG,GAAG,CAAxB;AAA2BC,IAAAA,UAAU,GAAG,KAAxC;AAA+CC,IAAAA,WAAW,GAAG,CAA7D;AAAgEC,IAAAA,MAAM,GAAG,KAAzE;AAAgFC,IAAAA,SAAS,GAAG,IAA5F;AAAkGC,IAAAA,UAAU,GAAG,IAA/G;AAAqHC,IAAAA,cAAc,GAAG,IAAtI;AAA4IC,IAAAA,UAAU,GAAG,IAAzJ;AAA+JC,IAAAA,UAAU,GAAG,EAA5K;AAAgLC,IAAAA,KAAK,GAAG,EAAxL;AAA4L,OAAGC;AAA/L,MAAwMZ,KAA9M;AAEA,QAAMa,aAAa,GAAGjB,OAAO,CAAC,MAC9B;AACI,UAAMkB,aAAuB,GAAG,EAAhC;AAEA,QAAGb,MAAH,EAAWa,aAAa,CAACC,IAAd,CAAmB,aAAnB,EAAX,KACKD,aAAa,CAACC,IAAd,CAAmB,MAAnB;AAEL,QAAGb,GAAH,EAAQY,aAAa,CAACC,IAAd,CAAmB,SAASb,GAA5B,EAAR,KACK,IAAGA,GAAG,KAAK,CAAX,EAAcY,aAAa,CAACC,IAAd,CAAmB,OAAnB;AAEnB,QAAGZ,UAAH,EAAeW,aAAa,CAACC,IAAd,CAAmB,wBAAnB;AAEf,QAAGT,SAAH,EAAcQ,aAAa,CAACC,IAAd,CAAmB,gBAAgBT,SAAnC;AAEd,QAAGC,UAAH,EAAeO,aAAa,CAACC,IAAd,CAAmB,iBAAiBR,UAApC;AAEf,QAAGC,cAAH,EAAmBM,aAAa,CAACC,IAAd,CAAmB,qBAAqBP,cAAxC;AAEnB,QAAG,CAACD,UAAD,IAAe,CAACC,cAAhB,IAAkCH,MAArC,EAA6CS,aAAa,CAACC,IAAd,CAAmB,oBAAnB,EAAyC,wBAAzC;AAE7C,QAAGL,UAAU,CAACM,MAAd,EAAsBF,aAAa,CAACC,IAAd,CAAmB,GAAGL,UAAtB;AAEtB,WAAOI,aAAP;AACH,GAvB4B,EAuB1B,CAAEb,MAAF,EAAUC,GAAV,EAAeC,UAAf,EAA2BG,SAA3B,EAAsCC,UAAtC,EAAkDC,cAAlD,EAAkEH,MAAlE,EAA0EK,UAA1E,CAvB0B,CAA7B;AAyBA,QAAMO,QAAQ,GAAGrB,OAAO,CAAC,MACzB;AACI,QAAIsB,QAAuB,GAAG,EAA9B;AAEA,QAAGd,WAAH,EAAgBc,QAAQ,CAAC,cAAD,CAAR,GAA2Bd,WAAW,CAACe,QAAZ,EAA3B;AAEhB,QAAGC,MAAM,CAACC,IAAP,CAAYV,KAAZ,EAAmBK,MAAtB,EAA8BE,QAAQ,GAAG,EAAE,GAAGA,QAAL;AAAe,SAAGP;AAAlB,KAAX;AAE9B,WAAOO,QAAP;AACH,GATuB,EASrB,CAAEd,WAAF,EAAeO,KAAf,CATqB,CAAxB;AAWA,sBACI,QAAC,mBAAD;AAAqB,IAAA,KAAK,EAAG;AAAEW,MAAAA,SAAS,EAAE;AAAb,KAA7B;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,UAAU,EAAGb,UAAnB;AAAgC,MAAA,UAAU,EAAGI,aAA7C;AAA6D,MAAA,KAAK,EAAGI,QAArE;AAAA,SAAqFL;AAArF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7CM;;GAAMb,I;;KAAAA,I","sourcesContent":["import { CSSProperties, FC, useMemo } from 'react';\nimport { Base, BaseProps } from './Base';\nimport { GridContextProvider } from './GridContext';\nimport { AlignItemType, AlignSelfType, JustifyContentType, SpacingType } from './types';\n\nexport interface GridProps extends BaseProps<HTMLDivElement>\n{\n    inline?: boolean;\n    gap?: SpacingType;\n    maxContent?: boolean;\n    columnCount?: number;\n    center?: boolean;\n    alignSelf?: AlignSelfType;\n    alignItems?: AlignItemType;\n    justifyContent?: JustifyContentType;\n}\n\nexport const Grid: FC<GridProps> = props =>\n{\n    const { inline = false, gap = 2, maxContent = false, columnCount = 0, center = false, alignSelf = null, alignItems = null, justifyContent = null, fullHeight = true, classNames = [], style = {}, ...rest } = props;\n\n    const getClassNames = useMemo(() =>\n    {\n        const newClassNames: string[] = [];\n\n        if(inline) newClassNames.push('inline-grid');\n        else newClassNames.push('grid');\n\n        if(gap) newClassNames.push('gap-' + gap);\n        else if(gap === 0) newClassNames.push('gap-0');\n\n        if(maxContent) newClassNames.push('flex-basis-max-content');\n\n        if(alignSelf) newClassNames.push('align-self-' + alignSelf);\n\n        if(alignItems) newClassNames.push('align-items-' + alignItems);\n\n        if(justifyContent) newClassNames.push('justify-content-' + justifyContent);\n\n        if(!alignItems && !justifyContent && center) newClassNames.push('align-items-center', 'justify-content-center');\n\n        if(classNames.length) newClassNames.push(...classNames);\n\n        return newClassNames;\n    }, [ inline, gap, maxContent, alignSelf, alignItems, justifyContent, center, classNames ]);\n\n    const getStyle = useMemo(() =>\n    {\n        let newStyle: CSSProperties = {};\n\n        if(columnCount) newStyle['--bs-columns'] = columnCount.toString();\n\n        if(Object.keys(style).length) newStyle = { ...newStyle, ...style };\n\n        return newStyle;\n    }, [ columnCount, style ]);\n\n    return (\n        <GridContextProvider value={ { isCssGrid: true } }>\n            <Base fullHeight={ fullHeight } classNames={ getClassNames } style={ getStyle } { ...rest } />\n        </GridContextProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}