{"ast":null,"code":"import { AlphaTolerance } from '../../../../../room/object/enum/AlphaTolerance';\nimport { RoomObjectSpriteVisualization } from '../../../../../room/object/visualization/RoomObjectSpriteVisualization';\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\nimport { RoomObjectVisualizationType } from '../../RoomObjectVisualizationType';\nimport { ColorData } from '../data/ColorData';\nimport { LayerData } from '../data/LayerData';\nimport { FurnitureVisualizationData } from './FurnitureVisualizationData';\nexport class FurnitureVisualization extends RoomObjectSpriteVisualization {\n  constructor() {\n    super();\n    this._data = void 0;\n    this._type = void 0;\n    this._direction = void 0;\n    this._lastCameraAngle = void 0;\n    this._selectedColor = void 0;\n    this._furnitureLift = void 0;\n    this._alphaMultiplier = void 0;\n    this._alphaChanged = void 0;\n    this._clickUrl = void 0;\n    this._clickHandling = void 0;\n    this._cacheDirection = void 0;\n    this._cacheScale = void 0;\n    this._cacheSize = void 0;\n    this._layerCount = void 0;\n    this._shadowLayerIndex = void 0;\n    this._updatedLayers = void 0;\n    this._assetNames = void 0;\n    this._spriteTags = void 0;\n    this._spriteInks = void 0;\n    this._spriteAlphas = void 0;\n    this._spriteColors = void 0;\n    this._spriteMouseCaptures = void 0;\n    this._spriteXOffsets = void 0;\n    this._spriteYOffsets = void 0;\n    this._spriteZOffsets = void 0;\n    this._animationNumber = void 0;\n    this._data = null;\n    this._type = null;\n    this._direction = 0;\n    this._lastCameraAngle = NaN;\n    this._selectedColor = 0;\n    this._furnitureLift = 0;\n    this._alphaMultiplier = 1;\n    this._alphaChanged = false;\n    this._clickUrl = null;\n    this._clickHandling = false;\n    this._cacheDirection = -1;\n    this._cacheScale = 0;\n    this._cacheSize = -1;\n    this._layerCount = 0;\n    this._shadowLayerIndex = -1;\n    this._updatedLayers = [];\n    this._assetNames = [];\n    this._spriteTags = [];\n    this._spriteInks = [];\n    this._spriteAlphas = [];\n    this._spriteColors = [];\n    this._spriteMouseCaptures = [];\n    this._spriteXOffsets = [];\n    this._spriteYOffsets = [];\n    this._spriteZOffsets = [];\n    this._animationNumber = 0;\n  }\n\n  initialize(data) {\n    this.reset();\n    if (!(data instanceof FurnitureVisualizationData)) return false;\n    this._type = data.type;\n    this._data = data;\n    return true;\n  }\n\n  dispose() {\n    super.dispose();\n    this._data = null;\n    this._updatedLayers = null;\n    this._assetNames = null;\n    this._spriteTags = null;\n    this._spriteInks = null;\n    this._spriteAlphas = null;\n    this._spriteColors = null;\n    this._spriteMouseCaptures = null;\n    this._spriteXOffsets = null;\n    this._spriteYOffsets = null;\n    this._spriteZOffsets = null;\n  }\n\n  reset() {\n    super.reset();\n    this.setDirection(-1);\n    this._data = null;\n    this._updatedLayers = [];\n    this._assetNames = [];\n    this._spriteTags = [];\n    this._spriteInks = [];\n    this._spriteAlphas = [];\n    this._spriteColors = [];\n    this._spriteMouseCaptures = [];\n    this._spriteXOffsets = [];\n    this._spriteYOffsets = [];\n    this._spriteZOffsets = [];\n    this.createSprites(0);\n  }\n\n  resetLayers(scale, direction) {\n    if (this._cacheDirection === direction && this._cacheScale === scale) return;\n    this._updatedLayers = [];\n    this._assetNames = [];\n    this._spriteTags = [];\n    this._spriteInks = [];\n    this._spriteAlphas = [];\n    this._spriteColors = [];\n    this._spriteMouseCaptures = [];\n    this._spriteXOffsets = [];\n    this._spriteYOffsets = [];\n    this._spriteZOffsets = [];\n    this._cacheDirection = direction;\n    this._cacheScale = scale;\n    this._cacheSize = this.getValidSize(scale);\n    this.setLayerCount((this._data && this._data.getLayerCount(scale) || 0) + this.getAdditionalLayerCount());\n  }\n\n  update(geometry, time, update, skipUpdate) {\n    if (!geometry) return;\n    const scale = geometry.scale;\n    let updateSprites = false;\n    if (this.updateObject(scale, geometry.direction.x)) updateSprites = true;\n    if (this.updateModel(scale)) updateSprites = true;\n    let number = 0;\n\n    if (skipUpdate) {\n      this._animationNumber = this._animationNumber | this.updateAnimation(scale);\n    } else {\n      number = this.updateAnimation(scale) | this._animationNumber;\n      this._animationNumber = 0;\n    }\n\n    if (updateSprites || number !== 0) {\n      this.updateSprites(scale, updateSprites, number);\n      this._scale = scale;\n      this.updateSpriteCounter++;\n    }\n  }\n\n  updateObject(scale, direction) {\n    if (!this.object) return false;\n    if (this.updateObjectCounter === this.object.updateCounter && scale === this._scale && this._lastCameraAngle === direction) return false;\n    let offsetDirection = this.object.getDirection().x - (direction + 135);\n    offsetDirection = (offsetDirection % 360 + 360) % 360;\n\n    if (this._data) {\n      const validDirection = this._data.getValidDirection(scale, offsetDirection);\n\n      this.setDirection(validDirection);\n    }\n\n    this._lastCameraAngle = direction;\n    this._scale = scale;\n    this.updateObjectCounter = this.object.updateCounter;\n    this.resetLayers(scale, this._direction);\n    return true;\n  }\n\n  updateModel(scale) {\n    const model = this.object && this.object.model;\n    if (!model) return false;\n    if (this.updateModelCounter === model.updateCounter) return false;\n    this._selectedColor = model.getValue(RoomObjectVariable.FURNITURE_COLOR);\n    this._clickUrl = model.getValue(RoomObjectVariable.FURNITURE_AD_URL);\n    this._clickHandling = this._clickUrl && this._clickUrl !== '' && this._clickUrl.indexOf('http') === 0 || false;\n    this._furnitureLift = model.getValue(RoomObjectVariable.FURNITURE_LIFT_AMOUNT) || 0;\n    let alphaMultiplier = model.getValue(RoomObjectVariable.FURNITURE_ALPHA_MULTIPLIER);\n    if (isNaN(alphaMultiplier)) alphaMultiplier = 1;\n\n    if (this._alphaMultiplier !== alphaMultiplier) {\n      this._alphaMultiplier = alphaMultiplier;\n      this._alphaChanged = true;\n    }\n\n    this.updateModelCounter = model.updateCounter;\n    return true;\n  }\n\n  updateSprites(scale, update, animation) {\n    if (this._layerCount !== this.totalSprites) this.createSprites(this._layerCount);\n\n    if (update) {\n      let layerId = this.totalSprites - 1;\n\n      while (layerId >= 0) {\n        this.updateSprite(scale, layerId);\n        layerId--;\n      }\n    } else {\n      let layerId = 0;\n\n      while (animation > 0) {\n        if (animation) this.updateSprite(scale, layerId);\n        layerId++;\n        animation = animation >> 1;\n      }\n    }\n\n    this._alphaChanged = false;\n  }\n\n  updateSprite(scale, layerId) {\n    const assetName = this.getSpriteAssetName(scale, layerId);\n    const sprite = this.getSprite(layerId);\n\n    if (assetName && sprite) {\n      const assetData = this.getAsset(assetName, layerId);\n\n      if (assetData && assetData.texture) {\n        sprite.visible = true;\n        sprite.type = this._type;\n        sprite.texture = assetData.texture;\n        sprite.flipH = assetData.flipH;\n        sprite.flipV = assetData.flipV;\n        sprite.direction = this._direction;\n        let relativeDepth = 0;\n\n        if (layerId !== this._shadowLayerIndex) {\n          sprite.tag = this.getLayerTag(scale, this._direction, layerId);\n          sprite.alpha = this.getLayerAlpha(scale, this._direction, layerId);\n          sprite.color = this.getLayerColor(scale, layerId, this._selectedColor);\n          sprite.offsetX = assetData.offsetX + this.getLayerXOffset(scale, this._direction, layerId);\n          sprite.offsetY = assetData.offsetY + this.getLayerYOffset(scale, this._direction, layerId);\n          sprite.blendMode = this.getLayerInk(scale, this._direction, layerId);\n          sprite.alphaTolerance = this.getLayerIgnoreMouse(scale, this._direction, layerId) ? AlphaTolerance.MATCH_NOTHING : AlphaTolerance.MATCH_OPAQUE_PIXELS;\n          relativeDepth = this.getLayerZOffset(scale, this._direction, layerId);\n          relativeDepth = relativeDepth - layerId * 0.001;\n        } else {\n          sprite.offsetX = assetData.offsetX;\n          sprite.offsetY = assetData.offsetY + this.getLayerYOffset(scale, this._direction, layerId);\n          sprite.alpha = 48 * this._alphaMultiplier;\n          sprite.alphaTolerance = AlphaTolerance.MATCH_NOTHING;\n          relativeDepth = 1;\n        }\n\n        sprite.relativeDepth = relativeDepth * FurnitureVisualization.DEPTH_MULTIPLIER;\n        sprite.name = assetName;\n        sprite.libraryAssetName = this.getLibraryAssetNameForSprite(assetData, sprite);\n        sprite.posture = this.getPostureForAsset(scale, assetData.source);\n        sprite.clickHandling = this._clickHandling;\n      } else {\n        this.resetSprite(sprite);\n      }\n    } else {\n      if (sprite) this.resetSprite(sprite);\n    }\n  }\n\n  getLibraryAssetNameForSprite(asset, sprite) {\n    return asset.source;\n  }\n\n  getPostureForAssetFile(scale, _arg_2) {\n    return null;\n  }\n\n  resetSprite(sprite) {\n    if (!sprite) return;\n    sprite.texture = null;\n    sprite.libraryAssetName = '';\n    sprite.posture = '';\n    sprite.tag = '';\n    sprite.offsetX = 0;\n    sprite.offsetY = 0;\n    sprite.flipH = false;\n    sprite.flipV = false;\n    sprite.relativeDepth = 0;\n    sprite.clickHandling = false;\n  }\n\n  getSpriteAssetName(scale, layerId) {\n    if (!this._data || layerId >= FurnitureVisualizationData.LAYER_LETTERS.length) return '';\n    let assetName = this._assetNames[layerId];\n    let updated = this._updatedLayers[layerId];\n\n    if (!assetName || !assetName.length) {\n      assetName = this.cacheSpriteAssetName(scale, layerId, true);\n      updated = this._cacheSize !== 1;\n    }\n\n    if (updated) assetName += this.getFrameNumber(scale, layerId);\n    return assetName;\n  }\n\n  cacheSpriteAssetName(scale, layerId, cache) {\n    const type = this._type;\n    const size = cache ? this._cacheSize : this.getValidSize(scale);\n    let layerCode = '';\n    const isntIcon = size !== 1;\n\n    if (layerId !== this._shadowLayerIndex) {\n      layerCode = FurnitureVisualizationData.LAYER_LETTERS[layerId] || '';\n    } else {\n      layerCode = 'sd';\n    }\n\n    if (layerCode === '') return null;\n    const assetName = this._type + (isntIcon ? '_' + size + '_' + layerCode + '_' + this._direction + '_' : '_icon_' + layerCode);\n\n    if (cache) {\n      this._assetNames[layerId] = assetName;\n      this._updatedLayers[layerId] = isntIcon;\n    }\n\n    return assetName;\n  }\n\n  getLayerTag(scale, direction, layerId) {\n    const existing = this._spriteTags[layerId];\n    if (existing !== undefined) return existing;\n    if (!this._data) return LayerData.DEFAULT_TAG;\n\n    const tag = this._data.getLayerTag(scale, direction, layerId);\n\n    this._spriteTags[layerId] = tag;\n    return tag;\n  }\n\n  getLayerInk(scale, direction, layerId) {\n    const existing = this._spriteInks[layerId];\n    if (existing !== undefined) return existing;\n    if (!this._data) return LayerData.DEFAULT_INK;\n\n    const ink = this._data.getLayerInk(scale, direction, layerId);\n\n    this._spriteInks[layerId] = ink;\n    return ink;\n  }\n\n  getLayerAlpha(scale, direction, layerId) {\n    if (!this._alphaChanged) {\n      const existing = this._spriteAlphas[layerId];\n      if (existing !== undefined) return existing;\n    }\n\n    if (!this._data) return LayerData.DEFAULT_ALPHA;\n\n    let alpha = this._data.getLayerAlpha(scale, direction, layerId);\n\n    if (this._alphaMultiplier !== null) alpha = alpha * this._alphaMultiplier;\n    this._spriteAlphas[layerId] = alpha;\n    return alpha;\n  }\n\n  getLayerColor(scale, layerId, colorId) {\n    const existing = this._spriteColors[layerId];\n    if (existing !== undefined) return existing;\n    if (!this._data) return ColorData.DEFAULT_COLOR;\n\n    const color = this._data.getLayerColor(scale, layerId, colorId);\n\n    this._spriteColors[layerId] = color;\n    return color;\n  }\n\n  getLayerIgnoreMouse(scale, direction, layerId) {\n    const existing = this._spriteMouseCaptures[layerId];\n    if (existing !== undefined) return existing;\n    if (!this._data) return LayerData.DEFAULT_IGNORE_MOUSE;\n\n    const ignoreMouse = this._data.getLayerIgnoreMouse(scale, direction, layerId);\n\n    this._spriteMouseCaptures[layerId] = ignoreMouse;\n    return ignoreMouse;\n  }\n\n  getLayerXOffset(scale, direction, layerId) {\n    const existing = this._spriteXOffsets[layerId];\n    if (existing !== undefined) return existing;\n    if (!this._data) return LayerData.DEFAULT_XOFFSET;\n\n    const xOffset = this._data.getLayerXOffset(scale, direction, layerId);\n\n    this._spriteXOffsets[layerId] = xOffset;\n    return xOffset;\n  }\n\n  getLayerYOffset(scale, direction, layerId) {\n    if (layerId === this._shadowLayerIndex) return Math.ceil(this._furnitureLift * (scale / 2));\n    const existing = this._spriteYOffsets[layerId];\n    if (existing !== undefined) return existing;\n    if (!this._data) return LayerData.DEFAULT_YOFFSET;\n\n    const yOffset = this._data.getLayerYOffset(scale, direction, layerId);\n\n    this._spriteYOffsets[layerId] = yOffset;\n    return yOffset;\n  }\n\n  getLayerZOffset(scale, direction, layerId) {\n    const existing = this._spriteZOffsets[layerId];\n    if (existing !== undefined) return existing;\n    if (!this._data) return LayerData.DEFAULT_ZOFFSET;\n\n    const zOffset = this._data.getLayerZOffset(scale, direction, layerId);\n\n    this._spriteZOffsets[layerId] = zOffset;\n    return zOffset;\n  }\n\n  getValidSize(scale) {\n    if (!this._data) return scale;\n    return this._data.getValidSize(scale);\n  }\n\n  setLayerCount(count) {\n    this._layerCount = count;\n    this._shadowLayerIndex = count - this.getAdditionalLayerCount();\n  }\n\n  setDirection(direction) {\n    if (this._direction === direction) return;\n    this._direction = direction;\n  }\n\n  getAdditionalLayerCount() {\n    return 1;\n  }\n\n  updateAnimation(scale) {\n    return 0;\n  }\n\n  getFrameNumber(scale, layerId) {\n    return 0;\n  }\n\n  getPostureForAsset(scale, name) {\n    return null;\n  }\n\n  getAsset(name) {\n    let layerId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    if (!this.asset) return null;\n    return this.asset.getAsset(name);\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n}\nFurnitureVisualization.DEPTH_MULTIPLIER = Math.sqrt(0.5);\nFurnitureVisualization.TYPE = RoomObjectVisualizationType.FURNITURE_STATIC;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurnitureVisualization.ts"],"names":["AlphaTolerance","RoomObjectSpriteVisualization","RoomObjectVariable","RoomObjectVisualizationType","ColorData","LayerData","FurnitureVisualizationData","FurnitureVisualization","constructor","_data","_type","_direction","_lastCameraAngle","_selectedColor","_furnitureLift","_alphaMultiplier","_alphaChanged","_clickUrl","_clickHandling","_cacheDirection","_cacheScale","_cacheSize","_layerCount","_shadowLayerIndex","_updatedLayers","_assetNames","_spriteTags","_spriteInks","_spriteAlphas","_spriteColors","_spriteMouseCaptures","_spriteXOffsets","_spriteYOffsets","_spriteZOffsets","_animationNumber","NaN","initialize","data","reset","type","dispose","setDirection","createSprites","resetLayers","scale","direction","getValidSize","setLayerCount","getLayerCount","getAdditionalLayerCount","update","geometry","time","skipUpdate","updateSprites","updateObject","x","updateModel","number","updateAnimation","_scale","updateSpriteCounter","object","updateObjectCounter","updateCounter","offsetDirection","getDirection","validDirection","getValidDirection","model","updateModelCounter","getValue","FURNITURE_COLOR","FURNITURE_AD_URL","indexOf","FURNITURE_LIFT_AMOUNT","alphaMultiplier","FURNITURE_ALPHA_MULTIPLIER","isNaN","animation","totalSprites","layerId","updateSprite","assetName","getSpriteAssetName","sprite","getSprite","assetData","getAsset","texture","visible","flipH","flipV","relativeDepth","tag","getLayerTag","alpha","getLayerAlpha","color","getLayerColor","offsetX","getLayerXOffset","offsetY","getLayerYOffset","blendMode","getLayerInk","alphaTolerance","getLayerIgnoreMouse","MATCH_NOTHING","MATCH_OPAQUE_PIXELS","getLayerZOffset","DEPTH_MULTIPLIER","name","libraryAssetName","getLibraryAssetNameForSprite","posture","getPostureForAsset","source","clickHandling","resetSprite","asset","getPostureForAssetFile","_arg_2","LAYER_LETTERS","length","updated","cacheSpriteAssetName","getFrameNumber","cache","size","layerCode","isntIcon","existing","undefined","DEFAULT_TAG","DEFAULT_INK","ink","DEFAULT_ALPHA","colorId","DEFAULT_COLOR","DEFAULT_IGNORE_MOUSE","ignoreMouse","DEFAULT_XOFFSET","xOffset","Math","ceil","DEFAULT_YOFFSET","yOffset","DEFAULT_ZOFFSET","zOffset","count","sqrt","TYPE","FURNITURE_STATIC"],"mappings":"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","sourcesContent":["import { AlphaTolerance } from '../../../../../room/object/enum/AlphaTolerance';\r\nimport { IRoomObjectSprite } from '../../../../../room/object/visualization/IRoomObjectSprite';\r\nimport { IObjectVisualizationData } from '../../../../../room/object/visualization/IRoomObjectVisualizationData';\r\nimport { RoomObjectSpriteVisualization } from '../../../../../room/object/visualization/RoomObjectSpriteVisualization';\r\nimport { IGraphicAsset } from '../../../../../room/object/visualization/utils/IGraphicAsset';\r\nimport { IRoomGeometry } from '../../../../../room/utils/IRoomGeometry';\r\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\r\nimport { RoomObjectVisualizationType } from '../../RoomObjectVisualizationType';\r\nimport { ColorData } from '../data/ColorData';\r\nimport { LayerData } from '../data/LayerData';\r\nimport { FurnitureVisualizationData } from './FurnitureVisualizationData';\r\n\r\nexport class FurnitureVisualization extends RoomObjectSpriteVisualization\r\n{\r\n    protected static DEPTH_MULTIPLIER: number = Math.sqrt(0.5);\r\n\r\n    public static TYPE: string = RoomObjectVisualizationType.FURNITURE_STATIC;\r\n\r\n    protected _data: FurnitureVisualizationData;\r\n\r\n    protected _type: string;\r\n    protected _direction: number;\r\n    protected _lastCameraAngle: number;\r\n    protected _selectedColor: number;\r\n    protected _furnitureLift: number;\r\n    protected _alphaMultiplier: number;\r\n    protected _alphaChanged: boolean;\r\n    protected _clickUrl: string;\r\n    protected _clickHandling: boolean;\r\n\r\n    protected _cacheDirection: number;\r\n    protected _cacheScale: number;\r\n    protected _cacheSize: number;\r\n\r\n    protected _layerCount: number;\r\n    protected _shadowLayerIndex: number;\r\n    protected _updatedLayers: boolean[];\r\n    protected _assetNames: string[];\r\n    protected _spriteTags: string[];\r\n    protected _spriteInks: number[];\r\n    protected _spriteAlphas: number[];\r\n    protected _spriteColors: number[];\r\n    protected _spriteMouseCaptures: boolean[];\r\n    protected _spriteXOffsets: number[];\r\n    protected _spriteYOffsets: number[];\r\n    protected _spriteZOffsets: number[];\r\n\r\n    private _animationNumber: number;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._data = null;\r\n\r\n        this._type = null;\r\n        this._direction = 0;\r\n        this._lastCameraAngle = NaN;\r\n        this._selectedColor = 0;\r\n        this._furnitureLift = 0;\r\n        this._alphaMultiplier = 1;\r\n        this._alphaChanged = false;\r\n        this._clickUrl = null;\r\n        this._clickHandling = false;\r\n\r\n        this._cacheDirection = -1;\r\n        this._cacheScale = 0;\r\n        this._cacheSize = -1;\r\n\r\n        this._layerCount = 0;\r\n        this._shadowLayerIndex = -1;\r\n        this._updatedLayers = [];\r\n        this._assetNames = [];\r\n        this._spriteTags = [];\r\n        this._spriteInks = [];\r\n        this._spriteAlphas = [];\r\n        this._spriteColors = [];\r\n        this._spriteMouseCaptures = [];\r\n        this._spriteXOffsets = [];\r\n        this._spriteYOffsets = [];\r\n        this._spriteZOffsets = [];\r\n\r\n        this._animationNumber = 0;\r\n    }\r\n\r\n    public initialize(data: IObjectVisualizationData): boolean\r\n    {\r\n        this.reset();\r\n\r\n        if(!(data instanceof FurnitureVisualizationData)) return false;\r\n\r\n        this._type = data.type;\r\n        this._data = data;\r\n\r\n        return true;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        super.dispose();\r\n\r\n        this._data = null;\r\n        this._updatedLayers = null;\r\n        this._assetNames = null;\r\n        this._spriteTags = null;\r\n        this._spriteInks = null;\r\n        this._spriteAlphas = null;\r\n        this._spriteColors = null;\r\n        this._spriteMouseCaptures = null;\r\n        this._spriteXOffsets = null;\r\n        this._spriteYOffsets = null;\r\n        this._spriteZOffsets = null;\r\n    }\r\n\r\n    protected reset(): void\r\n    {\r\n        super.reset();\r\n\r\n        this.setDirection(-1);\r\n\r\n        this._data = null;\r\n        this._updatedLayers = [];\r\n        this._assetNames = [];\r\n        this._spriteTags = [];\r\n        this._spriteInks = [];\r\n        this._spriteAlphas = [];\r\n        this._spriteColors = [];\r\n        this._spriteMouseCaptures = [];\r\n        this._spriteXOffsets = [];\r\n        this._spriteYOffsets = [];\r\n        this._spriteZOffsets = [];\r\n\r\n        this.createSprites(0);\r\n    }\r\n\r\n    protected resetLayers(scale: number, direction: number): void\r\n    {\r\n        if((this._cacheDirection === direction) && (this._cacheScale === scale)) return;\r\n\r\n        this._updatedLayers = [];\r\n        this._assetNames = [];\r\n        this._spriteTags = [];\r\n        this._spriteInks = [];\r\n        this._spriteAlphas = [];\r\n        this._spriteColors = [];\r\n        this._spriteMouseCaptures = [];\r\n        this._spriteXOffsets = [];\r\n        this._spriteYOffsets = [];\r\n        this._spriteZOffsets = [];\r\n\r\n        this._cacheDirection = direction;\r\n        this._cacheScale = scale;\r\n        this._cacheSize = this.getValidSize(scale);\r\n\r\n        this.setLayerCount(((this._data && this._data.getLayerCount(scale)) || 0) + this.getAdditionalLayerCount());\r\n    }\r\n\r\n    public update(geometry: IRoomGeometry, time: number, update: boolean, skipUpdate: boolean): void\r\n    {\r\n        if(!geometry) return;\r\n\r\n        const scale = geometry.scale;\r\n        let updateSprites = false;\r\n\r\n        if(this.updateObject(scale, geometry.direction.x)) updateSprites = true;\r\n\r\n        if(this.updateModel(scale)) updateSprites = true;\r\n\r\n        let number = 0;\r\n\r\n        if(skipUpdate)\r\n        {\r\n            this._animationNumber = (this._animationNumber | this.updateAnimation(scale));\r\n        }\r\n        else\r\n        {\r\n            number = this.updateAnimation(scale) | this._animationNumber;\r\n\r\n            this._animationNumber = 0;\r\n        }\r\n\r\n        if(updateSprites || (number !== 0))\r\n        {\r\n            this.updateSprites(scale, updateSprites, number);\r\n\r\n            this._scale = scale;\r\n\r\n            this.updateSpriteCounter++;\r\n        }\r\n    }\r\n\r\n    protected updateObject(scale: number, direction: number): boolean\r\n    {\r\n        if(!this.object) return false;\r\n\r\n        if((this.updateObjectCounter === this.object.updateCounter) && (scale === this._scale) && (this._lastCameraAngle === direction)) return false;\r\n\r\n        let offsetDirection = (this.object.getDirection().x - (direction + 135));\r\n\r\n        offsetDirection = ((((offsetDirection) % 360) + 360) % 360);\r\n\r\n        if(this._data)\r\n        {\r\n            const validDirection = this._data.getValidDirection(scale, offsetDirection);\r\n\r\n            this.setDirection(validDirection);\r\n        }\r\n\r\n        this._lastCameraAngle = direction;\r\n        this._scale = scale;\r\n\r\n        this.updateObjectCounter = this.object.updateCounter;\r\n\r\n        this.resetLayers(scale, this._direction);\r\n\r\n        return true;\r\n    }\r\n\r\n    protected updateModel(scale: number): boolean\r\n    {\r\n        const model = this.object && this.object.model;\r\n\r\n        if(!model) return false;\r\n\r\n        if(this.updateModelCounter === model.updateCounter) return false;\r\n\r\n        this._selectedColor = model.getValue<number>(RoomObjectVariable.FURNITURE_COLOR);\r\n        this._clickUrl = model.getValue<string>(RoomObjectVariable.FURNITURE_AD_URL);\r\n        this._clickHandling = ((this._clickUrl && (this._clickUrl !== '') && (this._clickUrl.indexOf('http') === 0)) || false);\r\n        this._furnitureLift = (model.getValue<number>(RoomObjectVariable.FURNITURE_LIFT_AMOUNT) || 0);\r\n\r\n        let alphaMultiplier = model.getValue<number>(RoomObjectVariable.FURNITURE_ALPHA_MULTIPLIER);\r\n\r\n        if(isNaN(alphaMultiplier)) alphaMultiplier = 1;\r\n\r\n        if(this._alphaMultiplier !== alphaMultiplier)\r\n        {\r\n            this._alphaMultiplier = alphaMultiplier;\r\n\r\n            this._alphaChanged = true;\r\n        }\r\n\r\n        this.updateModelCounter = model.updateCounter;\r\n\r\n        return true;\r\n    }\r\n\r\n    protected updateSprites(scale: number, update: boolean, animation: number): void\r\n    {\r\n        if(this._layerCount !== this.totalSprites) this.createSprites(this._layerCount);\r\n\r\n        if(update)\r\n        {\r\n            let layerId = (this.totalSprites - 1);\r\n\r\n            while(layerId >= 0)\r\n            {\r\n                this.updateSprite(scale, layerId);\r\n\r\n                layerId--;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let layerId = 0;\r\n\r\n            while(animation > 0)\r\n            {\r\n                if(animation) this.updateSprite(scale, layerId);\r\n\r\n                layerId++;\r\n                animation = (animation >> 1);\r\n            }\r\n        }\r\n\r\n        this._alphaChanged = false;\r\n    }\r\n\r\n    protected updateSprite(scale: number, layerId: number): void\r\n    {\r\n        const assetName = this.getSpriteAssetName(scale, layerId);\r\n        const sprite = this.getSprite(layerId);\r\n\r\n        if(assetName && sprite)\r\n        {\r\n            const assetData = this.getAsset(assetName, layerId);\r\n\r\n            if(assetData && assetData.texture)\r\n            {\r\n                sprite.visible = true;\r\n                sprite.type = this._type;\r\n                sprite.texture = assetData.texture;\r\n                sprite.flipH = assetData.flipH;\r\n                sprite.flipV = assetData.flipV;\r\n                sprite.direction = this._direction;\r\n\r\n                let relativeDepth = 0;\r\n\r\n                if(layerId !== this._shadowLayerIndex)\r\n                {\r\n                    sprite.tag = this.getLayerTag(scale, this._direction, layerId);\r\n                    sprite.alpha = this.getLayerAlpha(scale, this._direction, layerId);\r\n                    sprite.color = this.getLayerColor(scale, layerId, this._selectedColor);\r\n                    sprite.offsetX = (assetData.offsetX + this.getLayerXOffset(scale, this._direction, layerId));\r\n                    sprite.offsetY = (assetData.offsetY + this.getLayerYOffset(scale, this._direction, layerId));\r\n                    sprite.blendMode = this.getLayerInk(scale, this._direction, layerId);\r\n                    sprite.alphaTolerance = (this.getLayerIgnoreMouse(scale, this._direction, layerId) ? AlphaTolerance.MATCH_NOTHING : AlphaTolerance.MATCH_OPAQUE_PIXELS);\r\n\r\n                    relativeDepth = this.getLayerZOffset(scale, this._direction, layerId);\r\n                    relativeDepth = (relativeDepth - (layerId * 0.001));\r\n                }\r\n                else\r\n                {\r\n                    sprite.offsetX = assetData.offsetX;\r\n                    sprite.offsetY = (assetData.offsetY + this.getLayerYOffset(scale, this._direction, layerId));\r\n                    sprite.alpha = (48 * this._alphaMultiplier);\r\n                    sprite.alphaTolerance = AlphaTolerance.MATCH_NOTHING;\r\n\r\n                    relativeDepth = 1;\r\n                }\r\n\r\n                sprite.relativeDepth = (relativeDepth * FurnitureVisualization.DEPTH_MULTIPLIER);\r\n                sprite.name = assetName;\r\n                sprite.libraryAssetName = this.getLibraryAssetNameForSprite(assetData, sprite);\r\n                sprite.posture = this.getPostureForAsset(scale, assetData.source);\r\n                sprite.clickHandling = this._clickHandling;\r\n            }\r\n            else\r\n            {\r\n                this.resetSprite(sprite);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(sprite) this.resetSprite(sprite);\r\n        }\r\n    }\r\n\r\n    protected getLibraryAssetNameForSprite(asset: IGraphicAsset, sprite: IRoomObjectSprite): string\r\n    {\r\n        return asset.source;\r\n    }\r\n\r\n    protected getPostureForAssetFile(scale: number, _arg_2: string): string\r\n    {\r\n        return null;\r\n    }\r\n\r\n    private resetSprite(sprite: IRoomObjectSprite): void\r\n    {\r\n        if(!sprite) return;\r\n\r\n        sprite.texture = null;\r\n        sprite.libraryAssetName = '';\r\n        sprite.posture = '';\r\n        sprite.tag = '';\r\n        sprite.offsetX = 0;\r\n        sprite.offsetY = 0;\r\n        sprite.flipH = false;\r\n        sprite.flipV = false;\r\n        sprite.relativeDepth = 0;\r\n        sprite.clickHandling = false;\r\n    }\r\n\r\n    protected getSpriteAssetName(scale: number, layerId: number): string\r\n    {\r\n        if(!this._data || (layerId >= FurnitureVisualizationData.LAYER_LETTERS.length)) return '';\r\n\r\n        let assetName = this._assetNames[layerId];\r\n        let updated = this._updatedLayers[layerId];\r\n\r\n        if(!assetName || !assetName.length)\r\n        {\r\n            assetName = this.cacheSpriteAssetName(scale, layerId, true);\r\n            updated = (this._cacheSize !== 1);\r\n        }\r\n\r\n        if(updated) assetName += this.getFrameNumber(scale, layerId);\r\n\r\n        return assetName;\r\n    }\r\n\r\n    protected cacheSpriteAssetName(scale: number, layerId: number, cache: boolean): string\r\n    {\r\n        const type = this._type;\r\n        const size = (cache) ? this._cacheSize : this.getValidSize(scale);\r\n        let layerCode = '';\r\n        const isntIcon = (size !== 1);\r\n\r\n        if(layerId !== this._shadowLayerIndex)\r\n        {\r\n            layerCode = FurnitureVisualizationData.LAYER_LETTERS[layerId] || '';\r\n        }\r\n        else\r\n        {\r\n            layerCode = 'sd';\r\n        }\r\n\r\n        if(layerCode === '') return null;\r\n\r\n        const assetName = (this._type + ((isntIcon) ? ('_' + size + '_' + layerCode + '_' + this._direction + '_') : ('_icon_' + layerCode)));\r\n\r\n        if(cache)\r\n        {\r\n            this._assetNames[layerId] = assetName;\r\n            this._updatedLayers[layerId] = isntIcon;\r\n        }\r\n\r\n        return assetName;\r\n    }\r\n\r\n    protected getLayerTag(scale: number, direction: number, layerId: number): string\r\n    {\r\n        const existing = this._spriteTags[layerId];\r\n\r\n        if(existing !== undefined) return existing;\r\n\r\n        if(!this._data) return LayerData.DEFAULT_TAG;\r\n\r\n        const tag = this._data.getLayerTag(scale, direction, layerId);\r\n\r\n        this._spriteTags[layerId] = tag;\r\n\r\n        return tag;\r\n    }\r\n\r\n    protected getLayerInk(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const existing = this._spriteInks[layerId];\r\n\r\n        if(existing !== undefined) return existing;\r\n\r\n        if(!this._data) return LayerData.DEFAULT_INK;\r\n\r\n        const ink = this._data.getLayerInk(scale, direction, layerId);\r\n\r\n        this._spriteInks[layerId] = ink;\r\n\r\n        return ink;\r\n    }\r\n\r\n    protected getLayerAlpha(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if(!this._alphaChanged)\r\n        {\r\n            const existing = this._spriteAlphas[layerId];\r\n\r\n            if(existing !== undefined) return existing;\r\n        }\r\n\r\n        if(!this._data) return LayerData.DEFAULT_ALPHA;\r\n\r\n        let alpha = this._data.getLayerAlpha(scale, direction, layerId);\r\n\r\n        if(this._alphaMultiplier !== null) alpha = (alpha * this._alphaMultiplier);\r\n\r\n        this._spriteAlphas[layerId] = alpha;\r\n\r\n        return alpha;\r\n    }\r\n\r\n    protected getLayerColor(scale: number, layerId: number, colorId: number): number\r\n    {\r\n        const existing = this._spriteColors[layerId];\r\n\r\n        if(existing !== undefined) return existing;\r\n\r\n        if(!this._data) return ColorData.DEFAULT_COLOR;\r\n\r\n        const color = this._data.getLayerColor(scale, layerId, colorId);\r\n\r\n        this._spriteColors[layerId] = color;\r\n\r\n        return color;\r\n    }\r\n\r\n    protected getLayerIgnoreMouse(scale: number, direction: number, layerId: number): boolean\r\n    {\r\n        const existing = this._spriteMouseCaptures[layerId];\r\n\r\n        if(existing !== undefined) return existing;\r\n\r\n        if(!this._data) return LayerData.DEFAULT_IGNORE_MOUSE;\r\n\r\n        const ignoreMouse = this._data.getLayerIgnoreMouse(scale, direction, layerId);\r\n\r\n        this._spriteMouseCaptures[layerId] = ignoreMouse;\r\n\r\n        return ignoreMouse;\r\n    }\r\n\r\n    protected getLayerXOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const existing = this._spriteXOffsets[layerId];\r\n\r\n        if(existing !== undefined) return existing;\r\n\r\n        if(!this._data) return LayerData.DEFAULT_XOFFSET;\r\n\r\n        const xOffset = this._data.getLayerXOffset(scale, direction, layerId);\r\n\r\n        this._spriteXOffsets[layerId] = xOffset;\r\n\r\n        return xOffset;\r\n    }\r\n\r\n    protected getLayerYOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if(layerId === this._shadowLayerIndex) return Math.ceil((this._furnitureLift * (scale / 2)));\r\n\r\n        const existing = this._spriteYOffsets[layerId];\r\n\r\n        if(existing !== undefined) return existing;\r\n\r\n        if(!this._data) return LayerData.DEFAULT_YOFFSET;\r\n\r\n        const yOffset = this._data.getLayerYOffset(scale, direction, layerId);\r\n\r\n        this._spriteYOffsets[layerId] = yOffset;\r\n\r\n        return yOffset;\r\n    }\r\n\r\n    protected getLayerZOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        const existing = this._spriteZOffsets[layerId];\r\n\r\n        if(existing !== undefined) return existing;\r\n\r\n        if(!this._data) return LayerData.DEFAULT_ZOFFSET;\r\n\r\n        const zOffset = this._data.getLayerZOffset(scale, direction, layerId);\r\n\r\n        this._spriteZOffsets[layerId] = zOffset;\r\n\r\n        return zOffset;\r\n    }\r\n\r\n    protected getValidSize(scale: number): number\r\n    {\r\n        if(!this._data) return scale;\r\n\r\n        return this._data.getValidSize(scale);\r\n    }\r\n\r\n    protected setLayerCount(count: number): void\r\n    {\r\n        this._layerCount = count;\r\n        this._shadowLayerIndex = count - this.getAdditionalLayerCount();\r\n    }\r\n\r\n    protected setDirection(direction: number): void\r\n    {\r\n        if(this._direction === direction) return;\r\n\r\n        this._direction = direction;\r\n    }\r\n\r\n    protected getAdditionalLayerCount(): number\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    protected updateAnimation(scale: number): number\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    protected getFrameNumber(scale: number, layerId: number): number\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    protected getPostureForAsset(scale: number, name: string): string\r\n    {\r\n        return null;\r\n    }\r\n\r\n    public getAsset(name: string, layerId: number = -1): IGraphicAsset\r\n    {\r\n        if(!this.asset) return null;\r\n\r\n        return this.asset.getAsset(name);\r\n    }\r\n\r\n    protected get direction(): number\r\n    {\r\n        return this._direction;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}