{"ast":null,"code":"import { Vector3d } from '../../../room/utils/Vector3d';\nimport { RoomPlaneMaskData } from './RoomPlaneMaskData';\nexport class RoomPlaneData {\n  constructor(k, _arg_2, _arg_3, _arg_4, _arg_5) {\n    this._type = 0;\n    this._loc = null;\n    this._leftSide = null;\n    this._rightSide = null;\n    this._normal = null;\n    this._normalDirection = null;\n    this._secondaryNormals = void 0;\n    this._masks = void 0;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    let _local_9;\n\n    let _local_10;\n\n    let _local_11;\n\n    let _local_12;\n\n    let _local_13;\n\n    this._secondaryNormals = [];\n    this._masks = [];\n    this._loc = new Vector3d();\n\n    this._loc.assign(_arg_2);\n\n    this._leftSide = new Vector3d();\n\n    this._leftSide.assign(_arg_3);\n\n    this._rightSide = new Vector3d();\n\n    this._rightSide.assign(_arg_4);\n\n    this._type = k;\n\n    if (!(_arg_3 == null) && !(_arg_4 == null)) {\n      this._normal = Vector3d.crossProduct(_arg_3, _arg_4);\n      _local_6 = 0;\n      _local_7 = 0;\n      _local_8 = 0;\n      _local_9 = 0;\n      _local_10 = 0;\n\n      if (!(this.normal.x == 0) || !(this.normal.y == 0)) {\n        _local_9 = this.normal.x;\n        _local_10 = this.normal.y;\n        _local_6 = 360 + Math.atan2(_local_10, _local_9) / Math.PI * 180;\n\n        if (_local_6 >= 360) {\n          _local_6 = _local_6 - 360;\n        }\n\n        _local_9 = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y);\n        _local_10 = this.normal.z;\n        _local_7 = 360 + Math.atan2(_local_10, _local_9) / Math.PI * 180;\n\n        if (_local_7 >= 360) {\n          _local_7 = _local_7 - 360;\n        }\n      } else {\n        if (this.normal.z < 0) {\n          _local_7 = 90;\n        } else {\n          _local_7 = 270;\n        }\n      }\n\n      this._normalDirection = new Vector3d(_local_6, _local_7, _local_8);\n    }\n\n    if (!(_arg_5 == null) && _arg_5.length > 0) {\n      _local_11 = 0;\n\n      while (_local_11 < _arg_5.length) {\n        _local_12 = _arg_5[_local_11];\n\n        if (!(_local_12 == null) && _local_12.length > 0) {\n          _local_13 = new Vector3d();\n\n          _local_13.assign(_local_12);\n\n          _local_13.multiply(1 / _local_13.length);\n\n          this._secondaryNormals.push(_local_13);\n        }\n\n        _local_11++;\n      }\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get loc() {\n    return this._loc;\n  }\n\n  get leftSide() {\n    return this._leftSide;\n  }\n\n  get rightSide() {\n    return this._rightSide;\n  }\n\n  get normal() {\n    return this._normal;\n  }\n\n  get normalDirection() {\n    return this._normalDirection;\n  }\n\n  get secondaryNormalCount() {\n    return this._secondaryNormals.length;\n  }\n\n  get maskCount() {\n    return this._masks.length;\n  }\n\n  getSecondaryNormal(k) {\n    if (k < 0 || k >= this.secondaryNormalCount) {\n      return null;\n    }\n\n    const _local_2 = new Vector3d();\n\n    _local_2.assign(this._secondaryNormals[k]);\n\n    return _local_2;\n  }\n\n  addMask(k, _arg_2, _arg_3, _arg_4) {\n    const _local_5 = new RoomPlaneMaskData(k, _arg_2, _arg_3, _arg_4);\n\n    this._masks.push(_local_5);\n  }\n\n  getMask(k) {\n    if (k < 0 || k >= this.maskCount) {\n      return null;\n    }\n\n    return this._masks[k];\n  }\n\n  getMaskLeftSideLoc(k) {\n    const _local_2 = this.getMask(k);\n\n    if (_local_2 != null) {\n      return _local_2.leftSideLoc;\n    }\n\n    return -1;\n  }\n\n  getMaskRightSideLoc(k) {\n    const _local_2 = this.getMask(k);\n\n    if (_local_2 != null) {\n      return _local_2.rightSideLoc;\n    }\n\n    return -1;\n  }\n\n  getMaskLeftSideLength(k) {\n    const _local_2 = this.getMask(k);\n\n    if (_local_2 != null) {\n      return _local_2.leftSideLength;\n    }\n\n    return -1;\n  }\n\n  getMaskRightSideLength(k) {\n    const _local_2 = this.getMask(k);\n\n    if (_local_2 != null) {\n      return _local_2.rightSideLength;\n    }\n\n    return -1;\n  }\n\n}\nRoomPlaneData.PLANE_UNDEFINED = 0;\nRoomPlaneData.PLANE_FLOOR = 1;\nRoomPlaneData.PLANE_WALL = 2;\nRoomPlaneData.PLANE_LANDSCAPE = 3;\nRoomPlaneData.PLANE_BILLBOARD = 4;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/RoomPlaneData.ts"],"names":["Vector3d","RoomPlaneMaskData","RoomPlaneData","constructor","k","_arg_2","_arg_3","_arg_4","_arg_5","_type","_loc","_leftSide","_rightSide","_normal","_normalDirection","_secondaryNormals","_masks","_local_6","_local_7","_local_8","_local_9","_local_10","_local_11","_local_12","_local_13","assign","crossProduct","normal","x","y","Math","atan2","PI","sqrt","z","length","multiply","push","type","loc","leftSide","rightSide","normalDirection","secondaryNormalCount","maskCount","getSecondaryNormal","_local_2","addMask","_local_5","getMask","getMaskLeftSideLoc","leftSideLoc","getMaskRightSideLoc","rightSideLoc","getMaskLeftSideLength","leftSideLength","getMaskRightSideLength","rightSideLength","PLANE_UNDEFINED","PLANE_FLOOR","PLANE_WALL","PLANE_LANDSCAPE","PLANE_BILLBOARD"],"mappings":"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","sourcesContent":["import { IVector3D } from '../../../room/utils/IVector3D';\r\nimport { Vector3d } from '../../../room/utils/Vector3d';\r\nimport { RoomPlaneMaskData } from './RoomPlaneMaskData';\r\n\r\nexport class RoomPlaneData\r\n{\r\n    public static PLANE_UNDEFINED: number = 0;\r\n    public static PLANE_FLOOR: number = 1;\r\n    public static PLANE_WALL: number = 2;\r\n    public static PLANE_LANDSCAPE: number = 3;\r\n    public static PLANE_BILLBOARD: number = 4;\r\n\r\n    private _type: number = 0;\r\n    private _loc: Vector3d = null;\r\n    private _leftSide: Vector3d = null;\r\n    private _rightSide: Vector3d = null;\r\n    private _normal: Vector3d = null;\r\n    private _normalDirection: Vector3d = null;\r\n    private _secondaryNormals: Vector3d[];\r\n    private _masks: RoomPlaneMaskData[];\r\n\r\n    constructor(k: number, _arg_2: IVector3D, _arg_3: IVector3D, _arg_4: IVector3D, _arg_5: IVector3D[])\r\n    {\r\n        let _local_6: number;\r\n        let _local_7: number;\r\n        let _local_8: number;\r\n        let _local_9: number;\r\n        let _local_10: number;\r\n        let _local_11: number;\r\n        let _local_12: IVector3D;\r\n        let _local_13: Vector3d;\r\n        this._secondaryNormals = [];\r\n        this._masks = [];\r\n        this._loc = new Vector3d();\r\n        this._loc.assign(_arg_2);\r\n        this._leftSide = new Vector3d();\r\n        this._leftSide.assign(_arg_3);\r\n        this._rightSide = new Vector3d();\r\n        this._rightSide.assign(_arg_4);\r\n        this._type = k;\r\n        if(((!(_arg_3 == null)) && (!(_arg_4 == null))))\r\n        {\r\n            this._normal = Vector3d.crossProduct(_arg_3, _arg_4);\r\n            _local_6 = 0;\r\n            _local_7 = 0;\r\n            _local_8 = 0;\r\n            _local_9 = 0;\r\n            _local_10 = 0;\r\n            if(((!(this.normal.x == 0)) || (!(this.normal.y == 0))))\r\n            {\r\n                _local_9 = this.normal.x;\r\n                _local_10 = this.normal.y;\r\n                _local_6 = (360 + ((Math.atan2(_local_10, _local_9) / Math.PI) * 180));\r\n                if(_local_6 >= 360)\r\n                {\r\n                    _local_6 = (_local_6 - 360);\r\n                }\r\n                _local_9 = Math.sqrt(((this.normal.x * this.normal.x) + (this.normal.y * this.normal.y)));\r\n                _local_10 = this.normal.z;\r\n                _local_7 = (360 + ((Math.atan2(_local_10, _local_9) / Math.PI) * 180));\r\n                if(_local_7 >= 360)\r\n                {\r\n                    _local_7 = (_local_7 - 360);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(this.normal.z < 0)\r\n                {\r\n                    _local_7 = 90;\r\n                }\r\n                else\r\n                {\r\n                    _local_7 = 270;\r\n                }\r\n            }\r\n            this._normalDirection = new Vector3d(_local_6, _local_7, _local_8);\r\n        }\r\n        if(((!(_arg_5 == null)) && (_arg_5.length > 0)))\r\n        {\r\n            _local_11 = 0;\r\n            while(_local_11 < _arg_5.length)\r\n            {\r\n                _local_12 = _arg_5[_local_11];\r\n                if(((!(_local_12 == null)) && (_local_12.length > 0)))\r\n                {\r\n                    _local_13 = new Vector3d();\r\n                    _local_13.assign(_local_12);\r\n                    _local_13.multiply((1 / _local_13.length));\r\n                    this._secondaryNormals.push(_local_13);\r\n                }\r\n                _local_11++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get type(): number\r\n    {\r\n        return this._type;\r\n    }\r\n\r\n    public get loc(): IVector3D\r\n    {\r\n        return this._loc;\r\n    }\r\n\r\n    public get leftSide(): IVector3D\r\n    {\r\n        return this._leftSide;\r\n    }\r\n\r\n    public get rightSide(): IVector3D\r\n    {\r\n        return this._rightSide;\r\n    }\r\n\r\n    public get normal(): IVector3D\r\n    {\r\n        return this._normal;\r\n    }\r\n\r\n    public get normalDirection(): IVector3D\r\n    {\r\n        return this._normalDirection;\r\n    }\r\n\r\n    public get secondaryNormalCount(): number\r\n    {\r\n        return this._secondaryNormals.length;\r\n    }\r\n\r\n    public get maskCount(): number\r\n    {\r\n        return this._masks.length;\r\n    }\r\n\r\n    public getSecondaryNormal(k: number): IVector3D\r\n    {\r\n        if(((k < 0) || (k >= this.secondaryNormalCount)))\r\n        {\r\n            return null;\r\n        }\r\n        const _local_2:Vector3d = new Vector3d();\r\n        _local_2.assign((this._secondaryNormals[k] as IVector3D));\r\n        return _local_2;\r\n    }\r\n\r\n    public addMask(k: number, _arg_2: number, _arg_3: number, _arg_4: number): void\r\n    {\r\n        const _local_5:RoomPlaneMaskData = new RoomPlaneMaskData(k, _arg_2, _arg_3, _arg_4);\r\n        this._masks.push(_local_5);\r\n    }\r\n\r\n    private getMask(k: number):RoomPlaneMaskData\r\n    {\r\n        if(((k < 0) || (k >= this.maskCount)))\r\n        {\r\n            return null;\r\n        }\r\n        return this._masks[k];\r\n    }\r\n\r\n    public getMaskLeftSideLoc(k: number): number\r\n    {\r\n        const _local_2:RoomPlaneMaskData = this.getMask(k);\r\n        if(_local_2 != null)\r\n        {\r\n            return _local_2.leftSideLoc;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public getMaskRightSideLoc(k: number): number\r\n    {\r\n        const _local_2:RoomPlaneMaskData = this.getMask(k);\r\n        if(_local_2 != null)\r\n        {\r\n            return _local_2.rightSideLoc;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public getMaskLeftSideLength(k: number): number\r\n    {\r\n        const _local_2:RoomPlaneMaskData = this.getMask(k);\r\n        if(_local_2 != null)\r\n        {\r\n            return _local_2.leftSideLength;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public getMaskRightSideLength(k: number): number\r\n    {\r\n        const _local_2:RoomPlaneMaskData = this.getMask(k);\r\n        if(_local_2 != null)\r\n        {\r\n            return _local_2.rightSideLength;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}