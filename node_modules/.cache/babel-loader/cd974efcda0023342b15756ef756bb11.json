{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/notification-center/NotificationCenterView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { NotificationAlertItem, NotificationBubbleItem, NotificationBubbleType, NotificationConfirmItem } from '../../api';\nimport { Column } from '../../common';\nimport { NotificationAlertEvent, NotificationBubbleEvent, NotificationConfirmEvent } from '../../events';\nimport { UseUiEvent } from '../../hooks';\nimport { NotificationCenterMessageHandler } from './NotificationCenterMessageHandler';\nimport { GetAlertLayout } from './views/alert-layouts/GetAlertLayout';\nimport { GetBubbleLayout } from './views/bubble-layouts/GetBubbleLayout';\nimport { GetConfirmLayout } from './views/confirm-layouts/GetConfirmLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const NotificationCenterView = props => {\n  _s();\n\n  const [alerts, setAlerts] = useState([]);\n  const [bubbleAlerts, setBubbleAlerts] = useState([]);\n  const [confirms, setConfirms] = useState([]);\n  const onNotificationAlertEvent = useCallback(event => {\n    const alertItem = new NotificationAlertItem(event.messages, event.alertType, event.clickUrl, event.clickUrlText, event.title, event.imageUrl);\n    setAlerts(prevValue => [alertItem, ...prevValue]);\n  }, []);\n  UseUiEvent(NotificationAlertEvent.ALERT, onNotificationAlertEvent);\n  const onNotificationBubbleEvent = useCallback(event => {\n    const notificationItem = new NotificationBubbleItem(event.message, event.notificationType, event.imageUrl, event.linkUrl);\n    setBubbleAlerts(prevValue => [notificationItem, ...prevValue]);\n  }, []);\n  UseUiEvent(NotificationBubbleEvent.NEW_BUBBLE, onNotificationBubbleEvent);\n  const onNotificationConfirmEvent = useCallback(event => {\n    const confirmItem = new NotificationConfirmItem(event.type, event.message, event.onConfirm, event.onCancel, event.confirmText, event.cancelText, event.title);\n    setConfirms(prevValue => [confirmItem, ...prevValue]);\n  }, []);\n  UseUiEvent(NotificationConfirmEvent.CONFIRM, onNotificationConfirmEvent);\n  const closeAlert = useCallback(alert => {\n    setAlerts(prevValue => {\n      const newAlerts = [...prevValue];\n      const index = newAlerts.findIndex(value => alert === value);\n      if (index >= 0) newAlerts.splice(index, 1);\n      return newAlerts;\n    });\n  }, []);\n  const closeBubbleAlert = useCallback(item => {\n    setBubbleAlerts(prevValue => {\n      const newAlerts = [...prevValue];\n      const index = newAlerts.findIndex(value => item === value);\n      if (index >= 0) newAlerts.splice(index, 1);\n      return newAlerts;\n    });\n  }, []);\n  const closeConfirm = useCallback(item => {\n    setConfirms(prevValue => {\n      const newConfirms = [...prevValue];\n      const index = newConfirms.findIndex(value => item === value);\n      if (index >= 0) newConfirms.splice(index, 1);\n      return newConfirms;\n    });\n  }, []);\n  const getAlerts = useMemo(() => {\n    if (!alerts || !alerts.length) return null;\n    const elements = [];\n\n    for (const alert of alerts) {\n      const element = GetAlertLayout(alert, () => closeAlert(alert));\n      elements.push(element);\n    }\n\n    return elements;\n  }, [alerts, closeAlert]);\n  const getBubbleAlerts = useMemo(() => {\n    if (!bubbleAlerts || !bubbleAlerts.length) return null;\n    const elements = [];\n\n    for (const alert of bubbleAlerts) {\n      const element = GetBubbleLayout(alert, () => closeBubbleAlert(alert));\n\n      if (alert.notificationType === NotificationBubbleType.CLUBGIFT) {\n        elements.unshift(element);\n        continue;\n      }\n\n      elements.push(element);\n    }\n\n    return elements;\n  }, [bubbleAlerts, closeBubbleAlert]);\n  const getConfirms = useMemo(() => {\n    if (!confirms || !confirms.length) return null;\n    const elements = [];\n\n    for (const confirm of confirms) {\n      const element = GetConfirmLayout(confirm, () => closeConfirm(confirm));\n      elements.push(element);\n    }\n\n    return elements;\n  }, [confirms, closeConfirm]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotificationCenterMessageHandler, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      gap: 1,\n      children: getBubbleAlerts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), getConfirms, getAlerts]\n  }, void 0, true);\n};\n\n_s(NotificationCenterView, \"cs4legyBgEbyJhJcvSF02PvBeGw=\");\n\n_c = NotificationCenterView;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationCenterView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/notification-center/NotificationCenterView.tsx"],"names":["useCallback","useMemo","useState","NotificationAlertItem","NotificationBubbleItem","NotificationBubbleType","NotificationConfirmItem","Column","NotificationAlertEvent","NotificationBubbleEvent","NotificationConfirmEvent","UseUiEvent","NotificationCenterMessageHandler","GetAlertLayout","GetBubbleLayout","GetConfirmLayout","NotificationCenterView","props","alerts","setAlerts","bubbleAlerts","setBubbleAlerts","confirms","setConfirms","onNotificationAlertEvent","event","alertItem","messages","alertType","clickUrl","clickUrlText","title","imageUrl","prevValue","ALERT","onNotificationBubbleEvent","notificationItem","message","notificationType","linkUrl","NEW_BUBBLE","onNotificationConfirmEvent","confirmItem","type","onConfirm","onCancel","confirmText","cancelText","CONFIRM","closeAlert","alert","newAlerts","index","findIndex","value","splice","closeBubbleAlert","item","closeConfirm","newConfirms","getAlerts","length","elements","element","push","getBubbleAlerts","CLUBGIFT","unshift","getConfirms","confirm"],"mappings":"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","sourcesContent":["import { FC, ReactNode, useCallback, useMemo, useState } from 'react';\nimport { NotificationAlertItem, NotificationBubbleItem, NotificationBubbleType, NotificationConfirmItem } from '../../api';\nimport { Column } from '../../common';\nimport { NotificationAlertEvent, NotificationBubbleEvent, NotificationConfirmEvent } from '../../events';\nimport { UseUiEvent } from '../../hooks';\nimport { NotificationCenterMessageHandler } from './NotificationCenterMessageHandler';\nimport { GetAlertLayout } from './views/alert-layouts/GetAlertLayout';\nimport { GetBubbleLayout } from './views/bubble-layouts/GetBubbleLayout';\nimport { GetConfirmLayout } from './views/confirm-layouts/GetConfirmLayout';\n\nexport const NotificationCenterView: FC<{}> = props =>\n{\n    const [ alerts, setAlerts ] = useState<NotificationAlertItem[]>([]);\n    const [ bubbleAlerts, setBubbleAlerts ] = useState<NotificationBubbleItem[]>([]);\n    const [ confirms, setConfirms ] = useState<NotificationConfirmItem[]>([]);\n\n    const onNotificationAlertEvent = useCallback((event: NotificationAlertEvent) =>\n    {\n        const alertItem = new NotificationAlertItem(event.messages, event.alertType, event.clickUrl, event.clickUrlText, event.title, event.imageUrl);\n\n        setAlerts(prevValue => [ alertItem, ...prevValue ]);\n    }, []);\n\n    UseUiEvent(NotificationAlertEvent.ALERT, onNotificationAlertEvent);\n\n    const onNotificationBubbleEvent = useCallback((event: NotificationBubbleEvent) =>\n    {\n        const notificationItem = new NotificationBubbleItem(event.message, event.notificationType, event.imageUrl, event.linkUrl);\n\n        setBubbleAlerts(prevValue => [ notificationItem, ...prevValue ]);\n    }, []);\n\n    UseUiEvent(NotificationBubbleEvent.NEW_BUBBLE, onNotificationBubbleEvent);\n\n    const onNotificationConfirmEvent = useCallback((event: NotificationConfirmEvent) =>\n    {\n        const confirmItem = new NotificationConfirmItem(event.type, event.message, event.onConfirm, event.onCancel, event.confirmText, event.cancelText, event.title);\n\n        setConfirms(prevValue => [ confirmItem, ...prevValue ]);\n    }, []);\n\n    UseUiEvent(NotificationConfirmEvent.CONFIRM, onNotificationConfirmEvent);\n\n    const closeAlert = useCallback((alert: NotificationAlertItem) =>\n    {\n        setAlerts(prevValue =>\n        {\n            const newAlerts = [ ...prevValue ];\n            const index = newAlerts.findIndex(value => (alert === value));\n\n            if(index >= 0) newAlerts.splice(index, 1);\n\n            return newAlerts;\n        });\n    }, []);\n\n    const closeBubbleAlert = useCallback((item: NotificationBubbleItem) =>\n    {\n        setBubbleAlerts(prevValue =>\n        {\n            const newAlerts = [ ...prevValue ];\n            const index = newAlerts.findIndex(value => (item === value));\n\n            if(index >= 0) newAlerts.splice(index, 1);\n\n            return newAlerts;\n        })\n    }, []);\n\n    const closeConfirm = useCallback((item: NotificationConfirmItem) =>\n    {\n        setConfirms(prevValue =>\n        {\n            const newConfirms = [ ...prevValue ];\n            const index = newConfirms.findIndex(value => (item === value));\n\n            if(index >= 0) newConfirms.splice(index, 1);\n\n            return newConfirms;\n        })\n    }, []);\n\n    const getAlerts = useMemo(() =>\n    {\n        if(!alerts || !alerts.length) return null;\n\n        const elements: ReactNode[] = [];\n\n        for(const alert of alerts)\n        {\n            const element = GetAlertLayout(alert, () => closeAlert(alert));\n\n            elements.push(element);\n        }\n\n        return elements;\n    }, [ alerts, closeAlert ]);\n\n    const getBubbleAlerts = useMemo(() =>\n    {\n        if(!bubbleAlerts || !bubbleAlerts.length) return null;\n\n        const elements: ReactNode[] = [];\n\n        for(const alert of bubbleAlerts)\n        {\n            const element = GetBubbleLayout(alert, () => closeBubbleAlert(alert));\n\n            if(alert.notificationType === NotificationBubbleType.CLUBGIFT)\n            {\n                elements.unshift(element);\n\n                continue;\n            }\n\n            elements.push(element);\n        }\n\n        return elements;\n    }, [ bubbleAlerts, closeBubbleAlert ]);\n\n    const getConfirms = useMemo(() =>\n    {\n        if(!confirms || !confirms.length) return null;\n\n        const elements: ReactNode[] = [];\n\n        for(const confirm of confirms)\n        {\n            const element = GetConfirmLayout(confirm, () => closeConfirm(confirm));\n\n            elements.push(element);\n        }\n\n        return elements;\n    }, [ confirms, closeConfirm ]);\n\n    return (\n        <>\n            <NotificationCenterMessageHandler />\n            <Column gap={ 1 }>\n                { getBubbleAlerts }\n            </Column>\n            { getConfirms }\n            { getAlerts }\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}