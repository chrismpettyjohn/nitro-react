{"ast":null,"code":"export class RoomHeightMapParser {\n  constructor() {\n    this._width = void 0;\n    this._height = void 0;\n    this._heights = void 0;\n  }\n\n  static decodeTileHeight(height) {\n    return height < 0 ? -1 : (height & 16383) / 0x0100;\n  }\n\n  static decodeIsStackingBlocked(height) {\n    return !!(height & 0x4000);\n  }\n\n  static decodeIsRoomTile(height) {\n    return height >= 0;\n  }\n\n  getTileHeight(x, y) {\n    if (x < 0 || x >= this._width || y < 0 || y >= this._height) return -1;\n    return RoomHeightMapParser.decodeTileHeight(this._heights[y * this._width + x]);\n  }\n\n  getStackingBlocked(x, y) {\n    if (x < 0 || x >= this._width || y < 0 || y >= this._height) return true;\n    return RoomHeightMapParser.decodeIsStackingBlocked(this._heights[y * this._width + x]);\n  }\n\n  isRoomTile(x, y) {\n    if (x < 0 || x >= this._width || y < 0 || y >= this._height) return false;\n    return RoomHeightMapParser.decodeIsRoomTile(this._heights[y * this._width + x]);\n  }\n\n  flush() {\n    this._width = 0;\n    this._height = 0;\n    this._heights = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    this._width = wrapper.readInt();\n    const totalTiles = wrapper.readInt();\n    this._height = totalTiles / this._width;\n    let i = 0;\n\n    while (i < totalTiles) {\n      this._heights[i] = wrapper.readShort();\n      i++;\n    }\n\n    return true;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get heights() {\n    return this._heights;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/room/mapping/RoomHeightMapParser.ts"],"names":["RoomHeightMapParser","_width","_height","_heights","decodeTileHeight","height","decodeIsStackingBlocked","decodeIsRoomTile","getTileHeight","x","y","getStackingBlocked","isRoomTile","flush","parse","wrapper","readInt","totalTiles","i","readShort","width","heights"],"mappings":"AAEA,OAAO,MAAMA,mBAAN,CACP;AAAA;AAAA,SACYC,MADZ;AAAA,SAEYC,OAFZ;AAAA,SAGYC,QAHZ;AAAA;;AAKkC,SAAhBC,gBAAgB,CAACC,MAAD,EAC9B;AACI,WAASA,MAAM,GAAG,CAAV,GAAe,CAAC,CAAhB,GAAqB,CAACA,MAAM,GAAG,KAAV,IAAmB,MAAhD;AACH;;AAEoC,SAAvBC,uBAAuB,CAACD,MAAD,EACrC;AACI,WAAO,CAAC,EAAEA,MAAM,GAAG,MAAX,CAAR;AACH;;AAE6B,SAAhBE,gBAAgB,CAACF,MAAD,EAC9B;AACI,WAAOA,MAAM,IAAI,CAAjB;AACH;;AAEMG,EAAAA,aAAa,CAACC,CAAD,EAAYC,CAAZ,EACpB;AACI,QAAID,CAAC,GAAG,CAAL,IAAYA,CAAC,IAAI,KAAKR,MAAtB,IAAkCS,CAAC,GAAG,CAAtC,IAA6CA,CAAC,IAAI,KAAKR,OAA1D,EAAoE,OAAO,CAAC,CAAR;AAEpE,WAAOF,mBAAmB,CAACI,gBAApB,CAAqC,KAAKD,QAAL,CAAgBO,CAAC,GAAG,KAAKT,MAAV,GAAoBQ,CAAnC,CAArC,CAAP;AACH;;AAEME,EAAAA,kBAAkB,CAACF,CAAD,EAAYC,CAAZ,EACzB;AACI,QAAID,CAAC,GAAG,CAAL,IAAYA,CAAC,IAAI,KAAKR,MAAtB,IAAkCS,CAAC,GAAG,CAAtC,IAA6CA,CAAC,IAAI,KAAKR,OAA1D,EAAoE,OAAO,IAAP;AAEpE,WAAOF,mBAAmB,CAACM,uBAApB,CAA4C,KAAKH,QAAL,CAAgBO,CAAC,GAAG,KAAKT,MAAV,GAAoBQ,CAAnC,CAA5C,CAAP;AACH;;AAEMG,EAAAA,UAAU,CAACH,CAAD,EAAYC,CAAZ,EACjB;AACI,QAAID,CAAC,GAAG,CAAL,IAAYA,CAAC,IAAI,KAAKR,MAAtB,IAAkCS,CAAC,GAAG,CAAtC,IAA6CA,CAAC,IAAI,KAAKR,OAA1D,EAAoE,OAAO,KAAP;AAEpE,WAAOF,mBAAmB,CAACO,gBAApB,CAAqC,KAAKJ,QAAL,CAAgBO,CAAC,GAAG,KAAKT,MAAV,GAAoBQ,CAAnC,CAArC,CAAP;AACH;;AAEMI,EAAAA,KAAK,GACZ;AACI,SAAKZ,MAAL,GAAc,CAAd;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AAEA,WAAO,IAAP;AACH;;AAEMW,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,SAAKd,MAAL,GAAcc,OAAO,CAACC,OAAR,EAAd;AACA,UAAMC,UAAU,GAAGF,OAAO,CAACC,OAAR,EAAnB;AACA,SAAKd,OAAL,GAAee,UAAU,GAAG,KAAKhB,MAAjC;AAEA,QAAIiB,CAAC,GAAG,CAAR;;AAEA,WAAMA,CAAC,GAAGD,UAAV,EACA;AACI,WAAKd,QAAL,CAAce,CAAd,IAAmBH,OAAO,CAACI,SAAR,EAAnB;AAEAD,MAAAA,CAAC;AACJ;;AAED,WAAO,IAAP;AACH;;AAEe,MAALE,KAAK,GAChB;AACI,WAAO,KAAKnB,MAAZ;AACH;;AAEgB,MAANI,MAAM,GACjB;AACI,WAAO,KAAKH,OAAZ;AACH;;AAEiB,MAAPmB,OAAO,GAClB;AACI,WAAO,KAAKlB,QAAZ;AACH;;AAnFL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\n\r\nexport class RoomHeightMapParser implements IMessageParser\r\n{\r\n    private _width: number;\r\n    private _height: number;\r\n    private _heights: number[];\r\n\r\n    public static decodeTileHeight(height: number): number\r\n    {\r\n        return ((height < 0) ? -1 : ((height & 16383) / 0x0100));\r\n    }\r\n\r\n    public static decodeIsStackingBlocked(height: number): boolean\r\n    {\r\n        return !!(height & 0x4000);\r\n    }\r\n\r\n    public static decodeIsRoomTile(height: number): boolean\r\n    {\r\n        return height >= 0;\r\n    }\r\n\r\n    public getTileHeight(x: number, y: number): number\r\n    {\r\n        if((x < 0) || (x >= this._width) || (y < 0) || (y >= this._height)) return -1;\r\n\r\n        return RoomHeightMapParser.decodeTileHeight(this._heights[((y * this._width) + x)]);\r\n    }\r\n\r\n    public getStackingBlocked(x: number, y: number): boolean\r\n    {\r\n        if((x < 0) || (x >= this._width) || (y < 0) || (y >= this._height)) return true;\r\n\r\n        return RoomHeightMapParser.decodeIsStackingBlocked(this._heights[((y * this._width) + x)]);\r\n    }\r\n\r\n    public isRoomTile(x: number, y: number): boolean\r\n    {\r\n        if((x < 0) || (x >= this._width) || (y < 0) || (y >= this._height)) return false;\r\n\r\n        return RoomHeightMapParser.decodeIsRoomTile(this._heights[((y * this._width) + x)]);\r\n    }\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._heights = [];\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        this._width = wrapper.readInt();\r\n        const totalTiles = wrapper.readInt();\r\n        this._height = totalTiles / this._width;\r\n\r\n        let i = 0;\r\n\r\n        while(i < totalTiles)\r\n        {\r\n            this._heights[i] = wrapper.readShort();\r\n\r\n            i++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get width(): number\r\n    {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number\r\n    {\r\n        return this._height;\r\n    }\r\n\r\n    public get heights(): number[]\r\n    {\r\n        return this._heights;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}