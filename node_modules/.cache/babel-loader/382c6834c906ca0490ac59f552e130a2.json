{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/room/widgets/infostand/InfoStandWidgetUserRelationshipsView.tsx\";\nimport { RelationshipStatusEnum } from '@nitrots/nitro-renderer';\nimport { GetUserProfile, LocalizeText } from '../../../../api';\nimport { Flex, Text } from '../../../../common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const InfoStandWidgetUserRelationshipsView = props => {\n  const {\n    relationships = null\n  } = props;\n\n  const RelationshipComponent = _ref => {\n    let {\n      type\n    } = _ref;\n    const relationshipInfo = relationships && relationships.relationshipStatusMap.hasKey(type) ? relationships.relationshipStatusMap.getValue(type) : null;\n    if (!relationshipInfo || !relationshipInfo.friendCount) return null;\n    const relationshipName = RelationshipStatusEnum.RELATIONSHIP_NAMES[type].toLocaleLowerCase();\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      gap: 1,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: `nitro-friends-spritesheet icon-${relationshipName}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        gap: 0,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          gfbold: true,\n          variant: \"white\",\n          onClick: event => GetUserProfile(relationshipInfo.randomFriendId),\n          children: [/*#__PURE__*/_jsxDEV(\"u\", {\n            children: relationshipInfo.randomFriendName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this), relationshipInfo.friendCount > 1 && ' ' + LocalizeText(`extendedprofile.relstatus.others.${relationshipName}`, ['count'], [(relationshipInfo.friendCount - 1).toString()])]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(RelationshipComponent, {\n      type: RelationshipStatusEnum.HEART\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RelationshipComponent, {\n      type: RelationshipStatusEnum.SMILE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RelationshipComponent, {\n      type: RelationshipStatusEnum.BOBBA\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = InfoStandWidgetUserRelationshipsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoStandWidgetUserRelationshipsView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/room/widgets/infostand/InfoStandWidgetUserRelationshipsView.tsx"],"names":["RelationshipStatusEnum","GetUserProfile","LocalizeText","Flex","Text","InfoStandWidgetUserRelationshipsView","props","relationships","RelationshipComponent","type","relationshipInfo","relationshipStatusMap","hasKey","getValue","friendCount","relationshipName","RELATIONSHIP_NAMES","toLocaleLowerCase","event","randomFriendId","randomFriendName","toString","HEART","SMILE","BOBBA"],"mappings":";AAAA,SAASA,sBAAT,QAA4E,yBAA5E;AAEA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,iBAA7C;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,oBAA3B;;;AAYA,OAAO,MAAMC,oCAAmF,GAAGC,KAAK,IACxG;AACI,QAAM;AAAEC,IAAAA,aAAa,GAAG;AAAlB,MAA2BD,KAAjC;;AAEA,QAAME,qBAAqB,GAAG,QAC9B;AAAA,QAD+B;AAAEC,MAAAA;AAAF,KAC/B;AACI,UAAMC,gBAAgB,GAAIH,aAAa,IAAIA,aAAa,CAACI,qBAAd,CAAoCC,MAApC,CAA2CH,IAA3C,CAAlB,GAAsEF,aAAa,CAACI,qBAAd,CAAoCE,QAApC,CAA6CJ,IAA7C,CAAtE,GAA2H,IAApJ;AAEA,QAAG,CAACC,gBAAD,IAAqB,CAACA,gBAAgB,CAACI,WAA1C,EAAuD,OAAO,IAAP;AAEvD,UAAMC,gBAAgB,GAAGf,sBAAsB,CAACgB,kBAAvB,CAA0CP,IAA1C,EAAgDQ,iBAAhD,EAAzB;AAEA,wBACI,QAAC,IAAD;AAAM,MAAA,UAAU,EAAC,QAAjB;AAA0B,MAAA,GAAG,EAAG,CAAhC;AAAA,8BACI;AAAG,QAAA,SAAS,EAAI,kCAAkCF,gBAAkB;AAApE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAM,QAAA,UAAU,EAAC,QAAjB;AAA0B,QAAA,GAAG,EAAG,CAAhC;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,OAAO,EAAC,OAArB;AAA6B,UAAA,OAAO,EAAGG,KAAK,IAAIjB,cAAc,CAACS,gBAAgB,CAACS,cAAlB,CAA9D;AAAA,kCACI;AAAA,sBAAKT,gBAAgB,CAACU;AAAtB;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEOV,gBAAgB,CAACI,WAAjB,GAA+B,CAAhC,IAAuC,MAAMZ,YAAY,CAAE,oCAAoCa,gBAAkB,EAAxD,EAA2D,CAAE,OAAF,CAA3D,EAAwE,CAAE,CAACL,gBAAgB,CAACI,WAAjB,GAA+B,CAAhC,EAAmCO,QAAnC,EAAF,CAAxE,CAF/D;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH,GAnBD;;AAqBA,sBACI;AAAA,4BACI,QAAC,qBAAD;AAAuB,MAAA,IAAI,EAAGrB,sBAAsB,CAACsB;AAArD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,qBAAD;AAAuB,MAAA,IAAI,EAAGtB,sBAAsB,CAACuB;AAArD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,qBAAD;AAAuB,MAAA,IAAI,EAAGvB,sBAAsB,CAACwB;AAArD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAOH,CAhCM;KAAMnB,oC","sourcesContent":["import { RelationshipStatusEnum, RelationshipStatusInfoMessageParser } from '@nitrots/nitro-renderer';\nimport { FC } from 'react';\nimport { GetUserProfile, LocalizeText } from '../../../../api';\nimport { Flex, Text } from '../../../../common';\n\ninterface InfoStandWidgetUserRelationshipsViewProps\n{\n    relationships: RelationshipStatusInfoMessageParser;\n}\n\ninterface InfoStandWidgetUserRelationshipsRelationshipViewProps\n{\n    type: number;\n}\n\nexport const InfoStandWidgetUserRelationshipsView: FC<InfoStandWidgetUserRelationshipsViewProps> = props =>\n{\n    const { relationships = null } = props;\n\n    const RelationshipComponent = ({ type }: InfoStandWidgetUserRelationshipsRelationshipViewProps) =>\n    {\n        const relationshipInfo = (relationships && relationships.relationshipStatusMap.hasKey(type)) ? relationships.relationshipStatusMap.getValue(type) : null;\n\n        if(!relationshipInfo || !relationshipInfo.friendCount) return null;\n\n        const relationshipName = RelationshipStatusEnum.RELATIONSHIP_NAMES[type].toLocaleLowerCase();\n\n        return (\n            <Flex alignItems=\"center\" gap={ 1 }>\n                <i className={ `nitro-friends-spritesheet icon-${ relationshipName }` } />\n                <Flex alignItems=\"center\" gap={ 0 }>\n                    <Text gfbold variant=\"white\" onClick={ event => GetUserProfile(relationshipInfo.randomFriendId) }>\n                        <u>{ relationshipInfo.randomFriendName }</u>\n                        { (relationshipInfo.friendCount > 1) && (' ' + LocalizeText(`extendedprofile.relstatus.others.${ relationshipName }`, [ 'count' ], [ (relationshipInfo.friendCount - 1).toString() ])) }\n                    </Text>\n                </Flex>\n            </Flex>\n        );\n    }\n\n    return (\n        <>\n            <RelationshipComponent type={ RelationshipStatusEnum.HEART } />\n            <RelationshipComponent type={ RelationshipStatusEnum.SMILE } />\n            <RelationshipComponent type={ RelationshipStatusEnum.BOBBA } />\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}