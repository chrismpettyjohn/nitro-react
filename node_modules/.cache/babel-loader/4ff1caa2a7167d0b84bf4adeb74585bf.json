{"ast":null,"code":"export class ChatReviewSessionVotingStatusMessageParser {\n  constructor() {\n    this._status = void 0;\n  }\n\n  flush() {\n    this._status = null;\n    return true;\n  }\n\n  parse(wrapper) {\n    this._status = [];\n    const count = wrapper.readInt();\n\n    for (let i = 0; i < count; i++) {\n      this._status.push(wrapper.readInt());\n    }\n\n    return true;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n}\nChatReviewSessionVotingStatusMessageParser.AWAITING_VOTE = 0;\nChatReviewSessionVotingStatusMessageParser.VOTED_OK = 1;\nChatReviewSessionVotingStatusMessageParser.VOTED_BAD = 2;\nChatReviewSessionVotingStatusMessageParser.VOTED_VERY_BAD = 3;\nChatReviewSessionVotingStatusMessageParser.NO_VOTE = 4;\nChatReviewSessionVotingStatusMessageParser.FINDING_NEW_VOTER = 5;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/help/ChatReviewSessionVotingStatusMessageParser.ts"],"names":["ChatReviewSessionVotingStatusMessageParser","_status","flush","parse","wrapper","count","readInt","i","push","status","AWAITING_VOTE","VOTED_OK","VOTED_BAD","VOTED_VERY_BAD","NO_VOTE","FINDING_NEW_VOTER"],"mappings":"AAGA,OAAO,MAAMA,0CAAN,CACP;AAAA;AAAA,SAQYC,OARZ;AAAA;;AAUIC,EAAAA,KAAK,GACL;AACI,SAAKD,OAAL,GAAe,IAAf;AACA,WAAO,IAAP;AACH;;AAEDE,EAAAA,KAAK,CAACC,OAAD,EACL;AACI,SAAKH,OAAL,GAAe,EAAf;AAEA,UAAMI,KAAK,GAAGD,OAAO,CAACE,OAAR,EAAd;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAnB,EAA0BE,CAAC,EAA3B,EACA;AACI,WAAKN,OAAL,CAAaO,IAAb,CAAkBJ,OAAO,CAACE,OAAR,EAAlB;AACH;;AAED,WAAO,IAAP;AACH;;AAEgB,MAANG,MAAM,GACjB;AACI,WAAO,KAAKR,OAAZ;AACH;;AAjCL;AADaD,0C,CAEcU,a,GAAgB,C;AAF9BV,0C,CAGcW,Q,GAAW,C;AAHzBX,0C,CAIcY,S,GAAY,C;AAJ1BZ,0C,CAKca,c,GAAiB,C;AAL/Bb,0C,CAMcc,O,GAAU,C;AANxBd,0C,CAOce,iB,GAAoB,C","sourcesContent":["import { IMessageDataWrapper } from '../../../../../core';\r\nimport { IMessageParser } from '../../../../../core/communication/messages/IMessageParser';\r\n\r\nexport class ChatReviewSessionVotingStatusMessageParser implements IMessageParser\r\n{\r\n    public static readonly AWAITING_VOTE = 0;\r\n    public static readonly VOTED_OK = 1;\r\n    public static readonly VOTED_BAD = 2;\r\n    public static readonly VOTED_VERY_BAD = 3;\r\n    public static readonly NO_VOTE = 4;\r\n    public static readonly FINDING_NEW_VOTER = 5;\r\n\r\n    private _status:number[];\r\n\r\n    flush(): boolean\r\n    {\r\n        this._status = null;\r\n        return true;\r\n    }\r\n\r\n    parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        this._status = [];\r\n\r\n        const count = wrapper.readInt();\r\n\r\n        for(let i = 0; i < count; i++)\r\n        {\r\n            this._status.push(wrapper.readInt());\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get status(): number[]\r\n    {\r\n        return this._status;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}