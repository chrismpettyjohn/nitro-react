{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { BotAddedToInventoryEvent, BotInventoryMessageEvent, BotRemovedFromInventoryEvent, GetBotInventoryComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryUnseenTracker } from '.';\nimport { UseMessageEventHook } from '..';\nimport { cancelRoomObjectPlacement, CreateLinkEvent, getPlacingItemId, SendMessageComposer, UnseenItemCategory } from '../../api';\nimport { useSharedVisibility } from '../useSharedVisibility';\n\nconst useInventoryBotsState = () => {\n  _s();\n\n  const [needsUpdate, setNeedsUpdate] = useState(true);\n  const [botItems, setBotItems] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const {\n    isVisible = false,\n    activate = null,\n    deactivate = null\n  } = useSharedVisibility();\n  const {\n    isUnseen = null,\n    resetCategory = null\n  } = useInventoryUnseenTracker();\n  const onBotInventoryMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    setBotItems(prevValue => {\n      const newValue = [...prevValue];\n      const existingIds = newValue.map(item => item.botData.id);\n      const addedDatas = [];\n\n      for (const botData of parser.items.values()) existingIds.indexOf(botData.id) === -1 && addedDatas.push(botData);\n\n      for (const existingId of existingIds) {\n        let remove = true;\n\n        for (const botData of parser.items.values()) {\n          if (botData.id === existingId) {\n            remove = false;\n            break;\n          }\n        }\n\n        if (!remove) continue;\n        const index = newValue.findIndex(item => item.botData.id === existingId);\n        const botItem = newValue[index];\n        if (index === -1 || !botItem) continue;\n\n        if (getPlacingItemId() === botItem.botData.id) {\n          cancelRoomObjectPlacement();\n          CreateLinkEvent('inventory/open');\n        }\n\n        newValue.splice(index, 1);\n      }\n\n      for (const botData of addedDatas) {\n        const botItem = {\n          botData\n        };\n        const unseen = isUnseen(UnseenItemCategory.BOT, botData.id);\n        if (unseen) newValue.unshift(botItem);else newValue.push(botItem);\n      }\n\n      return newValue;\n    });\n  }, [isUnseen]);\n  UseMessageEventHook(BotInventoryMessageEvent, onBotInventoryMessageEvent);\n  const onBotAddedToInventoryEvent = useCallback(event => {\n    const parser = event.getParser();\n    setBotItems(prevValue => {\n      const newValue = [...prevValue];\n      const index = newValue.findIndex(item => item.botData.id === parser.item.id);\n      if (index >= 0) return prevValue;\n      const botItem = {\n        botData: parser.item\n      };\n      const unseen = isUnseen(UnseenItemCategory.BOT, botItem.botData.id);\n      if (unseen) newValue.unshift(botItem);else newValue.push(botItem);\n      return newValue;\n    });\n  }, [isUnseen]);\n  UseMessageEventHook(BotAddedToInventoryEvent, onBotAddedToInventoryEvent);\n  const onBotRemovedFromInventoryEvent = useCallback(event => {\n    const parser = event.getParser();\n    setBotItems(prevValue => {\n      const newValue = [...prevValue];\n      const index = newValue.findIndex(item => item.botData.id === parser.itemId);\n      if (index === -1) return prevValue;\n      newValue.splice(index, 1);\n\n      if (getPlacingItemId() === parser.itemId) {\n        cancelRoomObjectPlacement();\n        CreateLinkEvent('inventory/show');\n      }\n\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(BotRemovedFromInventoryEvent, onBotRemovedFromInventoryEvent);\n  useEffect(() => {\n    if (!botItems || !botItems.length) return;\n    setSelectedBot(prevValue => {\n      let newValue = prevValue;\n      if (newValue && botItems.indexOf(newValue) === -1) newValue = null;\n      if (!newValue) newValue = botItems[0];\n      return newValue;\n    });\n  }, [botItems]);\n  useEffect(() => {\n    if (!isVisible) return;\n    return () => {\n      resetCategory(UnseenItemCategory.BOT);\n    };\n  }, [isVisible, resetCategory]);\n  useEffect(() => {\n    if (!isVisible || !needsUpdate) return;\n    SendMessageComposer(new GetBotInventoryComposer());\n    setNeedsUpdate(false);\n  }, [isVisible, needsUpdate]);\n  return {\n    botItems,\n    selectedBot,\n    setSelectedBot,\n    activate,\n    deactivate\n  };\n};\n\n_s(useInventoryBotsState, \"McTdud4vJdJedZMH9o0FEVRqnOI=\", false, function () {\n  return [useSharedVisibility, useInventoryUnseenTracker];\n});\n\nexport const useInventoryBots = () => {\n  _s2();\n\n  return useBetween(useInventoryBotsState);\n};\n\n_s2(useInventoryBots, \"diiQ3+ccnY3J9PmIrayiMDIOaiY=\", false, function () {\n  return [useBetween];\n});","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/hooks/inventory/useInventoryBots.ts"],"names":["BotAddedToInventoryEvent","BotInventoryMessageEvent","BotRemovedFromInventoryEvent","GetBotInventoryComposer","useCallback","useEffect","useState","useBetween","useInventoryUnseenTracker","UseMessageEventHook","cancelRoomObjectPlacement","CreateLinkEvent","getPlacingItemId","SendMessageComposer","UnseenItemCategory","useSharedVisibility","useInventoryBotsState","needsUpdate","setNeedsUpdate","botItems","setBotItems","selectedBot","setSelectedBot","isVisible","activate","deactivate","isUnseen","resetCategory","onBotInventoryMessageEvent","event","parser","getParser","prevValue","newValue","existingIds","map","item","botData","id","addedDatas","items","values","indexOf","push","existingId","remove","index","findIndex","botItem","splice","unseen","BOT","unshift","onBotAddedToInventoryEvent","onBotRemovedFromInventoryEvent","itemId","length","useInventoryBots"],"mappings":"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","sourcesContent":["import { BotAddedToInventoryEvent, BotData, BotInventoryMessageEvent, BotRemovedFromInventoryEvent, GetBotInventoryComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryUnseenTracker } from '.';\nimport { UseMessageEventHook } from '..';\nimport { cancelRoomObjectPlacement, CreateLinkEvent, getPlacingItemId, IBotItem, SendMessageComposer, UnseenItemCategory } from '../../api';\nimport { useSharedVisibility } from '../useSharedVisibility';\n\nconst useInventoryBotsState = () =>\n{\n    const [ needsUpdate, setNeedsUpdate ] = useState(true);\n    const [ botItems, setBotItems ] = useState<IBotItem[]>([]);\n    const [ selectedBot, setSelectedBot ] = useState<IBotItem>(null);\n    const { isVisible = false, activate = null, deactivate = null } = useSharedVisibility();\n    const { isUnseen = null, resetCategory = null } = useInventoryUnseenTracker();\n\n    const onBotInventoryMessageEvent = useCallback((event: BotInventoryMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        setBotItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n            const existingIds = newValue.map(item => item.botData.id);\n            const addedDatas: BotData[] = [];\n\n            for(const botData of parser.items.values()) ((existingIds.indexOf(botData.id) === -1) && addedDatas.push(botData));\n\n            for(const existingId of existingIds)\n            {\n                let remove = true;\n\n                for(const botData of parser.items.values())\n                {\n                    if(botData.id === existingId)\n                    {\n                        remove = false;\n\n                        break;\n                    }\n                }\n\n                if(!remove) continue;\n\n                const index = newValue.findIndex(item => (item.botData.id === existingId));\n                const botItem = newValue[index];\n\n                if((index === -1) || !botItem) continue;\n\n                if(getPlacingItemId() === botItem.botData.id)\n                {\n                    cancelRoomObjectPlacement();\n\n                    CreateLinkEvent('inventory/open');\n                }\n\n                newValue.splice(index, 1);\n            }\n\n            for(const botData of addedDatas)\n            {\n                const botItem = { botData } as IBotItem;\n                const unseen = isUnseen(UnseenItemCategory.BOT, botData.id);\n\n                if(unseen) newValue.unshift(botItem);\n                else newValue.push(botItem);\n            }\n\n            return newValue;\n        });\n    }, [ isUnseen ]);\n\n    UseMessageEventHook(BotInventoryMessageEvent, onBotInventoryMessageEvent);\n\n    const onBotAddedToInventoryEvent = useCallback((event: BotAddedToInventoryEvent) =>\n    {\n        const parser = event.getParser();\n\n        setBotItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            const index = newValue.findIndex(item => (item.botData.id === parser.item.id));\n\n            if(index >= 0) return prevValue;\n\n            const botItem = { botData: parser.item } as IBotItem;\n            const unseen = isUnseen(UnseenItemCategory.BOT, botItem.botData.id);\n\n            if(unseen) newValue.unshift(botItem);\n            else newValue.push(botItem);\n\n            return newValue;\n        });\n    }, [ isUnseen ]);\n\n    UseMessageEventHook(BotAddedToInventoryEvent, onBotAddedToInventoryEvent);\n\n    const onBotRemovedFromInventoryEvent = useCallback((event: BotRemovedFromInventoryEvent) =>\n    {\n        const parser = event.getParser();\n\n        setBotItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            const index = newValue.findIndex(item => (item.botData.id === parser.itemId));\n\n            if(index === -1) return prevValue;\n\n            newValue.splice(index, 1);\n\n            if(getPlacingItemId() === parser.itemId)\n            {\n                cancelRoomObjectPlacement();\n\n                CreateLinkEvent('inventory/show');\n            }\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(BotRemovedFromInventoryEvent, onBotRemovedFromInventoryEvent);\n\n    useEffect(() =>\n    {\n        if(!botItems || !botItems.length) return;\n\n        setSelectedBot(prevValue =>\n        {\n            let newValue = prevValue;\n\n            if(newValue && (botItems.indexOf(newValue) === -1)) newValue = null;\n\n            if(!newValue) newValue = botItems[0];\n\n            return newValue;\n        });\n    }, [ botItems ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible) return;\n\n        return () =>\n        {\n            resetCategory(UnseenItemCategory.BOT);\n        }\n    }, [ isVisible, resetCategory ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible || !needsUpdate) return;\n\n        SendMessageComposer(new GetBotInventoryComposer());\n\n        setNeedsUpdate(false);\n    }, [ isVisible, needsUpdate ]);\n\n    return { botItems, selectedBot, setSelectedBot, activate, deactivate };\n}\n\nexport const useInventoryBots = () => useBetween(useInventoryBotsState);\n"]},"metadata":{},"sourceType":"module"}