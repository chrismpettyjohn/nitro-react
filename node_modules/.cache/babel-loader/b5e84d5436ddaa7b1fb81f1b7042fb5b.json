{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { NitroSprite } from '../../../../core';\nimport { TextureUtils } from '../../../utils';\nexport class GraphicAssetPalette {\n  constructor(palette, primaryColor, secondaryColor) {\n    this._palette = void 0;\n    this._primaryColor = void 0;\n    this._secondaryColor = void 0;\n    this._palette = palette;\n\n    while (this._palette.length < 256) this._palette.push([0, 0, 0]);\n\n    this._primaryColor = primaryColor;\n    this._secondaryColor = secondaryColor;\n  }\n\n  dispose() {}\n\n  applyPalette(texture) {\n    const sprite = new NitroSprite(texture);\n    const textureCanvas = TextureUtils.generateCanvas(sprite);\n    const textureCtx = textureCanvas.getContext('2d');\n    const textureImageData = textureCtx.getImageData(0, 0, textureCanvas.width, textureCanvas.height);\n    const data = textureImageData.data;\n\n    for (let i = 0; i < data.length; i += 4) {\n      let paletteColor = this._palette[data[i + 1]];\n      if (paletteColor === undefined) paletteColor = [0, 0, 0];\n      data[i] = paletteColor[0];\n      data[i + 1] = paletteColor[1];\n      data[i + 2] = paletteColor[2];\n    }\n\n    textureCtx.putImageData(textureImageData, 0, 0);\n    return Texture.from(textureCanvas);\n  }\n\n  get primaryColor() {\n    return this._primaryColor;\n  }\n\n  get secondaryColor() {\n    return this._secondaryColor;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/object/visualization/utils/GraphicAssetPalette.ts"],"names":["Texture","NitroSprite","TextureUtils","GraphicAssetPalette","constructor","palette","primaryColor","secondaryColor","_palette","_primaryColor","_secondaryColor","length","push","dispose","applyPalette","texture","sprite","textureCanvas","generateCanvas","textureCtx","getContext","textureImageData","getImageData","width","height","data","i","paletteColor","undefined","putImageData","from"],"mappings":"AAAA,SAAmBA,OAAnB,QAAkC,YAAlC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,mBAAN,CACP;AAKIC,EAAAA,WAAW,CAACC,OAAD,EAAwCC,YAAxC,EAA8DC,cAA9D,EACX;AAAA,SALQC,QAKR;AAAA,SAJQC,aAIR;AAAA,SAHQC,eAGR;AACI,SAAKF,QAAL,GAAgBH,OAAhB;;AAEA,WAAM,KAAKG,QAAL,CAAcG,MAAd,GAAuB,GAA7B,EAAkC,KAAKH,QAAL,CAAcI,IAAd,CAAmB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAnB;;AAElC,SAAKH,aAAL,GAAqBH,YAArB;AACA,SAAKI,eAAL,GAAuBH,cAAvB;AACH;;AAEMM,EAAAA,OAAO,GACd,CAEC;;AAEMC,EAAAA,YAAY,CAACC,OAAD,EACnB;AACI,UAAMC,MAAM,GAAG,IAAIf,WAAJ,CAAgBc,OAAhB,CAAf;AACA,UAAME,aAAa,GAAGf,YAAY,CAACgB,cAAb,CAA4BF,MAA5B,CAAtB;AACA,UAAMG,UAAU,GAAGF,aAAa,CAACG,UAAd,CAAyB,IAAzB,CAAnB;AACA,UAAMC,gBAAgB,GAAGF,UAAU,CAACG,YAAX,CAAwB,CAAxB,EAA2B,CAA3B,EAA8BL,aAAa,CAACM,KAA5C,EAAmDN,aAAa,CAACO,MAAjE,CAAzB;AACA,UAAMC,IAAI,GAAGJ,gBAAgB,CAACI,IAA9B;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,IAAI,CAACd,MAAxB,EAAgCe,CAAC,IAAI,CAArC,EACA;AACI,UAAIC,YAAY,GAAG,KAAKnB,QAAL,CAAciB,IAAI,CAAEC,CAAC,GAAG,CAAN,CAAlB,CAAnB;AAEA,UAAGC,YAAY,KAAKC,SAApB,EAA+BD,YAAY,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAf;AAE/BF,MAAAA,IAAI,CAAEC,CAAF,CAAJ,GAAYC,YAAY,CAAC,CAAD,CAAxB;AACAF,MAAAA,IAAI,CAAEC,CAAC,GAAG,CAAN,CAAJ,GAAgBC,YAAY,CAAC,CAAD,CAA5B;AACAF,MAAAA,IAAI,CAAEC,CAAC,GAAG,CAAN,CAAJ,GAAgBC,YAAY,CAAC,CAAD,CAA5B;AACH;;AAEDR,IAAAA,UAAU,CAACU,YAAX,CAAwBR,gBAAxB,EAA0C,CAA1C,EAA6C,CAA7C;AAEA,WAAOrB,OAAO,CAAC8B,IAAR,CAAab,aAAb,CAAP;AACH;;AAEsB,MAAZX,YAAY,GACvB;AACI,WAAO,KAAKG,aAAZ;AACH;;AAEwB,MAAdF,cAAc,GACzB;AACI,WAAO,KAAKG,eAAZ;AACH;;AApDL","sourcesContent":["import { Resource, Texture } from '@pixi/core';\r\nimport { NitroSprite } from '../../../../core';\r\nimport { TextureUtils } from '../../../utils';\r\n\r\nexport class GraphicAssetPalette\r\n{\r\n    private _palette: [ number, number, number ][];\r\n    private _primaryColor: number;\r\n    private _secondaryColor: number;\r\n\r\n    constructor(palette: [ number, number, number ][], primaryColor: number, secondaryColor: number)\r\n    {\r\n        this._palette = palette;\r\n\r\n        while(this._palette.length < 256) this._palette.push([ 0, 0, 0 ]);\r\n\r\n        this._primaryColor = primaryColor;\r\n        this._secondaryColor = secondaryColor;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n\r\n    }\r\n\r\n    public applyPalette(texture: Texture<Resource>): Texture<Resource>\r\n    {\r\n        const sprite = new NitroSprite(texture);\r\n        const textureCanvas = TextureUtils.generateCanvas(sprite);\r\n        const textureCtx = textureCanvas.getContext('2d');\r\n        const textureImageData = textureCtx.getImageData(0, 0, textureCanvas.width, textureCanvas.height);\r\n        const data = textureImageData.data;\r\n\r\n        for(let i = 0; i < data.length; i += 4)\r\n        {\r\n            let paletteColor = this._palette[data[ i + 1 ]];\r\n\r\n            if(paletteColor === undefined) paletteColor = [ 0, 0, 0 ];\r\n\r\n            data[ i ] = paletteColor[0];\r\n            data[ i + 1 ] = paletteColor[1];\r\n            data[ i + 2 ] = paletteColor[2];\r\n        }\r\n\r\n        textureCtx.putImageData(textureImageData, 0, 0);\r\n\r\n        return Texture.from(textureCanvas);\r\n    }\r\n\r\n    public get primaryColor(): number\r\n    {\r\n        return this._primaryColor;\r\n    }\r\n\r\n    public get secondaryColor(): number\r\n    {\r\n        return this._secondaryColor;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}