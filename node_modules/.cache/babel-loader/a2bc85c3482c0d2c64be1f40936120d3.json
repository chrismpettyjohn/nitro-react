{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/room/widgets/word-quiz/WordQuizWidgetView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { RoomWidgetPollMessage, RoomWidgetWordQuizUpdateEvent } from '../../../../api';\nimport { UseEventDispatcherHook } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\nimport { VALUE_KEY_DISLIKE, VALUE_KEY_LIKE } from './common/VoteValue';\nimport { WordQuizQuestionView } from './WordQuizQuestionView';\nimport { WordQuizVoteView } from './WordQuizVoteView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DEFAULT_DISPLAY_DELAY = 4000;\nconst SIGN_FADE_DELAY = 3;\nexport const WordQuizWidgetView = props => {\n  _s();\n\n  const [pollId, setPollId] = useState(-1);\n  const [question, setQuestion] = useState(null);\n  const [answerSent, setAnswerSent] = useState(false);\n  const [questionClearTimeout, setQuestionClearTimeout] = useState(null);\n  const [answerCounts, setAnswerCounts] = useState(new Map());\n  const [userAnswers, setUserAnswers] = useState(new Map());\n  const {\n    eventDispatcher = null,\n    widgetHandler = null,\n    roomSession = null\n  } = useRoomContext();\n  const clearQuestion = useCallback(() => {\n    setPollId(-1);\n    setQuestion(null);\n  }, []);\n  const onRoomWidgetWordQuizUpdateEvent = useCallback(event => {\n    switch (event.type) {\n      case RoomWidgetWordQuizUpdateEvent.NEW_QUESTION:\n        setPollId(event.id);\n        setQuestion(event.question);\n        setAnswerSent(false);\n        setAnswerCounts(new Map());\n        setUserAnswers(new Map());\n        setQuestionClearTimeout(prevValue => {\n          if (prevValue) clearTimeout(prevValue);\n\n          if (event.duration > 0) {\n            const delay = event.duration < 1000 ? DEFAULT_DISPLAY_DELAY : event.duration;\n            return setTimeout(() => clearQuestion(), delay);\n          }\n\n          return null;\n        });\n        break;\n\n      case RoomWidgetWordQuizUpdateEvent.QUESTION_ANSWERED:\n        {\n          const userData = roomSession.userDataManager.getUserData(event.userId);\n          if (!userData) return;\n          setAnswerCounts(event.answerCounts);\n          setUserAnswers(prevValue => {\n            if (!prevValue.has(userData.roomIndex)) {\n              const newValue = new Map(userAnswers);\n              newValue.set(userData.roomIndex, {\n                value: event.value,\n                secondsLeft: SIGN_FADE_DELAY\n              });\n              return newValue;\n            }\n\n            return prevValue;\n          });\n          break;\n        }\n\n      case RoomWidgetWordQuizUpdateEvent.QUESTION_FINISHED:\n        if (question && question.id === event.questionId) {\n          setAnswerCounts(event.answerCounts);\n          setAnswerSent(true);\n          setQuestionClearTimeout(prevValue => {\n            if (prevValue) clearTimeout(prevValue);\n            return setTimeout(() => clearQuestion(), DEFAULT_DISPLAY_DELAY);\n          });\n        }\n\n        setUserAnswers(new Map());\n        break;\n    }\n  }, [question, roomSession.userDataManager, userAnswers, clearQuestion]);\n  UseEventDispatcherHook(RoomWidgetWordQuizUpdateEvent.NEW_QUESTION, eventDispatcher, onRoomWidgetWordQuizUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetWordQuizUpdateEvent.QUESTION_ANSWERED, eventDispatcher, onRoomWidgetWordQuizUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetWordQuizUpdateEvent.QUESTION_FINISHED, eventDispatcher, onRoomWidgetWordQuizUpdateEvent);\n  const vote = useCallback(vote => {\n    if (answerSent || !question) return;\n    const updateMessage = new RoomWidgetPollMessage(RoomWidgetPollMessage.ANSWER, pollId);\n    updateMessage.questionId = question.id;\n    updateMessage.answers = [vote];\n    widgetHandler.processWidgetMessage(updateMessage);\n    setAnswerSent(true);\n  }, [answerSent, pollId, question, widgetHandler]);\n  const checkSignFade = useCallback(() => {\n    setUserAnswers(prevValue => {\n      const keysToRemove = [];\n      prevValue.forEach((value, key) => {\n        value.secondsLeft--;\n        if (value.secondsLeft <= 0) keysToRemove.push(key);\n      });\n      if (keysToRemove.length === 0) return prevValue;\n      const copy = new Map(prevValue);\n      keysToRemove.forEach(key => copy.delete(key));\n      return copy;\n    });\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => checkSignFade(), 1000);\n    return () => clearInterval(interval);\n  }, [checkSignFade]);\n  useEffect(() => {\n    return () => {\n      setQuestionClearTimeout(prev => {\n        if (prev) clearTimeout(prev);\n        return null;\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [question && /*#__PURE__*/_jsxDEV(WordQuizQuestionView, {\n      question: question.content,\n      canVote: !answerSent,\n      vote: vote,\n      noVotes: answerCounts.get(VALUE_KEY_DISLIKE) || 0,\n      yesVotes: answerCounts.get(VALUE_KEY_LIKE) || 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this), userAnswers && Array.from(userAnswers.entries()).map((_ref, index) => {\n      let [key, value] = _ref;\n      return /*#__PURE__*/_jsxDEV(WordQuizVoteView, {\n        userIndex: key,\n        vote: value.value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 82\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(WordQuizWidgetView, \"v30UotnIaXJjrFyloPGW0QLuEqM=\", false, function () {\n  return [useRoomContext];\n});\n\n_c = WordQuizWidgetView;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordQuizWidgetView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/room/widgets/word-quiz/WordQuizWidgetView.tsx"],"names":["useCallback","useEffect","useState","RoomWidgetPollMessage","RoomWidgetWordQuizUpdateEvent","UseEventDispatcherHook","useRoomContext","VALUE_KEY_DISLIKE","VALUE_KEY_LIKE","WordQuizQuestionView","WordQuizVoteView","DEFAULT_DISPLAY_DELAY","SIGN_FADE_DELAY","WordQuizWidgetView","props","pollId","setPollId","question","setQuestion","answerSent","setAnswerSent","questionClearTimeout","setQuestionClearTimeout","answerCounts","setAnswerCounts","Map","userAnswers","setUserAnswers","eventDispatcher","widgetHandler","roomSession","clearQuestion","onRoomWidgetWordQuizUpdateEvent","event","type","NEW_QUESTION","id","prevValue","clearTimeout","duration","delay","setTimeout","QUESTION_ANSWERED","userData","userDataManager","getUserData","userId","has","roomIndex","newValue","set","value","secondsLeft","QUESTION_FINISHED","questionId","vote","updateMessage","ANSWER","answers","processWidgetMessage","checkSignFade","keysToRemove","forEach","key","push","length","copy","delete","interval","setInterval","clearInterval","prev","content","get","Array","from","entries","map","index"],"mappings":"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","sourcesContent":["import { IQuestion } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { RoomWidgetPollMessage, RoomWidgetWordQuizUpdateEvent } from '../../../../api';\nimport { UseEventDispatcherHook } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\nimport { VALUE_KEY_DISLIKE, VALUE_KEY_LIKE, VoteValue } from './common/VoteValue';\nimport { WordQuizQuestionView } from './WordQuizQuestionView';\nimport { WordQuizVoteView } from './WordQuizVoteView';\n\nconst DEFAULT_DISPLAY_DELAY = 4000;\nconst SIGN_FADE_DELAY = 3;\n\nexport const WordQuizWidgetView: FC<{}> = props =>\n{\n    const [ pollId, setPollId ] = useState(-1);\n    const [ question, setQuestion ] = useState<IQuestion>(null);\n    const [ answerSent, setAnswerSent ] = useState(false);\n    const [ questionClearTimeout, setQuestionClearTimeout ] = useState<number>(null);\n    const [ answerCounts, setAnswerCounts ] = useState<Map<string, number>>(new Map());\n    const [ userAnswers, setUserAnswers ] = useState<Map<number, VoteValue>>(new Map());\n    const { eventDispatcher = null, widgetHandler = null, roomSession = null } = useRoomContext();\n\n    const clearQuestion = useCallback(() =>\n    {\n        setPollId(-1);\n        setQuestion(null);\n    }, []);\n\n    const onRoomWidgetWordQuizUpdateEvent = useCallback((event: RoomWidgetWordQuizUpdateEvent) =>\n    {\n        switch(event.type)\n        {\n            case RoomWidgetWordQuizUpdateEvent.NEW_QUESTION:\n                setPollId(event.id);\n                setQuestion(event.question);\n                setAnswerSent(false);\n                setAnswerCounts(new Map());\n                setUserAnswers(new Map());\n\n                setQuestionClearTimeout(prevValue =>\n                {\n                    if(prevValue) clearTimeout(prevValue);\n\n                    if(event.duration > 0)\n                    {\n                        const delay = event.duration < 1000 ? DEFAULT_DISPLAY_DELAY : event.duration;\n\n                        return setTimeout(() => clearQuestion(), delay) as unknown as number;\n                    }\n\n                    return null;\n                });\n                break;\n            case RoomWidgetWordQuizUpdateEvent.QUESTION_ANSWERED: {\n                const userData = roomSession.userDataManager.getUserData(event.userId);\n\n                if(!userData) return;\n\n                setAnswerCounts(event.answerCounts);\n\n                setUserAnswers(prevValue =>\n                {\n                    if(!prevValue.has(userData.roomIndex))\n                    {\n                        const newValue = new Map(userAnswers);\n\n                        newValue.set(userData.roomIndex, { value: event.value, secondsLeft: SIGN_FADE_DELAY });\n\n                        return newValue;\n                    }\n\n                    return prevValue;\n                });\n                break;\n            }\n            case RoomWidgetWordQuizUpdateEvent.QUESTION_FINISHED:\n                if(question && question.id === event.questionId)\n                {\n                    setAnswerCounts(event.answerCounts);\n                    setAnswerSent(true);\n\n                    setQuestionClearTimeout(prevValue =>\n                    {\n                        if(prevValue) clearTimeout(prevValue);\n\n                        return setTimeout(() => clearQuestion(), DEFAULT_DISPLAY_DELAY) as unknown as number;\n                    });\n                }\n\n                setUserAnswers(new Map());\n                break;\n        }\n    }, [ question, roomSession.userDataManager, userAnswers, clearQuestion ]);\n\n    UseEventDispatcherHook(RoomWidgetWordQuizUpdateEvent.NEW_QUESTION, eventDispatcher, onRoomWidgetWordQuizUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetWordQuizUpdateEvent.QUESTION_ANSWERED, eventDispatcher, onRoomWidgetWordQuizUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetWordQuizUpdateEvent.QUESTION_FINISHED, eventDispatcher, onRoomWidgetWordQuizUpdateEvent);\n\n    const vote = useCallback((vote: string) =>\n    {\n        if(answerSent || !question) return;\n\n        const updateMessage = new RoomWidgetPollMessage(RoomWidgetPollMessage.ANSWER, pollId);\n\n        updateMessage.questionId = question.id;\n        updateMessage.answers = [ vote ];\n\n        widgetHandler.processWidgetMessage(updateMessage);\n\n        setAnswerSent(true);\n    }, [ answerSent, pollId, question, widgetHandler ]);\n\n    const checkSignFade = useCallback(() =>\n    {\n        setUserAnswers(prevValue =>\n        {\n            const keysToRemove: number[] = [];\n\n            prevValue.forEach((value, key) =>\n            {\n                value.secondsLeft--;\n\n                if(value.secondsLeft <= 0) keysToRemove.push(key);\n            });\n\n            if(keysToRemove.length === 0) return prevValue;\n\n            const copy = new Map(prevValue);\n\n            keysToRemove.forEach(key => copy.delete(key));\n\n            return copy;\n        });\n    }, []);\n\n    useEffect(() =>\n    {\n        const interval = setInterval(() => checkSignFade(), 1000);\n\n        return () => clearInterval(interval);\n    }, [ checkSignFade ]);\n\n    useEffect(() =>\n    {\n        return () =>\n        {\n            setQuestionClearTimeout(prev =>\n            {\n                if(prev) clearTimeout(prev);\n\n                return null;\n            });\n        }\n    }, []);\n\n    return (\n        <>\n            { question &&\n                <WordQuizQuestionView question={ question.content } canVote={ !answerSent } vote={ vote } noVotes={ answerCounts.get(VALUE_KEY_DISLIKE) || 0 } yesVotes={ answerCounts.get(VALUE_KEY_LIKE) || 0 } /> }\n            { userAnswers &&\n                Array.from(userAnswers.entries()).map(([ key, value ], index) => <WordQuizVoteView key={ index } userIndex={ key } vote={ value.value } />) }\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}