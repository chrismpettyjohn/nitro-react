{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { NewConsoleMessageEvent, RoomInviteErrorEvent, RoomInviteEvent, SendMessageComposer as SendMessageComposerPacket } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { CloneObject, GetSessionDataManager, LocalizeText, MessengerIconState, MessengerThread, MessengerThreadChat, NotificationAlertType, NotificationUtilities, PlaySound, SendMessageComposer, SoundNames } from '../../api';\nimport { UseMessageEventHook } from '../messages';\nimport { useFriends } from './useFriends';\n\nconst useMessengerState = () => {\n  _s();\n\n  const [messageThreads, setMessageThreads] = useState([]);\n  const [activeThreadId, setActiveThreadId] = useState(-1);\n  const [hiddenThreadIds, setHiddenThreadIds] = useState([]);\n  const [iconState, setIconState] = useState(MessengerIconState.HIDDEN);\n  const {\n    getFriend = null\n  } = useFriends();\n  const visibleThreads = useMemo(() => messageThreads.filter(thread => hiddenThreadIds.indexOf(thread.threadId) === -1), [messageThreads, hiddenThreadIds]);\n  const activeThread = useMemo(() => activeThreadId > 0 && visibleThreads.find(thread => thread.threadId === activeThreadId || null), [activeThreadId, visibleThreads]);\n  const getMessageThread = useCallback(userId => {\n    let thread = messageThreads.find(thread => thread.participant && thread.participant.id === userId);\n    if (thread) return thread;\n    const friend = getFriend(userId);\n    if (!friend) return null;\n    thread = new MessengerThread(friend);\n    setMessageThreads(prevValue => {\n      const newValue = [...prevValue];\n      newValue.push(thread);\n      return newValue;\n    });\n    setHiddenThreadIds(prevValue => {\n      const index = prevValue.indexOf(thread.threadId);\n      if (index === -1) return prevValue;\n      const newValue = [...prevValue];\n      newValue.splice(index, 1);\n      return newValue;\n    });\n    return thread;\n  }, [messageThreads, getFriend]);\n\n  const closeThread = threadId => {\n    setHiddenThreadIds(prevValue => {\n      const newValue = [...prevValue];\n      if (newValue.indexOf(threadId) >= 0) return prevValue;\n      newValue.push(threadId);\n      return newValue;\n    });\n  };\n\n  const sendMessage = (thread, text) => {\n    if (!thread || !text || !text.length) return;\n    SendMessageComposer(new SendMessageComposerPacket(thread.participant.id, text));\n    if (messageThreads.length === 1 && thread.groups.length === 1) PlaySound(SoundNames.MESSENGER_NEW_THREAD);\n    setMessageThreads(prevValue => {\n      const newValue = [...prevValue];\n      const index = newValue.findIndex(newThread => newThread.threadId === thread.threadId);\n      if (index === -1) return prevValue;\n      newValue[index] = CloneObject(newValue[index]);\n      thread = newValue[index];\n      thread.addMessage(GetSessionDataManager().userId, text, 0, null, MessengerThreadChat.CHAT);\n      if (activeThreadId === thread.threadId) thread.setRead();\n      return newValue;\n    });\n  };\n\n  const onNewConsoleMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    setMessageThreads(prevValue => {\n      const newValue = [...prevValue];\n      let existingIndex = newValue.findIndex(newThread => newThread.participant && newThread.participant.id === parser.senderId);\n      let thread = null;\n\n      if (existingIndex === -1) {\n        const friend = getFriend(parser.senderId);\n\n        if (friend) {\n          thread = new MessengerThread(friend);\n          newValue.push(thread);\n        }\n      } else {\n        newValue[existingIndex] = CloneObject(newValue[existingIndex]);\n        thread = newValue[existingIndex];\n      }\n\n      thread.addMessage(parser.senderId, parser.messageText, parser.secondsSinceSent, parser.extraData);\n      if (activeThreadId === thread.threadId) thread.setRead();\n      if (thread.unreadCount > 0) PlaySound(SoundNames.MESSENGER_MESSAGE_RECEIVED);\n      return newValue;\n    });\n  }, [activeThreadId, getFriend]);\n  UseMessageEventHook(NewConsoleMessageEvent, onNewConsoleMessageEvent);\n  const onRoomInviteEvent = useCallback(event => {\n    const parser = event.getParser();\n    setMessageThreads(prevValue => {\n      const newValue = [...prevValue];\n      let existingIndex = newValue.findIndex(newThread => newThread.participant && newThread.participant.id === parser.senderId);\n      let thread = null;\n\n      if (existingIndex === -1) {\n        const friend = getFriend(parser.senderId);\n\n        if (friend) {\n          thread = new MessengerThread(friend);\n          newValue.push(thread);\n        }\n      } else {\n        newValue[existingIndex] = CloneObject(newValue[existingIndex]);\n        thread = newValue[existingIndex];\n      }\n\n      thread.addMessage(null, parser.messageText, 0, null, MessengerThreadChat.ROOM_INVITE);\n      if (activeThreadId === thread.threadId) thread.setRead();\n      if (thread.unreadCount > 0) PlaySound(SoundNames.MESSENGER_MESSAGE_RECEIVED);\n      return newValue;\n    });\n  }, [activeThreadId, getFriend]);\n  UseMessageEventHook(RoomInviteEvent, onRoomInviteEvent);\n  const onRoomInviteErrorEvent = useCallback(event => {\n    const parser = event.getParser();\n    const message = 'Received room invite error: errorCode: ' + parser.errorCode + ', recipients: ' + parser.failedRecipients;\n    NotificationUtilities.simpleAlert(message, NotificationAlertType.DEFAULT, null, null, LocalizeText('friendlist.alert.title'));\n  }, []);\n  UseMessageEventHook(RoomInviteErrorEvent, onRoomInviteErrorEvent);\n  useEffect(() => {\n    if (activeThreadId <= 0) return;\n    setMessageThreads(prevValue => {\n      const newValue = [...prevValue];\n      let existingIndex = newValue.findIndex(newThread => newThread.threadId === activeThreadId);\n      if (existingIndex === -1) return;\n      newValue[existingIndex] = CloneObject(newValue[existingIndex]);\n      newValue[existingIndex].setRead();\n      return newValue;\n    });\n  }, [activeThreadId]);\n  useEffect(() => {\n    setIconState(prevValue => {\n      if (!visibleThreads.length) return MessengerIconState.HIDDEN;\n      let isUnread = false;\n\n      for (const thread of visibleThreads) {\n        if (thread.unreadCount > 0) {\n          isUnread = true;\n          break;\n        }\n      }\n\n      if (isUnread) return MessengerIconState.UNREAD;\n      return MessengerIconState.SHOW;\n    });\n  }, [visibleThreads]);\n  return {\n    messageThreads,\n    activeThread,\n    iconState,\n    visibleThreads,\n    getMessageThread,\n    setActiveThreadId,\n    closeThread,\n    sendMessage\n  };\n};\n\n_s(useMessengerState, \"avW1h2Fctvp2LL1pXSjHRXPZp0w=\", false, function () {\n  return [useFriends];\n});\n\nexport const useMessenger = () => {\n  _s2();\n\n  return useBetween(useMessengerState);\n};\n\n_s2(useMessenger, \"diiQ3+ccnY3J9PmIrayiMDIOaiY=\", false, function () {\n  return [useBetween];\n});","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/hooks/friends/useMessenger.ts"],"names":["NewConsoleMessageEvent","RoomInviteErrorEvent","RoomInviteEvent","SendMessageComposer","SendMessageComposerPacket","useCallback","useEffect","useMemo","useState","useBetween","CloneObject","GetSessionDataManager","LocalizeText","MessengerIconState","MessengerThread","MessengerThreadChat","NotificationAlertType","NotificationUtilities","PlaySound","SoundNames","UseMessageEventHook","useFriends","useMessengerState","messageThreads","setMessageThreads","activeThreadId","setActiveThreadId","hiddenThreadIds","setHiddenThreadIds","iconState","setIconState","HIDDEN","getFriend","visibleThreads","filter","thread","indexOf","threadId","activeThread","find","getMessageThread","userId","participant","id","friend","prevValue","newValue","push","index","splice","closeThread","sendMessage","text","length","groups","MESSENGER_NEW_THREAD","findIndex","newThread","addMessage","CHAT","setRead","onNewConsoleMessageEvent","event","parser","getParser","existingIndex","senderId","messageText","secondsSinceSent","extraData","unreadCount","MESSENGER_MESSAGE_RECEIVED","onRoomInviteEvent","ROOM_INVITE","onRoomInviteErrorEvent","message","errorCode","failedRecipients","simpleAlert","DEFAULT","isUnread","UNREAD","SHOW","useMessenger"],"mappings":"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","sourcesContent":["import { NewConsoleMessageEvent, RoomInviteErrorEvent, RoomInviteEvent, SendMessageComposer as SendMessageComposerPacket } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { CloneObject, GetSessionDataManager, LocalizeText, MessengerIconState, MessengerThread, MessengerThreadChat, NotificationAlertType, NotificationUtilities, PlaySound, SendMessageComposer, SoundNames } from '../../api';\nimport { UseMessageEventHook } from '../messages';\nimport { useFriends } from './useFriends';\n\nconst useMessengerState = () =>\n{\n    const [ messageThreads, setMessageThreads ] = useState<MessengerThread[]>([]);\n    const [ activeThreadId, setActiveThreadId ] = useState<number>(-1);\n    const [ hiddenThreadIds, setHiddenThreadIds ] = useState<number[]>([]);\n    const [ iconState, setIconState ] = useState<number>(MessengerIconState.HIDDEN);\n    const { getFriend = null } = useFriends();\n\n    const visibleThreads = useMemo(() => messageThreads.filter(thread => (hiddenThreadIds.indexOf(thread.threadId) === -1)), [ messageThreads, hiddenThreadIds ]);\n    const activeThread = useMemo(() => ((activeThreadId > 0) && visibleThreads.find(thread => (thread.threadId === activeThreadId) || null)), [ activeThreadId, visibleThreads ]);\n\n    const getMessageThread = useCallback((userId: number) =>\n    {\n        let thread = messageThreads.find(thread => (thread.participant && (thread.participant.id === userId)));\n\n        if(thread) return thread;\n        \n        const friend = getFriend(userId);\n\n        if(!friend) return null;\n\n        thread = new MessengerThread(friend);\n\n        setMessageThreads(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            newValue.push(thread);\n\n            return newValue;\n        });\n            \n        setHiddenThreadIds(prevValue =>\n        {\n            const index = prevValue.indexOf(thread.threadId);\n\n            if(index === -1) return prevValue;\n\n            const newValue = [ ...prevValue ];\n\n            newValue.splice(index, 1);\n\n            return newValue;\n        });\n\n        return thread;\n    }, [ messageThreads, getFriend ]);\n\n    const closeThread = (threadId: number) =>\n    {\n        setHiddenThreadIds(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            if(newValue.indexOf(threadId) >= 0) return prevValue;\n\n            newValue.push(threadId);\n\n            return newValue;\n        });\n    }\n\n    const sendMessage = (thread: MessengerThread, text: string) =>\n    {\n        if(!thread || !text || !text.length) return;\n\n        SendMessageComposer(new SendMessageComposerPacket(thread.participant.id, text));\n\n        if((messageThreads.length === 1) && (thread.groups.length === 1)) PlaySound(SoundNames.MESSENGER_NEW_THREAD);\n\n        setMessageThreads(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n            const index = newValue.findIndex(newThread => (newThread.threadId === thread.threadId));\n\n            if(index === -1) return prevValue;\n\n            newValue[index] = CloneObject(newValue[index]);\n\n            thread = newValue[index];\n\n            thread.addMessage(GetSessionDataManager().userId, text, 0, null, MessengerThreadChat.CHAT);\n\n            if(activeThreadId === thread.threadId) thread.setRead();\n\n            return newValue;\n        });\n    }\n\n    const onNewConsoleMessageEvent = useCallback((event: NewConsoleMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        setMessageThreads(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            let existingIndex = newValue.findIndex(newThread => (newThread.participant && (newThread.participant.id === parser.senderId)));\n            let thread: MessengerThread = null;\n\n            if(existingIndex === -1)\n            {\n                const friend = getFriend(parser.senderId);\n\n                if(friend)\n                {\n                    thread = new MessengerThread(friend);\n\n                    newValue.push(thread);\n                }\n            }\n            else\n            {\n                newValue[existingIndex] = CloneObject(newValue[existingIndex]);\n\n                thread = newValue[existingIndex];\n            }\n\n            thread.addMessage(parser.senderId, parser.messageText, parser.secondsSinceSent, parser.extraData);\n\n            if(activeThreadId === thread.threadId) thread.setRead();\n\n            if(thread.unreadCount > 0) PlaySound(SoundNames.MESSENGER_MESSAGE_RECEIVED);\n\n            return newValue;\n        });\n    }, [ activeThreadId, getFriend ]);\n\n    UseMessageEventHook(NewConsoleMessageEvent, onNewConsoleMessageEvent);\n\n    const onRoomInviteEvent = useCallback((event: RoomInviteEvent) =>\n    {\n        const parser = event.getParser();\n\n        setMessageThreads(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            let existingIndex = newValue.findIndex(newThread => (newThread.participant && (newThread.participant.id === parser.senderId)));\n            let thread: MessengerThread = null;\n\n            if(existingIndex === -1)\n            {\n                const friend = getFriend(parser.senderId);\n\n                if(friend)\n                {\n                    thread = new MessengerThread(friend);\n\n                    newValue.push(thread);\n                }\n            }\n            else\n            {\n                newValue[existingIndex] = CloneObject(newValue[existingIndex]);\n\n                thread = newValue[existingIndex];\n            }\n\n            thread.addMessage(null, parser.messageText, 0, null, MessengerThreadChat.ROOM_INVITE);\n\n            if(activeThreadId === thread.threadId) thread.setRead();\n\n            if(thread.unreadCount > 0) PlaySound(SoundNames.MESSENGER_MESSAGE_RECEIVED);\n\n            return newValue;\n        });\n    }, [ activeThreadId, getFriend ]);\n\n    UseMessageEventHook(RoomInviteEvent, onRoomInviteEvent);\n\n    const onRoomInviteErrorEvent = useCallback((event: RoomInviteErrorEvent) =>\n    {\n        const parser = event.getParser();\n        const message = ((('Received room invite error: errorCode: ' + parser.errorCode) + ', recipients: ') + parser.failedRecipients);\n            \n        NotificationUtilities.simpleAlert(message, NotificationAlertType.DEFAULT, null, null, LocalizeText('friendlist.alert.title'));\n    }, []);\n\n    UseMessageEventHook(RoomInviteErrorEvent, onRoomInviteErrorEvent);\n\n    useEffect(() =>\n    {\n        if(activeThreadId <= 0) return;\n\n        setMessageThreads(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            let existingIndex = newValue.findIndex(newThread => (newThread.threadId === activeThreadId));\n\n            if(existingIndex === -1) return;\n\n            newValue[existingIndex] = CloneObject(newValue[existingIndex]);\n\n            newValue[existingIndex].setRead();\n\n            return newValue;\n        });\n    }, [ activeThreadId ]);\n\n    useEffect(() =>\n    {\n        setIconState(prevValue =>\n        {\n            if(!visibleThreads.length) return MessengerIconState.HIDDEN;\n\n            let isUnread = false;\n\n            for(const thread of visibleThreads)\n            {\n                if(thread.unreadCount > 0)\n                {\n                    isUnread = true;\n\n                    break;\n                }\n            }\n\n            if(isUnread) return MessengerIconState.UNREAD;\n\n            return MessengerIconState.SHOW;\n        });\n    }, [ visibleThreads ]);\n\n    return { messageThreads, activeThread, iconState, visibleThreads, getMessageThread, setActiveThreadId, closeThread, sendMessage };\n}\n\nexport const useMessenger = () => useBetween(useMessengerState);\n"]},"metadata":{},"sourceType":"module"}