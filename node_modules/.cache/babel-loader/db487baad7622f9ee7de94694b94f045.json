{"ast":null,"code":"import { AnimationSizeData } from './AnimationSizeData';\nexport class PetSizeData extends AnimationSizeData {\n  constructor(layerCount, angle) {\n    super(layerCount, angle);\n    this._posturesToAnimations = void 0;\n    this._gesturesToAnimations = void 0;\n    this._defaultPosture = void 0;\n    this._posturesToAnimations = new Map();\n    this._gesturesToAnimations = new Map();\n    this._defaultPosture = null;\n  }\n\n  processPostures(postures) {\n    if (!postures) return false;\n    if (postures.defaultPosture && postures.defaultPosture.length) this._defaultPosture = postures.defaultPosture;\n\n    for (const posture of postures.postures) {\n      if (this._posturesToAnimations.get(posture.id)) continue;\n      if (this._defaultPosture === null) this._defaultPosture = posture.id;\n\n      this._posturesToAnimations.set(posture.id, posture.animationId);\n    }\n\n    if (this._posturesToAnimations.get(this._defaultPosture) === undefined) return false;\n    return true;\n  }\n\n  processGestures(gestures) {\n    if (!gestures) return false;\n\n    for (const gesture of gestures) {\n      if (this._gesturesToAnimations.get(gesture.id)) continue;\n\n      this._gesturesToAnimations.set(gesture.id, gesture.animationId);\n    }\n\n    return true;\n  }\n\n  postureToAnimation(posture) {\n    if (!this._posturesToAnimations.get(posture)) posture = this._defaultPosture;\n    return this._posturesToAnimations.get(posture);\n  }\n\n  getGestureDisabled(k) {\n    if (k === 'ded') return true;\n    return false;\n  }\n\n  gestureToAnimation(gesture) {\n    if (!this._gesturesToAnimations.get(gesture)) return PetSizeData.DEFAULT;\n    return this._gesturesToAnimations.get(gesture);\n  }\n\n  animationToPosture(k, _arg_2) {\n    if (k >= 0 && k < this._posturesToAnimations.size) {\n      const keys = this._posturesToAnimations.keys();\n\n      for (;;) {\n        const key = keys.next();\n        if (key.done) return null;\n        if (k <= 0) return key.value;\n        --k;\n      }\n    }\n\n    return _arg_2 ? this._defaultPosture : null;\n  }\n\n  animationToGesture(index) {\n    if (index >= 0 && index < this._gesturesToAnimations.size) {\n      const keys = this._gesturesToAnimations.keys();\n\n      for (;;) {\n        const key = keys.next();\n        if (key.done) return null;\n        if (index <= 0) return key.value;\n        --index;\n      }\n    }\n\n    return null;\n  }\n\n  getGestureForAnimationId(k) {\n    for (const _local_2 of this._gesturesToAnimations.keys()) {\n      if (this._gesturesToAnimations.get(_local_2) === k) return _local_2;\n    }\n\n    return null;\n  }\n\n  get totalPostures() {\n    return this._posturesToAnimations.size;\n  }\n\n  get totalGestures() {\n    return this._gesturesToAnimations.size;\n  }\n\n}\nPetSizeData.DEFAULT = -1;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/PetSizeData.ts"],"names":["AnimationSizeData","PetSizeData","constructor","layerCount","angle","_posturesToAnimations","_gesturesToAnimations","_defaultPosture","Map","processPostures","postures","defaultPosture","length","posture","get","id","set","animationId","undefined","processGestures","gestures","gesture","postureToAnimation","getGestureDisabled","k","gestureToAnimation","DEFAULT","animationToPosture","_arg_2","size","keys","key","next","done","value","animationToGesture","index","getGestureForAnimationId","_local_2","totalPostures","totalGestures"],"mappings":"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","sourcesContent":["import { IAssetGesture, IAssetPosture } from '../../../../../core/asset/interfaces/visualization';\r\nimport { AnimationSizeData } from './AnimationSizeData';\r\n\r\nexport class PetSizeData extends AnimationSizeData\r\n{\r\n    public static DEFAULT: number = -1;\r\n\r\n    private _posturesToAnimations: Map<string, number>;\r\n    private _gesturesToAnimations: Map<string, number>;\r\n    private _defaultPosture: string;\r\n\r\n    constructor(layerCount: number, angle: number)\r\n    {\r\n        super(layerCount, angle);\r\n\r\n        this._posturesToAnimations = new Map();\r\n        this._gesturesToAnimations = new Map();\r\n        this._defaultPosture = null;\r\n    }\r\n\r\n    public processPostures(postures: { defaultPosture?: string, postures: IAssetPosture[] }): boolean\r\n    {\r\n        if(!postures) return false;\r\n\r\n        if(postures.defaultPosture && postures.defaultPosture.length) this._defaultPosture = postures.defaultPosture;\r\n\r\n        for(const posture of postures.postures)\r\n        {\r\n            if(this._posturesToAnimations.get(posture.id)) continue;\r\n\r\n            if(this._defaultPosture === null) this._defaultPosture = posture.id;\r\n\r\n            this._posturesToAnimations.set(posture.id, posture.animationId);\r\n        }\r\n\r\n        if(this._posturesToAnimations.get(this._defaultPosture) === undefined) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    public processGestures(gestures: IAssetGesture[]): boolean\r\n    {\r\n        if(!gestures) return false;\r\n\r\n        for(const gesture of gestures)\r\n        {\r\n            if(this._gesturesToAnimations.get(gesture.id)) continue;\r\n\r\n            this._gesturesToAnimations.set(gesture.id, gesture.animationId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public postureToAnimation(posture: string): number\r\n    {\r\n        if(!this._posturesToAnimations.get(posture)) posture = this._defaultPosture;\r\n\r\n        return this._posturesToAnimations.get(posture);\r\n    }\r\n\r\n    public getGestureDisabled(k: string): boolean\r\n    {\r\n        if(k === 'ded') return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public gestureToAnimation(gesture: string): number\r\n    {\r\n        if(!this._gesturesToAnimations.get(gesture)) return PetSizeData.DEFAULT;\r\n\r\n        return this._gesturesToAnimations.get(gesture);\r\n    }\r\n\r\n    public animationToPosture(k: number, _arg_2: boolean): string\r\n    {\r\n        if((k >= 0) && (k < this._posturesToAnimations.size))\r\n        {\r\n            const keys = this._posturesToAnimations.keys();\r\n\r\n            for(;;)\r\n            {\r\n                const key = keys.next();\r\n\r\n                if(key.done) return null;\r\n\r\n                if(k <= 0) return key.value;\r\n\r\n                --k;\r\n            }\r\n        }\r\n\r\n        return (_arg_2) ? this._defaultPosture : null;\r\n    }\r\n\r\n    public animationToGesture(index: number): string\r\n    {\r\n        if((index >= 0) && (index < this._gesturesToAnimations.size))\r\n        {\r\n            const keys = this._gesturesToAnimations.keys();\r\n\r\n            for(;;)\r\n            {\r\n                const key = keys.next();\r\n\r\n                if(key.done) return null;\r\n\r\n                if(index <= 0) return key.value;\r\n\r\n                --index;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getGestureForAnimationId(k: number): string\r\n    {\r\n        for(const _local_2 of this._gesturesToAnimations.keys())\r\n        {\r\n            if(this._gesturesToAnimations.get(_local_2) === k) return _local_2;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get totalPostures(): number\r\n    {\r\n        return this._posturesToAnimations.size;\r\n    }\r\n\r\n    public get totalGestures(): number\r\n    {\r\n        return this._gesturesToAnimations.size;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}