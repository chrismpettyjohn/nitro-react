{"ast":null,"code":"import { AnimationAction } from './animation/AnimationAction';\nexport class AvatarAnimationData {\n  constructor() {\n    this._actions = void 0;\n    this._actions = new Map();\n  }\n\n  parse(data) {\n    if (data && data.length > 0) {\n      for (const animation of data) {\n        if (!animation) continue;\n        const newAnimation = new AnimationAction(animation);\n\n        this._actions.set(newAnimation.id, newAnimation);\n      }\n    }\n\n    return true;\n  }\n\n  appendJSON(k) {\n    for (const _local_2 of k.action) {\n      this._actions.set(_local_2.id, new AnimationAction(_local_2));\n    }\n\n    return true;\n  }\n\n  getAction(action) {\n    const existing = this._actions.get(action.id);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  getFrameCount(k) {\n    const animationAction = this.getAction(k);\n    if (!animationAction) return 0;\n    return animationAction.frameCount;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/AvatarAnimationData.ts"],"names":["AnimationAction","AvatarAnimationData","constructor","_actions","Map","parse","data","length","animation","newAnimation","set","id","appendJSON","k","_local_2","action","getAction","existing","get","getFrameCount","animationAction","frameCount"],"mappings":"AACA,SAASA,eAAT,QAAgC,6BAAhC;AAGA,OAAO,MAAMC,mBAAN,CACP;AAGIC,EAAAA,WAAW,GACX;AAAA,SAHQC,QAGR;AACI,SAAKA,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACH;;AAEMC,EAAAA,KAAK,CAACC,IAAD,EACZ;AACI,QAAGA,IAAI,IAAKA,IAAI,CAACC,MAAL,GAAc,CAA1B,EACA;AACI,WAAI,MAAMC,SAAV,IAAuBF,IAAvB,EACA;AACI,YAAG,CAACE,SAAJ,EAAe;AAEf,cAAMC,YAAY,GAAG,IAAIT,eAAJ,CAAoBQ,SAApB,CAArB;;AAEA,aAAKL,QAAL,CAAcO,GAAd,CAAkBD,YAAY,CAACE,EAA/B,EAAmCF,YAAnC;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;AAEMG,EAAAA,UAAU,CAACC,CAAD,EACjB;AACI,SAAI,MAAMC,QAAV,IAAsBD,CAAC,CAACE,MAAxB,EACA;AACI,WAAKZ,QAAL,CAAcO,GAAd,CAAkBI,QAAQ,CAACH,EAA3B,EAA+B,IAAIX,eAAJ,CAAoBc,QAApB,CAA/B;AACH;;AAED,WAAO,IAAP;AACH;;AAEME,EAAAA,SAAS,CAACD,MAAD,EAChB;AACI,UAAME,QAAQ,GAAG,KAAKd,QAAL,CAAce,GAAd,CAAkBH,MAAM,CAACJ,EAAzB,CAAjB;;AAEA,QAAG,CAACM,QAAJ,EAAc,OAAO,IAAP;AAEd,WAAOA,QAAP;AACH;;AAEME,EAAAA,aAAa,CAACN,CAAD,EACpB;AACI,UAAMO,eAAe,GAAG,KAAKJ,SAAL,CAAeH,CAAf,CAAxB;AAEA,QAAG,CAACO,eAAJ,EAAqB,OAAO,CAAP;AAErB,WAAOA,eAAe,CAACC,UAAvB;AACH;;AAnDL","sourcesContent":["import { IActionDefinition } from '../actions/IActionDefinition';\r\nimport { AnimationAction } from './animation/AnimationAction';\r\nimport { IFigureSetData } from './IFigureSetData';\r\n\r\nexport class AvatarAnimationData implements IFigureSetData\r\n{\r\n    private _actions: Map<string, AnimationAction>;\r\n\r\n    constructor()\r\n    {\r\n        this._actions = new Map();\r\n    }\r\n\r\n    public parse(data: any): boolean\r\n    {\r\n        if(data && (data.length > 0))\r\n        {\r\n            for(const animation of data)\r\n            {\r\n                if(!animation) continue;\r\n\r\n                const newAnimation = new AnimationAction(animation);\r\n\r\n                this._actions.set(newAnimation.id, newAnimation);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public appendJSON(k: any): boolean\r\n    {\r\n        for(const _local_2 of k.action)\r\n        {\r\n            this._actions.set(_local_2.id, new AnimationAction(_local_2));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public getAction(action: IActionDefinition): AnimationAction\r\n    {\r\n        const existing = this._actions.get(action.id);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getFrameCount(k: IActionDefinition): number\r\n    {\r\n        const animationAction = this.getAction(k);\r\n\r\n        if(!animationAction) return 0;\r\n\r\n        return animationAction.frameCount;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}