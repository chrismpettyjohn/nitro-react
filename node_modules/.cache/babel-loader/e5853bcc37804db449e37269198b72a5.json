{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/inventory/InventoryView.tsx\",\n    _s = $RefreshSig$();\n\nimport { BadgePointLimitsEvent, RoomEngineObjectEvent, RoomPreviewer, RoomSessionEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, GetLocalization, GetRoomEngine, LocalizeText, RemoveLinkEventTracker, UnseenItemCategory } from '../../api';\nimport { isObjectMoverRequested, setObjectMoverRequested } from '../../api/inventory/InventoryUtilities';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../common';\nimport { useInventoryTrade, useInventoryUnseenTracker, UseMessageEventHook, UseRoomEngineEvent, UseRoomSessionManagerEvent } from '../../hooks';\nimport { InventoryBadgeView } from './views/badge/InventoryBadgeView';\nimport { InventoryBotView } from './views/bot/InventoryBotView';\nimport { InventoryFurnitureView } from './views/furniture/InventoryFurnitureView';\nimport { InventoryTradeView } from './views/furniture/InventoryTradeView';\nimport { InventoryPetView } from './views/pet/InventoryPetView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TAB_FURNITURE = 'inventory.furni';\nconst TAB_BOTS = 'inventory.bots';\nconst TAB_PETS = 'inventory.furni.tab.pets';\nconst TAB_BADGES = 'inventory.badges';\nconst TABS = [TAB_FURNITURE, TAB_BOTS, TAB_PETS, TAB_BADGES];\nconst UNSEEN_CATEGORIES = [UnseenItemCategory.FURNI, UnseenItemCategory.BOT, UnseenItemCategory.PET, UnseenItemCategory.BADGE];\nexport const InventoryView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [currentTab, setCurrentTab] = useState(TABS[0]);\n  const [roomSession, setRoomSession] = useState(null);\n  const [roomPreviewer, setRoomPreviewer] = useState(null);\n  const {\n    isTrading = false,\n    stopTrading = null\n  } = useInventoryTrade();\n  const {\n    getCount = null,\n    resetCategory = null\n  } = useInventoryUnseenTracker();\n\n  const close = () => {\n    if (isTrading) stopTrading();\n    setIsVisible(false);\n  };\n\n  const onRoomEngineObjectPlacedEvent = useCallback(event => {\n    if (!isObjectMoverRequested()) return;\n    setObjectMoverRequested(false);\n    if (!event.placedInRoom) setIsVisible(true);\n  }, []);\n  UseRoomEngineEvent(RoomEngineObjectEvent.PLACED, onRoomEngineObjectPlacedEvent);\n  const onRoomSessionEvent = useCallback(event => {\n    switch (event.type) {\n      case RoomSessionEvent.CREATED:\n        setRoomSession(event.session);\n        return;\n\n      case RoomSessionEvent.ENDED:\n        setRoomSession(null);\n        setIsVisible(false);\n        return;\n    }\n  }, []);\n  UseRoomSessionManagerEvent(RoomSessionEvent.CREATED, onRoomSessionEvent);\n  UseRoomSessionManagerEvent(RoomSessionEvent.ENDED, onRoomSessionEvent);\n  const onBadgePointLimitsEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    for (const data of parser.data) GetLocalization().setBadgePointLimit(data.badgeId, data.limit);\n  }, []);\n  UseMessageEventHook(BadgePointLimitsEvent, onBadgePointLimitsEvent);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived: url => {\n        const parts = url.split('/');\n        if (parts.length < 2) return;\n\n        switch (parts[1]) {\n          case 'show':\n            setIsVisible(true);\n            return;\n\n          case 'hide':\n            setIsVisible(false);\n            return;\n\n          case 'toggle':\n            setIsVisible(prevValue => !prevValue);\n            return;\n        }\n      },\n      eventUrlPrefix: 'inventory/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, []);\n  useEffect(() => {\n    setRoomPreviewer(new RoomPreviewer(GetRoomEngine(), ++RoomPreviewer.PREVIEW_COUNTER));\n    return () => {\n      setRoomPreviewer(prevValue => {\n        prevValue.dispose();\n        return null;\n      });\n    };\n  }, []);\n  useEffect(() => {\n    if (!isVisible && isTrading) setIsVisible(true);\n  }, [isVisible, isTrading]);\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(NitroCardView, {\n    uniqueKey: 'inventory',\n    className: isTrading ? 'nitro-inventory trading' : 'nitro-inventory',\n    theme: isTrading ? 'primary' : '',\n    children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n      headerText: LocalizeText('inventory.title'),\n      onCloseClick: close\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), !isTrading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NitroCardTabsView, {\n        children: TABS.map((name, index) => {\n          return /*#__PURE__*/_jsxDEV(NitroCardTabsItemView, {\n            isActive: currentTab === name,\n            onClick: event => setCurrentTab(name),\n            count: getCount(UNSEEN_CATEGORIES[index]),\n            children: LocalizeText(name)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n        children: [currentTab === TAB_FURNITURE && /*#__PURE__*/_jsxDEV(InventoryFurnitureView, {\n          roomSession: roomSession,\n          roomPreviewer: roomPreviewer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }, this), currentTab === TAB_BOTS && /*#__PURE__*/_jsxDEV(InventoryBotView, {\n          roomSession: roomSession,\n          roomPreviewer: roomPreviewer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this), currentTab === TAB_PETS && /*#__PURE__*/_jsxDEV(InventoryPetView, {\n          roomSession: roomSession,\n          roomPreviewer: roomPreviewer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this), currentTab === TAB_BADGES && /*#__PURE__*/_jsxDEV(InventoryBadgeView, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), isTrading && /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n      children: /*#__PURE__*/_jsxDEV(InventoryTradeView, {\n        cancelTrade: close\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InventoryView, \"R1pORVnDV33bbwv8wkQzrdHgvQA=\", false, function () {\n  return [useInventoryTrade, useInventoryUnseenTracker];\n});\n\n_c = InventoryView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/inventory/InventoryView.tsx"],"names":["BadgePointLimitsEvent","RoomEngineObjectEvent","RoomPreviewer","RoomSessionEvent","useCallback","useEffect","useState","AddEventLinkTracker","GetLocalization","GetRoomEngine","LocalizeText","RemoveLinkEventTracker","UnseenItemCategory","isObjectMoverRequested","setObjectMoverRequested","NitroCardContentView","NitroCardHeaderView","NitroCardTabsItemView","NitroCardTabsView","NitroCardView","useInventoryTrade","useInventoryUnseenTracker","UseMessageEventHook","UseRoomEngineEvent","UseRoomSessionManagerEvent","InventoryBadgeView","InventoryBotView","InventoryFurnitureView","InventoryTradeView","InventoryPetView","TAB_FURNITURE","TAB_BOTS","TAB_PETS","TAB_BADGES","TABS","UNSEEN_CATEGORIES","FURNI","BOT","PET","BADGE","InventoryView","props","isVisible","setIsVisible","currentTab","setCurrentTab","roomSession","setRoomSession","roomPreviewer","setRoomPreviewer","isTrading","stopTrading","getCount","resetCategory","close","onRoomEngineObjectPlacedEvent","event","placedInRoom","PLACED","onRoomSessionEvent","type","CREATED","session","ENDED","onBadgePointLimitsEvent","parser","getParser","data","setBadgePointLimit","badgeId","limit","linkTracker","linkReceived","url","parts","split","length","prevValue","eventUrlPrefix","PREVIEW_COUNTER","dispose","map","name","index"],"mappings":"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","sourcesContent":["import { BadgePointLimitsEvent, ILinkEventTracker, IRoomSession, RoomEngineObjectEvent, RoomEngineObjectPlacedEvent, RoomPreviewer, RoomSessionEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, GetLocalization, GetRoomEngine, LocalizeText, RemoveLinkEventTracker, UnseenItemCategory } from '../../api';\nimport { isObjectMoverRequested, setObjectMoverRequested } from '../../api/inventory/InventoryUtilities';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../common';\nimport { useInventoryTrade, useInventoryUnseenTracker, UseMessageEventHook, UseRoomEngineEvent, UseRoomSessionManagerEvent } from '../../hooks';\nimport { InventoryBadgeView } from './views/badge/InventoryBadgeView';\nimport { InventoryBotView } from './views/bot/InventoryBotView';\nimport { InventoryFurnitureView } from './views/furniture/InventoryFurnitureView';\nimport { InventoryTradeView } from './views/furniture/InventoryTradeView';\nimport { InventoryPetView } from './views/pet/InventoryPetView';\n\nconst TAB_FURNITURE: string = 'inventory.furni';\nconst TAB_BOTS: string = 'inventory.bots';\nconst TAB_PETS: string = 'inventory.furni.tab.pets';\nconst TAB_BADGES: string = 'inventory.badges';\nconst TABS = [ TAB_FURNITURE, TAB_BOTS, TAB_PETS, TAB_BADGES ];\nconst UNSEEN_CATEGORIES = [ UnseenItemCategory.FURNI, UnseenItemCategory.BOT, UnseenItemCategory.PET, UnseenItemCategory.BADGE ];\n\nexport const InventoryView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const [ currentTab, setCurrentTab ] = useState<string>(TABS[0]);\n    const [ roomSession, setRoomSession ] = useState<IRoomSession>(null);\n    const [ roomPreviewer, setRoomPreviewer ] = useState<RoomPreviewer>(null);\n    const { isTrading = false, stopTrading = null } = useInventoryTrade();\n    const { getCount = null, resetCategory = null } = useInventoryUnseenTracker();\n\n    const close = () =>\n    {\n        if(isTrading) stopTrading();\n\n        setIsVisible(false);\n    }\n\n    const onRoomEngineObjectPlacedEvent = useCallback((event: RoomEngineObjectPlacedEvent) =>\n    {\n        if(!isObjectMoverRequested()) return;\n\n        setObjectMoverRequested(false);\n\n        if(!event.placedInRoom) setIsVisible(true);\n    }, []);\n\n    UseRoomEngineEvent(RoomEngineObjectEvent.PLACED, onRoomEngineObjectPlacedEvent);\n\n    const onRoomSessionEvent = useCallback((event: RoomSessionEvent) =>\n    {\n        switch(event.type)\n        {\n            case RoomSessionEvent.CREATED:\n                setRoomSession(event.session);\n                return;\n            case RoomSessionEvent.ENDED:\n                setRoomSession(null);\n                setIsVisible(false);\n                return;\n        }\n    }, []);\n\n    UseRoomSessionManagerEvent(RoomSessionEvent.CREATED, onRoomSessionEvent);\n    UseRoomSessionManagerEvent(RoomSessionEvent.ENDED, onRoomSessionEvent);\n\n    const onBadgePointLimitsEvent = useCallback((event: BadgePointLimitsEvent) =>\n    {\n        const parser = event.getParser();\n\n        for(const data of parser.data) GetLocalization().setBadgePointLimit(data.badgeId, data.limit);\n    }, []);\n\n    UseMessageEventHook(BadgePointLimitsEvent, onBadgePointLimitsEvent);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived: (url: string) =>\n            {\n                const parts = url.split('/');\n\n                if(parts.length < 2) return;\n        \n                switch(parts[1])\n                {\n                    case 'show':\n                        setIsVisible(true);\n                        return;\n                    case 'hide':\n                        setIsVisible(false);\n                        return;\n                    case 'toggle':\n                        setIsVisible(prevValue => !prevValue);\n                        return;\n                }\n            },\n            eventUrlPrefix: 'inventory/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, []);\n\n    useEffect(() =>\n    {\n        setRoomPreviewer(new RoomPreviewer(GetRoomEngine(), ++RoomPreviewer.PREVIEW_COUNTER));\n\n        return () =>\n        {\n            setRoomPreviewer(prevValue =>\n            {\n                prevValue.dispose();\n\n                return null;\n            });\n        }\n    }, []);\n\n    useEffect(() =>\n    {\n        if(!isVisible && isTrading) setIsVisible(true);\n    }, [ isVisible, isTrading ]);\n\n    if(!isVisible) return null;\n\n    return (\n        <NitroCardView uniqueKey={ 'inventory' } className={ isTrading ? 'nitro-inventory trading' : 'nitro-inventory' } theme={ isTrading ? 'primary' : '' } >\n            <NitroCardHeaderView headerText={ LocalizeText('inventory.title') } onCloseClick={ close } />\n            { !isTrading &&\n                <>\n                    <NitroCardTabsView>\n                        { TABS.map((name, index) =>\n                        {\n                            return (\n                                <NitroCardTabsItemView key={ index } isActive={ (currentTab === name) } onClick={ event => setCurrentTab(name) } count={ getCount(UNSEEN_CATEGORIES[index]) }>\n                                    { LocalizeText(name) }\n                                </NitroCardTabsItemView>\n                            );\n                        }) }\n                    </NitroCardTabsView>\n                    <NitroCardContentView>\n                        { (currentTab === TAB_FURNITURE ) &&\n                            <InventoryFurnitureView roomSession={ roomSession } roomPreviewer={ roomPreviewer } /> }\n                        { (currentTab === TAB_BOTS ) &&\n                            <InventoryBotView roomSession={ roomSession } roomPreviewer={ roomPreviewer } /> }\n                        { (currentTab === TAB_PETS ) && \n                            <InventoryPetView roomSession={ roomSession } roomPreviewer={ roomPreviewer } /> }\n                        { (currentTab === TAB_BADGES ) && \n                            <InventoryBadgeView /> }\n                    </NitroCardContentView>\n                </> }\n            { isTrading &&\n                <NitroCardContentView>\n                    <InventoryTradeView cancelTrade={ close } />\n                </NitroCardContentView> }\n        </NitroCardView>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}