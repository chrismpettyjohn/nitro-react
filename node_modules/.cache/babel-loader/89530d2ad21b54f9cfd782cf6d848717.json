{"ast":null,"code":"import { Vector3D } from '../../../../avatar/geometry/Vector3D';\nimport { FurnitureParticleSystemParticle } from './FurnitureParticleSystemParticle';\nexport class FurnitureParticleSystemEmitter extends FurnitureParticleSystemParticle {\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let spriteId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    super();\n    this._name = void 0;\n    this._roomObjectSpriteId = -1;\n    this._force = void 0;\n    this._timeStep = 0.1;\n    this._gravity = void 0;\n    this._airFriction = void 0;\n    this._explosionShape = void 0;\n    this._particleConfigurations = void 0;\n    this._particles = void 0;\n    this._maxNumberOfParticles = void 0;\n    this._particlesPerFrame = void 0;\n    this._emittedParticles = void 0;\n    this._fuseTime = 10;\n    this._energy = 1;\n    this._hasIgnited = false;\n    this._burstPulse = 1;\n    this._emitterDirection = void 0;\n    this._particles = [];\n    this._name = name;\n    this._roomObjectSpriteId = spriteId;\n    this._particleConfigurations = [];\n  }\n\n  dispose() {\n    for (const k of this._particles) k.dispose();\n\n    this._particles = null;\n    this._particleConfigurations = null;\n    super.dispose();\n  }\n\n  setup(maxNumOfParticles, particlesPerFrame, force, direction, gravity, airFriction, explosionShape, energy, fuseTime, burstPulse) {\n    this._maxNumberOfParticles = maxNumOfParticles;\n    this._particlesPerFrame = particlesPerFrame;\n    this._force = force;\n    this._emitterDirection = direction;\n\n    this._emitterDirection.normalize();\n\n    this._gravity = gravity;\n    this._airFriction = airFriction;\n    this._explosionShape = explosionShape;\n    this._fuseTime = fuseTime;\n    this._energy = energy;\n    this._burstPulse = burstPulse;\n    this.reset();\n  }\n\n  reset() {\n    for (const particle of this._particles) particle.dispose();\n\n    this._particles = [];\n    this._emittedParticles = 0;\n    this._hasIgnited = false;\n    this.init(0, 0, 0, this._emitterDirection, this._force, this._timeStep, this._fuseTime, true);\n  }\n\n  copyStateFrom(emitter, scale) {\n    super.copy(emitter, scale);\n    this._force = emitter._force;\n    this._emitterDirection = emitter._emitterDirection;\n    this._gravity = emitter._gravity;\n    this._airFriction = emitter._airFriction;\n    this._explosionShape = emitter._explosionShape;\n    this._fuseTime = emitter._fuseTime;\n    this._energy = emitter._energy;\n    this._burstPulse = emitter._burstPulse;\n    this._timeStep = emitter._timeStep;\n    this._hasIgnited = emitter._hasIgnited;\n  }\n\n  configureParticle(lifeTIme, isEmitter, frames, fade) {\n    const particle = {};\n    particle.lifeTime = lifeTIme;\n    particle.isEmitter = isEmitter;\n    particle.frames = frames;\n    particle.fade = fade;\n\n    this._particleConfigurations.push(particle);\n  }\n\n  ignite() {\n    this._hasIgnited = true;\n\n    if (this._emittedParticles < this._maxNumberOfParticles) {\n      if (this.age > 1) this.releaseParticles(this, this.direction);\n    }\n  }\n\n  releaseParticles(particle) {\n    let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!direction) direction = new Vector3D();\n    const newDirection = new Vector3D();\n    const randomParticle = this.getRandomParticleConfiguration();\n    let i = 0;\n\n    while (i < this._particlesPerFrame) {\n      switch (this._explosionShape) {\n        case FurnitureParticleSystemEmitter.CONE:\n          newDirection.x = this.randomBoolean(0.5) ? Math.random() : -Math.random();\n          newDirection.y = -(Math.random() + 1);\n          newDirection.z = this.randomBoolean(0.5) ? Math.random() : -Math.random();\n          break;\n\n        case FurnitureParticleSystemEmitter.PLANE:\n          newDirection.x = this.randomBoolean(0.5) ? Math.random() : -Math.random();\n          newDirection.y = 0;\n          newDirection.z = this.randomBoolean(0.5) ? Math.random() : -Math.random();\n          break;\n\n        case FurnitureParticleSystemEmitter.SPHERE:\n          newDirection.x = this.randomBoolean(0.5) ? Math.random() : -Math.random();\n          newDirection.y = this.randomBoolean(0.5) ? Math.random() : -Math.random();\n          newDirection.z = this.randomBoolean(0.5) ? Math.random() : -Math.random();\n          break;\n      }\n\n      newDirection.normalize();\n      const newParticle = new FurnitureParticleSystemParticle();\n      let lifeTime = 0;\n      let isEmitter = false;\n      let fade = false;\n      let frames = [];\n\n      if (randomParticle) {\n        lifeTime = Math.floor(Math.random() * randomParticle.lifeTime + 10);\n        isEmitter = randomParticle.isEmitter;\n        frames = randomParticle.frames;\n        fade = randomParticle.fade;\n      } else {\n        lifeTime = Math.trunc(Math.floor(Math.random() * 20 + 10));\n        isEmitter = false;\n        frames = [];\n      }\n\n      newParticle.init(particle.x, particle.y, particle.z, newDirection, this._energy, this._timeStep, lifeTime, isEmitter, frames, fade);\n\n      this._particles.push(newParticle);\n\n      this._emittedParticles++;\n      i++;\n    }\n  }\n\n  getRandomParticleConfiguration() {\n    const index = Math.trunc(Math.floor(Math.random() * this._particleConfigurations.length));\n    return this._particleConfigurations[index];\n  }\n\n  update() {\n    super.update();\n    this.accumulateForces();\n    this.verlet();\n    this.satisfyConstraints();\n\n    if (!this.isAlive && this._emittedParticles < this._maxNumberOfParticles) {\n      if (this.age % this._burstPulse === 0) this.releaseParticles(this, this.direction);\n    }\n  }\n\n  verlet() {\n    if (this.isAlive || this._emittedParticles < this._maxNumberOfParticles) {\n      const x = this.x;\n      const y = this.y;\n      const z = this.z;\n      this.x = (2 - this._airFriction) * this.x - (1 - this._airFriction) * this.lastX;\n      this.y = (2 - this._airFriction) * this.y - (1 - this._airFriction) * this.lastY + this._gravity * this._timeStep * this._timeStep;\n      this.z = (2 - this._airFriction) * this.z - (1 - this._airFriction) * this.lastZ;\n      this.lastX = x;\n      this.lastY = y;\n      this.lastZ = z;\n    }\n\n    const particles = [];\n\n    for (const particle of this._particles) {\n      particle.update();\n      const x = particle.x;\n      const y = particle.y;\n      const z = particle.z;\n      particle.x = (2 - this._airFriction) * particle.x - (1 - this._airFriction) * particle.lastX;\n      particle.y = (2 - this._airFriction) * particle.y - (1 - this._airFriction) * particle.lastY + this._gravity * this._timeStep * this._timeStep;\n      particle.z = (2 - this._airFriction) * particle.z - (1 - this._airFriction) * particle.lastZ;\n      particle.lastX = x;\n      particle.lastY = y;\n      particle.lastZ = z;\n      if (particle.y > 10 || !particle.isAlive) particles.push(particle);\n    }\n\n    for (const particle of particles) {\n      if (particle.isEmitter) {//\n      }\n\n      this._particles.splice(this._particles.indexOf(particle), 1);\n\n      particle.dispose();\n    }\n  }\n\n  satisfyConstraints() {}\n\n  accumulateForces() {\n    for (const k of this._particles) {//\n    }\n  }\n\n  get particles() {\n    return this._particles;\n  }\n\n  get hasIgnited() {\n    return this._hasIgnited;\n  }\n\n  randomBoolean(k) {\n    return Math.random() < k;\n  }\n\n  get roomObjectSpriteId() {\n    return this._roomObjectSpriteId;\n  }\n\n}\nFurnitureParticleSystemEmitter.CONE = 'cone';\nFurnitureParticleSystemEmitter.PLANE = 'plane';\nFurnitureParticleSystemEmitter.SPHERE = 'sphere';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurnitureParticleSystemEmitter.ts"],"names":["Vector3D","FurnitureParticleSystemParticle","FurnitureParticleSystemEmitter","constructor","name","spriteId","_name","_roomObjectSpriteId","_force","_timeStep","_gravity","_airFriction","_explosionShape","_particleConfigurations","_particles","_maxNumberOfParticles","_particlesPerFrame","_emittedParticles","_fuseTime","_energy","_hasIgnited","_burstPulse","_emitterDirection","dispose","k","setup","maxNumOfParticles","particlesPerFrame","force","direction","gravity","airFriction","explosionShape","energy","fuseTime","burstPulse","normalize","reset","particle","init","copyStateFrom","emitter","scale","copy","configureParticle","lifeTIme","isEmitter","frames","fade","lifeTime","push","ignite","age","releaseParticles","newDirection","randomParticle","getRandomParticleConfiguration","i","CONE","x","randomBoolean","Math","random","y","z","PLANE","SPHERE","newParticle","floor","trunc","index","length","update","accumulateForces","verlet","satisfyConstraints","isAlive","lastX","lastY","lastZ","particles","splice","indexOf","hasIgnited","roomObjectSpriteId"],"mappings":"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","sourcesContent":["import { IGraphicAsset } from '../../../../../room';\r\nimport { Vector3D } from '../../../../avatar/geometry/Vector3D';\r\nimport { ParticleSystemParticle } from '../data';\r\nimport { FurnitureParticleSystemParticle } from './FurnitureParticleSystemParticle';\r\n\r\nexport class FurnitureParticleSystemEmitter extends FurnitureParticleSystemParticle\r\n{\r\n    public static CONE: string = 'cone';\r\n    public static PLANE: string = 'plane';\r\n    public static SPHERE: string = 'sphere';\r\n\r\n    private _name: string;\r\n    private _roomObjectSpriteId: number = -1;\r\n    private _force: number;\r\n    private _timeStep: number = 0.1;\r\n    private _gravity: number;\r\n    private _airFriction: number;\r\n    private _explosionShape: string;\r\n    private _particleConfigurations: ParticleSystemParticle[];\r\n    private _particles: FurnitureParticleSystemParticle[];\r\n    private _maxNumberOfParticles: number;\r\n    private _particlesPerFrame: number;\r\n    private _emittedParticles: number;\r\n    private _fuseTime: number = 10;\r\n    private _energy: number = 1;\r\n    private _hasIgnited: boolean = false;\r\n    private _burstPulse: number = 1;\r\n    private _emitterDirection: Vector3D;\r\n\r\n    constructor(name: string = '', spriteId: number = -1)\r\n    {\r\n        super();\r\n\r\n        this._particles = [];\r\n        this._name = name;\r\n        this._roomObjectSpriteId = spriteId;\r\n        this._particleConfigurations = [];\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        for(const k of this._particles) k.dispose();\r\n\r\n        this._particles = null;\r\n        this._particleConfigurations = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    public setup(maxNumOfParticles: number, particlesPerFrame: number, force: number, direction: Vector3D, gravity: number, airFriction: number, explosionShape: string, energy: number, fuseTime: number, burstPulse: number): void\r\n    {\r\n        this._maxNumberOfParticles = maxNumOfParticles;\r\n        this._particlesPerFrame = particlesPerFrame;\r\n        this._force = force;\r\n        this._emitterDirection = direction;\r\n        this._emitterDirection.normalize();\r\n        this._gravity = gravity;\r\n        this._airFriction = airFriction;\r\n        this._explosionShape = explosionShape;\r\n        this._fuseTime = fuseTime;\r\n        this._energy = energy;\r\n        this._burstPulse = burstPulse;\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void\r\n    {\r\n        for(const particle of this._particles) particle.dispose();\r\n\r\n        this._particles = [];\r\n        this._emittedParticles = 0;\r\n        this._hasIgnited = false;\r\n\r\n        this.init(0, 0, 0, this._emitterDirection, this._force, this._timeStep, this._fuseTime, true);\r\n    }\r\n\r\n    public copyStateFrom(emitter: FurnitureParticleSystemEmitter, scale: number): void\r\n    {\r\n        super.copy(emitter, scale);\r\n\r\n        this._force = emitter._force;\r\n        this._emitterDirection = emitter._emitterDirection;\r\n        this._gravity = emitter._gravity;\r\n        this._airFriction = emitter._airFriction;\r\n        this._explosionShape = emitter._explosionShape;\r\n        this._fuseTime = emitter._fuseTime;\r\n        this._energy = emitter._energy;\r\n        this._burstPulse = emitter._burstPulse;\r\n        this._timeStep = emitter._timeStep;\r\n        this._hasIgnited = emitter._hasIgnited;\r\n    }\r\n\r\n    public configureParticle(lifeTIme: number, isEmitter: boolean, frames: IGraphicAsset[], fade: boolean): void\r\n    {\r\n        const particle: ParticleSystemParticle = {};\r\n\r\n        particle.lifeTime = lifeTIme;\r\n        particle.isEmitter = isEmitter;\r\n        particle.frames = frames;\r\n        particle.fade = fade;\r\n\r\n        this._particleConfigurations.push(particle);\r\n    }\r\n\r\n    protected ignite(): void\r\n    {\r\n        this._hasIgnited = true;\r\n\r\n        if(this._emittedParticles < this._maxNumberOfParticles)\r\n        {\r\n            if(this.age > 1) this.releaseParticles(this, this.direction);\r\n        }\r\n    }\r\n\r\n    private releaseParticles(particle: FurnitureParticleSystemParticle, direction: Vector3D = null): void\r\n    {\r\n        if(!direction) direction = new Vector3D();\r\n\r\n        const newDirection = new Vector3D();\r\n        const randomParticle = this.getRandomParticleConfiguration();\r\n\r\n        let i = 0;\r\n\r\n        while(i < this._particlesPerFrame)\r\n        {\r\n            switch(this._explosionShape)\r\n            {\r\n                case FurnitureParticleSystemEmitter.CONE:\r\n                    newDirection.x = ((this.randomBoolean(0.5)) ? Math.random() : -(Math.random()));\r\n                    newDirection.y = -(Math.random() + 1);\r\n                    newDirection.z = ((this.randomBoolean(0.5)) ? Math.random() : -(Math.random()));\r\n                    break;\r\n                case FurnitureParticleSystemEmitter.PLANE:\r\n                    newDirection.x = ((this.randomBoolean(0.5)) ? Math.random() : -(Math.random()));\r\n                    newDirection.y = 0;\r\n                    newDirection.z = ((this.randomBoolean(0.5)) ? Math.random() : -(Math.random()));\r\n                    break;\r\n                case FurnitureParticleSystemEmitter.SPHERE:\r\n                    newDirection.x = ((this.randomBoolean(0.5)) ? Math.random() : -(Math.random()));\r\n                    newDirection.y = ((this.randomBoolean(0.5)) ? Math.random() : -(Math.random()));\r\n                    newDirection.z = ((this.randomBoolean(0.5)) ? Math.random() : -(Math.random()));\r\n                    break;\r\n            }\r\n\r\n            newDirection.normalize();\r\n\r\n            const newParticle = new FurnitureParticleSystemParticle();\r\n\r\n            let lifeTime = 0;\r\n            let isEmitter = false;\r\n            let fade = false;\r\n            let frames: IGraphicAsset[] = [];\r\n\r\n            if(randomParticle)\r\n            {\r\n                lifeTime = Math.floor(((Math.random() * randomParticle.lifeTime) + 10));\r\n                isEmitter = randomParticle.isEmitter;\r\n                frames = randomParticle.frames;\r\n                fade = randomParticle.fade;\r\n            }\r\n            else\r\n            {\r\n                lifeTime = Math.trunc(Math.floor(((Math.random() * 20) + 10)));\r\n                isEmitter = false;\r\n                frames = [];\r\n            }\r\n\r\n            newParticle.init(particle.x, particle.y, particle.z, newDirection, this._energy, this._timeStep, lifeTime, isEmitter, frames, fade);\r\n\r\n            this._particles.push(newParticle);\r\n            this._emittedParticles++;\r\n\r\n            i++;\r\n        }\r\n    }\r\n\r\n    private getRandomParticleConfiguration(): ParticleSystemParticle\r\n    {\r\n        const index: number = Math.trunc(Math.floor((Math.random() * this._particleConfigurations.length)));\r\n\r\n        return this._particleConfigurations[index];\r\n    }\r\n\r\n    public update(): void\r\n    {\r\n        super.update();\r\n\r\n        this.accumulateForces();\r\n        this.verlet();\r\n        this.satisfyConstraints();\r\n\r\n        if(!this.isAlive && (this._emittedParticles < this._maxNumberOfParticles))\r\n        {\r\n            if((this.age % this._burstPulse) === 0) this.releaseParticles(this, this.direction);\r\n        }\r\n    }\r\n\r\n    public verlet(): void\r\n    {\r\n        if(this.isAlive || (this._emittedParticles < this._maxNumberOfParticles))\r\n        {\r\n            const x = this.x;\r\n            const y = this.y;\r\n            const z = this.z;\r\n\r\n            this.x = (((2 - this._airFriction) * this.x) - ((1 - this._airFriction) * this.lastX));\r\n            this.y = ((((2 - this._airFriction) * this.y) - ((1 - this._airFriction) * this.lastY)) + ((this._gravity * this._timeStep) * this._timeStep));\r\n            this.z = (((2 - this._airFriction) * this.z) - ((1 - this._airFriction) * this.lastZ));\r\n            this.lastX = x;\r\n            this.lastY = y;\r\n            this.lastZ = z;\r\n        }\r\n\r\n        const particles: FurnitureParticleSystemParticle[] = [];\r\n\r\n        for(const particle of this._particles)\r\n        {\r\n            particle.update();\r\n\r\n            const x = particle.x;\r\n            const y = particle.y;\r\n            const z = particle.z;\r\n            particle.x = (((2 - this._airFriction) * particle.x) - ((1 - this._airFriction) * particle.lastX));\r\n            particle.y = ((((2 - this._airFriction) * particle.y) - ((1 - this._airFriction) * particle.lastY)) + ((this._gravity * this._timeStep) * this._timeStep));\r\n            particle.z = (((2 - this._airFriction) * particle.z) - ((1 - this._airFriction) * particle.lastZ));\r\n            particle.lastX = x;\r\n            particle.lastY = y;\r\n            particle.lastZ = z;\r\n\r\n            if((particle.y > 10) || !particle.isAlive) particles.push(particle);\r\n        }\r\n\r\n        for(const particle of particles)\r\n        {\r\n            if(particle.isEmitter)\r\n            {\r\n                //\r\n            }\r\n\r\n            this._particles.splice(this._particles.indexOf(particle), 1);\r\n\r\n            particle.dispose();\r\n        }\r\n    }\r\n\r\n    private satisfyConstraints(): void\r\n    {\r\n    }\r\n\r\n    private accumulateForces(): void\r\n    {\r\n        for(const k of this._particles)\r\n        {\r\n            //\r\n        }\r\n    }\r\n\r\n    public get particles(): FurnitureParticleSystemParticle[]\r\n    {\r\n        return this._particles;\r\n    }\r\n\r\n    public get hasIgnited(): boolean\r\n    {\r\n        return this._hasIgnited;\r\n    }\r\n\r\n    private randomBoolean(k: number): boolean\r\n    {\r\n        return Math.random() < k;\r\n    }\r\n\r\n    public get roomObjectSpriteId(): number\r\n    {\r\n        return this._roomObjectSpriteId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}