{"ast":null,"code":"import { TalentTrackLevel } from './TalentTrackLevel';\nimport { TalentTrackRewardProduct } from './TalentTrackRewardProduct';\nimport { TalentTrackTask } from './TalentTrackTask';\nexport class TalentTrackParser {\n  constructor() {\n    this._type = void 0;\n    this._levels = void 0;\n  }\n\n  flush() {\n    this._type = null;\n    this._levels = null;\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    this._type = wrapper.readString();\n    this._levels = [];\n    const levelsCount = wrapper.readInt();\n\n    for (let i = 0; i < levelsCount; i++) {\n      const levelId = wrapper.readInt();\n      const levelState = wrapper.readInt();\n      const levelAchievements = [];\n      const achievementsCount = wrapper.readInt();\n\n      for (let j = 0; j < achievementsCount; j++) {\n        const id = wrapper.readInt();\n        const index = wrapper.readInt();\n        const code = wrapper.readString();\n        const state = wrapper.readInt();\n        const progress = wrapper.readInt();\n        const achievementProgress = wrapper.readInt();\n        levelAchievements.push(new TalentTrackTask(id, index, code, state, progress, achievementProgress));\n      }\n\n      const levelPerks = [];\n      const perksCount = wrapper.readInt();\n\n      for (let j = 0; j < perksCount; j++) levelPerks.push(wrapper.readString());\n\n      const levelItems = [];\n      const itemsCount = wrapper.readInt();\n\n      for (let j = 0; j < itemsCount; j++) {\n        const name = wrapper.readString();\n        const unknownInt = wrapper.readInt();\n        levelItems.push(new TalentTrackRewardProduct(name, unknownInt));\n      }\n\n      this._levels.push(new TalentTrackLevel(levelId, levelState, levelAchievements, levelPerks, levelItems));\n    }\n\n    return true;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get levels() {\n    return this._levels;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/talent/TalentTrackParser.ts"],"names":["TalentTrackLevel","TalentTrackRewardProduct","TalentTrackTask","TalentTrackParser","_type","_levels","flush","parse","wrapper","readString","levelsCount","readInt","i","levelId","levelState","levelAchievements","achievementsCount","j","id","index","code","state","progress","achievementProgress","push","levelPerks","perksCount","levelItems","itemsCount","name","unknownInt","type","levels"],"mappings":"AACA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,iBAAN,CACP;AAAA;AAAA,SACYC,KADZ;AAAA,SAEYC,OAFZ;AAAA;;AAIWC,EAAAA,KAAK,GACZ;AACI,SAAKF,KAAL,GAAa,IAAb;AACA,SAAKC,OAAL,GAAe,IAAf;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,SAAKJ,KAAL,GAAaI,OAAO,CAACC,UAAR,EAAb;AAEA,SAAKJ,OAAL,GAAe,EAAf;AACA,UAAMK,WAAW,GAAGF,OAAO,CAACG,OAAR,EAApB;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAnB,EAAgCE,CAAC,EAAjC,EACA;AACI,YAAMC,OAAO,GAAGL,OAAO,CAACG,OAAR,EAAhB;AACA,YAAMG,UAAU,GAAGN,OAAO,CAACG,OAAR,EAAnB;AAEA,YAAMI,iBAAoC,GAAG,EAA7C;AACA,YAAMC,iBAAiB,GAAGR,OAAO,CAACG,OAAR,EAA1B;;AAEA,WAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,iBAAnB,EAAsCC,CAAC,EAAvC,EACA;AACI,cAAMC,EAAE,GAAGV,OAAO,CAACG,OAAR,EAAX;AACA,cAAMQ,KAAK,GAAGX,OAAO,CAACG,OAAR,EAAd;AACA,cAAMS,IAAI,GAAGZ,OAAO,CAACC,UAAR,EAAb;AACA,cAAMY,KAAK,GAAGb,OAAO,CAACG,OAAR,EAAd;AACA,cAAMW,QAAQ,GAAGd,OAAO,CAACG,OAAR,EAAjB;AACA,cAAMY,mBAAmB,GAAGf,OAAO,CAACG,OAAR,EAA5B;AAEAI,QAAAA,iBAAiB,CAACS,IAAlB,CAAuB,IAAItB,eAAJ,CAAoBgB,EAApB,EAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4CC,QAA5C,EAAsDC,mBAAtD,CAAvB;AACH;;AAED,YAAME,UAAoB,GAAG,EAA7B;AACA,YAAMC,UAAU,GAAGlB,OAAO,CAACG,OAAR,EAAnB;;AAEA,WAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGS,UAAnB,EAA+BT,CAAC,EAAhC,EAAoCQ,UAAU,CAACD,IAAX,CAAgBhB,OAAO,CAACC,UAAR,EAAhB;;AAEpC,YAAMkB,UAAsC,GAAG,EAA/C;AACA,YAAMC,UAAU,GAAGpB,OAAO,CAACG,OAAR,EAAnB;;AAEA,WAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGW,UAAnB,EAA+BX,CAAC,EAAhC,EACA;AACI,cAAMY,IAAI,GAAGrB,OAAO,CAACC,UAAR,EAAb;AACA,cAAMqB,UAAU,GAAGtB,OAAO,CAACG,OAAR,EAAnB;AAEAgB,QAAAA,UAAU,CAACH,IAAX,CAAgB,IAAIvB,wBAAJ,CAA6B4B,IAA7B,EAAmCC,UAAnC,CAAhB;AACH;;AAED,WAAKzB,OAAL,CAAamB,IAAb,CAAkB,IAAIxB,gBAAJ,CAAqBa,OAArB,EAA8BC,UAA9B,EAA0CC,iBAA1C,EAA6DU,UAA7D,EAAyEE,UAAzE,CAAlB;AACH;;AAED,WAAO,IAAP;AACH;;AAEc,MAAJI,IAAI,GACf;AACI,WAAO,KAAK3B,KAAZ;AACH;;AAEgB,MAAN4B,MAAM,GACjB;AACI,WAAO,KAAK3B,OAAZ;AACH;;AAvEL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../core';\r\nimport { TalentTrackLevel } from './TalentTrackLevel';\r\nimport { TalentTrackRewardProduct } from './TalentTrackRewardProduct';\r\nimport { TalentTrackTask } from './TalentTrackTask';\r\n\r\nexport class TalentTrackParser implements IMessageParser\r\n{\r\n    private _type: string;\r\n    private _levels: TalentTrackLevel[];\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._type = null;\r\n        this._levels = null;\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        this._type = wrapper.readString();\r\n\r\n        this._levels = [];\r\n        const levelsCount = wrapper.readInt();\r\n\r\n        for(let i = 0; i < levelsCount; i++)\r\n        {\r\n            const levelId = wrapper.readInt();\r\n            const levelState = wrapper.readInt();\r\n\r\n            const levelAchievements: TalentTrackTask[] = [];\r\n            const achievementsCount = wrapper.readInt();\r\n\r\n            for(let j = 0; j < achievementsCount; j++)\r\n            {\r\n                const id = wrapper.readInt();\r\n                const index = wrapper.readInt();\r\n                const code = wrapper.readString();\r\n                const state = wrapper.readInt();\r\n                const progress = wrapper.readInt();\r\n                const achievementProgress = wrapper.readInt();\r\n\r\n                levelAchievements.push(new TalentTrackTask(id, index, code, state, progress, achievementProgress));\r\n            }\r\n\r\n            const levelPerks: string[] = [];\r\n            const perksCount = wrapper.readInt();\r\n\r\n            for(let j = 0; j < perksCount; j++) levelPerks.push(wrapper.readString());\r\n\r\n            const levelItems: TalentTrackRewardProduct[] = [];\r\n            const itemsCount = wrapper.readInt();\r\n\r\n            for(let j = 0; j < itemsCount; j++)\r\n            {\r\n                const name = wrapper.readString();\r\n                const unknownInt = wrapper.readInt();\r\n\r\n                levelItems.push(new TalentTrackRewardProduct(name, unknownInt));\r\n            }\r\n\r\n            this._levels.push(new TalentTrackLevel(levelId, levelState, levelAchievements, levelPerks, levelItems));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get type(): string\r\n    {\r\n        return this._type;\r\n    }\r\n\r\n    public get levels(): TalentTrackLevel[]\r\n    {\r\n        return this._levels;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}