{"ast":null,"code":"import { NitroLogger } from '../../core/common/logger/NitroLogger';\nimport { LegacyExternalInterface } from '../externalInterface/LegacyExternalInterface';\nexport class HabboWebTools {\n  static logEventLog(data) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('logEventLog', data);\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working, failed to log event log.');\n    }\n  }\n\n  static openPage(pageUrl) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('openPage', pageUrl);\n      } else {\n        NitroLogger.log('External interface not available, openPage failed.');\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to open web page ' + pageUrl);\n    }\n  }\n\n  static openWebPage(pageUrl) {\n    window.open(pageUrl);\n  }\n\n  static sendHeartBeat() {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('heartBeat');\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to send heartbeat');\n    }\n  }\n\n  static openWebPageAndMinimizeClient(pageUrl) {\n    try {\n      if (LegacyExternalInterface.available) {\n        HabboWebTools.openPage(pageUrl);\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to open web page ' + pageUrl);\n    }\n  }\n\n  static closeWebPageAndRestoreClient() {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('closeWebPageAndRestoreClient');\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to close web page and restore client!');\n    }\n  }\n\n  static openHabblet(name) {\n    let param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('openHabblet', name, param);\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to open Habblet ' + name);\n    }\n  }\n\n  static closeHabblet(name) {\n    let param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('closeHabblet', name, param);\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to close Habblet ' + name);\n    }\n  }\n\n  static send(reasonCode, reasonString) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('disconnect', reasonCode, reasonString);\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to close send ');\n    }\n  }\n\n  static showGame(gameUrl) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.callGame('showGame', gameUrl);\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to open game: ' + e);\n    }\n  }\n\n  static hideGame() {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.callGame('hideGame');\n      }\n    } catch (e) {\n      NitroLogger.log('Failed to hide game');\n    }\n  }\n\n  static open(url) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('openExternalLink', escape(url));\n      } else {\n        NitroLogger.log('External interface not available. Could not request to open: ' + url);\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not request to open: ' + url);\n    }\n  }\n\n  static roomVisited(roomId) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('roomVisited', roomId);\n      } else {\n        NitroLogger.log('External interface not available. Could not store last room visit.');\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not store last room visit.');\n    }\n  }\n\n  static openMinimail(target) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('openMinimail', target);\n      } else {\n        NitroLogger.log('External interface not available. Could not open minimail.');\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not open minimail.');\n    }\n  }\n\n  static openNews() {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('openNews');\n      } else {\n        NitroLogger.log('External interface not available. Could not open news.');\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not open news.');\n    }\n  }\n\n  static closeNews() {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('closeNews');\n      } else {\n        NitroLogger.log('External interface not available. Could not close news.');\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not close news.');\n    }\n  }\n\n  static openAvatars() {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('openAvatars');\n      } else {\n        NitroLogger.log('External interface not available. Could not open avatars.');\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not open avatars.');\n    }\n  }\n\n  static openRoomEnterAd() {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('openRoomEnterAd');\n      } else {\n        NitroLogger.log('External interface not available. Could not open roomenterad.');\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not open roomenterad.');\n    }\n  }\n\n  static updateFigure(figure) {\n    try {\n      if (LegacyExternalInterface.available) {\n        LegacyExternalInterface.call('updateFigure', figure);\n      } else {\n        NitroLogger.log('External interface not available. Could not update figure.');\n      }\n    } catch (e) {\n      NitroLogger.log('External interface not working. Could not update figure.');\n    }\n  }\n\n}\nHabboWebTools.ADVERTISEMENT = 'advertisement';\nHabboWebTools.OPENLINK = 'openlink';\nHabboWebTools.OPENROOM = 'openroom';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/utils/HabboWebTools.ts"],"names":["NitroLogger","LegacyExternalInterface","HabboWebTools","logEventLog","data","available","call","e","log","openPage","pageUrl","openWebPage","window","open","sendHeartBeat","openWebPageAndMinimizeClient","closeWebPageAndRestoreClient","openHabblet","name","param","closeHabblet","send","reasonCode","reasonString","showGame","gameUrl","callGame","hideGame","url","escape","roomVisited","roomId","openMinimail","target","openNews","closeNews","openAvatars","openRoomEnterAd","updateFigure","figure","ADVERTISEMENT","OPENLINK","OPENROOM"],"mappings":"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","sourcesContent":["import { NitroLogger } from '../../core/common/logger/NitroLogger';\r\nimport { LegacyExternalInterface } from '../externalInterface/LegacyExternalInterface';\r\n\r\nexport class HabboWebTools\r\n{\r\n    public static ADVERTISEMENT: string = 'advertisement';\r\n    public static OPENLINK: string = 'openlink';\r\n    public static OPENROOM: string = 'openroom';\r\n\r\n    public static logEventLog(data: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('logEventLog', data);\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working, failed to log event log.');\r\n        }\r\n    }\r\n\r\n    public static openPage(pageUrl: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('openPage', pageUrl);\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available, openPage failed.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(('Failed to open web page ' + pageUrl));\r\n        }\r\n    }\r\n\r\n    public static openWebPage(pageUrl: string): void\r\n    {\r\n        window.open(pageUrl);\r\n    }\r\n\r\n    public static sendHeartBeat(): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('heartBeat');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('Failed to send heartbeat');\r\n        }\r\n    }\r\n\r\n    public static openWebPageAndMinimizeClient(pageUrl: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                HabboWebTools.openPage(pageUrl);\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(('Failed to open web page ' + pageUrl));\r\n        }\r\n    }\r\n\r\n    public static closeWebPageAndRestoreClient(): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('closeWebPageAndRestoreClient');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('Failed to close web page and restore client!');\r\n        }\r\n    }\r\n\r\n    public static openHabblet(name: string, param: string=null): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('openHabblet', name, param);\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(('Failed to open Habblet ' + name));\r\n        }\r\n    }\r\n\r\n    public static closeHabblet(name: string, param: string=null): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('closeHabblet', name, param);\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(('Failed to close Habblet ' + name));\r\n        }\r\n    }\r\n\r\n    public static send(reasonCode: number, reasonString: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('disconnect', reasonCode, reasonString);\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('Failed to close send ');\r\n        }\r\n    }\r\n\r\n    public static showGame(gameUrl: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.callGame('showGame', gameUrl);\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(('Failed to open game: ' + e));\r\n        }\r\n    }\r\n\r\n    public static hideGame(): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.callGame('hideGame');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('Failed to hide game');\r\n        }\r\n    }\r\n\r\n    public static open(url: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('openExternalLink', escape(url));\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log(('External interface not available. Could not request to open: ' + url));\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(('External interface not working. Could not request to open: ' + url));\r\n        }\r\n    }\r\n\r\n    public static roomVisited(roomId: number): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('roomVisited', roomId);\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available. Could not store last room visit.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working. Could not store last room visit.');\r\n        }\r\n    }\r\n\r\n    public static openMinimail(target: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('openMinimail', target);\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available. Could not open minimail.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working. Could not open minimail.');\r\n        }\r\n    }\r\n\r\n    public static openNews(): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('openNews');\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available. Could not open news.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working. Could not open news.');\r\n        }\r\n    }\r\n\r\n    public static closeNews(): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('closeNews');\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available. Could not close news.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working. Could not close news.');\r\n        }\r\n    }\r\n\r\n    public static openAvatars(): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('openAvatars');\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available. Could not open avatars.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working. Could not open avatars.');\r\n        }\r\n    }\r\n\r\n    public static openRoomEnterAd(): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('openRoomEnterAd');\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available. Could not open roomenterad.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working. Could not open roomenterad.');\r\n        }\r\n    }\r\n\r\n    public static updateFigure(figure: string): void\r\n    {\r\n        try\r\n        {\r\n            if(LegacyExternalInterface.available)\r\n            {\r\n                LegacyExternalInterface.call('updateFigure', figure);\r\n            }\r\n            else\r\n            {\r\n                NitroLogger.log('External interface not available. Could not update figure.');\r\n            }\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log('External interface not working. Could not update figure.');\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}