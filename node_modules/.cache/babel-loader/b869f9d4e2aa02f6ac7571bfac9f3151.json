{"ast":null,"code":"import { RoomSpriteCanvas } from './RoomSpriteCanvas';\nexport class RoomRenderer {\n  constructor() {\n    this._objects = void 0;\n    this._canvases = void 0;\n    this._disposed = void 0;\n    this._roomObjectVariableAccurateZ = void 0;\n    this._objects = new Map();\n    this._canvases = new Map();\n    this._disposed = false;\n    this._roomObjectVariableAccurateZ = null;\n  }\n\n  dispose() {\n    if (this._disposed) return;\n\n    if (this._canvases) {\n      for (const [key, canvas] of this._canvases.entries()) {\n        this._canvases.delete(key);\n\n        if (!canvas) continue;\n        canvas.dispose();\n      }\n\n      this._canvases = null;\n    }\n\n    if (this._objects) {\n      this._objects = null;\n    }\n\n    this._disposed = true;\n  }\n\n  reset() {\n    this._objects.clear();\n  }\n\n  getInstanceId(object) {\n    if (!object) return -1;\n    return object.instanceId;\n  }\n\n  getRoomObject(instanceId) {\n    return this._objects.get(instanceId);\n  }\n\n  addObject(object) {\n    if (!object) return;\n\n    this._objects.set(this.getInstanceId(object), object);\n  }\n\n  removeObject(object) {\n    const instanceId = this.getInstanceId(object);\n\n    this._objects.delete(instanceId);\n\n    for (const canvas of this._canvases.values()) {\n      if (!canvas) continue;\n      const spriteCanvas = canvas;\n      spriteCanvas.removeFromCache(instanceId.toString());\n    }\n  }\n\n  render(time) {\n    let update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!this._canvases || !this._canvases.size) return;\n\n    for (const canvas of this._canvases.values()) canvas && canvas.render(time, update);\n  }\n\n  update(time) {\n    let update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!this._canvases || !this._canvases.size) return;\n    this.render(time, update);\n\n    for (const canvas of this._canvases.values()) canvas && canvas.update();\n  }\n\n  getCanvas(id) {\n    const existing = this._canvases.get(id);\n\n    if (!existing) return;\n    return existing;\n  }\n\n  createCanvas(id, width, height, scale) {\n    const existing = this._canvases.get(id);\n\n    if (existing) {\n      existing.initialize(width, height);\n      if (existing.geometry) existing.geometry.scale = scale;\n      return existing;\n    }\n\n    const canvas = this.createSpriteCanvas(id, width, height, scale);\n    if (!canvas) return;\n\n    this._canvases.set(id, canvas);\n\n    return canvas;\n  }\n\n  createSpriteCanvas(id, width, height, scale) {\n    return new RoomSpriteCanvas(this, id, width, height, scale);\n  }\n\n  removeCanvas(id) {\n    const existing = this._canvases.get(id);\n\n    if (!existing) return;\n\n    this._canvases.delete(id);\n\n    existing.dispose();\n  }\n\n  get objects() {\n    return this._objects;\n  }\n\n  get disposed() {\n    return this._disposed;\n  }\n\n  get roomObjectVariableAccurateZ() {\n    return this._roomObjectVariableAccurateZ;\n  }\n\n  set roomObjectVariableAccurateZ(z) {\n    this._roomObjectVariableAccurateZ = z;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/renderer/RoomRenderer.ts"],"names":["RoomSpriteCanvas","RoomRenderer","constructor","_objects","_canvases","_disposed","_roomObjectVariableAccurateZ","Map","dispose","key","canvas","entries","delete","reset","clear","getInstanceId","object","instanceId","getRoomObject","get","addObject","set","removeObject","values","spriteCanvas","removeFromCache","toString","render","time","update","size","getCanvas","id","existing","createCanvas","width","height","scale","initialize","geometry","createSpriteCanvas","removeCanvas","objects","disposed","roomObjectVariableAccurateZ","z"],"mappings":"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","sourcesContent":["import { IRoomObject } from '../object/IRoomObject';\r\nimport { IRoomRenderer } from './IRoomRenderer';\r\nimport { IRoomRenderingCanvas } from './IRoomRenderingCanvas';\r\nimport { IRoomSpriteCanvasContainer } from './IRoomSpriteCanvasContainer';\r\nimport { RoomSpriteCanvas } from './RoomSpriteCanvas';\r\n\r\nexport class RoomRenderer implements IRoomRenderer, IRoomSpriteCanvasContainer\r\n{\r\n    private _objects: Map<number, IRoomObject>;\r\n    private _canvases: Map<number, IRoomRenderingCanvas>;\r\n\r\n    private _disposed: boolean;\r\n    private _roomObjectVariableAccurateZ: string;\r\n\r\n    constructor()\r\n    {\r\n        this._objects = new Map();\r\n        this._canvases = new Map();\r\n\r\n        this._disposed = false;\r\n        this._roomObjectVariableAccurateZ = null;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._disposed) return;\r\n\r\n        if(this._canvases)\r\n        {\r\n            for(const [ key, canvas ] of this._canvases.entries())\r\n            {\r\n                this._canvases.delete(key);\r\n\r\n                if(!canvas) continue;\r\n\r\n                canvas.dispose();\r\n            }\r\n\r\n            this._canvases = null;\r\n        }\r\n\r\n        if(this._objects)\r\n        {\r\n            this._objects = null;\r\n        }\r\n\r\n        this._disposed = true;\r\n    }\r\n\r\n    public reset(): void\r\n    {\r\n        this._objects.clear();\r\n    }\r\n\r\n    public getInstanceId(object: IRoomObject): number\r\n    {\r\n        if(!object) return -1;\r\n\r\n        return object.instanceId;\r\n    }\r\n\r\n    public getRoomObject(instanceId: number): IRoomObject\r\n    {\r\n        return this._objects.get(instanceId);\r\n    }\r\n\r\n    public addObject(object: IRoomObject): void\r\n    {\r\n        if(!object) return;\r\n\r\n        this._objects.set(this.getInstanceId(object), object);\r\n    }\r\n\r\n    public removeObject(object: IRoomObject): void\r\n    {\r\n        const instanceId = this.getInstanceId(object);\r\n\r\n        this._objects.delete(instanceId);\r\n\r\n        for(const canvas of this._canvases.values())\r\n        {\r\n            if(!canvas) continue;\r\n\r\n            const spriteCanvas = canvas as RoomSpriteCanvas;\r\n\r\n            spriteCanvas.removeFromCache(instanceId.toString());\r\n        }\r\n    }\r\n\r\n    public render(time: number, update: boolean = false): void\r\n    {\r\n        if(!this._canvases || !this._canvases.size) return;\r\n\r\n        for(const canvas of this._canvases.values()) canvas && canvas.render(time, update);\r\n    }\r\n\r\n    public update(time: number, update: boolean = false): void\r\n    {\r\n        if(!this._canvases || !this._canvases.size) return;\r\n\r\n        this.render(time, update);\r\n\r\n        for(const canvas of this._canvases.values()) canvas && canvas.update();\r\n    }\r\n\r\n    public getCanvas(id: number): IRoomRenderingCanvas\r\n    {\r\n        const existing = this._canvases.get(id);\r\n\r\n        if(!existing) return;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public createCanvas(id: number, width: number, height: number, scale: number): IRoomRenderingCanvas\r\n    {\r\n        const existing = this._canvases.get(id) as IRoomRenderingCanvas;\r\n\r\n        if(existing)\r\n        {\r\n            existing.initialize(width, height);\r\n\r\n            if(existing.geometry) existing.geometry.scale = scale;\r\n\r\n            return existing;\r\n        }\r\n\r\n        const canvas = this.createSpriteCanvas(id, width, height, scale);\r\n\r\n        if(!canvas) return;\r\n\r\n        this._canvases.set(id, canvas);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private createSpriteCanvas(id: number, width: number, height: number, scale: number): IRoomRenderingCanvas\r\n    {\r\n        return new RoomSpriteCanvas(this, id, width, height, scale);\r\n    }\r\n\r\n    public removeCanvas(id: number): void\r\n    {\r\n        const existing = this._canvases.get(id);\r\n\r\n        if(!existing) return;\r\n\r\n        this._canvases.delete(id);\r\n\r\n        existing.dispose();\r\n    }\r\n\r\n    public get objects(): Map<number, IRoomObject>\r\n    {\r\n        return this._objects;\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return this._disposed;\r\n    }\r\n\r\n    public get roomObjectVariableAccurateZ(): string\r\n    {\r\n        return this._roomObjectVariableAccurateZ;\r\n    }\r\n\r\n    public set roomObjectVariableAccurateZ(z: string)\r\n    {\r\n        this._roomObjectVariableAccurateZ = z;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}