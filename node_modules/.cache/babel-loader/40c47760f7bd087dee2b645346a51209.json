{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/navigator/views/search/NavigatorSearchView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { LocalizeText, SearchFilterOptions } from '../../../../api';\nimport { Flex } from '../../../../common';\nimport { useNavigatorContext } from '../../NavigatorContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavigatorSearchView = props => {\n  _s();\n\n  const {\n    sendSearch = null\n  } = props;\n  const [searchFilterIndex, setSearchFilterIndex] = useState(0);\n  const [searchValue, setSearchValue] = useState('');\n  const {\n    topLevelContext = null,\n    searchResult = null\n  } = useNavigatorContext();\n\n  const processSearch = () => {\n    if (!topLevelContext) return;\n    let searchFilter = SearchFilterOptions[searchFilterIndex];\n    if (!searchFilter) searchFilter = SearchFilterOptions[0];\n    const searchQuery = (searchFilter.query ? searchFilter.query + ':' : '') + searchValue;\n    sendSearch(searchQuery || '', topLevelContext.code);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key !== 'Enter') return;\n    processSearch();\n  };\n\n  useEffect(() => {\n    if (!searchResult) return;\n    const split = searchResult.data.split(':');\n    let filter = null;\n    let value = '';\n\n    if (split.length >= 2) {\n      const [query, ...rest] = split;\n      filter = SearchFilterOptions.find(option => option.query === query);\n      value = rest.join(':');\n    } else {\n      value = searchResult.data;\n    }\n\n    if (!filter) filter = SearchFilterOptions[0];\n    setSearchFilterIndex(SearchFilterOptions.findIndex(option => option === filter));\n    setSearchValue(value);\n  }, [searchResult]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    fullWidth: true,\n    gap: 1,\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      shrink: true,\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select form-select-sm\",\n        value: searchFilterIndex,\n        onChange: event => setSearchFilterIndex(parseInt(event.target.value)),\n        children: SearchFilterOptions.map((filter, index) => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: LocalizeText('navigator.filter.' + filter.name)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      fullWidth: true,\n      gap: 2,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control form-control-sm\",\n        placeholder: LocalizeText('navigator.filter.input.placeholder'),\n        value: searchValue,\n        onChange: event => setSearchValue(event.target.value),\n        onKeyDown: event => handleKeyDown(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"icon icon-pen navigator-search-button position-absolute\",\n        onClick: processSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NavigatorSearchView, \"52hANbtjxb2KoOKjLy9rvwu+f5g=\", false, function () {\n  return [useNavigatorContext];\n});\n\n_c = NavigatorSearchView;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavigatorSearchView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/navigator/views/search/NavigatorSearchView.tsx"],"names":["React","useEffect","useState","LocalizeText","SearchFilterOptions","Flex","useNavigatorContext","NavigatorSearchView","props","sendSearch","searchFilterIndex","setSearchFilterIndex","searchValue","setSearchValue","topLevelContext","searchResult","processSearch","searchFilter","searchQuery","query","code","handleKeyDown","event","key","split","data","filter","value","length","rest","find","option","join","findIndex","parseInt","target","map","index","name"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { FC, KeyboardEvent, useEffect, useState } from 'react';\nimport { INavigatorSearchFilter, LocalizeText, SearchFilterOptions } from '../../../../api';\nimport { Button, Flex } from '../../../../common';\nimport { useNavigatorContext } from '../../NavigatorContext';\n\nexport interface NavigatorSearchViewProps\n{\n    sendSearch: (searchValue: string, contextCode: string) => void;\n}\n\nexport const NavigatorSearchView: FC<NavigatorSearchViewProps> = props =>\n{\n    const { sendSearch = null } = props;\n    const [ searchFilterIndex, setSearchFilterIndex ] = useState(0);\n    const [ searchValue, setSearchValue ] = useState('');\n    const { topLevelContext = null, searchResult = null } = useNavigatorContext();\n\n    const processSearch = () =>\n    {\n        if(!topLevelContext) return;\n\n        let searchFilter = SearchFilterOptions[searchFilterIndex];\n\n        if(!searchFilter) searchFilter = SearchFilterOptions[0];\n\n        const searchQuery = ((searchFilter.query ? (searchFilter.query + ':') : '') + searchValue);\n\n        sendSearch((searchQuery || ''), topLevelContext.code);\n    }\n\n    const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) =>\n    {\n        if(event.key !== 'Enter') return;\n\n        processSearch();\n    };\n\n    useEffect(() =>\n    {\n        if(!searchResult) return;\n\n        const split = searchResult.data.split(':');\n\n        let filter: INavigatorSearchFilter = null;\n        let value: string = '';\n\n        if(split.length >= 2)\n        {\n            const [ query, ...rest ] = split;\n\n            filter = SearchFilterOptions.find(option => (option.query === query));\n            value = rest.join(':');\n        }\n        else\n        {\n            value = searchResult.data;\n        }\n\n        if(!filter) filter = SearchFilterOptions[0];\n\n        setSearchFilterIndex(SearchFilterOptions.findIndex(option => (option === filter)));\n        setSearchValue(value);\n    }, [ searchResult ]);\n\n    return (\n        <Flex fullWidth gap={ 1 }>\n            <Flex shrink>\n                <select className=\"form-select form-select-sm\" value={ searchFilterIndex } onChange={ event => setSearchFilterIndex(parseInt(event.target.value)) }>\n                    { SearchFilterOptions.map((filter, index) =>\n                    {\n                        return <option key={ index } value={ index }>{ LocalizeText('navigator.filter.' + filter.name) }</option>\n                    }) }\n                </select>\n            </Flex>\n            <Flex fullWidth gap={ 2 }>\n                <input type=\"text\" className=\"form-control form-control-sm\" placeholder={ LocalizeText('navigator.filter.input.placeholder') } value={ searchValue } onChange={ event => setSearchValue(event.target.value) } onKeyDown={ event => handleKeyDown(event) } />\n                <i className=\"icon icon-pen navigator-search-button position-absolute\" onClick={ processSearch } />\n            </Flex>\n        </Flex>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}