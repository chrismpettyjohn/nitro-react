{"ast":null,"code":"import { PlaneBitmapData } from '../../utils/PlaneBitmapData';\nimport { PlaneRasterizer } from './PlaneRasterizer';\nimport { WallPlane } from './WallPlane';\nexport class WallRasterizer extends PlaneRasterizer {\n  initializePlanes() {\n    if (!this.data) return;\n    const walls = this.data.walls;\n    if (walls && walls.length) this.parseWalls(walls);\n  }\n\n  parseWalls(k) {\n    if (!k) return;\n\n    for (const wallIndex in k) {\n      const wall = k[wallIndex];\n      if (!wall) continue;\n      const id = wall.id;\n      const visualization = wall.visualizations;\n      const plane = new WallPlane();\n      this.parseVisualizations(plane, visualization);\n      if (!this.addPlane(id, plane)) plane.dispose();\n    }\n  }\n\n  render(canvas, id, width, height, scale, normal, useTexture) {\n    let offsetX = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let offsetY = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n    let maxX = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let maxY = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n    let timeSinceStartMs = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n    let plane = this.getPlane(id);\n    if (!plane) plane = this.getPlane(PlaneRasterizer.DEFAULT);\n    if (!plane) return null;\n\n    if (canvas) {\n      const rectangle = canvas.getBounds();\n      canvas.clear();\n      canvas.drawRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    }\n\n    let graphic = plane.render(canvas, width, height, scale, normal, useTexture);\n\n    if (graphic && graphic !== canvas) {\n      graphic = graphic.clone();\n      if (!graphic) return null;\n    }\n\n    return new PlaneBitmapData(graphic, -1);\n  }\n\n  getTextureIdentifier(k, normal) {\n    if (normal) {\n      return `${k}_${normal.x}_${normal.y}_${normal.z}`;\n    }\n\n    return super.getTextureIdentifier(k, normal);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/WallRasterizer.ts"],"names":["PlaneBitmapData","PlaneRasterizer","WallPlane","WallRasterizer","initializePlanes","data","walls","length","parseWalls","k","wallIndex","wall","id","visualization","visualizations","plane","parseVisualizations","addPlane","dispose","render","canvas","width","height","scale","normal","useTexture","offsetX","offsetY","maxX","maxY","timeSinceStartMs","getPlane","DEFAULT","rectangle","getBounds","clear","drawRect","x","y","graphic","clone","getTextureIdentifier","z"],"mappings":"AAEA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,cAAN,SAA6BF,eAA7B,CACP;AACcG,EAAAA,gBAAgB,GAC1B;AACI,QAAG,CAAC,KAAKC,IAAT,EAAe;AAEf,UAAMC,KAAK,GAAG,KAAKD,IAAL,CAAUC,KAAxB;AAEA,QAAGA,KAAK,IAAIA,KAAK,CAACC,MAAlB,EAA0B,KAAKC,UAAL,CAAgBF,KAAhB;AAC7B;;AAEOE,EAAAA,UAAU,CAACC,CAAD,EAClB;AACI,QAAG,CAACA,CAAJ,EAAO;;AAEP,SAAI,MAAMC,SAAV,IAAuBD,CAAvB,EACA;AACI,YAAME,IAAI,GAAGF,CAAC,CAACC,SAAD,CAAd;AAEA,UAAG,CAACC,IAAJ,EAAU;AAEV,YAAMC,EAAE,GAAGD,IAAI,CAACC,EAAhB;AACA,YAAMC,aAAa,GAAGF,IAAI,CAACG,cAA3B;AACA,YAAMC,KAAK,GAAG,IAAIb,SAAJ,EAAd;AAEA,WAAKc,mBAAL,CAAyBD,KAAzB,EAAgCF,aAAhC;AAEA,UAAG,CAAC,KAAKI,QAAL,CAAcL,EAAd,EAAkBG,KAAlB,CAAJ,EAA8BA,KAAK,CAACG,OAAN;AACjC;AACJ;;AAEMC,EAAAA,MAAM,CAACC,MAAD,EAAmBR,EAAnB,EAA+BS,KAA/B,EAA8CC,MAA9C,EAA8DC,KAA9D,EAA6EC,MAA7E,EAAgGC,UAAhG,EACb;AAAA,QADkIC,OAClI,uEADoJ,CACpJ;AAAA,QADuJC,OACvJ,uEADyK,CACzK;AAAA,QAD4KC,IAC5K,uEAD2L,CAC3L;AAAA,QAD8LC,IAC9L,0EAD6M,CAC7M;AAAA,QADgNC,gBAChN,0EAD2O,CAC3O;AACI,QAAIf,KAAK,GAAG,KAAKgB,QAAL,CAAcnB,EAAd,CAAZ;AAEA,QAAG,CAACG,KAAJ,EAAWA,KAAK,GAAG,KAAKgB,QAAL,CAAc9B,eAAe,CAAC+B,OAA9B,CAAR;AAEX,QAAG,CAACjB,KAAJ,EAAW,OAAO,IAAP;;AAEX,QAAGK,MAAH,EACA;AACI,YAAMa,SAAS,GAAGb,MAAM,CAACc,SAAP,EAAlB;AAEAd,MAAAA,MAAM,CAACe,KAAP;AAEAf,MAAAA,MAAM,CAACgB,QAAP,CAAgBH,SAAS,CAACI,CAA1B,EAA6BJ,SAAS,CAACK,CAAvC,EAA0CL,SAAS,CAACZ,KAApD,EAA2DY,SAAS,CAACX,MAArE;AACH;;AAED,QAAIiB,OAAO,GAAGxB,KAAK,CAACI,MAAN,CAAaC,MAAb,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,KAApC,EAA2CC,MAA3C,EAAmDC,UAAnD,CAAd;;AAEA,QAAGc,OAAO,IAAKA,OAAO,KAAKnB,MAA3B,EACA;AACImB,MAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,EAAV;AAEA,UAAG,CAACD,OAAJ,EAAa,OAAO,IAAP;AAChB;;AAED,WAAO,IAAIvC,eAAJ,CAAoBuC,OAApB,EAA6B,CAAC,CAA9B,CAAP;AACH;;AAEME,EAAAA,oBAAoB,CAAChC,CAAD,EAAYe,MAAZ,EAC3B;AACI,QAAGA,MAAH,EACA;AACI,aAAQ,GAAGf,CAAG,IAAIe,MAAM,CAACa,CAAG,IAAIb,MAAM,CAACc,CAAG,IAAId,MAAM,CAACkB,CAAG,EAAxD;AACH;;AAED,WAAO,MAAMD,oBAAN,CAA2BhC,CAA3B,EAA8Be,MAA9B,CAAP;AACH;;AAnEL","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { PlaneBitmapData } from '../../utils/PlaneBitmapData';\r\nimport { PlaneRasterizer } from './PlaneRasterizer';\r\nimport { WallPlane } from './WallPlane';\r\n\r\nexport class WallRasterizer extends PlaneRasterizer\r\n{\r\n    protected initializePlanes(): void\r\n    {\r\n        if(!this.data) return;\r\n\r\n        const walls = this.data.walls;\r\n\r\n        if(walls && walls.length) this.parseWalls(walls);\r\n    }\r\n\r\n    private parseWalls(k: any): void\r\n    {\r\n        if(!k) return;\r\n\r\n        for(const wallIndex in k)\r\n        {\r\n            const wall = k[wallIndex];\r\n\r\n            if(!wall) continue;\r\n\r\n            const id = wall.id;\r\n            const visualization = wall.visualizations;\r\n            const plane = new WallPlane();\r\n\r\n            this.parseVisualizations(plane, visualization);\r\n\r\n            if(!this.addPlane(id, plane)) plane.dispose();\r\n        }\r\n    }\r\n\r\n    public render(canvas: Graphics, id: string, width: number, height: number, scale: number, normal: IVector3D, useTexture: boolean, offsetX: number = 0, offsetY: number = 0, maxX: number = 0, maxY: number = 0, timeSinceStartMs: number = 0): PlaneBitmapData\r\n    {\r\n        let plane = this.getPlane(id) as WallPlane;\r\n\r\n        if(!plane) plane = this.getPlane(PlaneRasterizer.DEFAULT) as WallPlane;\r\n\r\n        if(!plane) return null;\r\n\r\n        if(canvas)\r\n        {\r\n            const rectangle = canvas.getBounds();\r\n\r\n            canvas.clear();\r\n\r\n            canvas.drawRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\r\n        }\r\n\r\n        let graphic = plane.render(canvas, width, height, scale, normal, useTexture);\r\n\r\n        if(graphic && (graphic !== canvas))\r\n        {\r\n            graphic = graphic.clone();\r\n\r\n            if(!graphic) return null;\r\n        }\r\n\r\n        return new PlaneBitmapData(graphic, -1);\r\n    }\r\n\r\n    public getTextureIdentifier(k: number, normal: IVector3D): string\r\n    {\r\n        if(normal)\r\n        {\r\n            return `${ k }_${ normal.x }_${ normal.y }_${ normal.z }`;\r\n        }\r\n\r\n        return super.getTextureIdentifier(k, normal);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}