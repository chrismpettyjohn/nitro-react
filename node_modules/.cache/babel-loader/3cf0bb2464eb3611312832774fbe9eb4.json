{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/groups/views/GroupRoomInformationView.tsx\",\n    _s = $RefreshSig$();\n\nimport { DesktopViewEvent, GetGuestRoomResultEvent, GroupInformationComposer, GroupInformationEvent, GroupRemoveMemberComposer, HabboGroupDeactivatedMessageEvent, RoomEntryInfoMessageEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useState } from 'react';\nimport { GetGroupInformation, GetGroupManager, GetSessionDataManager, LocalizeText, NotificationUtilities, SendMessageComposer, TryJoinGroup } from '../../../api';\nimport { Base, Button, Column, Flex, LayoutBadgeImageView, Text } from '../../../common';\nimport { UseMessageEventHook } from '../../../hooks';\nimport { GroupMembershipType } from '../common/GroupMembershipType';\nimport { GroupType } from '../common/GroupType';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const GroupRoomInformationView = props => {\n  _s();\n\n  const [expectedGroupId, setExpectedGroupId] = useState(0);\n  const [groupInformation, setGroupInformation] = useState(null);\n  const [isOpen, setIsOpen] = useState(true);\n  const onDesktopViewEvent = useCallback(event => {\n    setExpectedGroupId(0);\n    setGroupInformation(null);\n  }, []);\n  UseMessageEventHook(DesktopViewEvent, onDesktopViewEvent);\n  const onRoomEntryInfoMessageEvent = useCallback(event => {\n    setExpectedGroupId(0);\n    setGroupInformation(null);\n  }, []);\n  UseMessageEventHook(RoomEntryInfoMessageEvent, onRoomEntryInfoMessageEvent);\n  const onGetGuestRoomResultEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser.roomEnter) return;\n\n    if (parser.data.habboGroupId > 0) {\n      setExpectedGroupId(parser.data.habboGroupId);\n      SendMessageComposer(new GroupInformationComposer(parser.data.habboGroupId, false));\n    } else {\n      setExpectedGroupId(0);\n      setGroupInformation(null);\n    }\n  }, []);\n  UseMessageEventHook(GetGuestRoomResultEvent, onGetGuestRoomResultEvent);\n  const onHabboGroupDeactivatedMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!groupInformation || parser.groupId !== groupInformation.id && parser.groupId !== expectedGroupId) return;\n    setExpectedGroupId(0);\n    setGroupInformation(null);\n  }, [expectedGroupId, groupInformation]);\n  UseMessageEventHook(HabboGroupDeactivatedMessageEvent, onHabboGroupDeactivatedMessageEvent);\n  const onGroupInformationEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (parser.id !== expectedGroupId) return;\n    setGroupInformation(parser);\n  }, [expectedGroupId]);\n  UseMessageEventHook(GroupInformationEvent, onGroupInformationEvent);\n\n  const leaveGroup = () => {\n    NotificationUtilities.confirm(LocalizeText('group.leaveconfirm.desc'), () => {\n      SendMessageComposer(new GroupRemoveMemberComposer(groupInformation.id, GetSessionDataManager().userId));\n    }, null);\n  };\n\n  const isRealOwner = groupInformation && groupInformation.ownerName === GetSessionDataManager().userName;\n\n  const getButtonText = () => {\n    if (isRealOwner) return 'group.manage';\n    if (groupInformation.type === GroupType.PRIVATE) return '';\n    if (groupInformation.membershipType === GroupMembershipType.MEMBER) return 'group.leave';\n    if (groupInformation.membershipType === GroupMembershipType.NOT_MEMBER && groupInformation.type === GroupType.REGULAR) return 'group.join';\n    if (groupInformation.membershipType === GroupMembershipType.REQUEST_PENDING) return 'group.membershippending';\n    if (groupInformation.membershipType === GroupMembershipType.NOT_MEMBER && groupInformation.type === GroupType.EXCLUSIVE) return 'group.requestmembership';\n  };\n\n  const handleButtonClick = () => {\n    if (isRealOwner) return GetGroupManager(groupInformation.id);\n    if (groupInformation.type === GroupType.PRIVATE && groupInformation.membershipType === GroupMembershipType.NOT_MEMBER) return;\n\n    if (groupInformation.membershipType === GroupMembershipType.MEMBER) {\n      leaveGroup();\n      return;\n    }\n\n    TryJoinGroup(groupInformation.id);\n  };\n\n  if (!groupInformation) return null;\n  return /*#__PURE__*/_jsxDEV(Base, {\n    className: \"nitro-notification-bubble\",\n    children: /*#__PURE__*/_jsxDEV(Column, {\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        className: \"grouproom-header\",\n        alignItems: \"center\",\n        justifyContent: \"between\",\n        pointer: true,\n        onClick: event => setIsOpen(value => !value),\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          small: true,\n          className: \"header-text p-1\",\n          variant: \"white\",\n          children: LocalizeText('group.homeroominfo.title')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: isOpen ? 'arrow-down' : 'arrow-left'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Column, {\n          className: \"px-2 pb-2\",\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            pointer: true,\n            alignItems: \"center\",\n            gap: 2,\n            onClick: event => GetGroupInformation(groupInformation.id),\n            children: [/*#__PURE__*/_jsxDEV(Base, {\n              className: \"group-badge\",\n              children: /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n                badgeCode: groupInformation.badge,\n                isGroup: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              bold: true,\n              variant: \"white\",\n              children: groupInformation.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), (groupInformation.type !== GroupType.PRIVATE || isRealOwner) && /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            className: \"btn-flash fw-bold\",\n            disabled: groupInformation.membershipType === GroupMembershipType.REQUEST_PENDING,\n            onClick: handleButtonClick,\n            children: LocalizeText(getButtonText())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GroupRoomInformationView, \"QpH83g+cI7t48hUWsIa/oE7WqSE=\");\n\n_c = GroupRoomInformationView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupRoomInformationView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/groups/views/GroupRoomInformationView.tsx"],"names":["DesktopViewEvent","GetGuestRoomResultEvent","GroupInformationComposer","GroupInformationEvent","GroupRemoveMemberComposer","HabboGroupDeactivatedMessageEvent","RoomEntryInfoMessageEvent","useCallback","useState","GetGroupInformation","GetGroupManager","GetSessionDataManager","LocalizeText","NotificationUtilities","SendMessageComposer","TryJoinGroup","Base","Button","Column","Flex","LayoutBadgeImageView","Text","UseMessageEventHook","GroupMembershipType","GroupType","GroupRoomInformationView","props","expectedGroupId","setExpectedGroupId","groupInformation","setGroupInformation","isOpen","setIsOpen","onDesktopViewEvent","event","onRoomEntryInfoMessageEvent","onGetGuestRoomResultEvent","parser","getParser","roomEnter","data","habboGroupId","onHabboGroupDeactivatedMessageEvent","groupId","id","onGroupInformationEvent","leaveGroup","confirm","userId","isRealOwner","ownerName","userName","getButtonText","type","PRIVATE","membershipType","MEMBER","NOT_MEMBER","REGULAR","REQUEST_PENDING","EXCLUSIVE","handleButtonClick","value","badge","title"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { DesktopViewEvent, GetGuestRoomResultEvent, GroupInformationComposer, GroupInformationEvent, GroupInformationParser, GroupRemoveMemberComposer, HabboGroupDeactivatedMessageEvent, RoomEntryInfoMessageEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useState } from 'react';\nimport { GetGroupInformation, GetGroupManager, GetSessionDataManager, LocalizeText, NotificationUtilities, SendMessageComposer, TryJoinGroup } from '../../../api';\nimport { Base, Button, Column, Flex, LayoutBadgeImageView, Text } from '../../../common';\nimport { UseMessageEventHook } from '../../../hooks';\nimport { GroupMembershipType } from '../common/GroupMembershipType';\nimport { GroupType } from '../common/GroupType';\n\nexport const GroupRoomInformationView: FC<{}> = props =>\n{\n    const [ expectedGroupId, setExpectedGroupId ] = useState<number>(0);\n    const [ groupInformation, setGroupInformation ] = useState<GroupInformationParser>(null);\n    const [ isOpen, setIsOpen ] = useState<boolean>(true);\n\n    const onDesktopViewEvent = useCallback((event: DesktopViewEvent) =>\n    {\n        setExpectedGroupId(0);\n        setGroupInformation(null);\n    }, []);\n\n    UseMessageEventHook(DesktopViewEvent, onDesktopViewEvent);\n\n    const onRoomEntryInfoMessageEvent = useCallback((event: RoomEntryInfoMessageEvent) =>\n    {\n        setExpectedGroupId(0);\n        setGroupInformation(null);\n    }, []);\n\n    UseMessageEventHook(RoomEntryInfoMessageEvent, onRoomEntryInfoMessageEvent);\n\n    const onGetGuestRoomResultEvent = useCallback((event: GetGuestRoomResultEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser.roomEnter) return;\n\n        if(parser.data.habboGroupId > 0)\n        {\n            setExpectedGroupId(parser.data.habboGroupId);\n            SendMessageComposer(new GroupInformationComposer(parser.data.habboGroupId, false));\n        }\n        else\n        {\n            setExpectedGroupId(0);\n            setGroupInformation(null);\n        }\n    }, []);\n\n    UseMessageEventHook(GetGuestRoomResultEvent, onGetGuestRoomResultEvent);\n\n    const onHabboGroupDeactivatedMessageEvent = useCallback((event: HabboGroupDeactivatedMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!groupInformation || ((parser.groupId !== groupInformation.id) && (parser.groupId !== expectedGroupId))) return;\n\n        setExpectedGroupId(0);\n        setGroupInformation(null);\n    }, [ expectedGroupId, groupInformation ]);\n\n    UseMessageEventHook(HabboGroupDeactivatedMessageEvent, onHabboGroupDeactivatedMessageEvent);\n\n    const onGroupInformationEvent = useCallback((event: GroupInformationEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(parser.id !== expectedGroupId) return;\n\n        setGroupInformation(parser);\n    }, [ expectedGroupId ]);\n\n    UseMessageEventHook(GroupInformationEvent, onGroupInformationEvent);\n\n    const leaveGroup = () =>\n    {\n        NotificationUtilities.confirm(LocalizeText('group.leaveconfirm.desc'), () =>\n        {\n            SendMessageComposer(new GroupRemoveMemberComposer(groupInformation.id, GetSessionDataManager().userId));\n        }, null);\n    }\n\n    const isRealOwner = (groupInformation && (groupInformation.ownerName === GetSessionDataManager().userName));\n\n    const getButtonText = () =>\n    {\n        if(isRealOwner) return 'group.manage';\n\n        if(groupInformation.type === GroupType.PRIVATE) return '';\n\n        if(groupInformation.membershipType === GroupMembershipType.MEMBER) return 'group.leave';\n\n        if((groupInformation.membershipType === GroupMembershipType.NOT_MEMBER) && groupInformation.type === GroupType.REGULAR) return 'group.join';\n\n        if(groupInformation.membershipType === GroupMembershipType.REQUEST_PENDING) return 'group.membershippending';\n\n        if((groupInformation.membershipType === GroupMembershipType.NOT_MEMBER) && groupInformation.type === GroupType.EXCLUSIVE) return 'group.requestmembership';\n    }\n\n    const handleButtonClick = () =>\n    {\n        if(isRealOwner) return GetGroupManager(groupInformation.id);\n\n        if((groupInformation.type === GroupType.PRIVATE) && (groupInformation.membershipType === GroupMembershipType.NOT_MEMBER)) return;\n\n        if(groupInformation.membershipType === GroupMembershipType.MEMBER)\n        {\n            leaveGroup();\n\n            return;\n        }\n\n        TryJoinGroup(groupInformation.id);\n    }\n\n    if(!groupInformation) return null;\n\n    return (\n        <Base className=\"nitro-notification-bubble\">\n            <Column>\n                <Flex className=\"grouproom-header\" alignItems=\"center\" justifyContent=\"between\" pointer onClick={ event => setIsOpen(value => !value) }>\n                    <Text bold small className=\"header-text p-1\" variant=\"white\">{ LocalizeText('group.homeroominfo.title') }</Text>\n                    <i className={ isOpen ? 'arrow-down' : 'arrow-left' } />\n                </Flex>\n                { isOpen &&\n                    <>\n                    <Column className=\"px-2 pb-2\">\n                        <Flex pointer alignItems=\"center\" gap={ 2 } onClick={ event => GetGroupInformation(groupInformation.id) }>\n                            <Base className=\"group-badge\">\n                                <LayoutBadgeImageView badgeCode={ groupInformation.badge } isGroup={ true } />\n                            </Base>\n                            <Text bold variant=\"white\">{ groupInformation.title }</Text>\n                        </Flex>\n                        { (groupInformation.type !== GroupType.PRIVATE || isRealOwner) && \n                            <Button fullWidth className=\"btn-flash fw-bold\" disabled={ (groupInformation.membershipType === GroupMembershipType.REQUEST_PENDING) } onClick={ handleButtonClick }>\n                                { LocalizeText(getButtonText()) }\n                            </Button>\n                        }\n                    </Column>\n                    </> }\n            </Column>\n        </Base>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}