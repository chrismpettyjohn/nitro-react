{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/transitions/TransitionAnimation.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Transition } from 'react-transition-group';\nimport { getTransitionAnimationStyle } from './TransitionAnimationStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransitionAnimation = props => {\n  _s();\n\n  const {\n    type = null,\n    inProp = false,\n    timeout = 300,\n    className = null,\n    children = null\n  } = props;\n  const [isChildrenVisible, setChildrenVisible] = useState(false);\n  useEffect(() => {\n    let timeoutData = null;\n\n    if (inProp) {\n      setChildrenVisible(true);\n    } else {\n      timeoutData = setTimeout(() => {\n        setChildrenVisible(false);\n        clearTimeout(timeout);\n      }, timeout);\n    }\n\n    return () => {\n      if (timeoutData) clearTimeout(timeoutData);\n    };\n  }, [inProp, timeout]);\n  return /*#__PURE__*/_jsxDEV(Transition, {\n    in: inProp,\n    timeout: timeout,\n    children: state => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: (className !== null && className !== void 0 ? className : '') + ' animate__animated',\n      style: { ...getTransitionAnimationStyle(type, state, timeout)\n      },\n      children: isChildrenVisible && children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransitionAnimation, \"jmLk71GvtwWQsEm4kPFuLTciiGQ=\");\n\n_c = TransitionAnimation;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransitionAnimation\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/transitions/TransitionAnimation.tsx"],"names":["useEffect","useState","Transition","getTransitionAnimationStyle","TransitionAnimation","props","type","inProp","timeout","className","children","isChildrenVisible","setChildrenVisible","timeoutData","setTimeout","clearTimeout","state"],"mappings":";;;AAAA,SAAaA,SAAb,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,2BAAT,QAA4C,6BAA5C;;AAUA,OAAO,MAAMC,mBAAiD,GAAGC,KAAK,IACtE;AAAA;;AACI,QAAM;AAAEC,IAAAA,IAAI,GAAG,IAAT;AAAeC,IAAAA,MAAM,GAAG,KAAxB;AAA+BC,IAAAA,OAAO,GAAG,GAAzC;AAA8CC,IAAAA,SAAS,GAAG,IAA1D;AAAgEC,IAAAA,QAAQ,GAAG;AAA3E,MAAoFL,KAA1F;AAEA,QAAM,CAAEM,iBAAF,EAAqBC,kBAArB,IAA4CX,QAAQ,CAAC,KAAD,CAA1D;AAEAD,EAAAA,SAAS,CAAC,MACV;AACI,QAAIa,WAA0C,GAAG,IAAjD;;AAEA,QAAGN,MAAH,EACA;AACIK,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,KAHD,MAKA;AACIC,MAAAA,WAAW,GAAGC,UAAU,CAAC,MACzB;AACIF,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAG,QAAAA,YAAY,CAACP,OAAD,CAAZ;AACH,OAJuB,EAIrBA,OAJqB,CAAxB;AAKH;;AAED,WAAO,MACP;AACI,UAAGK,WAAH,EAAgBE,YAAY,CAACF,WAAD,CAAZ;AACnB,KAHD;AAIH,GArBQ,EAqBN,CAAEN,MAAF,EAAUC,OAAV,CArBM,CAAT;AAuBA,sBACI,QAAC,UAAD;AAAY,IAAA,EAAE,EAAGD,MAAjB;AAA0B,IAAA,OAAO,EAAGC,OAApC;AAAA,cACMQ,KAAK,iBACH;AAAK,MAAA,SAAS,EAAG,CAACP,SAAD,aAACA,SAAD,cAACA,SAAD,GAAc,EAAd,IAAoB,oBAArC;AAA4D,MAAA,KAAK,EAAG,EAAE,GAAGN,2BAA2B,CAACG,IAAD,EAAOU,KAAP,EAAcR,OAAd;AAAhC,OAApE;AAAA,gBACMG,iBAAiB,IAAID;AAD3B;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAtCM;;GAAMN,mB;;KAAAA,mB","sourcesContent":["import { FC, useEffect, useState } from 'react';\nimport { Transition } from 'react-transition-group';\nimport { getTransitionAnimationStyle } from './TransitionAnimationStyles';\n\ninterface TransitionAnimationProps\n{\n    type: string;\n    inProp: boolean;\n    timeout?: number;\n    className?: string;\n}\n\nexport const TransitionAnimation: FC<TransitionAnimationProps> = props =>\n{\n    const { type = null, inProp = false, timeout = 300, className = null, children = null } = props;\n\n    const [ isChildrenVisible, setChildrenVisible ] = useState(false);\n\n    useEffect(() =>\n    {\n        let timeoutData: ReturnType<typeof setTimeout> = null;\n\n        if(inProp)\n        {\n            setChildrenVisible(true);\n        }\n        else\n        {\n            timeoutData = setTimeout(() =>\n            {\n                setChildrenVisible(false);\n                clearTimeout(timeout);\n            }, timeout);\n        }\n\n        return () =>\n        {\n            if(timeoutData) clearTimeout(timeoutData);\n        }\n    }, [ inProp, timeout ]);\n\n    return (\n        <Transition in={ inProp } timeout={ timeout }>\n            { state => (\n                <div className={ (className ?? '') + ' animate__animated' } style={ { ...getTransitionAnimationStyle(type, state, timeout) } }>\n                    { isChildrenVisible && children }\n                </div>\n            ) }\n        </Transition>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}