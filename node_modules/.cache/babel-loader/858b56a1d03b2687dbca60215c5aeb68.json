{"ast":null,"code":"import { AdvancedMap } from '../../../../../../core/utils/AdvancedMap';\nexport class BadgesParser {\n  constructor() {\n    this._allBadgeCodes = void 0;\n    this._activeBadgeCodes = void 0;\n    this._badgeIds = void 0;\n  }\n\n  flush() {\n    this._allBadgeCodes = [];\n    this._activeBadgeCodes = [];\n    this._badgeIds = null;\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    this._allBadgeCodes = [];\n    this._activeBadgeCodes = [];\n    this._badgeIds = new AdvancedMap();\n    let count = wrapper.readInt();\n\n    while (count > 0) {\n      const badgeId = wrapper.readInt();\n      const badgeCode = wrapper.readString();\n\n      this._badgeIds.add(badgeCode, badgeId);\n\n      this._allBadgeCodes.push(badgeCode);\n\n      count--;\n    }\n\n    count = wrapper.readInt();\n\n    while (count > 0) {\n      const badgeSlot = wrapper.readInt();\n      const badgeCode = wrapper.readString();\n      this._activeBadgeCodes[badgeSlot] = badgeCode;\n      count--;\n    }\n\n    return true;\n  }\n\n  getBadgeId(k) {\n    return this._badgeIds.getValue(k);\n  }\n\n  getAllBadgeCodes() {\n    return this._allBadgeCodes;\n  }\n\n  getActiveBadgeCodes() {\n    return this._activeBadgeCodes;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/inventory/badges/BadgesParser.ts"],"names":["AdvancedMap","BadgesParser","_allBadgeCodes","_activeBadgeCodes","_badgeIds","flush","parse","wrapper","count","readInt","badgeId","badgeCode","readString","add","push","badgeSlot","getBadgeId","k","getValue","getAllBadgeCodes","getActiveBadgeCodes"],"mappings":"AACA,SAASA,WAAT,QAA4B,0CAA5B;AAEA,OAAO,MAAMC,YAAN,CACP;AAAA;AAAA,SACYC,cADZ;AAAA,SAEYC,iBAFZ;AAAA,SAGYC,SAHZ;AAAA;;AAKWC,EAAAA,KAAK,GACZ;AACI,SAAKH,cAAL,GAAsB,EAAtB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,SAAKL,cAAL,GAAsB,EAAtB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,SAAL,GAAiB,IAAIJ,WAAJ,EAAjB;AAEA,QAAIQ,KAAK,GAAGD,OAAO,CAACE,OAAR,EAAZ;;AAEA,WAAMD,KAAK,GAAG,CAAd,EACA;AACI,YAAME,OAAO,GAAGH,OAAO,CAACE,OAAR,EAAhB;AACA,YAAME,SAAS,GAAGJ,OAAO,CAACK,UAAR,EAAlB;;AAEA,WAAKR,SAAL,CAAeS,GAAf,CAAmBF,SAAnB,EAA8BD,OAA9B;;AAEA,WAAKR,cAAL,CAAoBY,IAApB,CAAyBH,SAAzB;;AAEAH,MAAAA,KAAK;AACR;;AAEDA,IAAAA,KAAK,GAAGD,OAAO,CAACE,OAAR,EAAR;;AAEA,WAAMD,KAAK,GAAG,CAAd,EACA;AACI,YAAMO,SAAS,GAAGR,OAAO,CAACE,OAAR,EAAlB;AACA,YAAME,SAAS,GAAGJ,OAAO,CAACK,UAAR,EAAlB;AAEA,WAAKT,iBAAL,CAAuBY,SAAvB,IAAoCJ,SAApC;AAEAH,MAAAA,KAAK;AACR;;AAED,WAAO,IAAP;AACH;;AAEMQ,EAAAA,UAAU,CAACC,CAAD,EACjB;AACI,WAAO,KAAKb,SAAL,CAAec,QAAf,CAAwBD,CAAxB,CAAP;AACH;;AAEME,EAAAA,gBAAgB,GACvB;AACI,WAAO,KAAKjB,cAAZ;AACH;;AAEMkB,EAAAA,mBAAmB,GAC1B;AACI,WAAO,KAAKjB,iBAAZ;AACH;;AAhEL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\nimport { AdvancedMap } from '../../../../../../core/utils/AdvancedMap';\r\n\r\nexport class BadgesParser implements IMessageParser\r\n{\r\n    private _allBadgeCodes: string[];\r\n    private _activeBadgeCodes: string[];\r\n    private _badgeIds: AdvancedMap<string, number>;\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._allBadgeCodes = [];\r\n        this._activeBadgeCodes = [];\r\n        this._badgeIds = null;\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        this._allBadgeCodes = [];\r\n        this._activeBadgeCodes = [];\r\n        this._badgeIds = new AdvancedMap();\r\n\r\n        let count = wrapper.readInt();\r\n\r\n        while(count > 0)\r\n        {\r\n            const badgeId = wrapper.readInt();\r\n            const badgeCode = wrapper.readString();\r\n\r\n            this._badgeIds.add(badgeCode, badgeId);\r\n\r\n            this._allBadgeCodes.push(badgeCode);\r\n\r\n            count--;\r\n        }\r\n\r\n        count = wrapper.readInt();\r\n\r\n        while(count > 0)\r\n        {\r\n            const badgeSlot = wrapper.readInt();\r\n            const badgeCode = wrapper.readString();\r\n\r\n            this._activeBadgeCodes[badgeSlot] = badgeCode;\r\n\r\n            count--;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public getBadgeId(k: string): number\r\n    {\r\n        return this._badgeIds.getValue(k);\r\n    }\r\n\r\n    public getAllBadgeCodes(): string[]\r\n    {\r\n        return this._allBadgeCodes;\r\n    }\r\n\r\n    public getActiveBadgeCodes(): string[]\r\n    {\r\n        return this._activeBadgeCodes;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}