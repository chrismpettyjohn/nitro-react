{"ast":null,"code":"import { Application } from '@pixi/app';\nimport { SCALE_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { Ticker } from '@pixi/ticker';\nimport { ConfigurationEvent } from '../core/configuration/ConfigurationEvent';\nimport { EventDispatcher } from '../core/events/EventDispatcher';\nimport { NitroEvent } from '../core/events/NitroEvent';\nimport { NitroCore } from '../core/NitroCore';\nimport { NitroTimer } from '../core/utils/NitroTimer';\nimport { RoomManager } from '../room/RoomManager';\nimport { AvatarRenderManager } from './avatar/AvatarRenderManager';\nimport { RoomCameraWidgetManager } from './camera/RoomCameraWidgetManager';\nimport { NitroCommunicationManager } from './communication/NitroCommunicationManager';\nimport { LegacyExternalInterface } from './externalInterface/LegacyExternalInterface';\nimport { GameMessageHandler } from './game/GameMessageHandler';\nimport { NitroLocalizationManager } from './localization/NitroLocalizationManager';\nimport './Plugins';\nimport { RoomEngineEvent } from './room/events/RoomEngineEvent';\nimport { RoomEngine } from './room/RoomEngine';\nimport { RoomSessionManager } from './session/RoomSessionManager';\nimport { SessionDataManager } from './session/SessionDataManager';\nimport { SoundManager } from './sound/SoundManager';\nimport { HabboWebTools } from './utils/HabboWebTools';\nLegacyExternalInterface.available;\nsettings.SCALE_MODE = SCALE_MODES.NEAREST;\nsettings.ROUND_PIXELS = true;\nexport class Nitro extends Application {\n  constructor(core, options) {\n    super(options);\n    this._nitroTimer = void 0;\n    this._worker = void 0;\n    this._core = void 0;\n    this._events = void 0;\n    this._localization = void 0;\n    this._communication = void 0;\n    this._avatar = void 0;\n    this._roomEngine = void 0;\n    this._sessionDataManager = void 0;\n    this._roomSessionManager = void 0;\n    this._roomManager = void 0;\n    this._cameraManager = void 0;\n    this._soundManager = void 0;\n    this._linkTrackers = void 0;\n    this._workerTrackers = void 0;\n    this._isReady = void 0;\n    this._isDisposed = void 0;\n    if (!Nitro.INSTANCE) Nitro.INSTANCE = this;\n    this._nitroTimer = new NitroTimer();\n    this._worker = null;\n    this._core = core;\n    this._events = new EventDispatcher();\n    this._localization = new NitroLocalizationManager();\n    this._communication = new NitroCommunicationManager(core.communication);\n    this._avatar = new AvatarRenderManager();\n    this._roomEngine = new RoomEngine(this._communication);\n    this._sessionDataManager = new SessionDataManager(this._communication);\n    this._roomSessionManager = new RoomSessionManager(this._communication, this._roomEngine);\n    this._roomManager = new RoomManager(this._roomEngine, this._roomEngine.visualizationFactory, this._roomEngine.logicFactory);\n    this._cameraManager = new RoomCameraWidgetManager();\n    this._soundManager = new SoundManager();\n    this._linkTrackers = [];\n    this._workerTrackers = [];\n    this._isReady = false;\n    this._isDisposed = false;\n\n    this._core.configuration.events.addEventListener(ConfigurationEvent.LOADED, this.onConfigurationLoadedEvent.bind(this));\n\n    this._roomEngine.events.addEventListener(RoomEngineEvent.ENGINE_INITIALIZED, this.onRoomEngineReady.bind(this));\n\n    if (this._worker) this._worker.onmessage = this.createWorkerEvent.bind(this);\n  }\n\n  static bootstrap() {\n    if (Nitro.INSTANCE) {\n      Nitro.INSTANCE.dispose();\n      Nitro.INSTANCE = null;\n    }\n\n    const canvas = document.createElement('canvas');\n    canvas.id = 'client-wrapper';\n    canvas.className = 'client-canvas';\n    const instance = new this(new NitroCore(), {\n      autoDensity: true,\n      resolution: window.devicePixelRatio,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      view: canvas\n    });\n    canvas.addEventListener('webglcontextlost', () => instance.events.dispatchEvent(new NitroEvent(Nitro.WEBGL_CONTEXT_LOST)));\n  }\n\n  init() {\n    if (this._isReady || this._isDisposed) return;\n    if (this._avatar) this._avatar.init();\n    if (this._soundManager) this._soundManager.init();\n\n    if (this._roomEngine) {\n      this._roomEngine.sessionDataManager = this._sessionDataManager;\n      this._roomEngine.roomSessionManager = this._roomSessionManager;\n      this._roomEngine.roomManager = this._roomManager;\n      if (this._sessionDataManager) this._sessionDataManager.init();\n      if (this._roomSessionManager) this._roomSessionManager.init();\n\n      this._roomEngine.init();\n    }\n\n    if (!this._communication.connection) {\n      throw new Error('No connection found');\n    }\n\n    new GameMessageHandler(this._communication.connection);\n    this._isReady = true;\n  }\n\n  dispose() {\n    if (this._isDisposed) return;\n\n    if (this._roomManager) {\n      this._roomManager.dispose();\n\n      this._roomManager = null;\n    }\n\n    if (this._roomSessionManager) {\n      this._roomSessionManager.dispose();\n\n      this._roomSessionManager = null;\n    }\n\n    if (this._sessionDataManager) {\n      this._sessionDataManager.dispose();\n\n      this._sessionDataManager = null;\n    }\n\n    if (this._roomEngine) {\n      this._roomEngine.dispose();\n\n      this._roomEngine = null;\n    }\n\n    if (this._avatar) {\n      this._avatar.dispose();\n\n      this._avatar = null;\n    }\n\n    if (this._soundManager) {\n      this._soundManager.dispose();\n\n      this._soundManager = null;\n    }\n\n    if (this._communication) {\n      this._communication.dispose();\n\n      this._communication = null;\n    }\n\n    super.destroy();\n    this._isDisposed = true;\n    this._isReady = false;\n  }\n\n  onConfigurationLoadedEvent(event) {\n    const animationFPS = this.getConfiguration('system.animation.fps', 24);\n    const limitsFPS = this.getConfiguration('system.limits.fps', true);\n    if (limitsFPS) Nitro.instance.ticker.maxFPS = animationFPS;\n  }\n\n  onRoomEngineReady(event) {\n    this.startSendingHeartBeat();\n  }\n\n  getConfiguration(key) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return this._core.configuration.getValue(key, value);\n  }\n\n  getLocalization(key) {\n    return this._localization.getValue(key);\n  }\n\n  getLocalizationWithParameter(key, parameter, replacement) {\n    return this._localization.getValueWithParameter(key, parameter, replacement);\n  }\n\n  getLocalizationWithParameters(key, parameters, replacements) {\n    return this._localization.getValueWithParameters(key, parameters, replacements);\n  }\n\n  addWorkerEventTracker(tracker) {\n    if (this._workerTrackers.indexOf(tracker) >= 0) return;\n\n    this._workerTrackers.push(tracker);\n  }\n\n  removeWorkerEventTracker(tracker) {\n    const index = this._workerTrackers.indexOf(tracker);\n\n    if (index === -1) return;\n\n    this._workerTrackers.splice(index, 1);\n  }\n\n  createWorkerEvent(message) {\n    if (!message) return;\n    const data = message.data;\n\n    for (const tracker of this._workerTrackers) {\n      if (!tracker) continue;\n      tracker.workerMessageReceived(data);\n    }\n  }\n\n  sendWorkerEvent(message) {\n    if (!message || !this._worker) return;\n\n    this._worker.postMessage(message);\n  }\n\n  addLinkEventTracker(tracker) {\n    if (this._linkTrackers.indexOf(tracker) >= 0) return;\n\n    this._linkTrackers.push(tracker);\n  }\n\n  removeLinkEventTracker(tracker) {\n    const index = this._linkTrackers.indexOf(tracker);\n\n    if (index === -1) return;\n\n    this._linkTrackers.splice(index, 1);\n  }\n\n  createLinkEvent(link) {\n    if (!link || link === '') return;\n\n    for (const tracker of this._linkTrackers) {\n      if (!tracker) continue;\n      const prefix = tracker.eventUrlPrefix;\n\n      if (prefix.length > 0) {\n        if (link.substr(0, prefix.length) === prefix) tracker.linkReceived(link);\n      } else {\n        tracker.linkReceived(link);\n      }\n    }\n  }\n\n  startSendingHeartBeat() {\n    this.sendHeartBeat();\n    setInterval(this.sendHeartBeat, 10000);\n  }\n\n  sendHeartBeat() {\n    HabboWebTools.sendHeartBeat();\n  }\n\n  setWorker(val) {\n    this._worker = val;\n    this._worker.onmessage = this.createWorkerEvent.bind(this);\n  }\n\n  get nitroTimer() {\n    return this._nitroTimer;\n  }\n\n  get core() {\n    return this._core;\n  }\n\n  get events() {\n    return this._events;\n  }\n\n  get localization() {\n    return this._localization;\n  }\n\n  get communication() {\n    return this._communication;\n  }\n\n  get avatar() {\n    return this._avatar;\n  }\n\n  get roomEngine() {\n    return this._roomEngine;\n  }\n\n  get sessionDataManager() {\n    return this._sessionDataManager;\n  }\n\n  get roomSessionManager() {\n    return this._roomSessionManager;\n  }\n\n  get roomManager() {\n    return this._roomManager;\n  }\n\n  get cameraManager() {\n    return this._cameraManager;\n  }\n\n  get width() {\n    return this.renderer.width / this.renderer.resolution;\n  }\n\n  get height() {\n    return this.renderer.height / this.renderer.resolution;\n  }\n\n  get ticker() {\n    return Ticker.shared;\n  }\n\n  get time() {\n    return this.ticker.lastTime;\n  }\n\n  get isReady() {\n    return this._isReady;\n  }\n\n  get isDisposed() {\n    return this._isDisposed;\n  }\n\n  static get instance() {\n    return this.INSTANCE || null;\n  }\n\n}\nNitro.WEBGL_CONTEXT_LOST = 'NE_WEBGL_CONTEXT_LOST';\nNitro.WEBGL_UNAVAILABLE = 'NE_WEBGL_UNAVAILABLE';\nNitro.READY = 'NE_READY!';\nNitro.INSTANCE = null;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/Nitro.ts"],"names":["Application","SCALE_MODES","settings","Ticker","ConfigurationEvent","EventDispatcher","NitroEvent","NitroCore","NitroTimer","RoomManager","AvatarRenderManager","RoomCameraWidgetManager","NitroCommunicationManager","LegacyExternalInterface","GameMessageHandler","NitroLocalizationManager","RoomEngineEvent","RoomEngine","RoomSessionManager","SessionDataManager","SoundManager","HabboWebTools","available","SCALE_MODE","NEAREST","ROUND_PIXELS","Nitro","constructor","core","options","_nitroTimer","_worker","_core","_events","_localization","_communication","_avatar","_roomEngine","_sessionDataManager","_roomSessionManager","_roomManager","_cameraManager","_soundManager","_linkTrackers","_workerTrackers","_isReady","_isDisposed","INSTANCE","communication","visualizationFactory","logicFactory","configuration","events","addEventListener","LOADED","onConfigurationLoadedEvent","bind","ENGINE_INITIALIZED","onRoomEngineReady","onmessage","createWorkerEvent","bootstrap","dispose","canvas","document","createElement","id","className","instance","autoDensity","resolution","window","devicePixelRatio","width","innerWidth","height","innerHeight","view","dispatchEvent","WEBGL_CONTEXT_LOST","init","sessionDataManager","roomSessionManager","roomManager","connection","Error","destroy","event","animationFPS","getConfiguration","limitsFPS","ticker","maxFPS","startSendingHeartBeat","key","value","getValue","getLocalization","getLocalizationWithParameter","parameter","replacement","getValueWithParameter","getLocalizationWithParameters","parameters","replacements","getValueWithParameters","addWorkerEventTracker","tracker","indexOf","push","removeWorkerEventTracker","index","splice","message","data","workerMessageReceived","sendWorkerEvent","postMessage","addLinkEventTracker","removeLinkEventTracker","createLinkEvent","link","prefix","eventUrlPrefix","length","substr","linkReceived","sendHeartBeat","setInterval","setWorker","val","nitroTimer","localization","avatar","roomEngine","cameraManager","renderer","shared","time","lastTime","isReady","isDisposed","WEBGL_UNAVAILABLE","READY"],"mappings":"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","sourcesContent":["import { Application, IApplicationOptions } from '@pixi/app';\r\nimport { SCALE_MODES } from '@pixi/constants';\r\nimport { settings } from '@pixi/settings';\r\nimport { Ticker } from '@pixi/ticker';\r\nimport { INitroManager } from '../core';\r\nimport { ConfigurationEvent } from '../core/configuration/ConfigurationEvent';\r\nimport { EventDispatcher } from '../core/events/EventDispatcher';\r\nimport { IEventDispatcher } from '../core/events/IEventDispatcher';\r\nimport { ILinkEventTracker } from '../core/events/ILinkEventTracker';\r\nimport { IWorkerEventTracker } from '../core/events/IWorkerEventTracker';\r\nimport { NitroEvent } from '../core/events/NitroEvent';\r\nimport { INitroCore } from '../core/INitroCore';\r\nimport { NitroCore } from '../core/NitroCore';\r\nimport { NitroTimer } from '../core/utils/NitroTimer';\r\nimport { IRoomManager } from '../room/IRoomManager';\r\nimport { RoomManager } from '../room/RoomManager';\r\nimport { AvatarRenderManager } from './avatar/AvatarRenderManager';\r\nimport { IAvatarRenderManager } from './avatar/IAvatarRenderManager';\r\nimport { IRoomCameraWidgetManager } from './camera/IRoomCameraWidgetManager';\r\nimport { RoomCameraWidgetManager } from './camera/RoomCameraWidgetManager';\r\nimport { INitroCommunicationManager } from './communication/INitroCommunicationManager';\r\nimport { NitroCommunicationManager } from './communication/NitroCommunicationManager';\r\nimport { LegacyExternalInterface } from './externalInterface/LegacyExternalInterface';\r\nimport { GameMessageHandler } from './game/GameMessageHandler';\r\nimport { INitro } from './INitro';\r\nimport { INitroLocalizationManager } from './localization/INitroLocalizationManager';\r\nimport { NitroLocalizationManager } from './localization/NitroLocalizationManager';\r\nimport './Plugins';\r\nimport { RoomEngineEvent } from './room/events/RoomEngineEvent';\r\nimport { IRoomEngine } from './room/IRoomEngine';\r\nimport { RoomEngine } from './room/RoomEngine';\r\nimport { IRoomSessionManager } from './session/IRoomSessionManager';\r\nimport { ISessionDataManager } from './session/ISessionDataManager';\r\nimport { RoomSessionManager } from './session/RoomSessionManager';\r\nimport { SessionDataManager } from './session/SessionDataManager';\r\nimport { SoundManager } from './sound/SoundManager';\r\nimport { HabboWebTools } from './utils/HabboWebTools';\r\n\r\nLegacyExternalInterface.available;\r\n\r\nsettings.SCALE_MODE = SCALE_MODES.NEAREST;\r\nsettings.ROUND_PIXELS = true;\r\n\r\nexport class Nitro extends Application implements INitro\r\n{\r\n    public static WEBGL_CONTEXT_LOST: string = 'NE_WEBGL_CONTEXT_LOST';\r\n    public static WEBGL_UNAVAILABLE: string = 'NE_WEBGL_UNAVAILABLE';\r\n    public static READY: string = 'NE_READY!';\r\n\r\n    private static INSTANCE: INitro = null;\r\n\r\n    private _nitroTimer: NitroTimer;\r\n    private _worker: Worker;\r\n    private _core: INitroCore;\r\n    private _events: IEventDispatcher;\r\n    private _localization: INitroLocalizationManager;\r\n    private _communication: INitroCommunicationManager;\r\n    private _avatar: IAvatarRenderManager;\r\n    private _roomEngine: IRoomEngine;\r\n    private _sessionDataManager: ISessionDataManager;\r\n    private _roomSessionManager: IRoomSessionManager;\r\n    private _roomManager: IRoomManager;\r\n    private _cameraManager: IRoomCameraWidgetManager;\r\n    private _soundManager: INitroManager;\r\n    private _linkTrackers: ILinkEventTracker[];\r\n    private _workerTrackers: IWorkerEventTracker[];\r\n\r\n    private _isReady: boolean;\r\n    private _isDisposed: boolean;\r\n\r\n    constructor(core: INitroCore, options?: IApplicationOptions)\r\n    {\r\n        super(options);\r\n\r\n        if(!Nitro.INSTANCE) Nitro.INSTANCE = this;\r\n\r\n        this._nitroTimer = new NitroTimer();\r\n        this._worker = null;\r\n        this._core = core;\r\n        this._events = new EventDispatcher();\r\n        this._localization = new NitroLocalizationManager();\r\n        this._communication = new NitroCommunicationManager(core.communication);\r\n        this._avatar = new AvatarRenderManager();\r\n        this._roomEngine = new RoomEngine(this._communication);\r\n        this._sessionDataManager = new SessionDataManager(this._communication);\r\n        this._roomSessionManager = new RoomSessionManager(this._communication, this._roomEngine);\r\n        this._roomManager = new RoomManager(this._roomEngine, this._roomEngine.visualizationFactory, this._roomEngine.logicFactory);\r\n        this._cameraManager = new RoomCameraWidgetManager();\r\n        this._soundManager = new SoundManager();\r\n        this._linkTrackers = [];\r\n        this._workerTrackers = [];\r\n\r\n        this._isReady = false;\r\n        this._isDisposed = false;\r\n\r\n        this._core.configuration.events.addEventListener(ConfigurationEvent.LOADED, this.onConfigurationLoadedEvent.bind(this));\r\n        this._roomEngine.events.addEventListener(RoomEngineEvent.ENGINE_INITIALIZED, this.onRoomEngineReady.bind(this));\r\n\r\n        if(this._worker) this._worker.onmessage = this.createWorkerEvent.bind(this);\r\n    }\r\n\r\n    public static bootstrap(): void\r\n    {\r\n        if(Nitro.INSTANCE)\r\n        {\r\n            Nitro.INSTANCE.dispose();\r\n\r\n            Nitro.INSTANCE = null;\r\n        }\r\n\r\n        const canvas = document.createElement('canvas');\r\n\r\n        canvas.id = 'client-wrapper';\r\n        canvas.className = 'client-canvas';\r\n\r\n        const instance = new this(new NitroCore(), {\r\n            autoDensity: true,\r\n            resolution: window.devicePixelRatio,\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n            view: canvas\r\n        });\r\n\r\n        canvas.addEventListener('webglcontextlost', () => instance.events.dispatchEvent(new NitroEvent(Nitro.WEBGL_CONTEXT_LOST)));\r\n    }\r\n\r\n    public init(): void\r\n    {\r\n        if(this._isReady || this._isDisposed) return;\r\n\r\n        if(this._avatar) this._avatar.init();\r\n\r\n        if(this._soundManager) this._soundManager.init();\r\n\r\n        if(this._roomEngine)\r\n        {\r\n            this._roomEngine.sessionDataManager = this._sessionDataManager;\r\n            this._roomEngine.roomSessionManager = this._roomSessionManager;\r\n            this._roomEngine.roomManager = this._roomManager;\r\n\r\n            if(this._sessionDataManager) this._sessionDataManager.init();\r\n            if(this._roomSessionManager) this._roomSessionManager.init();\r\n\r\n            this._roomEngine.init();\r\n        }\r\n\r\n        if(!this._communication.connection)\r\n        {\r\n            throw new Error('No connection found');\r\n        }\r\n\r\n        new GameMessageHandler(this._communication.connection);\r\n\r\n        this._isReady = true;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._isDisposed) return;\r\n\r\n        if(this._roomManager)\r\n        {\r\n            this._roomManager.dispose();\r\n\r\n            this._roomManager = null;\r\n        }\r\n\r\n        if(this._roomSessionManager)\r\n        {\r\n            this._roomSessionManager.dispose();\r\n\r\n            this._roomSessionManager = null;\r\n        }\r\n\r\n        if(this._sessionDataManager)\r\n        {\r\n            this._sessionDataManager.dispose();\r\n\r\n            this._sessionDataManager = null;\r\n        }\r\n\r\n        if(this._roomEngine)\r\n        {\r\n            this._roomEngine.dispose();\r\n\r\n            this._roomEngine = null;\r\n        }\r\n\r\n        if(this._avatar)\r\n        {\r\n            this._avatar.dispose();\r\n\r\n            this._avatar = null;\r\n        }\r\n\r\n        if(this._soundManager)\r\n        {\r\n            this._soundManager.dispose();\r\n\r\n            this._soundManager = null;\r\n        }\r\n\r\n        if(this._communication)\r\n        {\r\n            this._communication.dispose();\r\n\r\n            this._communication = null;\r\n        }\r\n\r\n        super.destroy();\r\n\r\n        this._isDisposed = true;\r\n        this._isReady = false;\r\n    }\r\n\r\n    private onConfigurationLoadedEvent(event: ConfigurationEvent): void\r\n    {\r\n        const animationFPS = this.getConfiguration<number>('system.animation.fps', 24);\r\n        const limitsFPS = this.getConfiguration<boolean>('system.limits.fps', true);\r\n\r\n        if(limitsFPS) Nitro.instance.ticker.maxFPS = animationFPS;\r\n    }\r\n\r\n    private onRoomEngineReady(event: RoomEngineEvent): void\r\n    {\r\n        this.startSendingHeartBeat();\r\n    }\r\n\r\n    public getConfiguration<T>(key: string, value: T = null): T\r\n    {\r\n        return this._core.configuration.getValue<T>(key, value);\r\n    }\r\n\r\n    public getLocalization(key: string): string\r\n    {\r\n        return this._localization.getValue(key);\r\n    }\r\n\r\n    public getLocalizationWithParameter(key: string, parameter: string, replacement: string): string\r\n    {\r\n        return this._localization.getValueWithParameter(key, parameter, replacement);\r\n    }\r\n\r\n    public getLocalizationWithParameters(key: string, parameters: string[], replacements: string[]): string\r\n    {\r\n        return this._localization.getValueWithParameters(key, parameters, replacements);\r\n    }\r\n\r\n    public addWorkerEventTracker(tracker: IWorkerEventTracker): void\r\n    {\r\n        if(this._workerTrackers.indexOf(tracker) >= 0) return;\r\n\r\n        this._workerTrackers.push(tracker);\r\n    }\r\n\r\n    public removeWorkerEventTracker(tracker: IWorkerEventTracker): void\r\n    {\r\n        const index = this._workerTrackers.indexOf(tracker);\r\n\r\n        if(index === -1) return;\r\n\r\n        this._workerTrackers.splice(index, 1);\r\n    }\r\n\r\n    public createWorkerEvent(message: MessageEvent): void\r\n    {\r\n        if(!message) return;\r\n\r\n        const data: { [index: string]: any } = message.data;\r\n\r\n        for(const tracker of this._workerTrackers)\r\n        {\r\n            if(!tracker) continue;\r\n\r\n            tracker.workerMessageReceived(data);\r\n        }\r\n    }\r\n\r\n    public sendWorkerEvent(message: { [index: string]: any }): void\r\n    {\r\n        if(!message || !this._worker) return;\r\n\r\n        this._worker.postMessage(message);\r\n    }\r\n\r\n    public addLinkEventTracker(tracker: ILinkEventTracker): void\r\n    {\r\n        if(this._linkTrackers.indexOf(tracker) >= 0) return;\r\n\r\n        this._linkTrackers.push(tracker);\r\n    }\r\n\r\n    public removeLinkEventTracker(tracker: ILinkEventTracker): void\r\n    {\r\n        const index = this._linkTrackers.indexOf(tracker);\r\n\r\n        if(index === -1) return;\r\n\r\n        this._linkTrackers.splice(index, 1);\r\n    }\r\n\r\n    public createLinkEvent(link: string): void\r\n    {\r\n        if(!link || (link === '')) return;\r\n\r\n        for(const tracker of this._linkTrackers)\r\n        {\r\n            if(!tracker) continue;\r\n\r\n            const prefix = tracker.eventUrlPrefix;\r\n\r\n            if(prefix.length > 0)\r\n            {\r\n                if(link.substr(0, prefix.length) === prefix) tracker.linkReceived(link);\r\n            }\r\n            else\r\n            {\r\n                tracker.linkReceived(link);\r\n            }\r\n        }\r\n    }\r\n\r\n    private startSendingHeartBeat(): void\r\n    {\r\n        this.sendHeartBeat();\r\n\r\n        setInterval(this.sendHeartBeat, 10000);\r\n    }\r\n\r\n    private sendHeartBeat(): void\r\n    {\r\n        HabboWebTools.sendHeartBeat();\r\n    }\r\n\r\n    public setWorker(val: Worker): void\r\n    {\r\n        this._worker = val;\r\n        this._worker.onmessage = this.createWorkerEvent.bind(this);\r\n    }\r\n\r\n    public get nitroTimer(): NitroTimer\r\n    {\r\n        return this._nitroTimer;\r\n    }\r\n\r\n    public get core(): INitroCore\r\n    {\r\n        return this._core;\r\n    }\r\n\r\n    public get events(): IEventDispatcher\r\n    {\r\n        return this._events;\r\n    }\r\n\r\n    public get localization(): INitroLocalizationManager\r\n    {\r\n        return this._localization;\r\n    }\r\n\r\n    public get communication(): INitroCommunicationManager\r\n    {\r\n        return this._communication;\r\n    }\r\n\r\n    public get avatar(): IAvatarRenderManager\r\n    {\r\n        return this._avatar;\r\n    }\r\n\r\n    public get roomEngine(): IRoomEngine\r\n    {\r\n        return this._roomEngine;\r\n    }\r\n\r\n    public get sessionDataManager(): ISessionDataManager\r\n    {\r\n        return this._sessionDataManager;\r\n    }\r\n\r\n    public get roomSessionManager(): IRoomSessionManager\r\n    {\r\n        return this._roomSessionManager;\r\n    }\r\n\r\n    public get roomManager(): IRoomManager\r\n    {\r\n        return this._roomManager;\r\n    }\r\n\r\n    public get cameraManager(): IRoomCameraWidgetManager\r\n    {\r\n        return this._cameraManager;\r\n    }\r\n\r\n    public get width(): number\r\n    {\r\n        return (this.renderer.width / this.renderer.resolution);\r\n    }\r\n\r\n    public get height(): number\r\n    {\r\n        return (this.renderer.height / this.renderer.resolution);\r\n    }\r\n\r\n    public get ticker(): Ticker\r\n    {\r\n        return Ticker.shared;\r\n    }\r\n\r\n    public get time(): number\r\n    {\r\n        return this.ticker.lastTime;\r\n    }\r\n\r\n    public get isReady(): boolean\r\n    {\r\n        return this._isReady;\r\n    }\r\n\r\n    public get isDisposed(): boolean\r\n    {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    public static get instance(): INitro\r\n    {\r\n        return this.INSTANCE || null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}