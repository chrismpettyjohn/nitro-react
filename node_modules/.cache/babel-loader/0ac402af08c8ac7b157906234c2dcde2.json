{"ast":null,"code":"export class AvatarImageDirectionCache {\n  constructor(k) {\n    this._partList = void 0;\n    this._images = void 0;\n    this._partList = k;\n    this._images = new Map();\n  }\n\n  dispose() {\n    for (const image of this._images.values()) image && image.dispose();\n\n    this._images = null;\n  }\n\n  getPartList() {\n    return this._partList;\n  }\n\n  getImageContainer(k) {\n    const existing = this._images.get(this.getCacheKey(k));\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  updateImageContainer(k, _arg_2) {\n    const name = this.getCacheKey(_arg_2);\n\n    const existing = this._images.get(name);\n\n    if (existing) existing.dispose();\n\n    this._images.set(name, k);\n  }\n\n  getCacheKey(k) {\n    let name = '';\n\n    for (const part of this._partList) name += part.getCacheableKey(k) + '/';\n\n    return name;\n  }\n\n  debugInfo(k) {}\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/cache/AvatarImageDirectionCache.ts"],"names":["AvatarImageDirectionCache","constructor","k","_partList","_images","Map","dispose","image","values","getPartList","getImageContainer","existing","get","getCacheKey","updateImageContainer","_arg_2","name","set","part","getCacheableKey","debugInfo"],"mappings":"AAGA,OAAO,MAAMA,yBAAN,CACP;AAIIC,EAAAA,WAAW,CAACC,CAAD,EACX;AAAA,SAJQC,SAIR;AAAA,SAHQC,OAGR;AACI,SAAKD,SAAL,GAAiBD,CAAjB;AACA,SAAKE,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACH;;AAEMC,EAAAA,OAAO,GACd;AACI,SAAI,MAAMC,KAAV,IAAmB,KAAKH,OAAL,CAAaI,MAAb,EAAnB,EAA0CD,KAAK,IAAIA,KAAK,CAACD,OAAN,EAAT;;AAE1C,SAAKF,OAAL,GAAe,IAAf;AACH;;AAEMK,EAAAA,WAAW,GAClB;AACI,WAAO,KAAKN,SAAZ;AACH;;AAEMO,EAAAA,iBAAiB,CAACR,CAAD,EACxB;AACI,UAAMS,QAAQ,GAAG,KAAKP,OAAL,CAAaQ,GAAb,CAAiB,KAAKC,WAAL,CAAiBX,CAAjB,CAAjB,CAAjB;;AAEA,QAAG,CAACS,QAAJ,EAAc,OAAO,IAAP;AAEd,WAAOA,QAAP;AACH;;AAEMG,EAAAA,oBAAoB,CAACZ,CAAD,EAAkCa,MAAlC,EAC3B;AACI,UAAMC,IAAI,GAAG,KAAKH,WAAL,CAAiBE,MAAjB,CAAb;;AAEA,UAAMJ,QAAQ,GAAG,KAAKP,OAAL,CAAaQ,GAAb,CAAiBI,IAAjB,CAAjB;;AAEA,QAAGL,QAAH,EAAaA,QAAQ,CAACL,OAAT;;AAEb,SAAKF,OAAL,CAAaa,GAAb,CAAiBD,IAAjB,EAAuBd,CAAvB;AACH;;AAEOW,EAAAA,WAAW,CAACX,CAAD,EACnB;AACI,QAAIc,IAAI,GAAG,EAAX;;AAEA,SAAI,MAAME,IAAV,IAAkB,KAAKf,SAAvB,EAAkCa,IAAI,IAAKE,IAAI,CAACC,eAAL,CAAqBjB,CAArB,IAA0B,GAAnC;;AAElC,WAAOc,IAAP;AACH;;AAEOI,EAAAA,SAAS,CAAClB,CAAD,EACjB,CACC;;AArDL","sourcesContent":["import { AvatarImageBodyPartContainer } from '../AvatarImageBodyPartContainer';\r\nimport { AvatarImagePartContainer } from '../AvatarImagePartContainer';\r\n\r\nexport class AvatarImageDirectionCache\r\n{\r\n    private _partList: AvatarImagePartContainer[];\r\n    private _images: Map<string, AvatarImageBodyPartContainer>;\r\n\r\n    constructor(k: AvatarImagePartContainer[])\r\n    {\r\n        this._partList = k;\r\n        this._images = new Map();\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        for(const image of this._images.values()) image && image.dispose();\r\n\r\n        this._images = null;\r\n    }\r\n\r\n    public getPartList(): AvatarImagePartContainer[]\r\n    {\r\n        return this._partList;\r\n    }\r\n\r\n    public getImageContainer(k: number): AvatarImageBodyPartContainer\r\n    {\r\n        const existing = this._images.get(this.getCacheKey(k));\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public updateImageContainer(k: AvatarImageBodyPartContainer, _arg_2: number): void\r\n    {\r\n        const name = this.getCacheKey(_arg_2);\r\n\r\n        const existing = this._images.get(name);\r\n\r\n        if(existing) existing.dispose();\r\n\r\n        this._images.set(name, k);\r\n    }\r\n\r\n    private getCacheKey(k: number): string\r\n    {\r\n        let name = '';\r\n\r\n        for(const part of this._partList) name += (part.getCacheableKey(k) + '/');\r\n\r\n        return name;\r\n    }\r\n\r\n    private debugInfo(k: string): void\r\n    {\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}