{"ast":null,"code":"import { Vector3d } from '../../../../../../../room/utils/Vector3d';\nimport { Plane } from './Plane';\nexport class WallPlane extends Plane {\n  render(canvas, width, height, size, normal, useTexture) {\n    const visualization = this.getPlaneVisualization(size);\n    if (!visualization || !visualization.geometry) return null;\n\n    const _local_8 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 0));\n\n    const _local_9 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, height / visualization.geometry.scale));\n\n    const _local_10 = visualization.geometry.getScreenPoint(new Vector3d(0, width / visualization.geometry.scale, 0));\n\n    if (_local_8 && _local_9 && _local_10) {\n      width = Math.round(Math.abs(_local_8.x - _local_10.x));\n      height = Math.round(Math.abs(_local_8.y - _local_9.y));\n    }\n\n    return visualization.render(canvas, width, height, normal, useTexture);\n  }\n\n}\nWallPlane.DEFAULT_COLOR = 0xFFFFFF;\nWallPlane.HORIZONTAL_ANGLE_DEFAULT = 45;\nWallPlane.VERTICAL_ANGLE_DEFAULT = 30;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/WallPlane.ts"],"names":["Vector3d","Plane","WallPlane","render","canvas","width","height","size","normal","useTexture","visualization","getPlaneVisualization","geometry","_local_8","getScreenPoint","_local_9","scale","_local_10","Math","round","abs","x","y","DEFAULT_COLOR","HORIZONTAL_ANGLE_DEFAULT","VERTICAL_ANGLE_DEFAULT"],"mappings":"AAEA,SAASA,QAAT,QAAyB,0CAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,SAAN,SAAwBD,KAAxB,CACP;AAKWE,EAAAA,MAAM,CAACC,MAAD,EAAmBC,KAAnB,EAAkCC,MAAlC,EAAkDC,IAAlD,EAAgEC,MAAhE,EAAmFC,UAAnF,EACb;AACI,UAAMC,aAAa,GAAG,KAAKC,qBAAL,CAA2BJ,IAA3B,CAAtB;AAEA,QAAG,CAACG,aAAD,IAAkB,CAACA,aAAa,CAACE,QAApC,EAA8C,OAAO,IAAP;;AAE9C,UAAMC,QAAQ,GAAGH,aAAa,CAACE,QAAd,CAAuBE,cAAvB,CAAsC,IAAId,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAtC,CAAjB;;AACA,UAAMe,QAAQ,GAAGL,aAAa,CAACE,QAAd,CAAuBE,cAAvB,CAAsC,IAAId,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAoBM,MAAM,GAAGI,aAAa,CAACE,QAAd,CAAuBI,KAApD,CAAtC,CAAjB;;AACA,UAAMC,SAAS,GAAGP,aAAa,CAACE,QAAd,CAAuBE,cAAvB,CAAsC,IAAId,QAAJ,CAAa,CAAb,EAAiBK,KAAK,GAAGK,aAAa,CAACE,QAAd,CAAuBI,KAAhD,EAAwD,CAAxD,CAAtC,CAAlB;;AAEA,QAAGH,QAAQ,IAAIE,QAAZ,IAAwBE,SAA3B,EACA;AACIZ,MAAAA,KAAK,GAAGa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAAUP,QAAQ,CAACQ,CAAT,GAAaJ,SAAS,CAACI,CAAjC,CAAX,CAAR;AACAf,MAAAA,MAAM,GAAGY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAAUP,QAAQ,CAACS,CAAT,GAAaP,QAAQ,CAACO,CAAhC,CAAX,CAAT;AACH;;AAED,WAAOZ,aAAa,CAACP,MAAd,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,EAA4CE,MAA5C,EAAoDC,UAApD,CAAP;AACH;;AAtBL;AADaP,S,CAEKqB,a,GAAwB,Q;AAF7BrB,S,CAGKsB,wB,GAAmC,E;AAHxCtB,S,CAIKuB,sB,GAAiC,E","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { Vector3d } from '../../../../../../../room/utils/Vector3d';\r\nimport { Plane } from './Plane';\r\n\r\nexport class WallPlane extends Plane\r\n{\r\n    public static DEFAULT_COLOR: number = 0xFFFFFF;\r\n    public static HORIZONTAL_ANGLE_DEFAULT: number = 45;\r\n    public static VERTICAL_ANGLE_DEFAULT: number = 30;\r\n\r\n    public render(canvas: Graphics, width: number, height: number, size: number, normal: IVector3D, useTexture: boolean): Graphics\r\n    {\r\n        const visualization = this.getPlaneVisualization(size);\r\n\r\n        if(!visualization || !visualization.geometry) return null;\r\n\r\n        const _local_8 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 0));\r\n        const _local_9 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, (height / visualization.geometry.scale)));\r\n        const _local_10 = visualization.geometry.getScreenPoint(new Vector3d(0, (width / visualization.geometry.scale), 0));\r\n\r\n        if(_local_8 && _local_9 && _local_10)\r\n        {\r\n            width = Math.round(Math.abs((_local_8.x - _local_10.x)));\r\n            height = Math.round(Math.abs((_local_8.y - _local_9.y)));\r\n        }\r\n\r\n        return visualization.render(canvas, width, height, normal, useTexture);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}