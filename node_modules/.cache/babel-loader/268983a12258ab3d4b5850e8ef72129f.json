{"ast":null,"code":"import { PlaneMaskVisualization } from './PlaneMaskVisualization';\nexport class PlaneMask {\n  constructor() {\n    this._maskVisualizations = void 0;\n    this._sizes = void 0;\n    this._assetNames = void 0;\n    this._lastMaskVisualization = void 0;\n    this._lastSize = void 0;\n    this._sizes = [];\n    this._maskVisualizations = new Map();\n    this._assetNames = new Map();\n    this._lastMaskVisualization = null;\n    this._lastSize = -1;\n  }\n\n  dispose() {\n    if (this._maskVisualizations) {\n      for (const mask of this._maskVisualizations.values()) {\n        if (!mask) continue;\n        mask.dispose();\n      }\n\n      this._maskVisualizations = null;\n    }\n\n    this._lastMaskVisualization = null;\n    this._sizes = null;\n  }\n\n  createMaskVisualization(size) {\n    const existing = this._maskVisualizations.get(size);\n\n    if (existing) return null;\n    const visualization = new PlaneMaskVisualization();\n\n    this._maskVisualizations.set(size, visualization);\n\n    this._sizes.push(size);\n\n    this._sizes.sort();\n\n    return visualization;\n  }\n\n  getSizeIndex(k) {\n    let sizeIndex = 0;\n    const index = 1;\n\n    while (index < this._sizes.length) {\n      if (this._sizes[index] > k) {\n        if (this._sizes[index] - k < k - this._sizes[index - 1]) sizeIndex = index;\n        break;\n      }\n\n      sizeIndex = index;\n    }\n\n    return sizeIndex;\n  }\n\n  getMaskVisualization(k) {\n    if (k === this._lastSize) return this._lastMaskVisualization;\n    const sizeIndex = this.getSizeIndex(k);\n\n    if (sizeIndex < this._sizes.length) {\n      this._lastMaskVisualization = this._maskVisualizations.get(this._sizes[sizeIndex]);\n    } else {\n      this._lastMaskVisualization = null;\n    }\n\n    this._lastSize = k;\n    return this._lastMaskVisualization;\n  }\n\n  getGraphicAsset(k, _arg_2) {\n    const visualization = this.getMaskVisualization(k);\n    if (!visualization) return null;\n    return visualization.getAsset(_arg_2);\n  }\n\n  getAssetName(k) {\n    if (!this._assetNames) return null;\n    return this._assetNames.get(k) || null;\n  }\n\n  setAssetName(k, _arg_2) {\n    if (!this._assetNames) return;\n\n    this._assetNames.set(k, _arg_2);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/mask/PlaneMask.ts"],"names":["PlaneMaskVisualization","PlaneMask","constructor","_maskVisualizations","_sizes","_assetNames","_lastMaskVisualization","_lastSize","Map","dispose","mask","values","createMaskVisualization","size","existing","get","visualization","set","push","sort","getSizeIndex","k","sizeIndex","index","length","getMaskVisualization","getGraphicAsset","_arg_2","getAsset","getAssetName","setAssetName"],"mappings":"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","sourcesContent":["import { IGraphicAsset } from '../../../../../../room/object/visualization/utils/IGraphicAsset';\r\nimport { IVector3D } from '../../../../../../room/utils/IVector3D';\r\nimport { PlaneMaskVisualization } from './PlaneMaskVisualization';\r\n\r\nexport class PlaneMask\r\n{\r\n    private _maskVisualizations: Map<number, PlaneMaskVisualization>;\r\n    private _sizes: number[];\r\n    private _assetNames: Map<number, string>;\r\n    private _lastMaskVisualization: PlaneMaskVisualization;\r\n    private _lastSize: number;\r\n\r\n    constructor()\r\n    {\r\n        this._sizes = [];\r\n        this._maskVisualizations = new Map();\r\n        this._assetNames = new Map();\r\n        this._lastMaskVisualization = null;\r\n        this._lastSize = -1;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._maskVisualizations)\r\n        {\r\n            for(const mask of this._maskVisualizations.values())\r\n            {\r\n                if(!mask) continue;\r\n\r\n                mask.dispose();\r\n            }\r\n\r\n            this._maskVisualizations = null;\r\n        }\r\n\r\n        this._lastMaskVisualization = null;\r\n        this._sizes = null;\r\n    }\r\n\r\n    public createMaskVisualization(size: number): PlaneMaskVisualization\r\n    {\r\n        const existing = this._maskVisualizations.get(size);\r\n\r\n        if(existing) return null;\r\n\r\n        const visualization = new PlaneMaskVisualization();\r\n\r\n        this._maskVisualizations.set(size, visualization);\r\n\r\n        this._sizes.push(size);\r\n        this._sizes.sort();\r\n\r\n        return visualization;\r\n    }\r\n\r\n    private getSizeIndex(k: number): number\r\n    {\r\n        let sizeIndex = 0;\r\n        const index = 1;\r\n\r\n        while(index < this._sizes.length)\r\n        {\r\n            if(this._sizes[index] > k)\r\n            {\r\n                if((this._sizes[index] - k) < (k - this._sizes[(index - 1)])) sizeIndex = index;\r\n\r\n                break;\r\n            }\r\n\r\n            sizeIndex = index;\r\n        }\r\n\r\n        return sizeIndex;\r\n    }\r\n\r\n    protected getMaskVisualization(k: number): PlaneMaskVisualization\r\n    {\r\n        if(k === this._lastSize) return this._lastMaskVisualization;\r\n\r\n        const sizeIndex = this.getSizeIndex(k);\r\n\r\n        if(sizeIndex < this._sizes.length)\r\n        {\r\n            this._lastMaskVisualization = (this._maskVisualizations.get(this._sizes[sizeIndex]));\r\n        }\r\n        else\r\n        {\r\n            this._lastMaskVisualization = null;\r\n        }\r\n\r\n        this._lastSize = k;\r\n\r\n        return this._lastMaskVisualization;\r\n    }\r\n\r\n    public getGraphicAsset(k: number, _arg_2: IVector3D): IGraphicAsset\r\n    {\r\n        const visualization = this.getMaskVisualization(k);\r\n\r\n        if(!visualization) return null;\r\n\r\n        return visualization.getAsset(_arg_2);\r\n    }\r\n\r\n    public getAssetName(k: number): string\r\n    {\r\n        if(!this._assetNames) return null;\r\n\r\n        return this._assetNames.get(k) || null;\r\n    }\r\n\r\n    public setAssetName(k: number, _arg_2: string): void\r\n    {\r\n        if(!this._assetNames) return;\r\n\r\n        this._assetNames.set(k, _arg_2);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}