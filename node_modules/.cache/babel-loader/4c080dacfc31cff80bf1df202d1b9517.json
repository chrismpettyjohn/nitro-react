{"ast":null,"code":"import { NitroLogger } from '../../../core/common/logger/NitroLogger';\nimport { EventDispatcher } from '../../../core/events/EventDispatcher';\nimport { NitroEvent } from '../../../core/events/NitroEvent';\nimport { FurnitureData } from './FurnitureData';\nimport { FurnitureType } from './FurnitureType';\nexport class FurnitureDataLoader extends EventDispatcher {\n  constructor(floorItems, wallItems, localization) {\n    super();\n    this._floorItems = void 0;\n    this._wallItems = void 0;\n    this._localization = void 0;\n    this._nitroLogger = void 0;\n    this._floorItems = floorItems;\n    this._wallItems = wallItems;\n    this._localization = localization;\n    this._nitroLogger = new NitroLogger(this.constructor.name);\n  }\n\n  loadFurnitureData(url) {\n    if (!url) return;\n    fetch(url).then(response => response.json()).then(data => this.onFurnitureDataLoaded(data)).catch(err => this.onFurnitureDataError(err));\n  }\n\n  onFurnitureDataLoaded(data) {\n    if (!data) return;\n    if (typeof data.roomitemtypes == 'undefined' || typeof data.wallitemtypes == 'undefined') this._nitroLogger.warn('Could not find `roomitemtypes` or `wallitemtypes` in furnidata.');\n    if (data.roomitemtypes) this.parseFloorItems(data.roomitemtypes);\n    if (data.wallitemtypes) this.parseWallItems(data.wallitemtypes);\n    this.dispatchEvent(new NitroEvent(FurnitureDataLoader.FURNITURE_DATA_READY));\n  }\n\n  onFurnitureDataError(error) {\n    if (!error) return;\n    console.error(error);\n    this.dispatchEvent(new NitroEvent(FurnitureDataLoader.FURNITURE_DATA_ERROR));\n  }\n\n  parseFloorItems(data) {\n    if (!data || !data.furnitype) return;\n\n    for (const furniture of data.furnitype) {\n      if (!furniture) continue;\n      const colors = [];\n\n      if (furniture.partcolors) {\n        for (const color of furniture.partcolors.color) {\n          let colorCode = color;\n\n          if (colorCode.charAt(0) === '#') {\n            colorCode = colorCode.replace('#', '');\n            colors.push(parseInt(colorCode, 16));\n          } else {\n            colors.push(parseInt(colorCode, 16));\n          }\n        }\n      }\n\n      const classSplit = furniture.classname.split('*');\n      const className = classSplit[0];\n      const colorIndex = classSplit.length > 1 ? parseInt(classSplit[1]) : 0;\n      const hasColorIndex = classSplit.length > 1;\n      const furnitureData = new FurnitureData(FurnitureType.FLOOR, furniture.id, furniture.classname, className, furniture.category, furniture.name, furniture.description, furniture.revision, furniture.xdim, furniture.ydim, 0, colors, hasColorIndex, colorIndex, furniture.adurl, furniture.offerid, furniture.buyout, furniture.rentofferid, furniture.rentbuyout, furniture.bc, furniture.customparams, furniture.specialtype, furniture.canstandon, furniture.cansiton, furniture.canlayon, furniture.excludeddynamic, furniture.furniline, furniture.environment, furniture.rare);\n\n      this._floorItems.set(furnitureData.id, furnitureData);\n\n      this.updateLocalizations(furnitureData);\n    }\n  }\n\n  parseWallItems(data) {\n    if (!data || !data.furnitype) return;\n\n    for (const furniture of data.furnitype) {\n      if (!furniture) continue;\n      const furnitureData = new FurnitureData(FurnitureType.WALL, furniture.id, furniture.classname, furniture.classname, furniture.category, furniture.name, furniture.description, furniture.revision, 0, 0, 0, null, false, 0, furniture.adurl, furniture.offerid, furniture.buyout, furniture.rentofferid, furniture.rentbuyout, furniture.bc, null, furniture.specialtype, false, false, false, furniture.excludeddynamic, furniture.furniline, furniture.environment, furniture.rare);\n\n      this._wallItems.set(furnitureData.id, furnitureData);\n\n      this.updateLocalizations(furnitureData);\n    }\n  }\n\n  updateLocalizations(furniture) {\n    if (!this._localization) return;\n\n    switch (furniture.type) {\n      case FurnitureType.FLOOR:\n        this._localization.setValue('roomItem.name.' + furniture.id, furniture.name);\n\n        this._localization.setValue('roomItem.desc.' + furniture.id, furniture.description);\n\n        return;\n\n      case FurnitureType.WALL:\n        this._localization.setValue('wallItem.name.' + furniture.id, furniture.name);\n\n        this._localization.setValue('wallItem.desc.' + furniture.id, furniture.description);\n\n        return;\n    }\n  }\n\n}\nFurnitureDataLoader.FURNITURE_DATA_READY = 'FDP_FURNITURE_DATA_READY';\nFurnitureDataLoader.FURNITURE_DATA_ERROR = 'FDP_FURNITURE_DATA_ERROR';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/session/furniture/FurnitureDataLoader.ts"],"names":["NitroLogger","EventDispatcher","NitroEvent","FurnitureData","FurnitureType","FurnitureDataLoader","constructor","floorItems","wallItems","localization","_floorItems","_wallItems","_localization","_nitroLogger","name","loadFurnitureData","url","fetch","then","response","json","data","onFurnitureDataLoaded","catch","err","onFurnitureDataError","roomitemtypes","wallitemtypes","warn","parseFloorItems","parseWallItems","dispatchEvent","FURNITURE_DATA_READY","error","console","FURNITURE_DATA_ERROR","furnitype","furniture","colors","partcolors","color","colorCode","charAt","replace","push","parseInt","classSplit","classname","split","className","colorIndex","length","hasColorIndex","furnitureData","FLOOR","id","category","description","revision","xdim","ydim","adurl","offerid","buyout","rentofferid","rentbuyout","bc","customparams","specialtype","canstandon","cansiton","canlayon","excludeddynamic","furniline","environment","rare","set","updateLocalizations","WALL","type","setValue"],"mappings":"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","sourcesContent":["import { NitroLogger } from '../../../core/common/logger/NitroLogger';\r\nimport { EventDispatcher } from '../../../core/events/EventDispatcher';\r\nimport { NitroEvent } from '../../../core/events/NitroEvent';\r\nimport { INitroLocalizationManager } from '../../localization/INitroLocalizationManager';\r\nimport { FurnitureData } from './FurnitureData';\r\nimport { FurnitureType } from './FurnitureType';\r\nimport { IFurnitureData } from './IFurnitureData';\r\n\r\nexport class FurnitureDataLoader extends EventDispatcher\r\n{\r\n    public static FURNITURE_DATA_READY: string = 'FDP_FURNITURE_DATA_READY';\r\n    public static FURNITURE_DATA_ERROR: string = 'FDP_FURNITURE_DATA_ERROR';\r\n\r\n    private _floorItems: Map<number, IFurnitureData>;\r\n    private _wallItems: Map<number, IFurnitureData>;\r\n    private _localization: INitroLocalizationManager;\r\n    private _nitroLogger: NitroLogger;\r\n\r\n    constructor(floorItems: Map<number, IFurnitureData>, wallItems: Map<number, IFurnitureData>, localization: INitroLocalizationManager)\r\n    {\r\n        super();\r\n\r\n        this._floorItems = floorItems;\r\n        this._wallItems = wallItems;\r\n        this._localization = localization;\r\n        this._nitroLogger = new NitroLogger(this.constructor.name);\r\n    }\r\n\r\n    public loadFurnitureData(url: string): void\r\n    {\r\n        if(!url) return;\r\n\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => this.onFurnitureDataLoaded(data))\r\n            .catch(err => this.onFurnitureDataError(err));\r\n    }\r\n\r\n    private onFurnitureDataLoaded(data: { [index: string]: any }): void\r\n    {\r\n        if(!data) return;\r\n\r\n        if((typeof data.roomitemtypes == 'undefined') || (typeof data.wallitemtypes == 'undefined')) this._nitroLogger.warn('Could not find `roomitemtypes` or `wallitemtypes` in furnidata.');\r\n\r\n        if(data.roomitemtypes) this.parseFloorItems(data.roomitemtypes);\r\n\r\n        if(data.wallitemtypes) this.parseWallItems(data.wallitemtypes);\r\n\r\n        this.dispatchEvent(new NitroEvent(FurnitureDataLoader.FURNITURE_DATA_READY));\r\n    }\r\n\r\n    private onFurnitureDataError(error: Error): void\r\n    {\r\n        if(!error) return;\r\n\r\n        console.error(error);\r\n\r\n        this.dispatchEvent(new NitroEvent(FurnitureDataLoader.FURNITURE_DATA_ERROR));\r\n    }\r\n\r\n    private parseFloorItems(data: any): void\r\n    {\r\n        if(!data || !data.furnitype) return;\r\n\r\n        for(const furniture of data.furnitype)\r\n        {\r\n            if(!furniture) continue;\r\n\r\n            const colors: number[] = [];\r\n\r\n            if(furniture.partcolors)\r\n            {\r\n                for(const color of furniture.partcolors.color)\r\n                {\r\n                    let colorCode = (color as string);\r\n\r\n                    if(colorCode.charAt(0) === '#')\r\n                    {\r\n                        colorCode = colorCode.replace('#', '');\r\n\r\n                        colors.push(parseInt(colorCode, 16));\r\n                    }\r\n                    else\r\n                    {\r\n                        colors.push((parseInt(colorCode, 16)));\r\n                    }\r\n                }\r\n            }\r\n\r\n            const classSplit = (furniture.classname as string).split('*');\r\n            const className = classSplit[0];\r\n            const colorIndex = ((classSplit.length > 1) ? parseInt(classSplit[1]) : 0);\r\n            const hasColorIndex = (classSplit.length > 1);\r\n\r\n            const furnitureData = new FurnitureData(FurnitureType.FLOOR, furniture.id, furniture.classname, className, furniture.category, furniture.name, furniture.description, furniture.revision, furniture.xdim, furniture.ydim, 0, colors, hasColorIndex, colorIndex, furniture.adurl, furniture.offerid, furniture.buyout, furniture.rentofferid, furniture.rentbuyout, furniture.bc, furniture.customparams, furniture.specialtype, furniture.canstandon, furniture.cansiton, furniture.canlayon, furniture.excludeddynamic, furniture.furniline, furniture.environment, furniture.rare);\r\n\r\n            this._floorItems.set(furnitureData.id, furnitureData);\r\n\r\n            this.updateLocalizations(furnitureData);\r\n        }\r\n    }\r\n\r\n    private parseWallItems(data: any): void\r\n    {\r\n        if(!data || !data.furnitype) return;\r\n\r\n        for(const furniture of data.furnitype)\r\n        {\r\n            if(!furniture) continue;\r\n\r\n            const furnitureData = new FurnitureData(FurnitureType.WALL, furniture.id, furniture.classname, furniture.classname, furniture.category, furniture.name, furniture.description, furniture.revision, 0, 0, 0, null, false, 0, furniture.adurl, furniture.offerid, furniture.buyout, furniture.rentofferid, furniture.rentbuyout, furniture.bc, null, furniture.specialtype, false, false, false, furniture.excludeddynamic, furniture.furniline, furniture.environment, furniture.rare);\r\n\r\n            this._wallItems.set(furnitureData.id, furnitureData);\r\n\r\n            this.updateLocalizations(furnitureData);\r\n        }\r\n    }\r\n\r\n    private updateLocalizations(furniture: FurnitureData): void\r\n    {\r\n        if(!this._localization) return;\r\n\r\n        switch(furniture.type)\r\n        {\r\n            case FurnitureType.FLOOR:\r\n                this._localization.setValue(('roomItem.name.' + furniture.id), furniture.name);\r\n                this._localization.setValue(('roomItem.desc.' + furniture.id), furniture.description);\r\n                return;\r\n            case FurnitureType.WALL:\r\n                this._localization.setValue(('wallItem.name.' + furniture.id), furniture.name);\r\n                this._localization.setValue(('wallItem.desc.' + furniture.id), furniture.description);\r\n                return;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}