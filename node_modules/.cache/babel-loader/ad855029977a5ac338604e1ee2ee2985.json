{"ast":null,"code":"import { AssetManager } from '../../../../core/asset/AssetManager';\nimport { Nitro } from '../../../../nitro/Nitro';\nimport { GraphicAsset } from './GraphicAsset';\nimport { GraphicAssetPalette } from './GraphicAssetPalette';\nexport class GraphicAssetCollection {\n  constructor(data, spritesheet) {\n    this._referenceCount = void 0;\n    this._referenceTimestamp = void 0;\n    this._name = void 0;\n    this._baseTexture = void 0;\n    this._data = void 0;\n    this._textures = void 0;\n    this._assets = void 0;\n    this._palettes = void 0;\n    this._paletteAssetNames = void 0;\n    if (!data) throw new Error('invalid_collection');\n    this._name = data.name;\n    this._baseTexture = spritesheet && spritesheet.baseTexture || null;\n    this._data = data;\n    this._textures = new Map();\n    this._assets = new Map();\n    this._palettes = new Map();\n    this._paletteAssetNames = [];\n    if (spritesheet) this.addLibraryAsset(spritesheet.textures);\n    this.define(data);\n  }\n\n  dispose() {\n    if (this._palettes) {\n      for (const palette of this._palettes.values()) palette.dispose();\n\n      this._palettes.clear();\n    }\n\n    if (this._paletteAssetNames) {\n      this.disposePaletteAssets();\n      this._paletteAssetNames = null;\n    }\n\n    if (this._assets) {\n      for (const asset of this._assets.values()) asset.recycle();\n\n      this._assets.clear();\n    }\n  }\n\n  addReference() {\n    this._referenceCount++;\n    this._referenceTimestamp = Nitro.instance.time;\n  }\n\n  removeReference() {\n    this._referenceCount--;\n\n    if (this._referenceCount <= 0) {\n      this._referenceCount = 0;\n      this._referenceTimestamp = Nitro.instance.time;\n      this.disposePaletteAssets(false);\n    }\n  }\n\n  define(data) {\n    const assets = data.assets;\n    const palettes = data.palettes;\n    if (assets) this.defineAssets(assets);\n    if (palettes) this.definePalettes(palettes);\n  }\n\n  defineAssets(assets) {\n    if (!assets) return;\n\n    for (const name in assets) {\n      const asset = assets[name];\n      if (!asset) continue;\n      const x = -asset.x || 0;\n      const y = -asset.y || 0;\n      let flipH = false;\n      const flipV = false;\n      const usesPalette = asset.usesPalette || false;\n      let source = asset.source || '';\n      if (asset.flipH && source.length) flipH = true; // if(asset.flipV && source.length) flipV = true;\n\n      if (!source.length) source = name;\n      const texture = this.getLibraryAsset(source);\n      if (!texture) continue;\n      let didAddAsset = this.createAsset(name, source, texture, flipH, flipV, x, y, usesPalette);\n\n      if (!didAddAsset) {\n        const existingAsset = this.getAsset(name);\n\n        if (existingAsset && existingAsset.name !== existingAsset.source) {\n          didAddAsset = this.replaceAsset(name, source, texture, flipH, flipV, x, y, usesPalette);\n        }\n      }\n    }\n  }\n\n  definePalettes(palettes) {\n    if (!palettes) return;\n\n    for (const name in palettes) {\n      const palette = palettes[name];\n      if (!palette) continue;\n      const id = palette.id.toString();\n      if (this._palettes.get(id)) continue;\n      let colorOne = 0xFFFFFF;\n      let colorTwo = 0xFFFFFF;\n      let color = palette.color1;\n      if (color && color.length > 0) colorOne = parseInt(color, 16);\n      color = palette.color2;\n      if (color && color.length > 0) colorTwo = parseInt(color, 16);\n\n      this._palettes.set(id, new GraphicAssetPalette(palette.rgb, colorOne, colorTwo));\n    }\n  }\n\n  createAsset(name, source, texture, flipH, flipV, x, y, usesPalette) {\n    if (this._assets.get(name)) return false;\n    const graphicAsset = GraphicAsset.createAsset(name, source, texture, x, y, flipH, flipV, usesPalette);\n\n    this._assets.set(name, graphicAsset);\n\n    return true;\n  }\n\n  replaceAsset(name, source, texture, flipH, flipV, x, y, usesPalette) {\n    const existing = this._assets.get(name);\n\n    if (existing) {\n      this._assets.delete(name);\n\n      existing.recycle();\n    }\n\n    return this.createAsset(name, source, texture, flipH, flipV, x, y, usesPalette);\n  }\n\n  getAsset(name) {\n    if (!name) return null;\n\n    const existing = this._assets.get(name);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  getAssetWithPalette(name, paletteName) {\n    const saveName = name + '@' + paletteName;\n    let asset = this.getAsset(saveName);\n\n    if (!asset) {\n      asset = this.getAsset(name);\n      if (!asset || !asset.usesPalette) return asset;\n      const palette = this.getPalette(paletteName);\n\n      if (palette) {\n        const texture = palette.applyPalette(asset.texture);\n\n        if (texture) {\n          this._paletteAssetNames.push(saveName);\n\n          this.createAsset(saveName, asset.source + '@' + paletteName, texture, asset.flipH, asset.flipV, asset.x, asset.y, false);\n          asset = this.getAsset(saveName);\n        }\n      }\n    }\n\n    return asset;\n  }\n\n  getTexture(name) {\n    return this._textures.get(name);\n  }\n\n  getPaletteNames() {\n    return Array.from(this._palettes.keys());\n  }\n\n  getPaletteColors(paletteName) {\n    const palette = this.getPalette(paletteName);\n    if (palette) return [palette.primaryColor, palette.secondaryColor];\n    return null;\n  }\n\n  getPalette(name) {\n    if (!name) return null;\n\n    const existing = this._palettes.get(name);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  addAsset(name, texture, override) {\n    let x = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let y = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let flipH = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    let flipV = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    if (!name || !texture) return false;\n    const existingTexture = this.getLibraryAsset(name);\n\n    if (!existingTexture) {\n      this._textures.set(name, texture);\n\n      return this.createAsset(name, name, texture, flipH, flipV, x, y, false);\n    }\n\n    if (override) {\n      existingTexture.baseTexture = texture.baseTexture;\n      existingTexture.frame = texture.frame;\n      existingTexture.trim = texture.trim;\n      existingTexture.updateUvs();\n      return true;\n    }\n\n    return false;\n  }\n\n  disposeAsset(name) {\n    const existing = this._assets.get(name);\n\n    if (!existing) return;\n\n    this._assets.delete(name);\n\n    const texture = this.getLibraryAsset(existing.source);\n\n    if (texture) {\n      this._textures.delete(existing.source);\n\n      texture.destroy(true);\n    }\n\n    existing.recycle();\n  }\n\n  getLibraryAsset(name) {\n    if (!name) return null;\n    name = this._name + '_' + name;\n\n    const texture = this._textures.get(name);\n\n    if (!texture) return null;\n    return texture;\n  }\n\n  addLibraryAsset(textures) {\n    if (!textures) return;\n\n    for (const name in textures) {\n      const texture = textures[name];\n      if (!texture) continue;\n\n      this._textures.set(AssetManager.removeFileExtension(name), texture);\n    }\n  }\n\n  disposePaletteAssets() {\n    let disposeAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    if (this._paletteAssetNames) {\n      if (disposeAll || this._paletteAssetNames.length > GraphicAssetCollection.PALETTE_ASSET_DISPOSE_THRESHOLD) {\n        for (const name of this._paletteAssetNames) this.disposeAsset(name);\n\n        this._paletteAssetNames = [];\n      }\n    }\n  }\n\n  get referenceCount() {\n    return this._referenceCount;\n  }\n\n  get referenceTimestamp() {\n    return this._referenceTimestamp;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get baseTexture() {\n    return this._baseTexture;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get textures() {\n    return this._textures;\n  }\n\n  get assets() {\n    return this._assets;\n  }\n\n}\nGraphicAssetCollection.PALETTE_ASSET_DISPOSE_THRESHOLD = 10;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/object/visualization/utils/GraphicAssetCollection.ts"],"names":["AssetManager","Nitro","GraphicAsset","GraphicAssetPalette","GraphicAssetCollection","constructor","data","spritesheet","_referenceCount","_referenceTimestamp","_name","_baseTexture","_data","_textures","_assets","_palettes","_paletteAssetNames","Error","name","baseTexture","Map","addLibraryAsset","textures","define","dispose","palette","values","clear","disposePaletteAssets","asset","recycle","addReference","instance","time","removeReference","assets","palettes","defineAssets","definePalettes","x","y","flipH","flipV","usesPalette","source","length","texture","getLibraryAsset","didAddAsset","createAsset","existingAsset","getAsset","replaceAsset","id","toString","get","colorOne","colorTwo","color","color1","parseInt","color2","set","rgb","graphicAsset","existing","delete","getAssetWithPalette","paletteName","saveName","getPalette","applyPalette","push","getTexture","getPaletteNames","Array","from","keys","getPaletteColors","primaryColor","secondaryColor","addAsset","override","existingTexture","frame","trim","updateUvs","disposeAsset","destroy","removeFileExtension","disposeAll","PALETTE_ASSET_DISPOSE_THRESHOLD","referenceCount","referenceTimestamp"],"mappings":"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","sourcesContent":["import { BaseTexture, Resource, Texture } from '@pixi/core';\r\nimport { Spritesheet } from '@pixi/spritesheet';\r\nimport { Dict } from '@pixi/utils';\r\nimport { AssetManager } from '../../../../core/asset/AssetManager';\r\nimport { IAsset, IAssetData, IAssetPalette } from '../../../../core/asset/interfaces';\r\nimport { Nitro } from '../../../../nitro/Nitro';\r\nimport { GraphicAsset } from './GraphicAsset';\r\nimport { GraphicAssetPalette } from './GraphicAssetPalette';\r\nimport { IGraphicAsset } from './IGraphicAsset';\r\nimport { IGraphicAssetCollection } from './IGraphicAssetCollection';\r\n\r\nexport class GraphicAssetCollection implements IGraphicAssetCollection\r\n{\r\n    private static PALETTE_ASSET_DISPOSE_THRESHOLD: number = 10;\r\n\r\n    private _referenceCount: number;\r\n    private _referenceTimestamp: number;\r\n\r\n    private _name: string;\r\n    private _baseTexture: BaseTexture;\r\n    private _data: IAssetData;\r\n    private _textures: Map<string, Texture<Resource>>;\r\n    private _assets: Map<string, GraphicAsset>;\r\n    private _palettes: Map<string, GraphicAssetPalette>;\r\n    private _paletteAssetNames: string[];\r\n\r\n    constructor(data: IAssetData, spritesheet: Spritesheet)\r\n    {\r\n        if(!data) throw new Error('invalid_collection');\r\n\r\n        this._name = data.name;\r\n        this._baseTexture = ((spritesheet && spritesheet.baseTexture) || null);\r\n        this._data = data;\r\n        this._textures = new Map();\r\n        this._assets = new Map();\r\n        this._palettes = new Map();\r\n        this._paletteAssetNames = [];\r\n\r\n        if(spritesheet) this.addLibraryAsset(spritesheet.textures);\r\n\r\n        this.define(data);\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._palettes)\r\n        {\r\n            for(const palette of this._palettes.values()) palette.dispose();\r\n\r\n            this._palettes.clear();\r\n        }\r\n\r\n        if(this._paletteAssetNames)\r\n        {\r\n            this.disposePaletteAssets();\r\n\r\n            this._paletteAssetNames = null;\r\n        }\r\n\r\n        if(this._assets)\r\n        {\r\n            for(const asset of this._assets.values()) asset.recycle();\r\n\r\n            this._assets.clear();\r\n        }\r\n    }\r\n\r\n    public addReference(): void\r\n    {\r\n        this._referenceCount++;\r\n        this._referenceTimestamp = Nitro.instance.time;\r\n    }\r\n\r\n    public removeReference(): void\r\n    {\r\n        this._referenceCount--;\r\n\r\n        if(this._referenceCount <= 0)\r\n        {\r\n            this._referenceCount = 0;\r\n            this._referenceTimestamp = Nitro.instance.time;\r\n\r\n            this.disposePaletteAssets(false);\r\n        }\r\n    }\r\n\r\n    public define(data: IAssetData): void\r\n    {\r\n        const assets = data.assets;\r\n        const palettes = data.palettes;\r\n\r\n        if(assets) this.defineAssets(assets);\r\n\r\n        if(palettes) this.definePalettes(palettes);\r\n    }\r\n\r\n    private defineAssets(assets: { [index: string]: IAsset }): void\r\n    {\r\n        if(!assets) return;\r\n\r\n        for(const name in assets)\r\n        {\r\n            const asset = assets[name];\r\n\r\n            if(!asset) continue;\r\n\r\n            const x = (-(asset.x) || 0);\r\n            const y = (-(asset.y) || 0);\r\n            let flipH = false;\r\n            const flipV = false;\r\n            const usesPalette = (asset.usesPalette || false);\r\n            let source = (asset.source || '');\r\n\r\n            if(asset.flipH && source.length) flipH = true;\r\n\r\n            // if(asset.flipV && source.length) flipV = true;\r\n\r\n            if(!source.length) source = name;\r\n\r\n            const texture = this.getLibraryAsset(source);\r\n\r\n            if(!texture) continue;\r\n\r\n            let didAddAsset = this.createAsset(name, source, texture, flipH, flipV, x, y, usesPalette);\r\n\r\n            if(!didAddAsset)\r\n            {\r\n                const existingAsset = this.getAsset(name);\r\n\r\n                if(existingAsset && (existingAsset.name !== existingAsset.source))\r\n                {\r\n                    didAddAsset = this.replaceAsset(name, source, texture, flipH, flipV, x, y, usesPalette);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private definePalettes(palettes: { [index: string]: IAssetPalette }): void\r\n    {\r\n        if(!palettes) return;\r\n\r\n        for(const name in palettes)\r\n        {\r\n            const palette = palettes[name];\r\n\r\n            if(!palette) continue;\r\n\r\n            const id = palette.id.toString();\r\n\r\n            if(this._palettes.get(id)) continue;\r\n\r\n            let colorOne = 0xFFFFFF;\r\n            let colorTwo = 0xFFFFFF;\r\n\r\n            let color = palette.color1;\r\n\r\n            if(color && color.length > 0) colorOne = parseInt(color, 16);\r\n\r\n            color = palette.color2;\r\n\r\n            if(color && color.length > 0) colorTwo = parseInt(color, 16);\r\n\r\n            this._palettes.set(id, new GraphicAssetPalette(palette.rgb, colorOne, colorTwo));\r\n        }\r\n    }\r\n\r\n    private createAsset(name: string, source: string, texture: Texture<Resource>, flipH: boolean, flipV: boolean, x: number, y: number, usesPalette: boolean): boolean\r\n    {\r\n        if(this._assets.get(name)) return false;\r\n\r\n        const graphicAsset = GraphicAsset.createAsset(name, source, texture, x, y, flipH, flipV, usesPalette);\r\n\r\n        this._assets.set(name, graphicAsset);\r\n\r\n        return true;\r\n    }\r\n\r\n    private replaceAsset(name: string, source: string, texture: Texture<Resource>, flipH: boolean, flipV: boolean, x: number, y: number, usesPalette: boolean): boolean\r\n    {\r\n        const existing = this._assets.get(name);\r\n\r\n        if(existing)\r\n        {\r\n            this._assets.delete(name);\r\n\r\n            existing.recycle();\r\n        }\r\n\r\n        return this.createAsset(name, source, texture, flipH, flipV, x, y, usesPalette);\r\n    }\r\n\r\n    public getAsset(name: string): IGraphicAsset\r\n    {\r\n        if(!name) return null;\r\n\r\n        const existing = this._assets.get(name);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getAssetWithPalette(name: string, paletteName: string): IGraphicAsset\r\n    {\r\n        const saveName = (name + '@' + paletteName);\r\n\r\n        let asset = this.getAsset(saveName);\r\n\r\n        if(!asset)\r\n        {\r\n            asset = this.getAsset(name);\r\n\r\n            if(!asset || !asset.usesPalette) return asset;\r\n\r\n            const palette = this.getPalette(paletteName);\r\n\r\n            if(palette)\r\n            {\r\n                const texture = palette.applyPalette(asset.texture);\r\n\r\n                if(texture)\r\n                {\r\n                    this._paletteAssetNames.push(saveName);\r\n\r\n                    this.createAsset(saveName, (asset.source + '@' + paletteName), texture, asset.flipH, asset.flipV, asset.x, asset.y, false);\r\n\r\n                    asset = this.getAsset(saveName);\r\n                }\r\n            }\r\n        }\r\n\r\n        return asset;\r\n    }\r\n\r\n    public getTexture(name: string): Texture<Resource>\r\n    {\r\n        return this._textures.get(name);\r\n    }\r\n\r\n    public getPaletteNames(): string[]\r\n    {\r\n        return Array.from(this._palettes.keys());\r\n    }\r\n\r\n    public getPaletteColors(paletteName: string): number[]\r\n    {\r\n        const palette = this.getPalette(paletteName);\r\n\r\n        if(palette) return [ palette.primaryColor, palette.secondaryColor ];\r\n\r\n        return null;\r\n    }\r\n\r\n    public getPalette(name: string): GraphicAssetPalette\r\n    {\r\n        if(!name) return null;\r\n\r\n        const existing = this._palettes.get(name);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public addAsset(name: string, texture: Texture<Resource>, override: boolean, x: number = 0, y: number = 0, flipH: boolean = false, flipV: boolean = false): boolean\r\n    {\r\n        if(!name || !texture) return false;\r\n\r\n        const existingTexture = this.getLibraryAsset(name);\r\n\r\n        if(!existingTexture)\r\n        {\r\n            this._textures.set(name, texture);\r\n\r\n            return this.createAsset(name, name, texture, flipH, flipV, x, y, false);\r\n        }\r\n\r\n        if(override)\r\n        {\r\n            existingTexture.baseTexture = texture.baseTexture;\r\n            existingTexture.frame = texture.frame;\r\n            existingTexture.trim = texture.trim;\r\n\r\n            existingTexture.updateUvs();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public disposeAsset(name: string): void\r\n    {\r\n        const existing = this._assets.get(name);\r\n\r\n        if(!existing) return;\r\n\r\n        this._assets.delete(name);\r\n\r\n        const texture = this.getLibraryAsset(existing.source);\r\n\r\n        if(texture)\r\n        {\r\n            this._textures.delete(existing.source);\r\n\r\n            texture.destroy(true);\r\n        }\r\n\r\n        existing.recycle();\r\n    }\r\n\r\n    public getLibraryAsset(name: string): Texture<Resource>\r\n    {\r\n        if(!name) return null;\r\n\r\n        name = this._name + '_' + name;\r\n\r\n        const texture = this._textures.get(name);\r\n\r\n        if(!texture) return null;\r\n\r\n        return texture;\r\n    }\r\n\r\n    private addLibraryAsset(textures: Dict<Texture<Resource>>): void\r\n    {\r\n        if(!textures) return;\r\n\r\n        for(const name in textures)\r\n        {\r\n            const texture = textures[name];\r\n\r\n            if(!texture) continue;\r\n\r\n            this._textures.set(AssetManager.removeFileExtension(name), texture);\r\n        }\r\n    }\r\n\r\n    private disposePaletteAssets(disposeAll: boolean = true): void\r\n    {\r\n        if(this._paletteAssetNames)\r\n        {\r\n            if(disposeAll || (this._paletteAssetNames.length > GraphicAssetCollection.PALETTE_ASSET_DISPOSE_THRESHOLD))\r\n            {\r\n                for(const name of this._paletteAssetNames) this.disposeAsset(name);\r\n\r\n                this._paletteAssetNames = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    public get referenceCount(): number\r\n    {\r\n        return this._referenceCount;\r\n    }\r\n\r\n    public get referenceTimestamp(): number\r\n    {\r\n        return this._referenceTimestamp;\r\n    }\r\n\r\n    public get name(): string\r\n    {\r\n        return this._name;\r\n    }\r\n\r\n    public get baseTexture(): BaseTexture\r\n    {\r\n        return this._baseTexture;\r\n    }\r\n\r\n    public get data(): IAssetData\r\n    {\r\n        return this._data;\r\n    }\r\n\r\n    public get textures(): Map<string, Texture>\r\n    {\r\n        return this._textures;\r\n    }\r\n\r\n    public get assets(): Map<string, GraphicAsset>\r\n    {\r\n        return this._assets;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}