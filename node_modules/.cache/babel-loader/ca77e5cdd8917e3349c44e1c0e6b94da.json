{"ast":null,"code":"export class FurnitureStackingHeightMap {\n  constructor(width, height) {\n    this._width = void 0;\n    this._height = void 0;\n    this._heights = void 0;\n    this._isNotStackable = void 0;\n    this._isRoomTile = void 0;\n    this._width = width;\n    this._height = height;\n    this._heights = [];\n    this._isNotStackable = [];\n    this._isRoomTile = [];\n    let total = width * height;\n\n    while (total > 0) {\n      this._heights.push(0);\n\n      this._isNotStackable.push(false);\n\n      this._isRoomTile.push(false);\n\n      total--;\n    }\n  }\n\n  dispose() {\n    this._width = 0;\n    this._height = 0;\n    this._height = null;\n    this._isNotStackable = null;\n    this._isRoomTile = null;\n  }\n\n  validPosition(x, y) {\n    return x >= 0 && x < this._width && y >= 0 && y < this._height;\n  }\n\n  getTileHeight(x, y) {\n    return this.validPosition(x, y) ? this._heights[y * this._width + x] : 0;\n  }\n\n  setTileHeight(x, y, height) {\n    if (this.validPosition(x, y)) this._heights[y * this._width + x] = height;\n  }\n\n  setStackingBlocked(x, y, isNotStackable) {\n    if (this.validPosition(x, y)) this._isNotStackable[y * this._width + x] = isNotStackable;\n  }\n\n  setIsRoomTile(x, y, isRoomTile) {\n    if (this.validPosition(x, y)) this._isRoomTile[y * this._width + x] = isRoomTile;\n  }\n\n  validateLocation(k, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7, _arg_8, _arg_9) {\n    let _arg_10 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : -1;\n\n    let _local_12 = 0;\n    let _local_13 = 0;\n    if (!this.validPosition(k, _arg_2) || !this.validPosition(k + _arg_3 - 1, _arg_2 + _arg_4 - 1)) return false;\n    if (_arg_5 < 0 || _arg_5 >= this._width) _arg_5 = 0;\n    if (_arg_6 < 0 || _arg_6 >= this._height) _arg_6 = 0;\n    _arg_7 = Math.min(_arg_7, this._width - _arg_5);\n    _arg_8 = Math.min(_arg_8, this._height - _arg_6);\n    if (_arg_10 === -1) _arg_10 = this.getTileHeight(k, _arg_2);\n    let _local_11 = _arg_2;\n\n    while (_local_11 < _arg_2 + _arg_4) {\n      _local_12 = k;\n\n      while (_local_12 < k + _arg_3) {\n        if (_local_12 < _arg_5 || _local_12 >= _arg_5 + _arg_7 || _local_11 < _arg_6 || _local_11 >= _arg_6 + _arg_8) {\n          _local_13 = _local_11 * this._width + _local_12;\n\n          if (_arg_9) {\n            if (!this._isRoomTile[_local_13]) return false;\n          } else {\n            if (this._isNotStackable[_local_13] || !this._isRoomTile[_local_13] || Math.abs(this._heights[_local_13] - _arg_10) > 0.01) return false;\n          }\n        }\n\n        _local_12++;\n      }\n\n      _local_11++;\n    }\n\n    return true;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/utils/FurnitureStackingHeightMap.ts"],"names":["FurnitureStackingHeightMap","constructor","width","height","_width","_height","_heights","_isNotStackable","_isRoomTile","total","push","dispose","validPosition","x","y","getTileHeight","setTileHeight","setStackingBlocked","isNotStackable","setIsRoomTile","isRoomTile","validateLocation","k","_arg_2","_arg_3","_arg_4","_arg_5","_arg_6","_arg_7","_arg_8","_arg_9","_arg_10","_local_12","_local_13","Math","min","_local_11","abs"],"mappings":"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","sourcesContent":["export class FurnitureStackingHeightMap\r\n{\r\n    private _width: number;\r\n    private _height: number;\r\n    private _heights: number[];\r\n    private _isNotStackable: boolean[];\r\n    private _isRoomTile: boolean[];\r\n\r\n    constructor(width: number, height: number)\r\n    {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._heights = [];\r\n        this._isNotStackable = [];\r\n        this._isRoomTile = [];\r\n\r\n        let total = (width * height);\r\n\r\n        while(total > 0)\r\n        {\r\n            this._heights.push(0);\r\n            this._isNotStackable.push(false);\r\n            this._isRoomTile.push(false);\r\n\r\n            total--;\r\n        }\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._width = 0;\r\n        this._height =0;\r\n        this._height = null;\r\n        this._isNotStackable = null;\r\n        this._isRoomTile = null;\r\n    }\r\n\r\n    private validPosition(x: number, y: number): boolean\r\n    {\r\n        return (((x >= 0) && (x < this._width)) && (y >= 0)) && (y < this._height);\r\n    }\r\n\r\n    public getTileHeight(x: number, y: number): number\r\n    {\r\n        return ((this.validPosition(x, y)) ? this._heights[((y * this._width) + x)] : 0);\r\n    }\r\n\r\n    public setTileHeight(x: number, y: number, height: number): void\r\n    {\r\n        if(this.validPosition(x, y)) this._heights[((y * this._width) + x)] = height;\r\n    }\r\n\r\n    public setStackingBlocked(x: number, y: number, isNotStackable: boolean): void\r\n    {\r\n        if(this.validPosition(x, y)) this._isNotStackable[((y * this._width) + x)] = isNotStackable;\r\n    }\r\n\r\n    public setIsRoomTile(x: number, y: number, isRoomTile: boolean): void\r\n    {\r\n        if(this.validPosition(x, y)) this._isRoomTile[((y * this._width) + x)] = isRoomTile;\r\n    }\r\n\r\n    public validateLocation(k: number, _arg_2: number, _arg_3: number, _arg_4: number, _arg_5: number, _arg_6: number, _arg_7: number, _arg_8: number, _arg_9: boolean, _arg_10: number = -1): boolean\r\n    {\r\n        let _local_12 = 0;\r\n        let _local_13 = 0;\r\n\r\n        if(!this.validPosition(k, _arg_2) || !this.validPosition(((k + _arg_3) - 1), ((_arg_2 + _arg_4) - 1))) return false;\r\n\r\n        if(((_arg_5 < 0) || (_arg_5 >= this._width))) _arg_5 = 0;\r\n\r\n        if(((_arg_6 < 0) || (_arg_6 >= this._height))) _arg_6 = 0;\r\n\r\n        _arg_7 = Math.min(_arg_7, (this._width - _arg_5));\r\n        _arg_8 = Math.min(_arg_8, (this._height - _arg_6));\r\n\r\n        if(_arg_10 === -1) _arg_10 = this.getTileHeight(k, _arg_2);\r\n\r\n        let _local_11 = _arg_2;\r\n\r\n        while(_local_11 < (_arg_2 + _arg_4))\r\n        {\r\n            _local_12 = k;\r\n\r\n            while(_local_12 < (k + _arg_3))\r\n            {\r\n                if(((((_local_12 < _arg_5) || (_local_12 >= (_arg_5 + _arg_7))) || (_local_11 < _arg_6)) || (_local_11 >= (_arg_6 + _arg_8))))\r\n                {\r\n                    _local_13 = ((_local_11 * this._width) + _local_12);\r\n\r\n                    if(_arg_9)\r\n                    {\r\n                        if(!this._isRoomTile[_local_13]) return false;\r\n                    }\r\n                    else\r\n                    {\r\n                        if(((this._isNotStackable[_local_13]) || (!(this._isRoomTile[_local_13]))) || (Math.abs((this._heights[_local_13] - _arg_10)) > 0.01)) return false;\r\n                    }\r\n                }\r\n\r\n                _local_12++;\r\n            }\r\n\r\n            _local_11++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get width(): number\r\n    {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number\r\n    {\r\n        return this._height;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}