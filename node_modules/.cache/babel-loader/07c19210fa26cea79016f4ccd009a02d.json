{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/mod-tools/views/user/ModToolsUserView.tsx\",\n    _s = $RefreshSig$();\n\nimport { FriendlyTime, GetModeratorUserInfoMessageComposer, ModeratorUserInfoEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LocalizeText, SendMessageComposer } from '../../../../api';\nimport { Button, Column, DraggableWindowPosition, Grid, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../../../common';\nimport { ModToolsOpenUserChatlogEvent } from '../../../../events';\nimport { DispatchUiEvent, UseMessageEventHook } from '../../../../hooks';\nimport { ModToolsUserModActionView } from './ModToolsUserModActionView';\nimport { ModToolsUserRoomVisitsView } from './ModToolsUserRoomVisitsView';\nimport { ModToolsUserSendMessageView } from './ModToolsUserSendMessageView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModToolsUserView = props => {\n  _s();\n\n  const {\n    onCloseClick = null,\n    userId = null\n  } = props;\n  const [userInfo, setUserInfo] = useState(null);\n  const [sendMessageVisible, setSendMessageVisible] = useState(false);\n  const [modActionVisible, setModActionVisible] = useState(false);\n  const [roomVisitsVisible, setRoomVisitsVisible] = useState(false);\n  const onModtoolUserInfoEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser || parser.data.userId !== userId) return;\n    setUserInfo(parser.data);\n  }, [userId]);\n  UseMessageEventHook(ModeratorUserInfoEvent, onModtoolUserInfoEvent);\n  const userProperties = useMemo(() => {\n    if (!userInfo) return null;\n    return [{\n      localeKey: 'modtools.userinfo.userName',\n      value: userInfo.userName,\n      showOnline: true\n    }, {\n      localeKey: 'modtools.userinfo.cfhCount',\n      value: userInfo.cfhCount.toString()\n    }, {\n      localeKey: 'modtools.userinfo.abusiveCfhCount',\n      value: userInfo.abusiveCfhCount.toString()\n    }, {\n      localeKey: 'modtools.userinfo.cautionCount',\n      value: userInfo.cautionCount.toString()\n    }, {\n      localeKey: 'modtools.userinfo.banCount',\n      value: userInfo.banCount.toString()\n    }, {\n      localeKey: 'modtools.userinfo.lastSanctionTime',\n      value: userInfo.lastSanctionTime\n    }, {\n      localeKey: 'modtools.userinfo.tradingLockCount',\n      value: userInfo.tradingLockCount.toString()\n    }, {\n      localeKey: 'modtools.userinfo.tradingExpiryDate',\n      value: userInfo.tradingExpiryDate\n    }, {\n      localeKey: 'modtools.userinfo.minutesSinceLastLogin',\n      value: FriendlyTime.format(userInfo.minutesSinceLastLogin * 60, '.ago', 2)\n    }, {\n      localeKey: 'modtools.userinfo.lastPurchaseDate',\n      value: userInfo.lastPurchaseDate\n    }, {\n      localeKey: 'modtools.userinfo.primaryEmailAddress',\n      value: userInfo.primaryEmailAddress\n    }, {\n      localeKey: 'modtools.userinfo.identityRelatedBanCount',\n      value: userInfo.identityRelatedBanCount.toString()\n    }, {\n      localeKey: 'modtools.userinfo.registrationAgeInMinutes',\n      value: FriendlyTime.format(userInfo.registrationAgeInMinutes * 60, '.ago', 2)\n    }, {\n      localeKey: 'modtools.userinfo.userClassification',\n      value: userInfo.userClassification\n    }];\n  }, [userInfo]);\n  useEffect(() => {\n    SendMessageComposer(new GetModeratorUserInfoMessageComposer(userId));\n  }, [userId]);\n  if (!userInfo) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NitroCardView, {\n      className: \"nitro-mod-tools-user\",\n      theme: \"modtool-windows\",\n      windowPosition: DraggableWindowPosition.TOP_CENTER,\n      children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n        headerText: LocalizeText('modtools.userinfo.title', ['username'], [userInfo.userName]),\n        onCloseClick: () => onCloseClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n        className: \"text-black\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          overflow: \"hidden\",\n          className: \"mod-content p-2\",\n          children: [/*#__PURE__*/_jsxDEV(Column, {\n            size: 8,\n            overflow: \"auto\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-striped table-sm table-text-small text-black m-0\",\n              children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: userProperties.map((property, index) => {\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      scope: \"row\",\n                      children: LocalizeText(property.localeKey)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [property.value, property.showOnline && /*#__PURE__*/_jsxDEV(\"i\", {\n                        className: `icon icon-pf-${userInfo.online ? 'online' : 'offline'} ms-2`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 126,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 123,\n                      columnNumber: 49\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 45\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Column, {\n            size: 4,\n            gap: 1,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: event => DispatchUiEvent(new ModToolsOpenUserChatlogEvent(userId)),\n              children: \"Room Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: event => setSendMessageVisible(!sendMessageVisible),\n              children: \"Send Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: event => setRoomVisitsVisible(!roomVisitsVisible),\n              children: \"Room Visits\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: event => setModActionVisible(!modActionVisible),\n              children: \"Mod Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), sendMessageVisible && /*#__PURE__*/_jsxDEV(ModToolsUserSendMessageView, {\n      user: {\n        userId: userId,\n        username: userInfo.userName\n      },\n      onCloseClick: () => setSendMessageVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this), modActionVisible && /*#__PURE__*/_jsxDEV(ModToolsUserModActionView, {\n      user: {\n        userId: userId,\n        username: userInfo.userName\n      },\n      onCloseClick: () => setModActionVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this), roomVisitsVisible && /*#__PURE__*/_jsxDEV(ModToolsUserRoomVisitsView, {\n      userId: userId,\n      onCloseClick: () => setRoomVisitsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ModToolsUserView, \"0BNfDGKACebq4tCOcwVUgOTKfyw=\");\n\n_c = ModToolsUserView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModToolsUserView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/mod-tools/views/user/ModToolsUserView.tsx"],"names":["FriendlyTime","GetModeratorUserInfoMessageComposer","ModeratorUserInfoEvent","useCallback","useEffect","useMemo","useState","LocalizeText","SendMessageComposer","Button","Column","DraggableWindowPosition","Grid","NitroCardContentView","NitroCardHeaderView","NitroCardView","ModToolsOpenUserChatlogEvent","DispatchUiEvent","UseMessageEventHook","ModToolsUserModActionView","ModToolsUserRoomVisitsView","ModToolsUserSendMessageView","ModToolsUserView","props","onCloseClick","userId","userInfo","setUserInfo","sendMessageVisible","setSendMessageVisible","modActionVisible","setModActionVisible","roomVisitsVisible","setRoomVisitsVisible","onModtoolUserInfoEvent","event","parser","getParser","data","userProperties","localeKey","value","userName","showOnline","cfhCount","toString","abusiveCfhCount","cautionCount","banCount","lastSanctionTime","tradingLockCount","tradingExpiryDate","format","minutesSinceLastLogin","lastPurchaseDate","primaryEmailAddress","identityRelatedBanCount","registrationAgeInMinutes","userClassification","TOP_CENTER","map","property","index","online","username"],"mappings":"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","sourcesContent":["import { FriendlyTime, GetModeratorUserInfoMessageComposer, ModeratorUserInfoData, ModeratorUserInfoEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { LocalizeText, SendMessageComposer } from '../../../../api';\nimport { Button, Column, DraggableWindowPosition, Grid, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../../../common';\nimport { ModToolsOpenUserChatlogEvent } from '../../../../events';\nimport { DispatchUiEvent, UseMessageEventHook } from '../../../../hooks';\nimport { ModToolsUserModActionView } from './ModToolsUserModActionView';\nimport { ModToolsUserRoomVisitsView } from './ModToolsUserRoomVisitsView';\nimport { ModToolsUserSendMessageView } from './ModToolsUserSendMessageView';\n\ninterface ModToolsUserViewProps\n{\n    userId: number;\n    onCloseClick: () => void;\n}\n\nexport const ModToolsUserView: FC<ModToolsUserViewProps> = props =>\n{\n    const { onCloseClick = null, userId = null } = props;\n    const [ userInfo, setUserInfo ] = useState<ModeratorUserInfoData>(null);\n    const [ sendMessageVisible, setSendMessageVisible ] = useState(false);\n    const [ modActionVisible, setModActionVisible ] = useState(false);\n    const [ roomVisitsVisible, setRoomVisitsVisible ] = useState(false);\n\n    const onModtoolUserInfoEvent = useCallback((event: ModeratorUserInfoEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser || parser.data.userId !== userId) return;\n\n        setUserInfo(parser.data);\n    }, [ userId ]);\n\n    UseMessageEventHook(ModeratorUserInfoEvent, onModtoolUserInfoEvent);\n\n    const userProperties = useMemo(() =>\n    {\n        if(!userInfo) return null;\n\n        return [\n            {\n                localeKey: 'modtools.userinfo.userName',\n                value: userInfo.userName,\n                showOnline: true\n            },\n            {\n                localeKey: 'modtools.userinfo.cfhCount',\n                value: userInfo.cfhCount.toString()\n            },\n            {\n                localeKey: 'modtools.userinfo.abusiveCfhCount',\n                value: userInfo.abusiveCfhCount.toString()\n            },\n            {\n                localeKey: 'modtools.userinfo.cautionCount',\n                value: userInfo.cautionCount.toString()\n            },\n            {\n                localeKey: 'modtools.userinfo.banCount',\n                value: userInfo.banCount.toString()\n            },\n            {\n                localeKey: 'modtools.userinfo.lastSanctionTime',\n                value: userInfo.lastSanctionTime\n            },\n            {\n                localeKey: 'modtools.userinfo.tradingLockCount',\n                value: userInfo.tradingLockCount.toString()\n            },\n            {\n                localeKey: 'modtools.userinfo.tradingExpiryDate',\n                value: userInfo.tradingExpiryDate\n            },\n            {\n                localeKey: 'modtools.userinfo.minutesSinceLastLogin',\n                value: FriendlyTime.format(userInfo.minutesSinceLastLogin * 60, '.ago', 2)\n            },\n            {\n                localeKey: 'modtools.userinfo.lastPurchaseDate',\n                value: userInfo.lastPurchaseDate\n            },\n            {\n                localeKey: 'modtools.userinfo.primaryEmailAddress',\n                value: userInfo.primaryEmailAddress\n            },\n            {\n                localeKey: 'modtools.userinfo.identityRelatedBanCount',\n                value: userInfo.identityRelatedBanCount.toString()\n            },\n            {\n                localeKey: 'modtools.userinfo.registrationAgeInMinutes',\n                value: FriendlyTime.format(userInfo.registrationAgeInMinutes * 60, '.ago', 2)\n            },\n            {\n                localeKey: 'modtools.userinfo.userClassification',\n                value: userInfo.userClassification\n            }\n        ];\n    }, [ userInfo ]);\n\n    useEffect(() =>\n    {\n        SendMessageComposer(new GetModeratorUserInfoMessageComposer(userId));\n    }, [ userId ]);\n\n    if(!userInfo) return null;\n\n    return (\n        <>\n            <NitroCardView className=\"nitro-mod-tools-user\" theme=\"modtool-windows\" windowPosition={ DraggableWindowPosition.TOP_CENTER }>\n                <NitroCardHeaderView headerText={ LocalizeText('modtools.userinfo.title', [ 'username' ], [ userInfo.userName ]) } onCloseClick={ () => onCloseClick() } />\n                <NitroCardContentView className=\"text-black\">\n                    <Grid overflow=\"hidden\" className=\"mod-content p-2\">\n                        <Column size={ 8 } overflow=\"auto\">\n                            <table className=\"table table-striped table-sm table-text-small text-black m-0\">\n                                <tbody>\n                                    { userProperties.map( (property, index) =>\n                                    {\n\n                                        return (\n                                            <tr key={ index }>\n                                                <th scope=\"row\">{ LocalizeText(property.localeKey) }</th>\n                                                <td>\n                                                    { property.value }\n                                                    { property.showOnline &&\n                                                    <i className={ `icon icon-pf-${ userInfo.online ? 'online' : 'offline' } ms-2` } /> }\n                                                </td>\n                                            </tr>\n                                        );\n                                    }) }\n                                </tbody>\n                            </table>\n                        </Column>\n                        <Column size={ 4 } gap={ 1 }>\n                            <Button onClick={ event => DispatchUiEvent(new ModToolsOpenUserChatlogEvent(userId)) }>\n                                Room Chat\n                            </Button>\n                            <Button onClick={ event => setSendMessageVisible(!sendMessageVisible) }>\n                                Send Message\n                            </Button>\n                            <Button onClick={ event => setRoomVisitsVisible(!roomVisitsVisible) }>\n                                Room Visits\n                            </Button>\n                            <Button onClick={ event => setModActionVisible(!modActionVisible) }>\n                                Mod Action\n                            </Button>\n                        </Column>\n                    </Grid>\n                </NitroCardContentView>\n            </NitroCardView>\n            { sendMessageVisible &&\n                <ModToolsUserSendMessageView user={ { userId: userId, username: userInfo.userName } } onCloseClick={ () => setSendMessageVisible(false) } /> }\n            { modActionVisible &&\n                <ModToolsUserModActionView user={ { userId: userId, username: userInfo.userName } } onCloseClick={ () => setModActionVisible(false) } /> }\n            { roomVisitsVisible &&\n                <ModToolsUserRoomVisitsView userId={ userId } onCloseClick={ () => setRoomVisitsVisible(false) } /> }\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}