{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/avatar-editor/AvatarEditorView.tsx\",\n    _s = $RefreshSig$();\n\nimport { AvatarEditorFigureCategory, FigureSetIdsMessageEvent, GetWardrobeMessageComposer, UserFigureComposer, UserWardrobePageEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { AddEventLinkTracker, GetAvatarRenderManager, GetClubMemberLevel, GetConfiguration, GetSessionDataManager, LocalizeText, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../common';\nimport { Button } from '../../common/Button';\nimport { Column } from '../../common/Column';\nimport { Grid } from '../../common/Grid';\nimport { UseMessageEventHook } from '../../hooks';\nimport { AvatarEditorAction } from './common/AvatarEditorAction';\nimport { AvatarEditorUtilities } from './common/AvatarEditorUtilities';\nimport { BodyModel } from './common/BodyModel';\nimport { FigureData } from './common/FigureData';\nimport { generateRandomFigure } from './common/FigureGenerator';\nimport { HeadModel } from './common/HeadModel';\nimport { LegModel } from './common/LegModel';\nimport { TorsoModel } from './common/TorsoModel';\nimport { AvatarEditorFigurePreviewView } from './views/figure-preview/AvatarEditorFigurePreviewView';\nimport { AvatarEditorModelView } from './views/model/AvatarEditorModelView';\nimport { AvatarEditorWardrobeView } from './views/wardrobe/AvatarEditorWardrobeView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_MALE_FIGURE = 'hr-100.hd-180-7.ch-215-66.lg-270-79.sh-305-62.ha-1002-70.wa-2007';\nconst DEFAULT_FEMALE_FIGURE = 'hr-515-33.hd-600-1.ch-635-70.lg-716-66-62.sh-735-68';\nexport const AvatarEditorView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [figures, setFigures] = useState(null);\n  const [figureData, setFigureData] = useState(null);\n  const [categories, setCategories] = useState(null);\n  const [activeCategory, setActiveCategory] = useState(null);\n  const [figureSetIds, setFigureSetIds] = useState([]);\n  const [boundFurnitureNames, setBoundFurnitureNames] = useState([]);\n  const [savedFigures, setSavedFigures] = useState([]);\n  const [isWardrobeVisible, setIsWardrobeVisible] = useState(false);\n  const [lastFigure, setLastFigure] = useState(null);\n  const [lastGender, setLastGender] = useState(null);\n  const [needsReset, setNeedsReset] = useState(true);\n  const [isInitalized, setIsInitalized] = useState(false);\n  const maxWardrobeSlots = useMemo(() => GetConfiguration('avatar.wardrobe.max.slots', 10), []);\n  const onFigureSetIdsMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    setFigureSetIds(parser.figureSetIds);\n    setBoundFurnitureNames(parser.boundsFurnitureNames);\n  }, []);\n  UseMessageEventHook(FigureSetIdsMessageEvent, onFigureSetIdsMessageEvent);\n  const onUserWardrobePageEvent = useCallback(event => {\n    const parser = event.getParser();\n    const savedFigures = [];\n    let i = 0;\n\n    while (i < maxWardrobeSlots) {\n      savedFigures.push([null, null]);\n      i++;\n    }\n\n    for (let [index, [look, gender]] of parser.looks.entries()) {\n      const container = GetAvatarRenderManager().createFigureContainer(look);\n      savedFigures[index - 1] = [container, gender];\n    }\n\n    setSavedFigures(savedFigures);\n  }, [maxWardrobeSlots]);\n  UseMessageEventHook(UserWardrobePageEvent, onUserWardrobePageEvent);\n  const selectCategory = useCallback(name => {\n    if (!categories) return;\n    setActiveCategory(categories.get(name));\n  }, [categories]);\n  const resetCategories = useCallback(() => {\n    const categories = new Map();\n    categories.set(AvatarEditorFigureCategory.GENERIC, new BodyModel());\n    categories.set(AvatarEditorFigureCategory.HEAD, new HeadModel());\n    categories.set(AvatarEditorFigureCategory.TORSO, new TorsoModel());\n    categories.set(AvatarEditorFigureCategory.LEGS, new LegModel());\n    setCategories(categories);\n  }, []);\n  const setupFigures = useCallback(() => {\n    const figures = new Map();\n    const maleFigure = new FigureData();\n    const femaleFigure = new FigureData();\n    maleFigure.loadAvatarData(DEFAULT_MALE_FIGURE, FigureData.MALE);\n    femaleFigure.loadAvatarData(DEFAULT_FEMALE_FIGURE, FigureData.FEMALE);\n    figures.set(FigureData.MALE, maleFigure);\n    figures.set(FigureData.FEMALE, femaleFigure);\n    setFigures(figures);\n    setFigureData(figures.get(FigureData.MALE));\n  }, []);\n  const loadAvatarInEditor = useCallback(function (figure, gender) {\n    let reset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    gender = AvatarEditorUtilities.getGender(gender);\n    let newFigureData = figureData;\n    if (gender !== newFigureData.gender) newFigureData = figures.get(gender);\n    if (figure !== newFigureData.getFigureString()) newFigureData.loadAvatarData(figure, gender);\n    if (newFigureData !== figureData) setFigureData(newFigureData);\n\n    if (reset) {\n      setLastFigure(figureData.getFigureString());\n      setLastGender(figureData.gender);\n    }\n  }, [figures, figureData]);\n  const processAction = useCallback(action => {\n    switch (action) {\n      case AvatarEditorAction.ACTION_CLEAR:\n        loadAvatarInEditor(figureData.getFigureStringWithFace(0, false), figureData.gender, false);\n        resetCategories();\n        return;\n\n      case AvatarEditorAction.ACTION_RESET:\n        loadAvatarInEditor(lastFigure, lastGender);\n        resetCategories();\n        return;\n\n      case AvatarEditorAction.ACTION_RANDOMIZE:\n        const figure = generateRandomFigure(figureData, figureData.gender, GetClubMemberLevel(), figureSetIds, [FigureData.FACE]);\n        loadAvatarInEditor(figure, figureData.gender, false);\n        resetCategories();\n        return;\n\n      case AvatarEditorAction.ACTION_SAVE:\n        SendMessageComposer(new UserFigureComposer(figureData.gender, figureData.getFigureString()));\n        setIsVisible(false);\n        return;\n    }\n  }, [figureData, lastFigure, lastGender, figureSetIds, loadAvatarInEditor, resetCategories]);\n  const setGender = useCallback(gender => {\n    gender = AvatarEditorUtilities.getGender(gender);\n    setFigureData(figures.get(gender));\n  }, [figures]);\n  const linkReceived = useCallback(url => {\n    const parts = url.split('/');\n    if (parts.length < 2) return;\n\n    switch (parts[1]) {\n      case 'show':\n        setIsVisible(true);\n        return;\n\n      case 'hide':\n        setIsVisible(false);\n        return;\n\n      case 'toggle':\n        setIsVisible(prevValue => !prevValue);\n        return;\n    }\n  }, []);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived,\n      eventUrlPrefix: 'avatar-editor/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, [linkReceived]);\n  useEffect(() => {\n    setSavedFigures(new Array(maxWardrobeSlots));\n  }, [maxWardrobeSlots]);\n  useEffect(() => {\n    if (!isWardrobeVisible) return;\n    setActiveCategory(null);\n    SendMessageComposer(new GetWardrobeMessageComposer());\n  }, [isWardrobeVisible]);\n  useEffect(() => {\n    if (!activeCategory) return;\n    setIsWardrobeVisible(false);\n  }, [activeCategory]);\n  useEffect(() => {\n    if (!categories) return;\n    selectCategory(AvatarEditorFigureCategory.GENERIC);\n  }, [categories, selectCategory]);\n  useEffect(() => {\n    if (!figureData) return;\n    AvatarEditorUtilities.CURRENT_FIGURE = figureData;\n    resetCategories();\n    return () => AvatarEditorUtilities.CURRENT_FIGURE = null;\n  }, [figureData, resetCategories]);\n  useEffect(() => {\n    AvatarEditorUtilities.FIGURE_SET_IDS = figureSetIds;\n    AvatarEditorUtilities.BOUND_FURNITURE_NAMES = boundFurnitureNames;\n    resetCategories();\n    return () => {\n      AvatarEditorUtilities.FIGURE_SET_IDS = null;\n      AvatarEditorUtilities.BOUND_FURNITURE_NAMES = null;\n    };\n  }, [figureSetIds, boundFurnitureNames, resetCategories]);\n  useEffect(() => {\n    if (!isVisible) return;\n\n    if (!figures) {\n      setupFigures();\n      setIsInitalized(true);\n      return;\n    }\n  }, [isVisible, figures, setupFigures]);\n  useEffect(() => {\n    if (!isVisible || !isInitalized || !needsReset) return;\n    loadAvatarInEditor(GetSessionDataManager().figure, GetSessionDataManager().gender);\n    setNeedsReset(false);\n  }, [isVisible, isInitalized, needsReset, loadAvatarInEditor]);\n  useEffect(() => {\n    if (isVisible) return;\n    return () => {\n      setNeedsReset(true);\n    };\n  }, [isVisible]);\n  if (!isVisible || !figureData) return null;\n  return /*#__PURE__*/_jsxDEV(NitroCardView, {\n    uniqueKey: \"avatar-editor\",\n    className: \"nitro-avatar-editor\",\n    children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n      headerText: LocalizeText('avatareditor.title'),\n      onCloseClick: event => setIsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardTabsView, {\n      className: \"avatar-editor-tabs\",\n      children: [categories && categories.size > 0 && Array.from(categories.keys()).map(category => {\n        const isActive = activeCategory && activeCategory.name === category;\n        return /*#__PURE__*/_jsxDEV(NitroCardTabsItemView, {\n          isActive: isActive,\n          onClick: event => selectCategory(category),\n          children: LocalizeText(`avatareditor.category.${category}`)\n        }, category, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(NitroCardTabsItemView, {\n        isActive: isWardrobeVisible,\n        onClick: event => setIsWardrobeVisible(true),\n        children: LocalizeText('avatareditor.category.wardrobe')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          size: 6,\n          overflow: \"hidden\",\n          children: [activeCategory && !isWardrobeVisible && /*#__PURE__*/_jsxDEV(AvatarEditorModelView, {\n            model: activeCategory,\n            gender: figureData.gender,\n            setGender: setGender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 29\n          }, this), isWardrobeVisible && /*#__PURE__*/_jsxDEV(AvatarEditorWardrobeView, {\n            figureData: figureData,\n            savedFigures: savedFigures,\n            setSavedFigures: setSavedFigures,\n            loadAvatarInEditor: loadAvatarInEditor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          size: 3,\n          overflow: \"hidden\",\n          children: [/*#__PURE__*/_jsxDEV(AvatarEditorFigurePreviewView, {\n            figureData: figureData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Column, {\n            className: \"randomize-container position-absolute\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"icon randomize-icon\",\n              onClick: event => processAction(AvatarEditorAction.ACTION_RANDOMIZE)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Column, {\n            grow: true,\n            gap: 1,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"w-100\",\n              variant: \"success\",\n              onClick: event => processAction(AvatarEditorAction.ACTION_SAVE),\n              children: LocalizeText('avatareditor.save')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvatarEditorView, \"sEpW9kIVHCOVMNkX/Afo1LIh2Gs=\");\n\n_c = AvatarEditorView;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvatarEditorView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/avatar-editor/AvatarEditorView.tsx"],"names":["AvatarEditorFigureCategory","FigureSetIdsMessageEvent","GetWardrobeMessageComposer","UserFigureComposer","UserWardrobePageEvent","useCallback","useEffect","useMemo","useState","AddEventLinkTracker","GetAvatarRenderManager","GetClubMemberLevel","GetConfiguration","GetSessionDataManager","LocalizeText","RemoveLinkEventTracker","SendMessageComposer","NitroCardContentView","NitroCardHeaderView","NitroCardTabsItemView","NitroCardTabsView","NitroCardView","Button","Column","Grid","UseMessageEventHook","AvatarEditorAction","AvatarEditorUtilities","BodyModel","FigureData","generateRandomFigure","HeadModel","LegModel","TorsoModel","AvatarEditorFigurePreviewView","AvatarEditorModelView","AvatarEditorWardrobeView","DEFAULT_MALE_FIGURE","DEFAULT_FEMALE_FIGURE","AvatarEditorView","props","isVisible","setIsVisible","figures","setFigures","figureData","setFigureData","categories","setCategories","activeCategory","setActiveCategory","figureSetIds","setFigureSetIds","boundFurnitureNames","setBoundFurnitureNames","savedFigures","setSavedFigures","isWardrobeVisible","setIsWardrobeVisible","lastFigure","setLastFigure","lastGender","setLastGender","needsReset","setNeedsReset","isInitalized","setIsInitalized","maxWardrobeSlots","onFigureSetIdsMessageEvent","event","parser","getParser","boundsFurnitureNames","onUserWardrobePageEvent","i","push","index","look","gender","looks","entries","container","createFigureContainer","selectCategory","name","get","resetCategories","Map","set","GENERIC","HEAD","TORSO","LEGS","setupFigures","maleFigure","femaleFigure","loadAvatarData","MALE","FEMALE","loadAvatarInEditor","figure","reset","getGender","newFigureData","getFigureString","processAction","action","ACTION_CLEAR","getFigureStringWithFace","ACTION_RESET","ACTION_RANDOMIZE","FACE","ACTION_SAVE","setGender","linkReceived","url","parts","split","length","prevValue","linkTracker","eventUrlPrefix","Array","CURRENT_FIGURE","FIGURE_SET_IDS","BOUND_FURNITURE_NAMES","size","from","keys","map","category","isActive"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { AvatarEditorFigureCategory, FigureSetIdsMessageEvent, GetWardrobeMessageComposer, IAvatarFigureContainer, ILinkEventTracker, UserFigureComposer, UserWardrobePageEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { AddEventLinkTracker, GetAvatarRenderManager, GetClubMemberLevel, GetConfiguration, GetSessionDataManager, LocalizeText, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../common';\nimport { Button } from '../../common/Button';\nimport { ButtonGroup } from '../../common/ButtonGroup';\nimport { Column } from '../../common/Column';\nimport { Grid } from '../../common/Grid';\nimport { UseMessageEventHook } from '../../hooks';\nimport { AvatarEditorAction } from './common/AvatarEditorAction';\nimport { AvatarEditorUtilities } from './common/AvatarEditorUtilities';\nimport { BodyModel } from './common/BodyModel';\nimport { FigureData } from './common/FigureData';\nimport { generateRandomFigure } from './common/FigureGenerator';\nimport { HeadModel } from './common/HeadModel';\nimport { IAvatarEditorCategoryModel } from './common/IAvatarEditorCategoryModel';\nimport { LegModel } from './common/LegModel';\nimport { TorsoModel } from './common/TorsoModel';\nimport { AvatarEditorFigurePreviewView } from './views/figure-preview/AvatarEditorFigurePreviewView';\nimport { AvatarEditorModelView } from './views/model/AvatarEditorModelView';\nimport { AvatarEditorWardrobeView } from './views/wardrobe/AvatarEditorWardrobeView';\n\nconst DEFAULT_MALE_FIGURE: string = 'hr-100.hd-180-7.ch-215-66.lg-270-79.sh-305-62.ha-1002-70.wa-2007';\nconst DEFAULT_FEMALE_FIGURE: string = 'hr-515-33.hd-600-1.ch-635-70.lg-716-66-62.sh-735-68';\n\nexport const AvatarEditorView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const [ figures, setFigures ] = useState<Map<string, FigureData>>(null);\n    const [ figureData, setFigureData ] = useState<FigureData>(null);\n    const [ categories, setCategories ] = useState<Map<string, IAvatarEditorCategoryModel>>(null);\n    const [ activeCategory, setActiveCategory ] = useState<IAvatarEditorCategoryModel>(null);\n    const [ figureSetIds, setFigureSetIds ] = useState<number[]>([]);\n    const [ boundFurnitureNames, setBoundFurnitureNames ] = useState<string[]>([]);\n    const [ savedFigures, setSavedFigures ] = useState<[ IAvatarFigureContainer, string ][]>([]);\n    const [ isWardrobeVisible, setIsWardrobeVisible ] = useState(false);\n    const [ lastFigure, setLastFigure ] = useState<string>(null);\n    const [ lastGender, setLastGender ] = useState<string>(null);\n    const [ needsReset, setNeedsReset ] = useState(true);\n    const [ isInitalized, setIsInitalized ] = useState(false);\n\n    const maxWardrobeSlots = useMemo(() => GetConfiguration<number>('avatar.wardrobe.max.slots', 10), []);\n\n    const onFigureSetIdsMessageEvent = useCallback((event: FigureSetIdsMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        setFigureSetIds(parser.figureSetIds);\n        setBoundFurnitureNames(parser.boundsFurnitureNames);\n    }, []);\n\n    UseMessageEventHook(FigureSetIdsMessageEvent, onFigureSetIdsMessageEvent);\n\n    const onUserWardrobePageEvent = useCallback((event: UserWardrobePageEvent) =>\n    {\n        const parser = event.getParser();\n        const savedFigures: [ IAvatarFigureContainer, string ][] = [];\n\n        let i = 0;\n\n        while(i < maxWardrobeSlots)\n        {\n            savedFigures.push([ null, null ]);\n\n            i++;\n        }\n\n        for(let [ index, [ look, gender ] ] of parser.looks.entries())\n        {\n            const container = GetAvatarRenderManager().createFigureContainer(look);\n\n            savedFigures[(index - 1)] = [ container, gender ];\n        }\n\n        setSavedFigures(savedFigures)\n    }, [ maxWardrobeSlots ]);\n\n    UseMessageEventHook(UserWardrobePageEvent, onUserWardrobePageEvent);\n\n    const selectCategory = useCallback((name: string) =>\n    {\n        if(!categories) return;\n        \n        setActiveCategory(categories.get(name));\n    }, [ categories ]);\n\n    const resetCategories = useCallback(() =>\n    {\n        const categories = new Map();\n\n        categories.set(AvatarEditorFigureCategory.GENERIC, new BodyModel());\n        categories.set(AvatarEditorFigureCategory.HEAD, new HeadModel());\n        categories.set(AvatarEditorFigureCategory.TORSO, new TorsoModel());\n        categories.set(AvatarEditorFigureCategory.LEGS, new LegModel());\n\n        setCategories(categories);\n    }, []);\n\n    const setupFigures = useCallback(() =>\n    {\n        const figures: Map<string, FigureData> = new Map();\n\n        const maleFigure = new FigureData();\n        const femaleFigure = new FigureData();\n\n        maleFigure.loadAvatarData(DEFAULT_MALE_FIGURE, FigureData.MALE);\n        femaleFigure.loadAvatarData(DEFAULT_FEMALE_FIGURE, FigureData.FEMALE);\n\n        figures.set(FigureData.MALE, maleFigure);\n        figures.set(FigureData.FEMALE, femaleFigure);\n\n        setFigures(figures);\n        setFigureData(figures.get(FigureData.MALE));\n    }, []);\n\n    const loadAvatarInEditor = useCallback((figure: string, gender: string, reset: boolean = true) =>\n    {\n        gender = AvatarEditorUtilities.getGender(gender);\n\n        let newFigureData = figureData;\n\n        if(gender !== newFigureData.gender) newFigureData = figures.get(gender);\n\n        if(figure !== newFigureData.getFigureString()) newFigureData.loadAvatarData(figure, gender);\n\n        if(newFigureData !== figureData) setFigureData(newFigureData);\n\n        if(reset)\n        {\n            setLastFigure(figureData.getFigureString());\n            setLastGender(figureData.gender);\n        }\n    }, [ figures, figureData ]);\n\n    const processAction = useCallback((action: string) =>\n    {\n        switch(action)\n        {\n            case AvatarEditorAction.ACTION_CLEAR:\n                loadAvatarInEditor(figureData.getFigureStringWithFace(0, false), figureData.gender, false);\n                resetCategories();\n                return;\n            case AvatarEditorAction.ACTION_RESET:\n                loadAvatarInEditor(lastFigure, lastGender);\n                resetCategories();\n                return;\n            case AvatarEditorAction.ACTION_RANDOMIZE:\n                const figure = generateRandomFigure(figureData, figureData.gender, GetClubMemberLevel(), figureSetIds, [ FigureData.FACE ]);\n\n                loadAvatarInEditor(figure, figureData.gender, false);\n                resetCategories();\n                return;\n            case AvatarEditorAction.ACTION_SAVE:\n                SendMessageComposer(new UserFigureComposer(figureData.gender, figureData.getFigureString()));\n                setIsVisible(false);\n                return;\n        }\n    }, [ figureData, lastFigure, lastGender, figureSetIds, loadAvatarInEditor, resetCategories ])\n\n    const setGender = useCallback((gender: string) =>\n    {\n        gender = AvatarEditorUtilities.getGender(gender);\n\n        setFigureData(figures.get(gender));\n    }, [ figures ]);\n\n    const linkReceived = useCallback((url: string) =>\n    {\n        const parts = url.split('/');\n\n        if(parts.length < 2) return;\n\n        switch(parts[1])\n        {\n            case 'show':\n                setIsVisible(true);\n                return;\n            case 'hide':\n                setIsVisible(false);\n                return;\n            case 'toggle':\n                setIsVisible(prevValue => !prevValue);\n                return;\n        }\n    }, []);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived,\n            eventUrlPrefix: 'avatar-editor/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, [ linkReceived ]);\n\n    useEffect(() =>\n    {\n        setSavedFigures(new Array(maxWardrobeSlots));\n    }, [ maxWardrobeSlots ]);\n\n    useEffect(() =>\n    {\n        if(!isWardrobeVisible) return;\n\n        setActiveCategory(null);\n        SendMessageComposer(new GetWardrobeMessageComposer());\n    }, [ isWardrobeVisible ]);\n\n    useEffect(() =>\n    {\n        if(!activeCategory) return;\n\n        setIsWardrobeVisible(false);\n    }, [ activeCategory ]);\n\n    useEffect(() =>\n    {\n        if(!categories) return;\n\n        selectCategory(AvatarEditorFigureCategory.GENERIC);\n    }, [ categories, selectCategory ]);\n\n    useEffect(() =>\n    {\n        if(!figureData) return;\n\n        AvatarEditorUtilities.CURRENT_FIGURE = figureData;\n\n        resetCategories();\n\n        return () => AvatarEditorUtilities.CURRENT_FIGURE = null;\n    }, [ figureData, resetCategories ]);\n\n    useEffect(() =>\n    {\n        AvatarEditorUtilities.FIGURE_SET_IDS = figureSetIds;\n        AvatarEditorUtilities.BOUND_FURNITURE_NAMES = boundFurnitureNames;\n\n        resetCategories();\n\n        return () =>\n        {\n            AvatarEditorUtilities.FIGURE_SET_IDS = null;\n            AvatarEditorUtilities.BOUND_FURNITURE_NAMES = null;\n        }\n    }, [ figureSetIds, boundFurnitureNames, resetCategories ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible) return;\n\n        if(!figures)\n        {\n            setupFigures();\n\n            setIsInitalized(true);\n\n            return;\n        }\n    }, [ isVisible, figures, setupFigures ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible || !isInitalized || !needsReset) return;\n\n        loadAvatarInEditor(GetSessionDataManager().figure, GetSessionDataManager().gender);\n        setNeedsReset(false);\n    }, [ isVisible, isInitalized, needsReset, loadAvatarInEditor ]);\n\n    useEffect(() =>\n    {\n        if(isVisible) return;\n\n        return () =>\n        {\n            setNeedsReset(true);\n        }\n    }, [ isVisible ]);\n\n    if(!isVisible || !figureData) return null;\n\n    return (\n        <NitroCardView uniqueKey=\"avatar-editor\" className=\"nitro-avatar-editor\">\n            <NitroCardHeaderView headerText={ LocalizeText('avatareditor.title') } onCloseClick={ event => setIsVisible(false) } />\n            <NitroCardTabsView className=\"avatar-editor-tabs\">\n                { categories && (categories.size > 0) && Array.from(categories.keys()).map(category =>\n                {\n                    const isActive = (activeCategory && (activeCategory.name === category));\n\n                    return (\n                        <NitroCardTabsItemView key={ category } isActive={ isActive } onClick={ event => selectCategory(category) }>\n                            { LocalizeText(`avatareditor.category.${ category }`) }\n                        </NitroCardTabsItemView>\n                    );\n                }) }\n                <NitroCardTabsItemView isActive={ isWardrobeVisible } onClick={ event => setIsWardrobeVisible(true) }>\n                    { LocalizeText('avatareditor.category.wardrobe') }\n                </NitroCardTabsItemView>\n            </NitroCardTabsView>\n            <NitroCardContentView>\n                <Grid>\n                    <Column size={ 6 } overflow=\"hidden\">\n                        { (activeCategory && !isWardrobeVisible) &&\n                            <AvatarEditorModelView model={ activeCategory } gender={ figureData.gender } setGender={ setGender } /> }\n                        { isWardrobeVisible &&\n                            <AvatarEditorWardrobeView figureData={ figureData } savedFigures={ savedFigures } setSavedFigures={ setSavedFigures } loadAvatarInEditor={ loadAvatarInEditor } /> }\n                    </Column>\n                    <Column size={ 3 } overflow=\"hidden\">\n                        <AvatarEditorFigurePreviewView figureData={ figureData } />\n                        <Column className=\"randomize-container position-absolute\">\n                            <i className=\"icon randomize-icon\" onClick={ event => processAction(AvatarEditorAction.ACTION_RANDOMIZE) } />\n                        </Column>\n                        <Column grow gap={ 1 }>\n                            <Button className=\"w-100\" variant=\"success\" onClick={ event => processAction(AvatarEditorAction.ACTION_SAVE) }>\n                                { LocalizeText('avatareditor.save') }\n                            </Button>\n                        </Column>\n                    </Column>\n                </Grid>\n            </NitroCardContentView>\n        </NitroCardView>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}