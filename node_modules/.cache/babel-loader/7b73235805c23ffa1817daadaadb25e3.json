{"ast":null,"code":"import { Graphics } from '@pixi/graphics';\nimport { Point, Rectangle } from '@pixi/math';\nimport { TextureUtils } from '../../../../../../../room/utils/TextureUtils';\nimport { Vector3d } from '../../../../../../../room/utils/Vector3d';\nimport { RoomVisualization } from '../../RoomVisualization';\nimport { Randomizer } from '../../utils/Randomizer';\nimport { PlaneMaterialCellColumn } from './PlaneMaterialCellColumn';\nexport class PlaneMaterialCellMatrix {\n  //1\n  //1\n  constructor(totalColumns) {\n    let repeatMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let align = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let normalMinX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let normalMaxX = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let normalMinY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;\n    let normalMaxY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n    this._columns = void 0;\n    this._repeatMode = 1;\n    this._align = 1;\n    this._cachedBitmapData = void 0;\n    this._cachedBitmapNormal = null;\n    this._cachedBitmapHeight = 0;\n    this._isCached = false;\n    this._isStatic = true;\n    this._normalMinX = -1;\n    this._normalMaxX = 1;\n    this._normalMinY = -1;\n    this._normalMaxY = 1;\n    this._columns = [];\n\n    if (totalColumns < 1) {\n      totalColumns = 1;\n    }\n\n    let _local_8 = 0;\n\n    while (_local_8 < totalColumns) {\n      this._columns.push(null);\n\n      _local_8++;\n    }\n\n    this._repeatMode = repeatMode;\n    this._align = align;\n    this._normalMinX = normalMinX;\n    this._normalMaxX = normalMaxX;\n    this._normalMinY = normalMinY;\n    this._normalMaxY = normalMaxY;\n\n    if (this._repeatMode == PlaneMaterialCellMatrix.REPEAT_MODE_RANDOM) {\n      this._isStatic = false;\n    }\n  }\n\n  static nextRandomColumnIndex(totalColumns) {\n    return Randomizer.getValues(1, 0, totalColumns * 17631)[0] % totalColumns;\n  }\n\n  get normalMinX() {\n    return this._normalMinX;\n  }\n\n  get normalMaxX() {\n    return this._normalMaxX;\n  }\n\n  get normalMinY() {\n    return this._normalMinY;\n  }\n\n  get normalMaxY() {\n    return this._normalMaxY;\n  }\n\n  isBottomAligned() {\n    return this._align === PlaneMaterialCellMatrix.ALIGN_BOTTOM;\n  }\n\n  get isStatic() {\n    return this._isStatic;\n  }\n\n  dispose() {\n    if (this._cachedBitmapData) {\n      this._cachedBitmapData.destroy();\n\n      this._cachedBitmapData = null;\n    }\n\n    if (this._cachedBitmapNormal) this._cachedBitmapNormal = null;\n  }\n\n  clearCache() {\n    if (!this._isCached) return;\n\n    if (this._cachedBitmapData) {\n      this._cachedBitmapData.destroy();\n\n      this._cachedBitmapData = null;\n    }\n\n    if (this._cachedBitmapNormal) {\n      this._cachedBitmapNormal.x = 0;\n      this._cachedBitmapNormal.y = 0;\n      this._cachedBitmapNormal.z = 0;\n    }\n\n    if (this._columns && this._columns.length) {\n      for (const column of this._columns) {\n        if (!column) continue;\n        column.clearCache();\n      }\n    }\n\n    this._isCached = false;\n  }\n\n  createColumn(index, width, cells) {\n    let repeatMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    if (index < 0 || index >= this._columns.length) return false;\n    const newColumn = new PlaneMaterialCellColumn(width, cells, repeatMode);\n    const oldColumn = this._columns[index];\n    if (oldColumn) oldColumn.dispose();\n    this._columns[index] = newColumn;\n    if (newColumn && !newColumn.isStatic) this._isStatic = false;\n    return true;\n  }\n\n  render(canvas, width, height, normal, useTexture, offsetX, offsetY, topAlign) {\n    if (width < 1) width = 1;\n    if (height < 1) height = 1;\n    if (!canvas || canvas.width !== width || canvas.height !== height) canvas = null;\n    if (!this._cachedBitmapNormal) this._cachedBitmapNormal = new Vector3d();\n\n    if (this.isStatic) {\n      if (this._cachedBitmapData) {\n        if (this._cachedBitmapData.width === width && this._cachedBitmapData.height == height && Vector3d.isEqual(this._cachedBitmapNormal, normal)) {\n          if (canvas) {\n            this.copyCachedBitmapOnCanvas(canvas, this._cachedBitmapHeight, offsetY, topAlign);\n            return canvas;\n          }\n\n          return this._cachedBitmapData;\n        }\n\n        this._cachedBitmapData.destroy();\n\n        this._cachedBitmapData = null;\n      }\n    } else {\n      if (this._cachedBitmapData) {\n        if (this._cachedBitmapData.width === width && this._cachedBitmapData.height === height) {\n          this._cachedBitmapData.beginFill(0xFFFFFF).drawRect(0, 0, width, height).endFill();\n        } else {\n          this._cachedBitmapData.destroy();\n\n          this._cachedBitmapData = null;\n        }\n      }\n    }\n\n    this._isCached = true;\n\n    this._cachedBitmapNormal.assign(normal);\n\n    if (!useTexture) {\n      this._cachedBitmapHeight = height;\n\n      if (!this._cachedBitmapData) {\n        const graphic = new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, width, height).endFill();\n        this._cachedBitmapData = graphic;\n      } else {\n        this._cachedBitmapData.beginFill(0xFFFFFF).drawRect(0, 0, width, height).endFill();\n      }\n\n      if (canvas) {\n        this.copyCachedBitmapOnCanvas(canvas, height, offsetY, topAlign);\n        return canvas;\n      }\n\n      return this._cachedBitmapData;\n    }\n\n    if (!this._cachedBitmapData) {\n      this._cachedBitmapHeight = height;\n      const graphic = new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, width, height).endFill();\n      this._cachedBitmapData = graphic;\n    }\n\n    const columns = [];\n    let columnIndex = 0;\n\n    while (columnIndex < this._columns.length) {\n      const column = this._columns[columnIndex];\n\n      if (column) {\n        const columnBitmapData = column.render(height, normal, offsetX, offsetY);\n        if (columnBitmapData) columns.push(columnBitmapData);\n      }\n\n      columnIndex++;\n    }\n\n    if (!columns.length) {\n      if (canvas) return canvas;\n      return this._cachedBitmapData;\n    }\n\n    let maxColumnHeight = 0;\n\n    switch (this._repeatMode) {\n      case PlaneMaterialCellMatrix.REPEAT_MODE_BORDERS:\n        //     maxColumnHeight = this.renderRepeatBorders(this._cachedBitmapData, columns);\n        break;\n\n      case PlaneMaterialCellMatrix.REPEAT_MODE_CENTER:\n        //     maxColumnHeight = this.renderRepeatCenter(this._cachedBitmapData, columns);\n        break;\n\n      case PlaneMaterialCellMatrix.REPEAT_MODE_FIRST:\n        //     maxColumnHeight = this.renderRepeatFirst(this._cachedBitmapData, columns);\n        break;\n\n      case PlaneMaterialCellMatrix.REPEAT_MODE_LAST:\n        //     maxColumnHeight = this.renderRepeatLast(this._cachedBitmapData, columns);\n        break;\n\n      case PlaneMaterialCellMatrix.REPEAT_MODE_RANDOM:\n        //     maxColumnHeight = this.renderRepeatRandom(this._cachedBitmapData, columns);\n        break;\n\n      default:\n        maxColumnHeight = this.renderRepeatAll(this._cachedBitmapData, columns);\n        break;\n    }\n\n    this._cachedBitmapHeight = maxColumnHeight;\n\n    if (canvas) {\n      this.copyCachedBitmapOnCanvas(canvas, maxColumnHeight, offsetY, topAlign);\n      return canvas;\n    }\n\n    return this._cachedBitmapData;\n  }\n\n  copyCachedBitmapOnCanvas(canvas, height, offsetY, topAlign) {\n    if (!canvas || !this._cachedBitmapData || canvas === this._cachedBitmapData) return;\n    if (!topAlign) offsetY = canvas.height - height - offsetY;\n\n    let _local_5;\n\n    if (this._align == PlaneMaterialCellMatrix.ALIGN_TOP) {\n      _local_5 = new Rectangle(0, 0, this._cachedBitmapData.width, this._cachedBitmapHeight);\n    } else {\n      _local_5 = new Rectangle(0, this._cachedBitmapData.height - this._cachedBitmapHeight, this._cachedBitmapData.width, this._cachedBitmapHeight);\n    }\n\n    const texture = TextureUtils.generateTexture(this._cachedBitmapData, _local_5);\n\n    if (texture) {\n      canvas.beginTextureFill({\n        texture\n      }).drawRect(0, offsetY, _local_5.width, _local_5.height).endFill();\n    }\n  }\n\n  getColumnsWidth(columns) {\n    if (!columns || !columns.length) return 0;\n    let width = 0;\n\n    for (const graphic of columns) {\n      if (!graphic) continue;\n      width += graphic.width;\n    }\n\n    return width;\n  }\n\n  renderColumns(canvas, columns, x, flag) {\n    if (!canvas || !columns || !columns.length) return new Point(x, 0);\n    let height = 0;\n    let i = 0;\n\n    while (i < columns.length) {\n      const column = flag ? columns[i] : columns[columns.length - 1 - i];\n\n      if (column) {\n        if (!flag) x = x - column.width;\n        let y = 0;\n        if (this._align == PlaneMaterialCellMatrix.ALIGN_BOTTOM) y = canvas.height - column.height;\n        let texture = RoomVisualization.getTextureCache(column);\n\n        if (!texture) {\n          texture = TextureUtils.generateTexture(column, new Rectangle(0, 0, column.width, column.height));\n          RoomVisualization.addTextureCache(column, texture);\n        }\n\n        canvas.beginTextureFill({\n          texture\n        });\n        canvas.drawRect(x, y, texture.width, texture.height);\n        canvas.endFill();\n        if (column.height > height) height = column.height;\n        if (flag) x = x + column.width;\n        if (flag && x >= canvas.width || !flag && x <= 0) return new Point(x, height);\n      }\n\n      i++;\n    }\n\n    return new Point(x, height);\n  }\n\n  renderRepeatAll(canvas, columns) {\n    if (!canvas || !columns || !columns.length) return 0;\n    const totalWidth = this.getColumnsWidth(columns);\n    let x = 0;\n    let y = 0;\n\n    while (x < canvas.width) {\n      const point = this.renderColumns(canvas, columns, x, true);\n      x = point.x;\n      if (point.y > y) y = point.y;\n      if (!point.x) return y;\n    }\n\n    return y;\n  } // private renderRepeatBorders(k:BitmapData, _arg_2:Array): number\n  // {\n  //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\n  //     {\n  //         return 0;\n  //     }\n  //     var _local_3: number;\n  //     var _local_4:BitmapData;\n  //     var _local_5:Array = [];\n  //     var _local_6: number;\n  //     var _local_7: number;\n  //     _local_7 = 1;\n  //     while (_local_7 < (_arg_2.length - 1))\n  //     {\n  //         _local_4 = (_arg_2[_local_7] as BitmapData);\n  //         if (_local_4 != null)\n  //         {\n  //             _local_6 = (_local_6 + _local_4.width);\n  //             _local_5.push(_local_4);\n  //         }\n  //         _local_7++;\n  //     }\n  //     if (this._columns.length == 1)\n  //     {\n  //         _local_4 = (this._columns[0] as BitmapData);\n  //         if (_local_4 != null)\n  //         {\n  //             _local_6 = _local_4.width;\n  //             _local_5.push(_local_4);\n  //         }\n  //     }\n  //     var _local_8:* = ((k.width - _local_6) >> 1);\n  //     var _local_9:Point;\n  //     _local_9 = this.renderColumns(k, _local_5, _local_8, true);\n  //     var _local_10: number = _local_9.x;\n  //     if (_local_9.y > _local_3)\n  //     {\n  //         _local_3 = _local_9.y;\n  //     }\n  //     _local_4 = (_arg_2[0] as BitmapData);\n  //     if (_local_4 != null)\n  //     {\n  //         _local_5 = [_local_4];\n  //         while (_local_8 >= 0)\n  //         {\n  //             _local_9 = this.renderColumns(k, _local_5, _local_8, false);\n  //             _local_8 = _local_9.x;\n  //             if (_local_9.y > _local_3)\n  //             {\n  //                 _local_3 = _local_9.y;\n  //             }\n  //         }\n  //     }\n  //     _local_4 = (_arg_2[(_arg_2.length - 1)] as BitmapData);\n  //     if (_local_4 != null)\n  //     {\n  //         _local_5 = [_local_4];\n  //         while (_local_10 < k.height)\n  //         {\n  //             _local_9 = this.renderColumns(k, _local_5, _local_10, true);\n  //             _local_10 = _local_9.x;\n  //             if (_local_9.y > _local_3)\n  //             {\n  //                 _local_3 = _local_9.y;\n  //             }\n  //         }\n  //     }\n  //     return _local_3;\n  // }\n  // private renderRepeatCenter(k:BitmapData, _arg_2:Array): number\n  // {\n  //     var _local_14: number;\n  //     var _local_15: number;\n  //     var _local_16: number;\n  //     var _local_17: number;\n  //     var _local_18:Array;\n  //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\n  //     {\n  //         return 0;\n  //     }\n  //     var _local_3: number;\n  //     var _local_4:BitmapData;\n  //     var _local_5:Array = [];\n  //     var _local_6:Array = [];\n  //     var _local_7: number;\n  //     var _local_8: number;\n  //     var _local_9: number;\n  //     _local_9 = 0;\n  //     while (_local_9 < (_arg_2.length >> 1))\n  //     {\n  //         _local_4 = (_arg_2[_local_9] as BitmapData);\n  //         if (_local_4 != null)\n  //         {\n  //             _local_7 = (_local_7 + _local_4.width);\n  //             _local_5.push(_local_4);\n  //         }\n  //         _local_9++;\n  //     }\n  //     _local_9 = ((_arg_2.length >> 1) + 1);\n  //     while (_local_9 < _arg_2.length)\n  //     {\n  //         _local_4 = (_arg_2[_local_9] as BitmapData);\n  //         if (_local_4 != null)\n  //         {\n  //             _local_8 = (_local_8 + _local_4.width);\n  //             _local_6.push(_local_4);\n  //         }\n  //         _local_9++;\n  //     }\n  //     var _local_10:Point;\n  //     var _local_11: number;\n  //     var _local_12: number;\n  //     var _local_13: number = k.width;\n  //     if ((_local_7 + _local_8) > k.width)\n  //     {\n  //         _local_11 = ((_local_7 + _local_8) - k.width);\n  //         _local_12 = (_local_12 - (_local_11 >> 1));\n  //         _local_13 = (_local_13 + (_local_11 - (_local_11 >> 1)));\n  //     }\n  //     if (_local_11 == 0)\n  //     {\n  //         _local_4 = (_arg_2[(_arg_2.length >> 1)] as BitmapData);\n  //         if (_local_4 != null)\n  //         {\n  //             _local_14 = _local_4.width;\n  //             _local_15 = (k.width - (_local_7 + _local_8));\n  //             _local_16 = (Math.ceil((_local_15 / _local_14)) * _local_14);\n  //             _local_12 = (_local_7 - ((_local_16 - _local_15) >> 1));\n  //             _local_17 = (_local_12 + _local_16);\n  //             _local_18 = [_local_4];\n  //             while (_local_12 < _local_17)\n  //             {\n  //                 _local_10 = this.renderColumns(k, _local_18, _local_12, true);\n  //                 _local_12 = _local_10.x;\n  //                 if (_local_10.y > _local_3)\n  //                 {\n  //                     _local_3 = _local_10.y;\n  //                 }\n  //             }\n  //         }\n  //     }\n  //     _local_12 = 0;\n  //     _local_10 = this.renderColumns(k, _local_5, _local_12, true);\n  //     if (_local_10.y > _local_3)\n  //     {\n  //         _local_3 = _local_10.y;\n  //     }\n  //     _local_10 = this.renderColumns(k, _local_6, _local_13, false);\n  //     if (_local_10.y > _local_3)\n  //     {\n  //         _local_3 = _local_10.y;\n  //     }\n  //     return _local_3;\n  // }\n  // private renderRepeatFirst(k:BitmapData, _arg_2:Array): number\n  // {\n  //     var _local_7:Array;\n  //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\n  //     {\n  //         return 0;\n  //     }\n  //     var _local_3: number;\n  //     var _local_4:BitmapData;\n  //     var _local_5: number = k.width;\n  //     var _local_6:Point = this.renderColumns(k, _arg_2, _local_5, false);\n  //     _local_5 = _local_6.x;\n  //     if (_local_6.y > _local_3)\n  //     {\n  //         _local_3 = _local_6.y;\n  //     }\n  //     _local_4 = (_arg_2[0] as BitmapData);\n  //     if (_local_4 != null)\n  //     {\n  //         _local_7 = [_local_4];\n  //         while (_local_5 >= 0)\n  //         {\n  //             _local_6 = this.renderColumns(k, _local_7, _local_5, false);\n  //             _local_5 = _local_6.x;\n  //             if (_local_6.y > _local_3)\n  //             {\n  //                 _local_3 = _local_6.y;\n  //             }\n  //         }\n  //     }\n  //     return _local_3;\n  // }\n  // private renderRepeatLast(k:BitmapData, _arg_2:Array): number\n  // {\n  //     var _local_7:Array;\n  //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\n  //     {\n  //         return 0;\n  //     }\n  //     var _local_3: number;\n  //     var _local_4:BitmapData;\n  //     var _local_5: number;\n  //     var _local_6:Point = this.renderColumns(k, _arg_2, _local_5, true);\n  //     _local_5 = _local_6.x;\n  //     if (_local_6.y > _local_3)\n  //     {\n  //         _local_3 = _local_6.y;\n  //     }\n  //     _local_4 = (_arg_2[(_arg_2.length - 1)] as BitmapData);\n  //     if (_local_4 != null)\n  //     {\n  //         _local_7 = [_local_4];\n  //         while (_local_5 < k.width)\n  //         {\n  //             _local_6 = this.renderColumns(k, _local_7, _local_5, true);\n  //             _local_5 = _local_6.x;\n  //             if (_local_6.y > _local_3)\n  //             {\n  //                 _local_3 = _local_6.y;\n  //             }\n  //         }\n  //     }\n  //     return _local_3;\n  // }\n  // private renderRepeatRandom(k:BitmapData, _arg_2:Array): number\n  // {\n  //     var _local_6:Array;\n  //     var _local_7:Point;\n  //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\n  //     {\n  //         return 0;\n  //     }\n  //     var _local_3: number;\n  //     var _local_4:BitmapData;\n  //     var _local_5: number;\n  //     while (_local_5 < k.width)\n  //     {\n  //         _local_4 = (_arg_2[nextRandomColumnIndex(_arg_2.length)] as BitmapData);\n  //         if (_local_4 != null)\n  //         {\n  //             _local_6 = [_local_4];\n  //             _local_7 = this.renderColumns(k, _local_6, _local_5, true);\n  //             _local_5 = _local_7.x;\n  //             if (_local_7.y > _local_3)\n  //             {\n  //                 _local_3 = _local_7.y;\n  //             }\n  //         }\n  //         else\n  //         {\n  //             return _local_3;\n  //         }\n  //     }\n  //     return _local_3;\n  // }\n\n\n  getColumns(width) {\n    if (this._repeatMode === PlaneMaterialCellMatrix.REPEAT_MODE_RANDOM) {\n      const columns = [];\n      let columnIndex = 0;\n\n      while (columnIndex < width) {\n        const column = this._columns[PlaneMaterialCellMatrix.nextRandomColumnIndex(this._columns.length)];\n\n        if (column) {\n          columns.push(column);\n          if (column.width > 1) columnIndex += column.width;else break;\n        }\n      }\n\n      return columns;\n    }\n\n    return this._columns;\n  }\n\n}\nPlaneMaterialCellMatrix.REPEAT_MODE_ALL = 1;\nPlaneMaterialCellMatrix.REPEAT_MODE_BORDERS = 2;\nPlaneMaterialCellMatrix.REPEAT_MODE_CENTER = 3;\nPlaneMaterialCellMatrix.REPEAT_MODE_FIRST = 4;\nPlaneMaterialCellMatrix.REPEAT_MODE_LAST = 5;\nPlaneMaterialCellMatrix.REPEAT_MODE_RANDOM = 6;\nPlaneMaterialCellMatrix.REPEAT_MODE_DEFAULT = PlaneMaterialCellMatrix.REPEAT_MODE_ALL;\nPlaneMaterialCellMatrix.MIN_NORMAL_COORDINATE_VALUE = -1;\nPlaneMaterialCellMatrix.MAX_NORMAL_COORDINATE_VALUE = 1;\nPlaneMaterialCellMatrix.ALIGN_TOP = 1;\nPlaneMaterialCellMatrix.ALIGN_BOTTOM = 2;\nPlaneMaterialCellMatrix.ALIGN_DEFAULT = PlaneMaterialCellMatrix.ALIGN_TOP;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/PlaneMaterialCellMatrix.ts"],"names":["Graphics","Point","Rectangle","TextureUtils","Vector3d","RoomVisualization","Randomizer","PlaneMaterialCellColumn","PlaneMaterialCellMatrix","constructor","totalColumns","repeatMode","align","normalMinX","normalMaxX","normalMinY","normalMaxY","_columns","_repeatMode","_align","_cachedBitmapData","_cachedBitmapNormal","_cachedBitmapHeight","_isCached","_isStatic","_normalMinX","_normalMaxX","_normalMinY","_normalMaxY","_local_8","push","REPEAT_MODE_RANDOM","nextRandomColumnIndex","getValues","isBottomAligned","ALIGN_BOTTOM","isStatic","dispose","destroy","clearCache","x","y","z","length","column","createColumn","index","width","cells","newColumn","oldColumn","render","canvas","height","normal","useTexture","offsetX","offsetY","topAlign","isEqual","copyCachedBitmapOnCanvas","beginFill","drawRect","endFill","assign","graphic","columns","columnIndex","columnBitmapData","maxColumnHeight","REPEAT_MODE_BORDERS","REPEAT_MODE_CENTER","REPEAT_MODE_FIRST","REPEAT_MODE_LAST","renderRepeatAll","_local_5","ALIGN_TOP","texture","generateTexture","beginTextureFill","getColumnsWidth","renderColumns","flag","i","getTextureCache","addTextureCache","totalWidth","point","getColumns","REPEAT_MODE_ALL","REPEAT_MODE_DEFAULT","MIN_NORMAL_COORDINATE_VALUE","MAX_NORMAL_COORDINATE_VALUE","ALIGN_DEFAULT"],"mappings":"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","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { Point, Rectangle } from '@pixi/math';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { TextureUtils } from '../../../../../../../room/utils/TextureUtils';\r\nimport { Vector3d } from '../../../../../../../room/utils/Vector3d';\r\nimport { RoomVisualization } from '../../RoomVisualization';\r\nimport { Randomizer } from '../../utils/Randomizer';\r\nimport { PlaneMaterialCell } from './PlaneMaterialCell';\r\nimport { PlaneMaterialCellColumn } from './PlaneMaterialCellColumn';\r\n\r\nexport class PlaneMaterialCellMatrix\r\n{\r\n    public static REPEAT_MODE_ALL: number = 1;\r\n    public static REPEAT_MODE_BORDERS: number = 2;\r\n    public static REPEAT_MODE_CENTER: number = 3;\r\n    public static REPEAT_MODE_FIRST: number = 4;\r\n    public static REPEAT_MODE_LAST: number = 5;\r\n    public static REPEAT_MODE_RANDOM: number = 6;\r\n    public static REPEAT_MODE_DEFAULT: number = PlaneMaterialCellMatrix.REPEAT_MODE_ALL;//1\r\n    public static MIN_NORMAL_COORDINATE_VALUE: number = -1;\r\n    public static MAX_NORMAL_COORDINATE_VALUE: number = 1;\r\n    public static ALIGN_TOP: number = 1;\r\n    public static ALIGN_BOTTOM: number = 2;\r\n    public static ALIGN_DEFAULT: number = PlaneMaterialCellMatrix.ALIGN_TOP;//1\r\n\r\n    private _columns: PlaneMaterialCellColumn[];\r\n    private _repeatMode: number = 1;\r\n    private _align: number = 1;\r\n    private _cachedBitmapData: Graphics;\r\n    private _cachedBitmapNormal: Vector3d = null;\r\n    private _cachedBitmapHeight: number = 0;\r\n    private _isCached: boolean = false;\r\n    private _isStatic: boolean = true;\r\n    private _normalMinX: number = -1;\r\n    private _normalMaxX: number = 1;\r\n    private _normalMinY: number = -1;\r\n    private _normalMaxY: number = 1;\r\n\r\n    constructor(totalColumns: number, repeatMode: number=1, align: number=1, normalMinX: number=-1, normalMaxX: number=1, normalMinY: number=-1, normalMaxY: number=1)\r\n    {\r\n        this._columns = [];\r\n        if(totalColumns < 1)\r\n        {\r\n            totalColumns = 1;\r\n        }\r\n        let _local_8 = 0;\r\n        while(_local_8 < totalColumns)\r\n        {\r\n            this._columns.push(null);\r\n            _local_8++;\r\n        }\r\n        this._repeatMode = repeatMode;\r\n        this._align = align;\r\n        this._normalMinX = normalMinX;\r\n        this._normalMaxX = normalMaxX;\r\n        this._normalMinY = normalMinY;\r\n        this._normalMaxY = normalMaxY;\r\n        if(this._repeatMode == PlaneMaterialCellMatrix.REPEAT_MODE_RANDOM)\r\n        {\r\n            this._isStatic = false;\r\n        }\r\n    }\r\n\r\n    private static nextRandomColumnIndex(totalColumns: number): number\r\n    {\r\n        return ((Randomizer.getValues(1, 0, (totalColumns * 17631))[0]) % totalColumns);\r\n    }\r\n\r\n    public get normalMinX(): number\r\n    {\r\n        return this._normalMinX;\r\n    }\r\n\r\n    public get normalMaxX(): number\r\n    {\r\n        return this._normalMaxX;\r\n    }\r\n\r\n    public get normalMinY(): number\r\n    {\r\n        return this._normalMinY;\r\n    }\r\n\r\n    public get normalMaxY(): number\r\n    {\r\n        return this._normalMaxY;\r\n    }\r\n\r\n    public isBottomAligned(): boolean\r\n    {\r\n        return this._align === PlaneMaterialCellMatrix.ALIGN_BOTTOM;\r\n    }\r\n\r\n    public get isStatic(): boolean\r\n    {\r\n        return this._isStatic;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._cachedBitmapData)\r\n        {\r\n            this._cachedBitmapData.destroy();\r\n\r\n            this._cachedBitmapData = null;\r\n        }\r\n\r\n        if(this._cachedBitmapNormal) this._cachedBitmapNormal = null;\r\n    }\r\n\r\n    public clearCache(): void\r\n    {\r\n        if(!this._isCached) return;\r\n\r\n        if(this._cachedBitmapData)\r\n        {\r\n            this._cachedBitmapData.destroy();\r\n\r\n            this._cachedBitmapData = null;\r\n        }\r\n\r\n        if(this._cachedBitmapNormal)\r\n        {\r\n            this._cachedBitmapNormal.x = 0;\r\n            this._cachedBitmapNormal.y = 0;\r\n            this._cachedBitmapNormal.z = 0;\r\n        }\r\n\r\n        if(this._columns && this._columns.length)\r\n        {\r\n            for(const column of this._columns)\r\n            {\r\n                if(!column) continue;\r\n\r\n                column.clearCache();\r\n            }\r\n        }\r\n\r\n        this._isCached = false;\r\n    }\r\n\r\n    public createColumn(index: number, width: number, cells: PlaneMaterialCell[], repeatMode: number=1): boolean\r\n    {\r\n        if((index < 0) || (index >= this._columns.length)) return false;\r\n\r\n        const newColumn = new PlaneMaterialCellColumn(width, cells, repeatMode);\r\n        const oldColumn = this._columns[index];\r\n\r\n        if(oldColumn) oldColumn.dispose();\r\n\r\n        this._columns[index] = newColumn;\r\n\r\n        if(newColumn && !newColumn.isStatic) this._isStatic = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    public render(canvas: Graphics, width: number, height: number, normal: IVector3D, useTexture: boolean, offsetX: number, offsetY: number, topAlign: boolean): Graphics\r\n    {\r\n        if(width < 1) width = 1;\r\n\r\n        if(height < 1) height = 1;\r\n\r\n        if(!canvas || (canvas.width !== width) || (canvas.height !== height)) canvas = null;\r\n\r\n        if(!this._cachedBitmapNormal) this._cachedBitmapNormal = new Vector3d();\r\n\r\n        if(this.isStatic)\r\n        {\r\n            if(this._cachedBitmapData)\r\n            {\r\n                if(((this._cachedBitmapData.width === width) && (this._cachedBitmapData.height == height)) && Vector3d.isEqual(this._cachedBitmapNormal, normal))\r\n                {\r\n                    if(canvas)\r\n                    {\r\n                        this.copyCachedBitmapOnCanvas(canvas, this._cachedBitmapHeight, offsetY, topAlign);\r\n\r\n                        return canvas;\r\n                    }\r\n\r\n                    return this._cachedBitmapData;\r\n                }\r\n\r\n                this._cachedBitmapData.destroy();\r\n\r\n                this._cachedBitmapData = null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(this._cachedBitmapData)\r\n            {\r\n                if((this._cachedBitmapData.width === width) && (this._cachedBitmapData.height === height))\r\n                {\r\n                    this._cachedBitmapData\r\n                        .beginFill(0xFFFFFF)\r\n                        .drawRect(0, 0, width, height)\r\n                        .endFill();\r\n                }\r\n                else\r\n                {\r\n                    this._cachedBitmapData.destroy();\r\n\r\n                    this._cachedBitmapData = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isCached = true;\r\n        this._cachedBitmapNormal.assign(normal);\r\n\r\n        if(!useTexture)\r\n        {\r\n            this._cachedBitmapHeight = height;\r\n\r\n            if(!this._cachedBitmapData)\r\n            {\r\n                const graphic = new Graphics()\r\n                    .beginFill(0xFFFFFF)\r\n                    .drawRect(0, 0, width, height)\r\n                    .endFill();\r\n\r\n                this._cachedBitmapData = graphic;\r\n            }\r\n            else\r\n            {\r\n                this._cachedBitmapData\r\n                    .beginFill(0xFFFFFF)\r\n                    .drawRect(0, 0, width, height)\r\n                    .endFill();\r\n            }\r\n\r\n            if(canvas)\r\n            {\r\n                this.copyCachedBitmapOnCanvas(canvas, height, offsetY, topAlign);\r\n\r\n                return canvas;\r\n            }\r\n\r\n            return this._cachedBitmapData;\r\n        }\r\n\r\n        if(!this._cachedBitmapData)\r\n        {\r\n            this._cachedBitmapHeight = height;\r\n\r\n            const graphic = new Graphics()\r\n                .beginFill(0xFFFFFF)\r\n                .drawRect(0, 0, width, height)\r\n                .endFill();\r\n\r\n            this._cachedBitmapData = graphic;\r\n        }\r\n\r\n        const columns: Graphics[] = [];\r\n\r\n        let columnIndex = 0;\r\n\r\n        while(columnIndex < this._columns.length)\r\n        {\r\n            const column = this._columns[columnIndex];\r\n\r\n            if(column)\r\n            {\r\n                const columnBitmapData = column.render(height, normal, offsetX, offsetY);\r\n\r\n                if(columnBitmapData) columns.push(columnBitmapData);\r\n            }\r\n\r\n            columnIndex++;\r\n        }\r\n\r\n        if(!columns.length)\r\n        {\r\n            if(canvas) return canvas;\r\n\r\n            return this._cachedBitmapData;\r\n        }\r\n\r\n        let maxColumnHeight = 0;\r\n\r\n        switch(this._repeatMode)\r\n        {\r\n            case PlaneMaterialCellMatrix.REPEAT_MODE_BORDERS:\r\n            //     maxColumnHeight = this.renderRepeatBorders(this._cachedBitmapData, columns);\r\n                break;\r\n            case PlaneMaterialCellMatrix.REPEAT_MODE_CENTER:\r\n            //     maxColumnHeight = this.renderRepeatCenter(this._cachedBitmapData, columns);\r\n                break;\r\n            case PlaneMaterialCellMatrix.REPEAT_MODE_FIRST:\r\n            //     maxColumnHeight = this.renderRepeatFirst(this._cachedBitmapData, columns);\r\n                break;\r\n            case PlaneMaterialCellMatrix.REPEAT_MODE_LAST:\r\n            //     maxColumnHeight = this.renderRepeatLast(this._cachedBitmapData, columns);\r\n                break;\r\n            case PlaneMaterialCellMatrix.REPEAT_MODE_RANDOM:\r\n            //     maxColumnHeight = this.renderRepeatRandom(this._cachedBitmapData, columns);\r\n                break;\r\n            default:\r\n                maxColumnHeight = this.renderRepeatAll(this._cachedBitmapData, columns);\r\n                break;\r\n        }\r\n\r\n        this._cachedBitmapHeight = maxColumnHeight;\r\n\r\n        if(canvas)\r\n        {\r\n            this.copyCachedBitmapOnCanvas(canvas, maxColumnHeight, offsetY, topAlign);\r\n\r\n            return canvas;\r\n        }\r\n\r\n        return this._cachedBitmapData;\r\n    }\r\n\r\n    private copyCachedBitmapOnCanvas(canvas: Graphics, height: number, offsetY: number, topAlign: boolean): void\r\n    {\r\n        if(!canvas || !this._cachedBitmapData || (canvas === this._cachedBitmapData)) return;\r\n\r\n        if(!topAlign) offsetY = ((canvas.height - height) - offsetY);\r\n\r\n        let _local_5: Rectangle;\r\n\r\n        if(this._align == PlaneMaterialCellMatrix.ALIGN_TOP)\r\n        {\r\n            _local_5 = new Rectangle(0, 0, this._cachedBitmapData.width, this._cachedBitmapHeight);\r\n        }\r\n        else\r\n        {\r\n            _local_5 = new Rectangle(0, (this._cachedBitmapData.height - this._cachedBitmapHeight), this._cachedBitmapData.width, this._cachedBitmapHeight);\r\n        }\r\n\r\n        const texture = TextureUtils.generateTexture(this._cachedBitmapData, _local_5);\r\n\r\n        if(texture)\r\n        {\r\n            canvas\r\n                .beginTextureFill({ texture })\r\n                .drawRect(0, offsetY, _local_5.width, _local_5.height)\r\n                .endFill();\r\n        }\r\n    }\r\n\r\n    private getColumnsWidth(columns: Graphics[]): number\r\n    {\r\n        if(!columns || !columns.length) return 0;\r\n\r\n        let width = 0;\r\n\r\n        for(const graphic of columns)\r\n        {\r\n            if(!graphic) continue;\r\n\r\n            width += graphic.width;\r\n        }\r\n\r\n        return width;\r\n    }\r\n\r\n    private renderColumns(canvas: Graphics, columns: Graphics[], x: number, flag: boolean): Point\r\n    {\r\n        if(!canvas || !columns || !columns.length) return new Point(x, 0);\r\n\r\n        let height = 0;\r\n        let i = 0;\r\n\r\n        while(i < columns.length)\r\n        {\r\n            const column = flag ? columns[i] : columns[((columns.length - 1) - i)];\r\n\r\n            if(column)\r\n            {\r\n                if(!flag) x = (x - column.width);\r\n\r\n                let y = 0;\r\n\r\n                if(this._align == PlaneMaterialCellMatrix.ALIGN_BOTTOM) y = (canvas.height - column.height);\r\n\r\n                let texture = RoomVisualization.getTextureCache(column);\r\n\r\n                if(!texture)\r\n                {\r\n                    texture = TextureUtils.generateTexture(column, new Rectangle(0, 0, column.width, column.height));\r\n\r\n                    RoomVisualization.addTextureCache(column, texture);\r\n                }\r\n\r\n                canvas.beginTextureFill({ texture });\r\n                canvas.drawRect(x, y, texture.width, texture.height);\r\n                canvas.endFill();\r\n\r\n                if(column.height > height) height = column.height;\r\n\r\n                if(flag) x = (x + column.width);\r\n\r\n                if((flag && (x >= canvas.width)) || (!flag && (x <= 0))) return new Point(x, height);\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return new Point(x, height);\r\n    }\r\n\r\n    private renderRepeatAll(canvas: Graphics, columns: Graphics[]): number\r\n    {\r\n        if(!canvas || !columns || !columns.length) return 0;\r\n\r\n        const totalWidth: number = this.getColumnsWidth(columns);\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        while(x < canvas.width)\r\n        {\r\n            const point = this.renderColumns(canvas, columns, x, true);\r\n\r\n            x = point.x;\r\n\r\n            if(point.y > y) y = point.y;\r\n\r\n            if(!point.x) return y;\r\n        }\r\n\r\n        return y;\r\n    }\r\n\r\n    // private renderRepeatBorders(k:BitmapData, _arg_2:Array): number\r\n    // {\r\n    //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\r\n    //     {\r\n    //         return 0;\r\n    //     }\r\n    //     var _local_3: number;\r\n    //     var _local_4:BitmapData;\r\n    //     var _local_5:Array = [];\r\n    //     var _local_6: number;\r\n    //     var _local_7: number;\r\n    //     _local_7 = 1;\r\n    //     while (_local_7 < (_arg_2.length - 1))\r\n    //     {\r\n    //         _local_4 = (_arg_2[_local_7] as BitmapData);\r\n    //         if (_local_4 != null)\r\n    //         {\r\n    //             _local_6 = (_local_6 + _local_4.width);\r\n    //             _local_5.push(_local_4);\r\n    //         }\r\n    //         _local_7++;\r\n    //     }\r\n    //     if (this._columns.length == 1)\r\n    //     {\r\n    //         _local_4 = (this._columns[0] as BitmapData);\r\n    //         if (_local_4 != null)\r\n    //         {\r\n    //             _local_6 = _local_4.width;\r\n    //             _local_5.push(_local_4);\r\n    //         }\r\n    //     }\r\n    //     var _local_8:* = ((k.width - _local_6) >> 1);\r\n    //     var _local_9:Point;\r\n    //     _local_9 = this.renderColumns(k, _local_5, _local_8, true);\r\n    //     var _local_10: number = _local_9.x;\r\n    //     if (_local_9.y > _local_3)\r\n    //     {\r\n    //         _local_3 = _local_9.y;\r\n    //     }\r\n    //     _local_4 = (_arg_2[0] as BitmapData);\r\n    //     if (_local_4 != null)\r\n    //     {\r\n    //         _local_5 = [_local_4];\r\n    //         while (_local_8 >= 0)\r\n    //         {\r\n    //             _local_9 = this.renderColumns(k, _local_5, _local_8, false);\r\n    //             _local_8 = _local_9.x;\r\n    //             if (_local_9.y > _local_3)\r\n    //             {\r\n    //                 _local_3 = _local_9.y;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     _local_4 = (_arg_2[(_arg_2.length - 1)] as BitmapData);\r\n    //     if (_local_4 != null)\r\n    //     {\r\n    //         _local_5 = [_local_4];\r\n    //         while (_local_10 < k.height)\r\n    //         {\r\n    //             _local_9 = this.renderColumns(k, _local_5, _local_10, true);\r\n    //             _local_10 = _local_9.x;\r\n    //             if (_local_9.y > _local_3)\r\n    //             {\r\n    //                 _local_3 = _local_9.y;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return _local_3;\r\n    // }\r\n\r\n    // private renderRepeatCenter(k:BitmapData, _arg_2:Array): number\r\n    // {\r\n    //     var _local_14: number;\r\n    //     var _local_15: number;\r\n    //     var _local_16: number;\r\n    //     var _local_17: number;\r\n    //     var _local_18:Array;\r\n    //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\r\n    //     {\r\n    //         return 0;\r\n    //     }\r\n    //     var _local_3: number;\r\n    //     var _local_4:BitmapData;\r\n    //     var _local_5:Array = [];\r\n    //     var _local_6:Array = [];\r\n    //     var _local_7: number;\r\n    //     var _local_8: number;\r\n    //     var _local_9: number;\r\n    //     _local_9 = 0;\r\n    //     while (_local_9 < (_arg_2.length >> 1))\r\n    //     {\r\n    //         _local_4 = (_arg_2[_local_9] as BitmapData);\r\n    //         if (_local_4 != null)\r\n    //         {\r\n    //             _local_7 = (_local_7 + _local_4.width);\r\n    //             _local_5.push(_local_4);\r\n    //         }\r\n    //         _local_9++;\r\n    //     }\r\n    //     _local_9 = ((_arg_2.length >> 1) + 1);\r\n    //     while (_local_9 < _arg_2.length)\r\n    //     {\r\n    //         _local_4 = (_arg_2[_local_9] as BitmapData);\r\n    //         if (_local_4 != null)\r\n    //         {\r\n    //             _local_8 = (_local_8 + _local_4.width);\r\n    //             _local_6.push(_local_4);\r\n    //         }\r\n    //         _local_9++;\r\n    //     }\r\n    //     var _local_10:Point;\r\n    //     var _local_11: number;\r\n    //     var _local_12: number;\r\n    //     var _local_13: number = k.width;\r\n    //     if ((_local_7 + _local_8) > k.width)\r\n    //     {\r\n    //         _local_11 = ((_local_7 + _local_8) - k.width);\r\n    //         _local_12 = (_local_12 - (_local_11 >> 1));\r\n    //         _local_13 = (_local_13 + (_local_11 - (_local_11 >> 1)));\r\n    //     }\r\n    //     if (_local_11 == 0)\r\n    //     {\r\n    //         _local_4 = (_arg_2[(_arg_2.length >> 1)] as BitmapData);\r\n    //         if (_local_4 != null)\r\n    //         {\r\n    //             _local_14 = _local_4.width;\r\n    //             _local_15 = (k.width - (_local_7 + _local_8));\r\n    //             _local_16 = (Math.ceil((_local_15 / _local_14)) * _local_14);\r\n    //             _local_12 = (_local_7 - ((_local_16 - _local_15) >> 1));\r\n    //             _local_17 = (_local_12 + _local_16);\r\n    //             _local_18 = [_local_4];\r\n    //             while (_local_12 < _local_17)\r\n    //             {\r\n    //                 _local_10 = this.renderColumns(k, _local_18, _local_12, true);\r\n    //                 _local_12 = _local_10.x;\r\n    //                 if (_local_10.y > _local_3)\r\n    //                 {\r\n    //                     _local_3 = _local_10.y;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     _local_12 = 0;\r\n    //     _local_10 = this.renderColumns(k, _local_5, _local_12, true);\r\n    //     if (_local_10.y > _local_3)\r\n    //     {\r\n    //         _local_3 = _local_10.y;\r\n    //     }\r\n    //     _local_10 = this.renderColumns(k, _local_6, _local_13, false);\r\n    //     if (_local_10.y > _local_3)\r\n    //     {\r\n    //         _local_3 = _local_10.y;\r\n    //     }\r\n    //     return _local_3;\r\n    // }\r\n\r\n    // private renderRepeatFirst(k:BitmapData, _arg_2:Array): number\r\n    // {\r\n    //     var _local_7:Array;\r\n    //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\r\n    //     {\r\n    //         return 0;\r\n    //     }\r\n    //     var _local_3: number;\r\n    //     var _local_4:BitmapData;\r\n    //     var _local_5: number = k.width;\r\n    //     var _local_6:Point = this.renderColumns(k, _arg_2, _local_5, false);\r\n    //     _local_5 = _local_6.x;\r\n    //     if (_local_6.y > _local_3)\r\n    //     {\r\n    //         _local_3 = _local_6.y;\r\n    //     }\r\n    //     _local_4 = (_arg_2[0] as BitmapData);\r\n    //     if (_local_4 != null)\r\n    //     {\r\n    //         _local_7 = [_local_4];\r\n    //         while (_local_5 >= 0)\r\n    //         {\r\n    //             _local_6 = this.renderColumns(k, _local_7, _local_5, false);\r\n    //             _local_5 = _local_6.x;\r\n    //             if (_local_6.y > _local_3)\r\n    //             {\r\n    //                 _local_3 = _local_6.y;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return _local_3;\r\n    // }\r\n\r\n    // private renderRepeatLast(k:BitmapData, _arg_2:Array): number\r\n    // {\r\n    //     var _local_7:Array;\r\n    //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\r\n    //     {\r\n    //         return 0;\r\n    //     }\r\n    //     var _local_3: number;\r\n    //     var _local_4:BitmapData;\r\n    //     var _local_5: number;\r\n    //     var _local_6:Point = this.renderColumns(k, _arg_2, _local_5, true);\r\n    //     _local_5 = _local_6.x;\r\n    //     if (_local_6.y > _local_3)\r\n    //     {\r\n    //         _local_3 = _local_6.y;\r\n    //     }\r\n    //     _local_4 = (_arg_2[(_arg_2.length - 1)] as BitmapData);\r\n    //     if (_local_4 != null)\r\n    //     {\r\n    //         _local_7 = [_local_4];\r\n    //         while (_local_5 < k.width)\r\n    //         {\r\n    //             _local_6 = this.renderColumns(k, _local_7, _local_5, true);\r\n    //             _local_5 = _local_6.x;\r\n    //             if (_local_6.y > _local_3)\r\n    //             {\r\n    //                 _local_3 = _local_6.y;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return _local_3;\r\n    // }\r\n\r\n    // private renderRepeatRandom(k:BitmapData, _arg_2:Array): number\r\n    // {\r\n    //     var _local_6:Array;\r\n    //     var _local_7:Point;\r\n    //     if ((((_arg_2 == null) || (_arg_2.length == 0)) || (k == null)))\r\n    //     {\r\n    //         return 0;\r\n    //     }\r\n    //     var _local_3: number;\r\n    //     var _local_4:BitmapData;\r\n    //     var _local_5: number;\r\n    //     while (_local_5 < k.width)\r\n    //     {\r\n    //         _local_4 = (_arg_2[nextRandomColumnIndex(_arg_2.length)] as BitmapData);\r\n    //         if (_local_4 != null)\r\n    //         {\r\n    //             _local_6 = [_local_4];\r\n    //             _local_7 = this.renderColumns(k, _local_6, _local_5, true);\r\n    //             _local_5 = _local_7.x;\r\n    //             if (_local_7.y > _local_3)\r\n    //             {\r\n    //                 _local_3 = _local_7.y;\r\n    //             }\r\n    //         }\r\n    //         else\r\n    //         {\r\n    //             return _local_3;\r\n    //         }\r\n    //     }\r\n    //     return _local_3;\r\n    // }\r\n\r\n    public getColumns(width: number): PlaneMaterialCellColumn[]\r\n    {\r\n        if(this._repeatMode === PlaneMaterialCellMatrix.REPEAT_MODE_RANDOM)\r\n        {\r\n            const columns: PlaneMaterialCellColumn[] = [];\r\n\r\n            let columnIndex = 0;\r\n\r\n            while(columnIndex < width)\r\n            {\r\n                const column = this._columns[PlaneMaterialCellMatrix.nextRandomColumnIndex(this._columns.length)];\r\n\r\n                if(column)\r\n                {\r\n                    columns.push(column);\r\n\r\n                    if(column.width > 1) columnIndex += column.width;\r\n                    else break;\r\n                }\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        return this._columns;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}