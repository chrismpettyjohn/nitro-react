{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/navigator/views/room-settings/NavigatorRoomSettingsView.tsx\",\n    _s = $RefreshSig$();\n\nimport { RoomBannedUsersComposer, RoomDataParser, RoomSettingsEvent, SaveRoomSettingsComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useState } from 'react';\nimport { LocalizeText, SendMessageComposer } from '../../../../api';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../../../common';\nimport { UseMessageEventHook } from '../../../../hooks';\nimport { NavigatorRoomSettingsAccessTabView } from './NavigatorRoomSettingsAccessTabView';\nimport { NavigatorRoomSettingsBasicTabView } from './NavigatorRoomSettingsBasicTabView';\nimport { NavigatorRoomSettingsModTabView } from './NavigatorRoomSettingsModTabView';\nimport { NavigatorRoomSettingsRightsTabView } from './NavigatorRoomSettingsRightsTabView';\nimport { NavigatorRoomSettingsVipChatTabView } from './NavigatorRoomSettingsVipChatTabView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TABS = ['navigator.roomsettings.tab.1', 'navigator.roomsettings.tab.2', 'navigator.roomsettings.tab.3', 'navigator.roomsettings.tab.4', 'navigator.roomsettings.tab.5'];\nexport const NavigatorRoomSettingsView = props => {\n  _s();\n\n  const [roomData, setRoomData] = useState(null);\n  const [currentTab, setCurrentTab] = useState(TABS[0]);\n  const onRoomSettingsEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    setRoomData({\n      roomId: parser.roomId,\n      roomName: parser.name,\n      roomDescription: parser.description,\n      categoryId: parser.categoryId,\n      userCount: parser.userCount,\n      tags: parser.tags,\n      tradeState: parser.tradeMode,\n      allowWalkthrough: parser.allowWalkthrough,\n      lockState: parser.state,\n      password: null,\n      allowPets: parser.allowPets,\n      allowPetsEat: parser.allowPetsEat,\n      hideWalls: parser.hideWalls,\n      wallThickness: parser.thicknessWall,\n      floorThickness: parser.thicknessFloor,\n      chatSettings: {\n        mode: parser.chatSettings.mode,\n        weight: parser.chatSettings.weight,\n        speed: parser.chatSettings.speed,\n        distance: parser.chatSettings.distance,\n        protection: parser.chatSettings.protection\n      },\n      moderationSettings: {\n        allowMute: parser.moderationSettings.allowMute,\n        allowKick: parser.moderationSettings.allowKick,\n        allowBan: parser.moderationSettings.allowBan\n      }\n    });\n    SendMessageComposer(new RoomBannedUsersComposer(parser.roomId));\n  }, []);\n  UseMessageEventHook(RoomSettingsEvent, onRoomSettingsEvent);\n\n  const close = () => {\n    setRoomData(null);\n    setCurrentTab(TABS[0]);\n  };\n\n  const handleChange = (field, value) => {\n    setRoomData(prevValue => {\n      const newValue = { ...prevValue\n      };\n\n      switch (field) {\n        case 'name':\n          newValue.roomName = String(value);\n          break;\n\n        case 'description':\n          newValue.roomDescription = String(value);\n          break;\n\n        case 'category':\n          newValue.categoryId = Number(value);\n          break;\n\n        case 'max_visitors':\n          newValue.userCount = Number(value);\n          break;\n\n        case 'trade_state':\n          newValue.tradeState = Number(value);\n          break;\n\n        case 'allow_walkthrough':\n          newValue.allowWalkthrough = Boolean(value);\n          break;\n\n        case 'allow_pets':\n          newValue.allowPets = Boolean(value);\n          break;\n\n        case 'allow_pets_eat':\n          newValue.allowPetsEat = Boolean(value);\n          break;\n\n        case 'hide_walls':\n          newValue.hideWalls = Boolean(value);\n          break;\n\n        case 'wall_thickness':\n          newValue.wallThickness = Number(value);\n          break;\n\n        case 'floor_thickness':\n          newValue.floorThickness = Number(value);\n          break;\n\n        case 'lock_state':\n          newValue.lockState = Number(value);\n          break;\n\n        case 'password':\n          newValue.lockState = RoomDataParser.PASSWORD_STATE;\n          newValue.password = String(value);\n          break;\n\n        case 'moderation_mute':\n          newValue.moderationSettings.allowMute = Number(value);\n          break;\n\n        case 'moderation_kick':\n          newValue.moderationSettings.allowKick = Number(value);\n          break;\n\n        case 'moderation_ban':\n          newValue.moderationSettings.allowBan = Number(value);\n          break;\n\n        case 'bubble_mode':\n          newValue.chatSettings.mode = Number(value);\n          break;\n\n        case 'chat_weight':\n          newValue.chatSettings.weight = Number(value);\n          break;\n\n        case 'bubble_speed':\n          newValue.chatSettings.speed = Number(value);\n          break;\n\n        case 'flood_protection':\n          newValue.chatSettings.protection = Number(value);\n          break;\n\n        case 'chat_distance':\n          newValue.chatSettings.distance = Number(value);\n          break;\n      }\n\n      SendMessageComposer(new SaveRoomSettingsComposer(newValue.roomId, newValue.roomName, newValue.roomDescription, newValue.lockState, newValue.password, newValue.userCount, newValue.categoryId, newValue.tags.length, newValue.tags, newValue.tradeState, newValue.allowPets, newValue.allowPetsEat, newValue.allowWalkthrough, newValue.hideWalls, newValue.wallThickness, newValue.floorThickness, newValue.moderationSettings.allowMute, newValue.moderationSettings.allowKick, newValue.moderationSettings.allowBan, newValue.chatSettings.mode, newValue.chatSettings.weight, newValue.chatSettings.speed, newValue.chatSettings.distance, newValue.chatSettings.protection));\n      return newValue;\n    });\n  };\n\n  if (!roomData) return null;\n  return /*#__PURE__*/_jsxDEV(NitroCardView, {\n    uniqueKey: \"nitro-room-settings\",\n    className: \"nitro-room-settings\",\n    children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n      headerText: LocalizeText('navigator.roomsettings'),\n      onCloseClick: close\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardTabsView, {\n      children: TABS.map(tab => {\n        return /*#__PURE__*/_jsxDEV(NitroCardTabsItemView, {\n          isActive: currentTab === tab,\n          onClick: event => setCurrentTab(tab),\n          children: LocalizeText(tab)\n        }, tab, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n      children: [currentTab === TABS[0] && /*#__PURE__*/_jsxDEV(NavigatorRoomSettingsBasicTabView, {\n        roomData: roomData,\n        handleChange: handleChange,\n        close: close\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this), currentTab === TABS[1] && /*#__PURE__*/_jsxDEV(NavigatorRoomSettingsAccessTabView, {\n        roomData: roomData,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), currentTab === TABS[2] && /*#__PURE__*/_jsxDEV(NavigatorRoomSettingsRightsTabView, {\n        roomData: roomData,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this), currentTab === TABS[3] && /*#__PURE__*/_jsxDEV(NavigatorRoomSettingsVipChatTabView, {\n        roomData: roomData,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }, this), currentTab === TABS[4] && /*#__PURE__*/_jsxDEV(NavigatorRoomSettingsModTabView, {\n        roomData: roomData,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NavigatorRoomSettingsView, \"MCqs5mMMXwTp1qOByXbcxGBjbpY=\");\n\n_c = NavigatorRoomSettingsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavigatorRoomSettingsView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/navigator/views/room-settings/NavigatorRoomSettingsView.tsx"],"names":["RoomBannedUsersComposer","RoomDataParser","RoomSettingsEvent","SaveRoomSettingsComposer","useCallback","useState","LocalizeText","SendMessageComposer","NitroCardContentView","NitroCardHeaderView","NitroCardTabsItemView","NitroCardTabsView","NitroCardView","UseMessageEventHook","NavigatorRoomSettingsAccessTabView","NavigatorRoomSettingsBasicTabView","NavigatorRoomSettingsModTabView","NavigatorRoomSettingsRightsTabView","NavigatorRoomSettingsVipChatTabView","TABS","NavigatorRoomSettingsView","props","roomData","setRoomData","currentTab","setCurrentTab","onRoomSettingsEvent","event","parser","getParser","roomId","roomName","name","roomDescription","description","categoryId","userCount","tags","tradeState","tradeMode","allowWalkthrough","lockState","state","password","allowPets","allowPetsEat","hideWalls","wallThickness","thicknessWall","floorThickness","thicknessFloor","chatSettings","mode","weight","speed","distance","protection","moderationSettings","allowMute","allowKick","allowBan","close","handleChange","field","value","prevValue","newValue","String","Number","Boolean","PASSWORD_STATE","length","map","tab"],"mappings":"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","sourcesContent":["import { RoomBannedUsersComposer, RoomDataParser, RoomSettingsEvent, SaveRoomSettingsComposer } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useState } from 'react';\nimport { IRoomData, LocalizeText, SendMessageComposer } from '../../../../api';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../../../common';\nimport { UseMessageEventHook } from '../../../../hooks';\nimport { NavigatorRoomSettingsAccessTabView } from './NavigatorRoomSettingsAccessTabView';\nimport { NavigatorRoomSettingsBasicTabView } from './NavigatorRoomSettingsBasicTabView';\nimport { NavigatorRoomSettingsModTabView } from './NavigatorRoomSettingsModTabView';\nimport { NavigatorRoomSettingsRightsTabView } from './NavigatorRoomSettingsRightsTabView';\nimport { NavigatorRoomSettingsVipChatTabView } from './NavigatorRoomSettingsVipChatTabView';\n\nconst TABS: string[] = [\n    'navigator.roomsettings.tab.1',\n    'navigator.roomsettings.tab.2',\n    'navigator.roomsettings.tab.3',\n    'navigator.roomsettings.tab.4',\n    'navigator.roomsettings.tab.5'\n];\n\nexport const NavigatorRoomSettingsView: FC<{}> = props =>\n{\n    const [ roomData, setRoomData ] = useState<IRoomData>(null);\n    const [ currentTab, setCurrentTab ] = useState(TABS[0]);\n\n    const onRoomSettingsEvent = useCallback((event: RoomSettingsEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        setRoomData({\n            roomId: parser.roomId,\n            roomName: parser.name,\n            roomDescription: parser.description,\n            categoryId: parser.categoryId,\n            userCount: parser.userCount,\n            tags: parser.tags,\n            tradeState: parser.tradeMode,\n            allowWalkthrough: parser.allowWalkthrough,\n            lockState: parser.state,\n            password: null,\n            allowPets: parser.allowPets,\n            allowPetsEat: parser.allowPetsEat,\n            hideWalls: parser.hideWalls,\n            wallThickness: parser.thicknessWall,\n            floorThickness: parser.thicknessFloor,\n            chatSettings: {\n                mode: parser.chatSettings.mode,\n                weight: parser.chatSettings.weight,\n                speed: parser.chatSettings.speed,\n                distance: parser.chatSettings.distance,\n                protection: parser.chatSettings.protection\n            },\n            moderationSettings: {\n                allowMute: parser.moderationSettings.allowMute,\n                allowKick: parser.moderationSettings.allowKick,\n                allowBan: parser.moderationSettings.allowBan\n            }\n        });\n\n        SendMessageComposer(new RoomBannedUsersComposer(parser.roomId));\n    }, []);\n\n    UseMessageEventHook(RoomSettingsEvent, onRoomSettingsEvent);\n\n    const close = () =>\n    {\n        setRoomData(null);\n        setCurrentTab(TABS[0]);\n    }\n\n    const handleChange = (field: string, value: string | number | boolean) =>\n    {\n        setRoomData(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            switch(field)\n            {\n                case 'name':\n                    newValue.roomName = String(value);\n                    break;\n                case 'description':\n                    newValue.roomDescription = String(value);\n                    break;\n                case 'category':\n                    newValue.categoryId = Number(value);\n                    break;\n                case 'max_visitors': \n                    newValue.userCount = Number(value);\n                    break;\n                case 'trade_state':\n                    newValue.tradeState = Number(value);\n                    break;\n                case 'allow_walkthrough':\n                    newValue.allowWalkthrough = Boolean(value);\n                    break;\n                case 'allow_pets':\n                    newValue.allowPets = Boolean(value);\n                    break;\n                case 'allow_pets_eat':\n                    newValue.allowPetsEat = Boolean(value);\n                    break;\n                case 'hide_walls':\n                    newValue.hideWalls = Boolean(value);\n                    break;\n                case 'wall_thickness':\n                    newValue.wallThickness = Number(value);\n                    break;\n                case 'floor_thickness':\n                    newValue.floorThickness = Number(value);\n                    break;\n                case 'lock_state':\n                    newValue.lockState = Number(value);\n                    break;\n                case 'password':\n                    newValue.lockState = RoomDataParser.PASSWORD_STATE;\n                    newValue.password = String(value);\n                    break;\n                case 'moderation_mute':\n                    newValue.moderationSettings.allowMute = Number(value);\n                    break;\n                case 'moderation_kick':\n                    newValue.moderationSettings.allowKick = Number(value);\n                    break;\n                case 'moderation_ban':\n                    newValue.moderationSettings.allowBan = Number(value);\n                    break;\n                case 'bubble_mode':\n                    newValue.chatSettings.mode = Number(value);\n                    break;\n                case 'chat_weight':\n                    newValue.chatSettings.weight = Number(value);\n                    break;\n                case 'bubble_speed':\n                    newValue.chatSettings.speed = Number(value);\n                    break;\n                case 'flood_protection':\n                    newValue.chatSettings.protection = Number(value);\n                    break;\n                case 'chat_distance':\n                    newValue.chatSettings.distance = Number(value);\n                    break;\n            }\n\n            SendMessageComposer(\n                new SaveRoomSettingsComposer(\n                    newValue.roomId,\n                    newValue.roomName,\n                    newValue.roomDescription,\n                    newValue.lockState,\n                    newValue.password,\n                    newValue.userCount,\n                    newValue.categoryId,\n                    newValue.tags.length,\n                    newValue.tags,\n                    newValue.tradeState,\n                    newValue.allowPets,\n                    newValue.allowPetsEat,\n                    newValue.allowWalkthrough,\n                    newValue.hideWalls,\n                    newValue.wallThickness,\n                    newValue.floorThickness,\n                    newValue.moderationSettings.allowMute,\n                    newValue.moderationSettings.allowKick,\n                    newValue.moderationSettings.allowBan,\n                    newValue.chatSettings.mode,\n                    newValue.chatSettings.weight,\n                    newValue.chatSettings.speed,\n                    newValue.chatSettings.distance,\n                    newValue.chatSettings.protection\n                ));\n\n            return newValue;\n        });\n    }\n\n    if(!roomData) return null;\n    \n    return (\n        <NitroCardView uniqueKey=\"nitro-room-settings\" className=\"nitro-room-settings\">\n            <NitroCardHeaderView headerText={ LocalizeText('navigator.roomsettings') } onCloseClick={ close } />\n            <NitroCardTabsView>\n                { TABS.map(tab =>\n                {\n                    return <NitroCardTabsItemView key={ tab } isActive={ (currentTab === tab) } onClick={ event => setCurrentTab(tab) }>{ LocalizeText(tab) }</NitroCardTabsItemView>\n                }) }\n            </NitroCardTabsView>\n            <NitroCardContentView>\n                { (currentTab === TABS[0]) &&\n                    <NavigatorRoomSettingsBasicTabView roomData={ roomData } handleChange={ handleChange } close={ close } /> }\n                { (currentTab === TABS[1]) &&\n                    <NavigatorRoomSettingsAccessTabView roomData={ roomData } handleChange={ handleChange } /> }\n                { (currentTab === TABS[2]) &&\n                    <NavigatorRoomSettingsRightsTabView roomData={ roomData } handleChange={ handleChange } /> }\n                { (currentTab === TABS[3]) &&\n                    <NavigatorRoomSettingsVipChatTabView roomData={ roomData } handleChange={ handleChange } /> }\n                { (currentTab === TABS[4]) &&\n                    <NavigatorRoomSettingsModTabView roomData={ roomData } handleChange={ handleChange } /> }\n            </NitroCardContentView>\n        </NitroCardView>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}