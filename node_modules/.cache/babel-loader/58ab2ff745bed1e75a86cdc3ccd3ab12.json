{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/layout/LayoutFurniImageView.tsx\",\n    _s = $RefreshSig$();\n\nimport { TextureUtils, Vector3d } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { GetRoomEngine, ProductTypeEnum } from '../../api';\nimport { Base } from '../Base';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LayoutFurniImageView = props => {\n  _s();\n\n  const {\n    productType = 's',\n    productClassId = -1,\n    direction = 2,\n    extraData = '',\n    scale = 1,\n    style = {},\n    ...rest\n  } = props;\n  const [imageElement, setImageElement] = useState(null);\n  const getStyle = useMemo(() => {\n    var _imageElement$src;\n\n    let newStyle = {};\n\n    if (imageElement !== null && imageElement !== void 0 && (_imageElement$src = imageElement.src) !== null && _imageElement$src !== void 0 && _imageElement$src.length) {\n      newStyle.backgroundImage = `url('${imageElement.src}')`;\n      newStyle.width = imageElement.width;\n      newStyle.height = imageElement.height;\n    }\n\n    if (scale !== 1) {\n      newStyle.transform = `scale(${scale})`;\n      if (!(scale % 1)) newStyle.imageRendering = 'pixelated';\n    }\n\n    if (Object.keys(style).length) newStyle = { ...newStyle,\n      ...style\n    };\n    return newStyle;\n  }, [imageElement, scale, style]);\n  const buildImage = useCallback(() => {\n    let imageResult = null;\n    const listener = {\n      imageReady: (id, texture, image) => {\n        if (!image && texture) {\n          image = TextureUtils.generateImage(texture);\n        }\n\n        image.onload = () => setImageElement(image);\n      },\n      imageFailed: null\n    };\n\n    switch (productType.toLocaleLowerCase()) {\n      case ProductTypeEnum.FLOOR:\n        imageResult = GetRoomEngine().getFurnitureFloorImage(productClassId, new Vector3d(direction), 64, listener, 0, extraData);\n        break;\n\n      case ProductTypeEnum.WALL:\n        imageResult = GetRoomEngine().getFurnitureWallImage(productClassId, new Vector3d(direction), 64, listener, 0, extraData);\n        break;\n    }\n\n    if (imageResult) {\n      const image = imageResult.getImage();\n\n      image.onload = () => setImageElement(image);\n    }\n  }, [productType, productClassId, direction, extraData]);\n  useEffect(() => {\n    buildImage();\n  }, [buildImage]);\n  if (!imageElement) return null;\n  return /*#__PURE__*/_jsxDEV(Base, {\n    classNames: ['furni-image'],\n    style: getStyle,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n};\n\n_s(LayoutFurniImageView, \"QXh6hKbX7c4x/klrSL+MjVjVcFw=\");\n\n_c = LayoutFurniImageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutFurniImageView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/layout/LayoutFurniImageView.tsx"],"names":["TextureUtils","Vector3d","useCallback","useEffect","useMemo","useState","GetRoomEngine","ProductTypeEnum","Base","LayoutFurniImageView","props","productType","productClassId","direction","extraData","scale","style","rest","imageElement","setImageElement","getStyle","newStyle","src","length","backgroundImage","width","height","transform","imageRendering","Object","keys","buildImage","imageResult","listener","imageReady","id","texture","image","generateImage","onload","imageFailed","toLocaleLowerCase","FLOOR","getFurnitureFloorImage","WALL","getFurnitureWallImage","getImage"],"mappings":"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","sourcesContent":["import { IGetImageListener, ImageResult, TextureUtils, Vector3d } from '@nitrots/nitro-renderer';\nimport { CSSProperties, FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { BaseProps } from '..';\nimport { GetRoomEngine, ProductTypeEnum } from '../../api';\nimport { Base } from '../Base';\n\ninterface LayoutFurniImageViewProps extends BaseProps<HTMLDivElement>\n{\n    productType: string;\n    productClassId: number;\n    direction?: number;\n    extraData?: string;\n    scale?: number;\n}\n\nexport const LayoutFurniImageView: FC<LayoutFurniImageViewProps> = props =>\n{\n    const { productType = 's', productClassId = -1, direction = 2, extraData = '', scale = 1, style = {}, ...rest } = props;\n    const [ imageElement, setImageElement ] = useState<HTMLImageElement>(null);\n\n    const getStyle = useMemo(() =>\n    {\n        let newStyle: CSSProperties = {};\n\n        if(imageElement?.src?.length)\n        {\n            newStyle.backgroundImage = `url('${ imageElement.src }')`;\n            newStyle.width = imageElement.width;\n            newStyle.height = imageElement.height;\n        }\n\n        if(scale !== 1)\n        {\n            newStyle.transform = `scale(${ scale })`;\n\n            if(!(scale % 1)) newStyle.imageRendering = 'pixelated';\n        }\n\n        if(Object.keys(style).length) newStyle = { ...newStyle, ...style };\n\n        return newStyle;\n    }, [ imageElement, scale, style ]);\n\n    const buildImage = useCallback(() =>\n    {\n        let imageResult: ImageResult = null;\n\n        const listener: IGetImageListener = {\n            imageReady: (id, texture, image) =>\n            {\n                if(!image && texture)\n                {\n                    image = TextureUtils.generateImage(texture);\n                }\n\n                image.onload = () => setImageElement(image);\n            },\n            imageFailed: null\n        };\n\n        switch(productType.toLocaleLowerCase())\n        {\n            case ProductTypeEnum.FLOOR:\n                imageResult = GetRoomEngine().getFurnitureFloorImage(productClassId, new Vector3d(direction), 64, listener, 0, extraData);\n                break;\n            case ProductTypeEnum.WALL:\n                imageResult = GetRoomEngine().getFurnitureWallImage(productClassId, new Vector3d(direction), 64, listener, 0, extraData);\n                break;\n        }\n\n        if(imageResult)\n        {\n            const image = imageResult.getImage();\n            \n            image.onload = () => setImageElement(image);\n        }\n    }, [ productType, productClassId, direction, extraData ]);\n\n    useEffect(() =>\n    {\n        buildImage();\n    }, [ buildImage ]);\n\n    if(!imageElement) return null;\n\n    return <Base classNames={ [ 'furni-image' ] } style={ getStyle } { ...rest } />;\n}\n"]},"metadata":{},"sourceType":"module"}