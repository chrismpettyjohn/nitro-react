{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/inventory/views/bot/InventoryBotItemView.tsx\",\n    _s = $RefreshSig$();\n\nimport { MouseEventType } from '@nitrots/nitro-renderer';\nimport { useState } from 'react';\nimport { attemptBotPlacement, UnseenItemCategory } from '../../../../api';\nimport { LayoutAvatarImageView, LayoutGridItem } from '../../../../common';\nimport { useInventoryBots, useInventoryUnseenTracker } from '../../../../hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryBotItemView = props => {\n  _s();\n\n  const {\n    botItem = null,\n    children = null,\n    ...rest\n  } = props;\n  const [isMouseDown, setMouseDown] = useState(false);\n  const {\n    selectedBot = null,\n    setSelectedBot = null\n  } = useInventoryBots();\n  const {\n    isUnseen = null\n  } = useInventoryUnseenTracker();\n  const unseen = isUnseen(UnseenItemCategory.BOT, botItem.botData.id);\n\n  const onMouseEvent = event => {\n    switch (event.type) {\n      case MouseEventType.MOUSE_DOWN:\n        setSelectedBot(botItem);\n        setMouseDown(true);\n        return;\n\n      case MouseEventType.MOUSE_UP:\n        setMouseDown(false);\n        return;\n\n      case MouseEventType.ROLL_OUT:\n        if (!isMouseDown || selectedBot !== botItem) return;\n        attemptBotPlacement(botItem);\n        return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(LayoutGridItem, {\n    itemActive: selectedBot === botItem,\n    itemUnseen: unseen,\n    onMouseDown: onMouseEvent,\n    onMouseUp: onMouseEvent,\n    onMouseOut: onMouseEvent,\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(LayoutAvatarImageView, {\n      figure: botItem.botData.figure,\n      direction: 3,\n      headOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InventoryBotItemView, \"WfuYqnf/Ao/Kv6RVOci5U3Mtgos=\", false, function () {\n  return [useInventoryBots, useInventoryUnseenTracker];\n});\n\n_c = InventoryBotItemView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryBotItemView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/inventory/views/bot/InventoryBotItemView.tsx"],"names":["MouseEventType","useState","attemptBotPlacement","UnseenItemCategory","LayoutAvatarImageView","LayoutGridItem","useInventoryBots","useInventoryUnseenTracker","InventoryBotItemView","props","botItem","children","rest","isMouseDown","setMouseDown","selectedBot","setSelectedBot","isUnseen","unseen","BOT","botData","id","onMouseEvent","event","type","MOUSE_DOWN","MOUSE_UP","ROLL_OUT","figure"],"mappings":";;;AAAA,SAASA,cAAT,QAA+B,yBAA/B;AACA,SAAyBC,QAAzB,QAAyC,OAAzC;AACA,SAASC,mBAAT,EAAwCC,kBAAxC,QAAkE,iBAAlE;AACA,SAASC,qBAAT,EAAgCC,cAAhC,QAAsD,oBAAtD;AACA,SAASC,gBAAT,EAA2BC,yBAA3B,QAA4D,mBAA5D;;AAEA,OAAO,MAAMC,oBAA+C,GAAGC,KAAK,IACpE;AAAA;;AACI,QAAM;AAAEC,IAAAA,OAAO,GAAG,IAAZ;AAAkBC,IAAAA,QAAQ,GAAG,IAA7B;AAAmC,OAAGC;AAAtC,MAA+CH,KAArD;AACA,QAAM,CAAEI,WAAF,EAAeC,YAAf,IAAgCb,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAEc,IAAAA,WAAW,GAAG,IAAhB;AAAsBC,IAAAA,cAAc,GAAG;AAAvC,MAAgDV,gBAAgB,EAAtE;AACA,QAAM;AAAEW,IAAAA,QAAQ,GAAG;AAAb,MAAsBV,yBAAyB,EAArD;AACA,QAAMW,MAAM,GAAGD,QAAQ,CAACd,kBAAkB,CAACgB,GAApB,EAAyBT,OAAO,CAACU,OAAR,CAAgBC,EAAzC,CAAvB;;AAEA,QAAMC,YAAY,GAAIC,KAAD,IACrB;AACI,YAAOA,KAAK,CAACC,IAAb;AAEI,WAAKxB,cAAc,CAACyB,UAApB;AACIT,QAAAA,cAAc,CAACN,OAAD,CAAd;AACAI,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;;AACJ,WAAKd,cAAc,CAAC0B,QAApB;AACIZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA;;AACJ,WAAKd,cAAc,CAAC2B,QAApB;AACI,YAAG,CAACd,WAAD,IAAiBE,WAAW,KAAKL,OAApC,EAA8C;AAE9CR,QAAAA,mBAAmB,CAACQ,OAAD,CAAnB;AACA;AAbR;AAeH,GAjBD;;AAmBA,sBACI,QAAC,cAAD;AAAgB,IAAA,UAAU,EAAIK,WAAW,KAAKL,OAA9C;AAAyD,IAAA,UAAU,EAAGQ,MAAtE;AAA+E,IAAA,WAAW,EAAGI,YAA7F;AAA4G,IAAA,SAAS,EAAGA,YAAxH;AAAuI,IAAA,UAAU,EAAGA,YAApJ;AAAA,OAAwKV,IAAxK;AAAA,4BACI,QAAC,qBAAD;AAAuB,MAAA,MAAM,EAAGF,OAAO,CAACU,OAAR,CAAgBQ,MAAhD;AAAyD,MAAA,SAAS,EAAG,CAArE;AAAyE,MAAA,QAAQ,EAAG;AAApF;AAAA;AAAA;AAAA;AAAA,YADJ,EAEMjB,QAFN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAjCM;;GAAMH,oB;UAI6CF,gB,EAC1BC,yB;;;KALnBC,oB","sourcesContent":["import { MouseEventType } from '@nitrots/nitro-renderer';\nimport { FC, MouseEvent, useState } from 'react';\nimport { attemptBotPlacement, IBotItem, UnseenItemCategory } from '../../../../api';\nimport { LayoutAvatarImageView, LayoutGridItem } from '../../../../common';\nimport { useInventoryBots, useInventoryUnseenTracker } from '../../../../hooks';\n\nexport const InventoryBotItemView: FC<{ botItem: IBotItem }> = props =>\n{\n    const { botItem = null, children = null, ...rest } = props;\n    const [ isMouseDown, setMouseDown ] = useState(false);\n    const { selectedBot = null, setSelectedBot = null } = useInventoryBots();\n    const { isUnseen = null } = useInventoryUnseenTracker();\n    const unseen = isUnseen(UnseenItemCategory.BOT, botItem.botData.id);\n\n    const onMouseEvent = (event: MouseEvent) =>\n    {\n        switch(event.type)\n        {\n            case MouseEventType.MOUSE_DOWN:\n                setSelectedBot(botItem);\n                setMouseDown(true);\n                return;\n            case MouseEventType.MOUSE_UP:\n                setMouseDown(false);\n                return;\n            case MouseEventType.ROLL_OUT:\n                if(!isMouseDown || (selectedBot !== botItem)) return;\n\n                attemptBotPlacement(botItem);\n                return;\n        }\n    }\n\n    return (\n        <LayoutGridItem itemActive={ (selectedBot === botItem) } itemUnseen={ unseen } onMouseDown={ onMouseEvent } onMouseUp={ onMouseEvent } onMouseOut={ onMouseEvent } { ...rest }>\n            <LayoutAvatarImageView figure={ botItem.botData.figure } direction={ 3 } headOnly={ true } />\n            { children }\n        </LayoutGridItem>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}