{"ast":null,"code":"import { Palette } from './figure/Palette';\nimport { SetType } from './figure/SetType';\nexport class FigureSetData {\n  constructor() {\n    this._palettes = void 0;\n    this._setTypes = void 0;\n    this._palettes = new Map();\n    this._setTypes = new Map();\n  }\n\n  dispose() {}\n\n  parse(data) {\n    if (!data) return false;\n\n    for (const palette of data.palettes) {\n      const newPalette = new Palette(palette);\n      if (!newPalette) continue;\n\n      this._palettes.set(newPalette.id.toString(), newPalette);\n    }\n\n    for (const set of data.setTypes) {\n      const newSet = new SetType(set);\n      if (!newSet) continue;\n\n      this._setTypes.set(newSet.type, newSet);\n    }\n\n    return true;\n  }\n\n  injectJSON(data) {\n    for (const setType of data.setTypes) {\n      const existingSetType = this._setTypes.get(setType.type);\n\n      if (existingSetType) existingSetType.cleanUp(setType);else this._setTypes.set(setType.type, new SetType(setType));\n    }\n\n    this.appendJSON(data);\n  }\n\n  appendJSON(data) {\n    if (!data) return false;\n\n    for (const palette of data.palettes) {\n      const id = palette.id.toString();\n\n      const existingPalette = this._palettes.get(id);\n\n      if (!existingPalette) this._palettes.set(id, new Palette(palette));else existingPalette.append(palette);\n    }\n\n    for (const setType of data.setTypes) {\n      const type = setType.type;\n\n      const existingSetType = this._setTypes.get(type);\n\n      if (!existingSetType) this._setTypes.set(type, new SetType(setType));else existingSetType.append(setType);\n    }\n\n    return false;\n  }\n\n  getMandatorySetTypeIds(k, _arg_2) {\n    const types = [];\n\n    for (const set of this._setTypes.values()) {\n      if (!set || !set.isMandatory(k, _arg_2)) continue;\n      types.push(set.type);\n    }\n\n    return types;\n  }\n\n  getDefaultPartSet(k, _arg_2) {\n    const setType = this._setTypes.get(k);\n\n    if (!setType) return null;\n    return setType.getDefaultPartSet(_arg_2);\n  }\n\n  getSetType(k) {\n    return this._setTypes.get(k) || null;\n  }\n\n  getPalette(k) {\n    return this._palettes.get(k.toString()) || null;\n  }\n\n  getFigurePartSet(k) {\n    for (const set of this._setTypes.values()) {\n      const partSet = set.getPartSet(k);\n      if (!partSet) continue;\n      return partSet;\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/FigureSetData.ts"],"names":["Palette","SetType","FigureSetData","constructor","_palettes","_setTypes","Map","dispose","parse","data","palette","palettes","newPalette","set","id","toString","setTypes","newSet","type","injectJSON","setType","existingSetType","get","cleanUp","appendJSON","existingPalette","append","getMandatorySetTypeIds","k","_arg_2","types","values","isMandatory","push","getDefaultPartSet","getSetType","getPalette","getFigurePartSet","partSet","getPartSet"],"mappings":"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","sourcesContent":["import { IFigureData } from '../interfaces';\r\nimport { IFigurePartSet } from './figure/IFigurePartSet';\r\nimport { IPalette } from './figure/IPalette';\r\nimport { ISetType } from './figure/ISetType';\r\nimport { Palette } from './figure/Palette';\r\nimport { SetType } from './figure/SetType';\r\nimport { IFigureSetData } from './IFigureSetData';\r\nimport { IStructureData } from './IStructureData';\r\n\r\nexport class FigureSetData implements IFigureSetData, IStructureData\r\n{\r\n    private _palettes: Map<string, Palette>;\r\n    private _setTypes: Map<string, SetType>;\r\n\r\n    constructor()\r\n    {\r\n        this._palettes = new Map();\r\n        this._setTypes = new Map();\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n\r\n    }\r\n\r\n    public parse(data: IFigureData): boolean\r\n    {\r\n        if(!data) return false;\r\n\r\n        for(const palette of data.palettes)\r\n        {\r\n            const newPalette = new Palette(palette);\r\n\r\n            if(!newPalette) continue;\r\n\r\n            this._palettes.set(newPalette.id.toString(), newPalette);\r\n        }\r\n\r\n        for(const set of data.setTypes)\r\n        {\r\n            const newSet = new SetType(set);\r\n\r\n            if(!newSet) continue;\r\n\r\n            this._setTypes.set(newSet.type, newSet);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public injectJSON(data: IFigureData): void\r\n    {\r\n        for(const setType of data.setTypes)\r\n        {\r\n            const existingSetType = this._setTypes.get(setType.type);\r\n\r\n            if(existingSetType) existingSetType.cleanUp(setType);\r\n            else this._setTypes.set(setType.type, new SetType(setType));\r\n        }\r\n\r\n        this.appendJSON(data);\r\n    }\r\n\r\n    public appendJSON(data: IFigureData): boolean\r\n    {\r\n        if(!data) return false;\r\n\r\n        for(const palette of data.palettes)\r\n        {\r\n            const id = palette.id.toString();\r\n            const existingPalette = this._palettes.get(id);\r\n\r\n            if(!existingPalette) this._palettes.set(id, new Palette(palette));\r\n            else existingPalette.append(palette);\r\n        }\r\n\r\n        for(const setType of data.setTypes)\r\n        {\r\n            const type = setType.type;\r\n            const existingSetType = this._setTypes.get(type);\r\n\r\n            if(!existingSetType) this._setTypes.set(type, new SetType(setType));\r\n            else existingSetType.append(setType);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getMandatorySetTypeIds(k: string, _arg_2: number): string[]\r\n    {\r\n        const types: string[] = [];\r\n\r\n        for(const set of this._setTypes.values())\r\n        {\r\n            if(!set || !set.isMandatory(k, _arg_2)) continue;\r\n\r\n            types.push(set.type);\r\n        }\r\n\r\n        return types;\r\n    }\r\n\r\n    public getDefaultPartSet(k: string, _arg_2: string): IFigurePartSet\r\n    {\r\n        const setType = this._setTypes.get(k);\r\n\r\n        if(!setType) return null;\r\n\r\n        return setType.getDefaultPartSet(_arg_2);\r\n    }\r\n\r\n    public getSetType(k: string): ISetType\r\n    {\r\n        return (this._setTypes.get(k) || null);\r\n    }\r\n\r\n    public getPalette(k: number): IPalette\r\n    {\r\n        return (this._palettes.get(k.toString()) || null);\r\n    }\r\n\r\n    public getFigurePartSet(k: number): IFigurePartSet\r\n    {\r\n        for(const set of this._setTypes.values())\r\n        {\r\n            const partSet = set.getPartSet(k);\r\n\r\n            if(!partSet) continue;\r\n\r\n            return partSet;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}