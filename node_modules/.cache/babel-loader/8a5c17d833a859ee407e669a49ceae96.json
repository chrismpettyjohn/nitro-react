{"ast":null,"code":"import { Loader, LoaderResource } from '@pixi/loaders';\nimport { Spritesheet } from '@pixi/spritesheet';\nimport { GraphicAssetCollection } from '../../room/object/visualization/utils/GraphicAssetCollection';\nimport { Disposable } from '../common/disposable/Disposable';\nimport { NitroLogger } from '../common/logger/NitroLogger';\nimport { NitroBundle } from './NitroBundle';\nexport class AssetManager extends Disposable {\n  constructor() {\n    super();\n    this._logger = void 0;\n    this._textures = void 0;\n    this._collections = void 0;\n    this._logger = new NitroLogger(this.constructor.name);\n    this._textures = new Map();\n    this._collections = new Map();\n  }\n\n  static removeFileExtension(name) {\n    return name.substring(0, name.lastIndexOf('.')) || name;\n  }\n\n  getTexture(name) {\n    if (!name) return null;\n\n    const existing = this._textures.get(name);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  setTexture(name, texture) {\n    if (!name || !texture) return;\n\n    this._textures.set(name, texture);\n  }\n\n  getAsset(name) {\n    if (!name) return null;\n\n    for (const collection of this._collections.values()) {\n      if (!collection) continue;\n      const existing = collection.getAsset(name);\n      if (!existing) continue;\n      return existing;\n    }\n\n    return null;\n  }\n\n  getCollection(name) {\n    if (!name) return null;\n\n    const existing = this._collections.get(name);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  createCollection(data, spritesheet) {\n    if (!data) return null;\n    const collection = new GraphicAssetCollection(data, spritesheet);\n\n    if (collection) {\n      for (const [name, texture] of collection.textures.entries()) this.setTexture(name, texture);\n\n      this._collections.set(collection.name, collection);\n    }\n\n    return collection;\n  }\n\n  downloadAsset(assetUrl, cb) {\n    return this.downloadAssets([assetUrl], cb);\n  }\n\n  downloadAssets(assetUrls, cb) {\n    if (!assetUrls || !assetUrls.length) {\n      cb(true);\n      return true;\n    }\n\n    const totalToDownload = assetUrls.length;\n    let totalDownloaded = 0;\n\n    const onDownloaded = (loader, resource, flag) => {\n      if (loader) loader.destroy();\n\n      if (!flag) {\n        this._logger.error('Failed to download asset: ' + resource.url);\n\n        cb(false);\n        return;\n      }\n\n      totalDownloaded++;\n      if (totalDownloaded === totalToDownload) cb(true);\n    };\n\n    for (const url of assetUrls) {\n      if (!url) continue;\n      const loader = new Loader();\n      loader.add({\n        url,\n        crossOrigin: 'anonymous',\n        xhrType: url.endsWith('.nitro') ? LoaderResource.XHR_RESPONSE_TYPE.BUFFER : LoaderResource.XHR_RESPONSE_TYPE.JSON\n      }).use((resource, next) => {\n        this.assetLoader(loader, resource, onDownloaded);\n        next();\n      }).load();\n    }\n\n    return true;\n  }\n\n  assetLoader(loader, resource, onDownloaded) {\n    if (!resource || resource.error) {\n      if (resource && resource.texture) resource.texture.destroy(true);\n      onDownloaded(loader, resource, false);\n      return;\n    }\n\n    if (resource.extension === 'nitro') {\n      const nitroBundle = new NitroBundle(resource.data);\n      const assetData = nitroBundle.jsonFile;\n\n      if (!assetData) {\n        onDownloaded(loader, resource, false);\n        return;\n      }\n\n      if (assetData.spritesheet && Object.keys(assetData.spritesheet).length) {\n        const baseTexture = nitroBundle.baseTexture;\n\n        if (!baseTexture) {\n          onDownloaded(loader, resource, false);\n          return;\n        }\n\n        if (baseTexture.valid) {\n          const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\n          spritesheet.parse(() => {\n            this.createCollection(assetData, spritesheet);\n            onDownloaded(loader, resource, true);\n          });\n        } else {\n          baseTexture.once('loaded', () => {\n            baseTexture.removeAllListeners();\n            const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\n            spritesheet.parse(() => {\n              this.createCollection(assetData, spritesheet);\n              onDownloaded(loader, resource, true);\n            });\n          });\n          baseTexture.once('error', () => {\n            baseTexture.removeAllListeners();\n            onDownloaded(loader, resource, false);\n          });\n        }\n\n        return;\n      }\n\n      this.createCollection(assetData, null);\n      onDownloaded(loader, resource, true);\n    } else if (resource.type === LoaderResource.TYPE.IMAGE) {\n      if (resource.texture.valid) {\n        this.setTexture(resource.name, resource.texture);\n        onDownloaded(loader, resource, true);\n      } else {\n        onDownloaded(loader, resource, false);\n      }\n\n      return;\n    }\n  }\n\n  get collections() {\n    return this._collections;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/asset/AssetManager.ts"],"names":["Loader","LoaderResource","Spritesheet","GraphicAssetCollection","Disposable","NitroLogger","NitroBundle","AssetManager","constructor","_logger","_textures","_collections","name","Map","removeFileExtension","substring","lastIndexOf","getTexture","existing","get","setTexture","texture","set","getAsset","collection","values","getCollection","createCollection","data","spritesheet","textures","entries","downloadAsset","assetUrl","cb","downloadAssets","assetUrls","length","totalToDownload","totalDownloaded","onDownloaded","loader","resource","flag","destroy","error","url","add","crossOrigin","xhrType","endsWith","XHR_RESPONSE_TYPE","BUFFER","JSON","use","next","assetLoader","load","extension","nitroBundle","assetData","jsonFile","Object","keys","baseTexture","valid","parse","once","removeAllListeners","type","TYPE","IMAGE","collections"],"mappings":"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","sourcesContent":["import { Resource, Texture } from '@pixi/core';\r\nimport { Loader, LoaderResource } from '@pixi/loaders';\r\nimport { Spritesheet } from '@pixi/spritesheet';\r\nimport { IGraphicAsset } from '../../room';\r\nimport { GraphicAssetCollection } from '../../room/object/visualization/utils/GraphicAssetCollection';\r\nimport { IGraphicAssetCollection } from '../../room/object/visualization/utils/IGraphicAssetCollection';\r\nimport { Disposable } from '../common/disposable/Disposable';\r\nimport { INitroLogger } from '../common/logger/INitroLogger';\r\nimport { NitroLogger } from '../common/logger/NitroLogger';\r\nimport { IAssetManager } from './IAssetManager';\r\nimport { IAssetData } from './interfaces';\r\nimport { NitroBundle } from './NitroBundle';\r\n\r\nexport class AssetManager extends Disposable implements IAssetManager\r\n{\r\n    private _logger: INitroLogger;\r\n    private _textures: Map<string, Texture<Resource>>;\r\n    private _collections: Map<string, IGraphicAssetCollection>;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._logger = new NitroLogger(this.constructor.name);\r\n        this._textures = new Map();\r\n        this._collections = new Map();\r\n    }\r\n\r\n    public static removeFileExtension(name: string): string\r\n    {\r\n        return (name.substring(0, name.lastIndexOf('.')) || name);\r\n    }\r\n\r\n    public getTexture(name: string): Texture<Resource>\r\n    {\r\n        if(!name) return null;\r\n\r\n        const existing = this._textures.get(name);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public setTexture(name: string, texture: Texture<Resource>): void\r\n    {\r\n        if(!name || !texture) return;\r\n\r\n        this._textures.set(name, texture);\r\n    }\r\n\r\n    public getAsset(name: string): IGraphicAsset\r\n    {\r\n        if(!name) return null;\r\n\r\n        for(const collection of this._collections.values())\r\n        {\r\n            if(!collection) continue;\r\n\r\n            const existing = collection.getAsset(name);\r\n\r\n            if(!existing) continue;\r\n\r\n            return existing;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getCollection(name: string): IGraphicAssetCollection\r\n    {\r\n        if(!name) return null;\r\n\r\n        const existing = this._collections.get(name);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public createCollection(data: IAssetData, spritesheet: Spritesheet): IGraphicAssetCollection\r\n    {\r\n        if(!data) return null;\r\n\r\n        const collection = new GraphicAssetCollection(data, spritesheet);\r\n\r\n        if(collection)\r\n        {\r\n            for(const [ name, texture ] of collection.textures.entries()) this.setTexture(name, texture);\r\n\r\n            this._collections.set(collection.name, collection);\r\n        }\r\n\r\n        return collection;\r\n    }\r\n\r\n    public downloadAsset(assetUrl: string, cb: Function): boolean\r\n    {\r\n        return this.downloadAssets([ assetUrl ], cb);\r\n    }\r\n\r\n    public downloadAssets(assetUrls: string[], cb: Function): boolean\r\n    {\r\n        if(!assetUrls || !assetUrls.length)\r\n        {\r\n            cb(true);\r\n\r\n            return true;\r\n        }\r\n\r\n        const totalToDownload = assetUrls.length;\r\n\r\n        let totalDownloaded = 0;\r\n\r\n        const onDownloaded = (loader: Loader, resource: LoaderResource, flag: boolean) =>\r\n        {\r\n            if(loader) loader.destroy();\r\n\r\n            if(!flag)\r\n            {\r\n                this._logger.error('Failed to download asset: ' + resource.url);\r\n\r\n                cb(false);\r\n\r\n                return;\r\n            }\r\n\r\n            totalDownloaded++;\r\n\r\n            if(totalDownloaded === totalToDownload) cb(true);\r\n        };\r\n\r\n        for(const url of assetUrls)\r\n        {\r\n            if(!url) continue;\r\n\r\n            const loader = new Loader();\r\n\r\n            loader\r\n                .add({\r\n                    url,\r\n                    crossOrigin: 'anonymous',\r\n                    xhrType: url.endsWith('.nitro') ? LoaderResource.XHR_RESPONSE_TYPE.BUFFER : LoaderResource.XHR_RESPONSE_TYPE.JSON\r\n                })\r\n                .use((resource: LoaderResource, next: Function) =>\r\n                {\r\n                    this.assetLoader(loader, resource, onDownloaded);\r\n\r\n                    next();\r\n                })\r\n                .load();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private assetLoader(loader: Loader, resource: LoaderResource, onDownloaded: Function): void\r\n    {\r\n        if(!resource || resource.error)\r\n        {\r\n            if(resource && resource.texture) resource.texture.destroy(true);\r\n\r\n            onDownloaded(loader, resource, false);\r\n\r\n            return;\r\n        }\r\n\r\n        if(resource.extension === 'nitro')\r\n        {\r\n            const nitroBundle = new NitroBundle(resource.data);\r\n            const assetData = (nitroBundle.jsonFile as IAssetData);\r\n\r\n            if(!assetData)\r\n            {\r\n                onDownloaded(loader, resource, false);\r\n\r\n                return;\r\n            }\r\n\r\n            if(assetData.spritesheet && Object.keys(assetData.spritesheet).length)\r\n            {\r\n                const baseTexture = nitroBundle.baseTexture;\r\n\r\n                if(!baseTexture)\r\n                {\r\n                    onDownloaded(loader, resource, false);\r\n\r\n                    return;\r\n                }\r\n\r\n                if(baseTexture.valid)\r\n                {\r\n                    const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\r\n\r\n                    spritesheet.parse(() =>\r\n                    {\r\n                        this.createCollection(assetData, spritesheet);\r\n\r\n                        onDownloaded(loader, resource, true);\r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    baseTexture.once('loaded', () =>\r\n                    {\r\n                        baseTexture.removeAllListeners();\r\n\r\n                        const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\r\n\r\n                        spritesheet.parse(() =>\r\n                        {\r\n                            this.createCollection(assetData, spritesheet);\r\n\r\n                            onDownloaded(loader, resource, true);\r\n                        });\r\n                    });\r\n\r\n                    baseTexture.once('error', () =>\r\n                    {\r\n                        baseTexture.removeAllListeners();\r\n\r\n                        onDownloaded(loader, resource, false);\r\n                    });\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            this.createCollection(assetData, null);\r\n\r\n            onDownloaded(loader, resource, true);\r\n        }\r\n\r\n        else if(resource.type === LoaderResource.TYPE.IMAGE)\r\n        {\r\n            if(resource.texture.valid)\r\n            {\r\n                this.setTexture(resource.name, resource.texture);\r\n\r\n                onDownloaded(loader, resource, true);\r\n            }\r\n            else\r\n            {\r\n                onDownloaded(loader, resource, false);\r\n            }\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    public get collections(): Map<string, IGraphicAssetCollection>\r\n    {\r\n        return this._collections;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}