{"ast":null,"code":"import { AdvancedMap } from '../../../../core';\nimport { PartColor } from './PartColor';\nexport class Palette {\n  constructor(data) {\n    this._id = void 0;\n    this._colors = void 0;\n    if (!data) throw new Error('invalid_data');\n    this._id = data.id;\n    this._colors = new AdvancedMap();\n    this.append(data);\n  }\n\n  append(data) {\n    for (const color of data.colors) {\n      const newColor = new PartColor(color);\n\n      this._colors.add(color.id.toString(), newColor);\n    }\n  }\n\n  getColor(id) {\n    if (id === undefined || id < 0) return null;\n    return this._colors.getValue(id.toString()) || null;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get colors() {\n    return this._colors;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/figure/Palette.ts"],"names":["AdvancedMap","PartColor","Palette","constructor","data","_id","_colors","Error","id","append","color","colors","newColor","add","toString","getColor","undefined","getValue"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAIA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAN,CACP;AAIIC,EAAAA,WAAW,CAACC,IAAD,EACX;AAAA,SAJQC,GAIR;AAAA,SAHQC,OAGR;AACI,QAAG,CAACF,IAAJ,EAAU,MAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AAEV,SAAKF,GAAL,GAAWD,IAAI,CAACI,EAAhB;AACA,SAAKF,OAAL,GAAe,IAAIN,WAAJ,EAAf;AAEA,SAAKS,MAAL,CAAYL,IAAZ;AACH;;AAEMK,EAAAA,MAAM,CAACL,IAAD,EACb;AACI,SAAI,MAAMM,KAAV,IAAmBN,IAAI,CAACO,MAAxB,EACA;AACI,YAAMC,QAAQ,GAAG,IAAIX,SAAJ,CAAcS,KAAd,CAAjB;;AAEA,WAAKJ,OAAL,CAAaO,GAAb,CAAiBH,KAAK,CAACF,EAAN,CAASM,QAAT,EAAjB,EAAsCF,QAAtC;AACH;AACJ;;AAEMG,EAAAA,QAAQ,CAACP,EAAD,EACf;AACI,QAAIA,EAAE,KAAKQ,SAAR,IAAsBR,EAAE,GAAG,CAA9B,EAAiC,OAAO,IAAP;AAEjC,WAAQ,KAAKF,OAAL,CAAaW,QAAb,CAAsBT,EAAE,CAACM,QAAH,EAAtB,KAAwC,IAAhD;AACH;;AAEY,MAAFN,EAAE,GACb;AACI,WAAO,KAAKH,GAAZ;AACH;;AAEgB,MAANM,MAAM,GACjB;AACI,WAAO,KAAKL,OAAZ;AACH;;AAvCL","sourcesContent":["import { AdvancedMap } from '../../../../core';\r\nimport { IFigureDataPalette } from '../../interfaces';\r\nimport { IPalette } from './IPalette';\r\nimport { IPartColor } from './IPartColor';\r\nimport { PartColor } from './PartColor';\r\n\r\nexport class Palette implements IPalette\r\n{\r\n    private _id: number;\r\n    private _colors: AdvancedMap<string, IPartColor>;\r\n\r\n    constructor(data: IFigureDataPalette)\r\n    {\r\n        if(!data) throw new Error('invalid_data');\r\n\r\n        this._id = data.id;\r\n        this._colors = new AdvancedMap();\r\n\r\n        this.append(data);\r\n    }\r\n\r\n    public append(data: IFigureDataPalette): void\r\n    {\r\n        for(const color of data.colors)\r\n        {\r\n            const newColor = new PartColor(color);\r\n\r\n            this._colors.add(color.id.toString(), newColor);\r\n        }\r\n    }\r\n\r\n    public getColor(id: number): IPartColor\r\n    {\r\n        if((id === undefined) || id < 0) return null;\r\n\r\n        return (this._colors.getValue(id.toString()) || null);\r\n    }\r\n\r\n    public get id(): number\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get colors(): AdvancedMap<string, IPartColor>\r\n    {\r\n        return this._colors;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}