{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { ActivityPointNotificationMessageEvent, UserCreditsEvent, UserCurrencyComposer, UserCurrencyEvent, UserSubscriptionComposer, UserSubscriptionEvent, UserSubscriptionParser } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { CloneObject, ClubStatus, GetConfiguration, PlaySound, Purse, SendMessageComposer, SoundNames } from '../../api';\nimport { UseMessageEventHook } from '../messages';\n\nconst usePurseState = () => {\n  _s();\n\n  const [purse, setPurse] = useState(new Purse());\n  const hcDisabled = useMemo(() => GetConfiguration('hc.disabled', false), []);\n  const clubStatus = useMemo(() => {\n    if (hcDisabled || purse.clubDays > 0) return ClubStatus.ACTIVE;\n    if (purse.pastVipDays > 0 || purse.pastVipDays > 0) return ClubStatus.EXPIRED;\n    return ClubStatus.NONE;\n  }, [purse, hcDisabled]);\n\n  const getCurrencyAmount = type => {\n    if (type === -1) return purse.credits;\n\n    for (const [key, value] of purse.activityPoints.entries()) {\n      if (key !== type) continue;\n      return value;\n    }\n\n    return 0;\n  };\n\n  const onUserCreditsEvent = useCallback(event => {\n    const parser = event.getParser();\n    setPurse(prevValue => {\n      const newValue = CloneObject(prevValue);\n      newValue.credits = parseFloat(parser.credits);\n      if (prevValue.credits !== newValue.credits) PlaySound(SoundNames.CREDITS);\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(UserCreditsEvent, onUserCreditsEvent);\n  const onUserCurrencyEvent = useCallback(event => {\n    const parser = event.getParser();\n    setPurse(prevValue => {\n      const newValue = CloneObject(prevValue);\n      newValue.activityPoints = parser.currencies;\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(UserCurrencyEvent, onUserCurrencyEvent);\n  const onActivityPointNotificationMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    setPurse(prevValue => {\n      const newValue = CloneObject(prevValue);\n      newValue.activityPoints = new Map(newValue.activityPoints);\n      newValue.activityPoints.set(parser.type, parser.amount);\n      if (parser.type === 0) PlaySound(SoundNames.DUCKETS);\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(ActivityPointNotificationMessageEvent, onActivityPointNotificationMessageEvent);\n  const onUserSubscriptionEvent = useCallback(event => {\n    const parser = event.getParser();\n    const productName = parser.productName;\n    if (productName !== 'club_habbo' && productName !== 'habbo_club') return;\n    setPurse(prevValue => {\n      const newValue = CloneObject(prevValue);\n      newValue.clubDays = Math.max(0, parser.daysToPeriodEnd);\n      newValue.clubPeriods = Math.max(0, parser.periodsSubscribedAhead);\n      newValue.isVip = parser.isVip;\n      newValue.pastClubDays = parser.pastClubDays;\n      newValue.pastVipDays = parser.pastVipDays;\n      newValue.isExpiring = parser.responseType === UserSubscriptionParser.RESPONSE_TYPE_DISCOUNT_AVAILABLE ? true : false;\n      newValue.minutesUntilExpiration = parser.minutesUntilExpiration;\n      newValue.minutesSinceLastModified = parser.minutesSinceLastModified;\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(UserSubscriptionEvent, onUserSubscriptionEvent);\n  useEffect(() => {\n    if (hcDisabled) return;\n    SendMessageComposer(new UserSubscriptionComposer('habbo_club'));\n    const interval = setInterval(() => SendMessageComposer(new UserSubscriptionComposer('habbo_club')), 50000);\n    return () => clearInterval(interval);\n  }, [hcDisabled]);\n  useEffect(() => {\n    SendMessageComposer(new UserCurrencyComposer());\n  }, []);\n  return {\n    purse,\n    hcDisabled,\n    clubStatus,\n    getCurrencyAmount\n  };\n};\n\n_s(usePurseState, \"2M+lqrqOgtVQA9MuWrEEqwpYs4o=\");\n\nexport const usePurse = () => {\n  _s2();\n\n  return useBetween(usePurseState);\n};\n\n_s2(usePurse, \"diiQ3+ccnY3J9PmIrayiMDIOaiY=\", false, function () {\n  return [useBetween];\n});","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/hooks/purse/usePurse.ts"],"names":["ActivityPointNotificationMessageEvent","UserCreditsEvent","UserCurrencyComposer","UserCurrencyEvent","UserSubscriptionComposer","UserSubscriptionEvent","UserSubscriptionParser","useCallback","useEffect","useMemo","useState","useBetween","CloneObject","ClubStatus","GetConfiguration","PlaySound","Purse","SendMessageComposer","SoundNames","UseMessageEventHook","usePurseState","purse","setPurse","hcDisabled","clubStatus","clubDays","ACTIVE","pastVipDays","EXPIRED","NONE","getCurrencyAmount","type","credits","key","value","activityPoints","entries","onUserCreditsEvent","event","parser","getParser","prevValue","newValue","parseFloat","CREDITS","onUserCurrencyEvent","currencies","onActivityPointNotificationMessageEvent","Map","set","amount","DUCKETS","onUserSubscriptionEvent","productName","Math","max","daysToPeriodEnd","clubPeriods","periodsSubscribedAhead","isVip","pastClubDays","isExpiring","responseType","RESPONSE_TYPE_DISCOUNT_AVAILABLE","minutesUntilExpiration","minutesSinceLastModified","interval","setInterval","clearInterval","usePurse"],"mappings":"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","sourcesContent":["import { ActivityPointNotificationMessageEvent, UserCreditsEvent, UserCurrencyComposer, UserCurrencyEvent, UserSubscriptionComposer, UserSubscriptionEvent, UserSubscriptionParser } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { CloneObject, ClubStatus, GetConfiguration, IPurse, PlaySound, Purse, SendMessageComposer, SoundNames } from '../../api';\nimport { UseMessageEventHook } from '../messages';\n\nconst usePurseState = () =>\n{\n    const [ purse, setPurse ] = useState<IPurse>(new Purse());\n    const hcDisabled = useMemo(() => GetConfiguration<boolean>('hc.disabled', false), []);\n\n    const clubStatus = useMemo(() =>\n    {\n        if(hcDisabled || (purse.clubDays > 0)) return ClubStatus.ACTIVE;\n\n        if((purse.pastVipDays > 0) || (purse.pastVipDays > 0)) return ClubStatus.EXPIRED;\n\n        return ClubStatus.NONE;\n    }, [ purse, hcDisabled ]);\n\n    const getCurrencyAmount = (type: number) =>\n    {\n        if(type === -1) return purse.credits;\n    \n        for(const [ key, value ] of purse.activityPoints.entries())\n        {\n            if(key !== type) continue;\n    \n            return value;\n        }\n    \n        return 0;\n    }\n\n    const onUserCreditsEvent = useCallback((event: UserCreditsEvent) =>\n    {\n        const parser = event.getParser();\n\n        setPurse(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            newValue.credits = parseFloat(parser.credits);\n\n            if(prevValue.credits !== newValue.credits) PlaySound(SoundNames.CREDITS);\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(UserCreditsEvent, onUserCreditsEvent);\n\n    const onUserCurrencyEvent = useCallback((event: UserCurrencyEvent) =>\n    {\n        const parser = event.getParser();\n\n        setPurse(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            newValue.activityPoints = parser.currencies;\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(UserCurrencyEvent, onUserCurrencyEvent);\n\n    const onActivityPointNotificationMessageEvent = useCallback((event: ActivityPointNotificationMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        setPurse(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            newValue.activityPoints = new Map(newValue.activityPoints);\n\n            newValue.activityPoints.set(parser.type, parser.amount);\n\n            if(parser.type === 0) PlaySound(SoundNames.DUCKETS)\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(ActivityPointNotificationMessageEvent, onActivityPointNotificationMessageEvent);\n\n    const onUserSubscriptionEvent = useCallback((event: UserSubscriptionEvent) =>\n    {\n        const parser = event.getParser();\n        const productName = parser.productName;\n\n        if((productName !== 'club_habbo') && (productName !== 'habbo_club')) return;\n\n        setPurse(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            newValue.clubDays = Math.max(0, parser.daysToPeriodEnd);\n            newValue.clubPeriods = Math.max(0, parser.periodsSubscribedAhead);\n            newValue.isVip = parser.isVip;\n            newValue.pastClubDays = parser.pastClubDays;\n            newValue.pastVipDays = parser.pastVipDays;\n            newValue.isExpiring = ((parser.responseType === UserSubscriptionParser.RESPONSE_TYPE_DISCOUNT_AVAILABLE) ? true : false);\n            newValue.minutesUntilExpiration = parser.minutesUntilExpiration;\n            newValue.minutesSinceLastModified = parser.minutesSinceLastModified;\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(UserSubscriptionEvent, onUserSubscriptionEvent);\n\n    useEffect(() =>\n    {\n        if(hcDisabled) return;\n\n        SendMessageComposer(new UserSubscriptionComposer('habbo_club'));\n\n        const interval = setInterval(() => SendMessageComposer(new UserSubscriptionComposer('habbo_club')), 50000);\n\n        return () => clearInterval(interval);\n    }, [ hcDisabled ]);\n\n    useEffect(() =>\n    {\n        SendMessageComposer(new UserCurrencyComposer());\n    }, []);\n\n    return { purse, hcDisabled, clubStatus, getCurrencyAmount };\n}\n\nexport const usePurse = () => useBetween(usePurseState);\n"]},"metadata":{},"sourceType":"module"}