{"ast":null,"code":"import { Point } from '@pixi/math';\nimport { AnimationActionPart } from './AnimationActionPart';\nexport class AnimationAction {\n  constructor(data) {\n    this._id = void 0;\n    this._actionParts = void 0;\n    this._bodyPartOffsets = void 0;\n    this._frameCount = void 0;\n    this._frameIndexes = void 0;\n    this._id = data.id;\n    this._actionParts = new Map();\n    this._bodyPartOffsets = new Map();\n    this._frameCount = 0;\n    this._frameIndexes = [];\n\n    if (data.parts && data.parts.length > 0) {\n      for (const part of data.parts) {\n        if (!part) continue;\n        const newPart = new AnimationActionPart(part);\n\n        this._actionParts.set(part.setType, newPart);\n\n        this._frameCount = Math.max(this._frameCount, newPart.frames.length);\n      }\n    }\n\n    if (data.offsets && data.offsets.frames && data.offsets.frames.length > 0) {\n      for (const frame of data.offsets.frames) {\n        if (!frame) continue;\n        const frameId = frame.id;\n        this._frameCount = Math.max(this._frameCount, frameId);\n        const directions = new Map();\n\n        this._bodyPartOffsets.set(frameId, directions);\n\n        if (frame.directions && frame.directions.length > 0) {\n          for (const direction of frame.directions) {\n            if (!direction) continue;\n            const directionId = direction.id;\n            const offsets = new Map();\n            directions.set(directionId, offsets);\n\n            if (direction.bodyParts && direction.bodyParts.length > 0) {\n              for (const part of direction.bodyParts) {\n                if (!part) continue;\n                const partId = part.id;\n                let dx = 0;\n                let dy = 0;\n                if (part.dx !== undefined) dx = part.dx;\n                if (part.dy !== undefined) dy = part.dy;\n                offsets.set(partId, new Point(dx, dy));\n              }\n            }\n          }\n        }\n\n        this._frameIndexes.push(frameId);\n\n        if (frame.repeats !== undefined) {\n          let repeats = frame.repeats || 0;\n          if (repeats > 1) while (--repeats > 0) this._frameIndexes.push(frameId);\n        }\n      }\n    }\n  }\n\n  getPart(type) {\n    if (!type) return null;\n\n    const existing = this._actionParts.get(type);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  getFrameBodyPartOffset(frameId, frameCount, partId) {\n    const frameIndex = frameCount % this._frameIndexes.length;\n    const frameNumber = this._frameIndexes[frameIndex];\n\n    const offsets = this._bodyPartOffsets.get(frameNumber);\n\n    if (!offsets) return AnimationAction.DEFAULT_OFFSET;\n    const frameOffset = offsets.get(frameId);\n    if (!frameOffset) return AnimationAction.DEFAULT_OFFSET;\n    const offset = frameOffset.get(partId);\n    if (!offset) return AnimationAction.DEFAULT_OFFSET;\n    return offset;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get parts() {\n    return this._actionParts;\n  }\n\n  get frameCount() {\n    return this._frameCount;\n  }\n\n}\nAnimationAction.DEFAULT_OFFSET = new Point(0, 0);","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/animation/AnimationAction.ts"],"names":["Point","AnimationActionPart","AnimationAction","constructor","data","_id","_actionParts","_bodyPartOffsets","_frameCount","_frameIndexes","id","Map","parts","length","part","newPart","set","setType","Math","max","frames","offsets","frame","frameId","directions","direction","directionId","bodyParts","partId","dx","dy","undefined","push","repeats","getPart","type","existing","get","getFrameBodyPartOffset","frameCount","frameIndex","frameNumber","DEFAULT_OFFSET","frameOffset","offset"],"mappings":"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","sourcesContent":["import { Point } from '@pixi/math';\r\nimport { AnimationActionPart } from './AnimationActionPart';\r\n\r\nexport class AnimationAction\r\n{\r\n    public static DEFAULT_OFFSET: Point = new Point(0, 0);\r\n\r\n    private _id: string;\r\n    private _actionParts: Map<string, AnimationActionPart>;\r\n    private _bodyPartOffsets: Map<number, Map<number, Map<string, Point>>>;\r\n    private _frameCount: number;\r\n    private _frameIndexes: number[];\r\n\r\n    constructor(data: any)\r\n    {\r\n        this._id = data.id;\r\n        this._actionParts = new Map();\r\n        this._bodyPartOffsets = new Map();\r\n        this._frameCount = 0;\r\n        this._frameIndexes = [];\r\n\r\n        if(data.parts && (data.parts.length > 0))\r\n        {\r\n            for(const part of data.parts)\r\n            {\r\n                if(!part) continue;\r\n\r\n                const newPart = new AnimationActionPart(part);\r\n\r\n                this._actionParts.set(part.setType, newPart);\r\n\r\n                this._frameCount = Math.max(this._frameCount, newPart.frames.length);\r\n            }\r\n        }\r\n\r\n        if(data.offsets && data.offsets.frames && (data.offsets.frames.length > 0))\r\n        {\r\n            for(const frame of data.offsets.frames)\r\n            {\r\n                if(!frame) continue;\r\n\r\n                const frameId = frame.id;\r\n\r\n                this._frameCount = Math.max(this._frameCount, frameId);\r\n\r\n                const directions: Map<number, Map<string, Point>> = new Map();\r\n\r\n                this._bodyPartOffsets.set(frameId, directions);\r\n\r\n                if(frame.directions && (frame.directions.length > 0))\r\n                {\r\n                    for(const direction of frame.directions)\r\n                    {\r\n                        if(!direction) continue;\r\n\r\n                        const directionId = direction.id;\r\n\r\n                        const offsets: Map<string, Point> = new Map();\r\n\r\n                        directions.set(directionId, offsets);\r\n\r\n                        if(direction.bodyParts && (direction.bodyParts.length > 0))\r\n                        {\r\n                            for(const part of direction.bodyParts)\r\n                            {\r\n                                if(!part) continue;\r\n\r\n                                const partId = part.id;\r\n\r\n                                let dx = 0;\r\n                                let dy = 0;\r\n\r\n                                if(part.dx !== undefined) dx = part.dx;\r\n                                if(part.dy !== undefined) dy = part.dy;\r\n\r\n                                offsets.set(partId, new Point(dx, dy));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this._frameIndexes.push(frameId);\r\n\r\n                if(frame.repeats !== undefined)\r\n                {\r\n                    let repeats = frame.repeats || 0;\r\n\r\n                    if(repeats > 1) while(--repeats > 0) this._frameIndexes.push(frameId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getPart(type: string): AnimationActionPart\r\n    {\r\n        if(!type) return null;\r\n\r\n        const existing = this._actionParts.get(type);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getFrameBodyPartOffset(frameId: number, frameCount: number, partId: string): Point\r\n    {\r\n        const frameIndex = (frameCount % this._frameIndexes.length);\r\n        const frameNumber = this._frameIndexes[frameIndex];\r\n        const offsets = this._bodyPartOffsets.get(frameNumber);\r\n\r\n        if(!offsets) return AnimationAction.DEFAULT_OFFSET;\r\n\r\n        const frameOffset = offsets.get(frameId);\r\n\r\n        if(!frameOffset) return AnimationAction.DEFAULT_OFFSET;\r\n\r\n        const offset = frameOffset.get(partId);\r\n\r\n        if(!offset) return AnimationAction.DEFAULT_OFFSET;\r\n\r\n        return offset;\r\n    }\r\n\r\n    public get id(): string\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get parts(): Map<string, AnimationActionPart>\r\n    {\r\n        return this._actionParts;\r\n    }\r\n\r\n    public get frameCount(): number\r\n    {\r\n        return this._frameCount;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}