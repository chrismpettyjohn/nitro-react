{"ast":null,"code":"import { PlaneVisualization } from './PlaneVisualization';\nexport class Plane {\n  constructor() {\n    this._planeVisualizations = void 0;\n    this._sizes = void 0;\n    this._lastPlaneVisualization = void 0;\n    this._lastSize = void 0;\n    this._planeVisualizations = new Map();\n    this._sizes = [];\n    this._lastPlaneVisualization = null;\n    this._lastSize = -1;\n  }\n\n  isStatic(size) {\n    return true;\n  }\n\n  dispose() {\n    for (const visualization of this._planeVisualizations.values()) {\n      if (!visualization) continue;\n      visualization.dispose();\n    }\n\n    this._planeVisualizations = null;\n    this._lastPlaneVisualization = null;\n    this._sizes = null;\n    this._lastSize = -1;\n  }\n\n  clearCache() {\n    for (const visualization of this._planeVisualizations.values()) {\n      if (!visualization) continue;\n      visualization.clearCache();\n    }\n  }\n\n  createPlaneVisualization(size, totalLayers, geometry) {\n    const existing = this._planeVisualizations.get(size.toString());\n\n    if (existing) return null;\n    const plane = new PlaneVisualization(size, totalLayers, geometry);\n\n    this._planeVisualizations.set(size.toString(), plane);\n\n    this._sizes.push(size);\n\n    this._sizes.sort();\n\n    return plane;\n  }\n\n  getSizeIndex(size) {\n    let sizeIndex = 0;\n    let i = 1;\n\n    while (i < this._sizes.length) {\n      if (this._sizes[i] > size) {\n        if (this._sizes[i] - size < size - this._sizes[i - 1]) sizeIndex = i;\n        break;\n      }\n\n      sizeIndex = i;\n      i++;\n    }\n\n    return sizeIndex;\n  }\n\n  getPlaneVisualization(size) {\n    if (size === this._lastSize) return this._lastPlaneVisualization;\n    const sizeIndex = this.getSizeIndex(size);\n\n    if (sizeIndex < this._sizes.length) {\n      this._lastPlaneVisualization = this._planeVisualizations.get(this._sizes[sizeIndex].toString());\n    } else {\n      this._lastPlaneVisualization = null;\n    }\n\n    this._lastSize = size;\n    return this._lastPlaneVisualization;\n  }\n\n  getLayers() {\n    return this.getPlaneVisualization(this._lastSize).getLayers();\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/Plane.ts"],"names":["PlaneVisualization","Plane","constructor","_planeVisualizations","_sizes","_lastPlaneVisualization","_lastSize","Map","isStatic","size","dispose","visualization","values","clearCache","createPlaneVisualization","totalLayers","geometry","existing","get","toString","plane","set","push","sort","getSizeIndex","sizeIndex","i","length","getPlaneVisualization","getLayers"],"mappings":"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","sourcesContent":["import { IRoomGeometry } from '../../../../../../../room/utils/IRoomGeometry';\r\nimport { PlaneVisualization } from './PlaneVisualization';\r\nimport { PlaneVisualizationLayer } from './PlaneVisualizationLayer';\r\n\r\nexport class Plane\r\n{\r\n    private _planeVisualizations: Map<string, PlaneVisualization>;\r\n    private _sizes: number[];\r\n    private _lastPlaneVisualization: PlaneVisualization;\r\n    private _lastSize: number;\r\n\r\n    constructor()\r\n    {\r\n        this._planeVisualizations = new Map();\r\n        this._sizes = [];\r\n        this._lastPlaneVisualization = null;\r\n        this._lastSize = -1;\r\n    }\r\n\r\n    public isStatic(size: number): boolean\r\n    {\r\n        return true;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        for(const visualization of this._planeVisualizations.values())\r\n        {\r\n            if(!visualization) continue;\r\n\r\n            visualization.dispose();\r\n        }\r\n\r\n        this._planeVisualizations = null;\r\n        this._lastPlaneVisualization = null;\r\n        this._sizes = null;\r\n        this._lastSize = -1;\r\n    }\r\n\r\n    public clearCache(): void\r\n    {\r\n        for(const visualization of this._planeVisualizations.values())\r\n        {\r\n            if(!visualization) continue;\r\n\r\n            visualization.clearCache();\r\n        }\r\n    }\r\n\r\n    public createPlaneVisualization(size: number, totalLayers: number, geometry: IRoomGeometry): PlaneVisualization\r\n    {\r\n        const existing = this._planeVisualizations.get(size.toString());\r\n\r\n        if(existing) return null;\r\n\r\n        const plane = new PlaneVisualization(size, totalLayers, geometry);\r\n\r\n        this._planeVisualizations.set(size.toString(), plane);\r\n\r\n        this._sizes.push(size);\r\n        this._sizes.sort();\r\n\r\n        return plane;\r\n    }\r\n\r\n    private getSizeIndex(size: number): number\r\n    {\r\n        let sizeIndex = 0;\r\n        let i = 1;\r\n\r\n        while(i < this._sizes.length)\r\n        {\r\n            if(this._sizes[i] > size)\r\n            {\r\n                if((this._sizes[i] - size) < (size - this._sizes[(i - 1)])) sizeIndex = i;\r\n\r\n                break;\r\n            }\r\n\r\n            sizeIndex = i;\r\n\r\n            i++;\r\n        }\r\n\r\n        return sizeIndex;\r\n    }\r\n\r\n    protected getPlaneVisualization(size: number): PlaneVisualization\r\n    {\r\n        if(size === this._lastSize) return this._lastPlaneVisualization;\r\n\r\n        const sizeIndex = this.getSizeIndex(size);\r\n\r\n        if(sizeIndex < this._sizes.length)\r\n        {\r\n            this._lastPlaneVisualization = this._planeVisualizations.get(this._sizes[sizeIndex].toString());\r\n        }\r\n        else\r\n        {\r\n            this._lastPlaneVisualization = null;\r\n        }\r\n\r\n        this._lastSize = size;\r\n\r\n        return this._lastPlaneVisualization;\r\n    }\r\n\r\n    public getLayers(): PlaneVisualizationLayer[]\r\n    {\r\n        return this.getPlaneVisualization(this._lastSize).getLayers();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}