{"ast":null,"code":"export class RoomObjectSortableSpriteCacheItem {\n  constructor() {\n    this._sprites = void 0;\n    this._updateId1 = void 0;\n    this._updateId2 = void 0;\n    this._isEmpty = void 0;\n    this._sprites = [];\n    this._updateId1 = -1;\n    this._updateId2 = -1;\n    this._isEmpty = false;\n  }\n\n  get spriteCount() {\n    return this._sprites.length;\n  }\n\n  get isEmpty() {\n    return this._isEmpty;\n  }\n\n  dispose() {\n    this.setSpriteCount(0);\n  }\n\n  addSprite(sprite) {\n    this._sprites.push(sprite);\n  }\n\n  getSprite(k) {\n    return this._sprites[k];\n  }\n\n  get sprites() {\n    return this._sprites;\n  }\n\n  needsUpdate(k, _arg_2) {\n    if (k === this._updateId1 && _arg_2 === this._updateId2) return false;\n    this._updateId1 = k;\n    this._updateId2 = _arg_2;\n    return true;\n  }\n\n  setSpriteCount(k) {\n    if (k < this._sprites.length) {\n      let iterator = k;\n\n      while (iterator < this._sprites.length) {\n        const sprite = this._sprites[iterator];\n        if (sprite) sprite.dispose();\n        iterator++;\n      }\n\n      this._sprites.splice(k, this._sprites.length - k);\n    }\n\n    this._isEmpty = this._sprites.length ? false : true;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/renderer/cache/RoomObjectSortableSpriteCacheItem.ts"],"names":["RoomObjectSortableSpriteCacheItem","constructor","_sprites","_updateId1","_updateId2","_isEmpty","spriteCount","length","isEmpty","dispose","setSpriteCount","addSprite","sprite","push","getSprite","k","sprites","needsUpdate","_arg_2","iterator","splice"],"mappings":"AAEA,OAAO,MAAMA,iCAAN,CACP;AAMIC,EAAAA,WAAW,GACX;AAAA,SANQC,QAMR;AAAA,SALQC,UAKR;AAAA,SAJQC,UAIR;AAAA,SAHQC,QAGR;AACI,SAAKH,QAAL,GAAgB,EAAhB;AACA,SAAKC,UAAL,GAAkB,CAAC,CAAnB;AACA,SAAKC,UAAL,GAAkB,CAAC,CAAnB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACH;;AAEqB,MAAXC,WAAW,GACtB;AACI,WAAO,KAAKJ,QAAL,CAAcK,MAArB;AACH;;AAEiB,MAAPC,OAAO,GAClB;AACI,WAAO,KAAKH,QAAZ;AACH;;AAEMI,EAAAA,OAAO,GACd;AACI,SAAKC,cAAL,CAAoB,CAApB;AACH;;AAEMC,EAAAA,SAAS,CAACC,MAAD,EAChB;AACI,SAAKV,QAAL,CAAcW,IAAd,CAAmBD,MAAnB;AACH;;AAEME,EAAAA,SAAS,CAACC,CAAD,EAChB;AACI,WAAO,KAAKb,QAAL,CAAca,CAAd,CAAP;AACH;;AAEiB,MAAPC,OAAO,GAClB;AACI,WAAO,KAAKd,QAAZ;AACH;;AAEMe,EAAAA,WAAW,CAACF,CAAD,EAAYG,MAAZ,EAClB;AACI,QAAIH,CAAC,KAAK,KAAKZ,UAAZ,IAA4Be,MAAM,KAAK,KAAKd,UAA/C,EAA4D,OAAO,KAAP;AAE5D,SAAKD,UAAL,GAAkBY,CAAlB;AACA,SAAKX,UAAL,GAAkBc,MAAlB;AAEA,WAAO,IAAP;AACH;;AAEMR,EAAAA,cAAc,CAACK,CAAD,EACrB;AACI,QAAGA,CAAC,GAAG,KAAKb,QAAL,CAAcK,MAArB,EACA;AACI,UAAIY,QAAQ,GAAGJ,CAAf;;AAEA,aAAMI,QAAQ,GAAG,KAAKjB,QAAL,CAAcK,MAA/B,EACA;AACI,cAAMK,MAAM,GAAG,KAAKV,QAAL,CAAciB,QAAd,CAAf;AAEA,YAAGP,MAAH,EAAWA,MAAM,CAACH,OAAP;AAEXU,QAAAA,QAAQ;AACX;;AAED,WAAKjB,QAAL,CAAckB,MAAd,CAAqBL,CAArB,EAAyB,KAAKb,QAAL,CAAcK,MAAd,GAAuBQ,CAAhD;AACH;;AAED,SAAKV,QAAL,GAAiB,KAAKH,QAAL,CAAcK,MAAf,GAAyB,KAAzB,GAAiC,IAAjD;AACH;;AAzEL","sourcesContent":["import { SortableSprite } from '../utils/SortableSprite';\r\n\r\nexport class RoomObjectSortableSpriteCacheItem\r\n{\r\n    private _sprites: SortableSprite[];\r\n    private _updateId1: number;\r\n    private _updateId2: number;\r\n    private _isEmpty: boolean;\r\n\r\n    constructor()\r\n    {\r\n        this._sprites = [];\r\n        this._updateId1 = -1;\r\n        this._updateId2 = -1;\r\n        this._isEmpty = false;\r\n    }\r\n\r\n    public get spriteCount(): number\r\n    {\r\n        return this._sprites.length;\r\n    }\r\n\r\n    public get isEmpty(): boolean\r\n    {\r\n        return this._isEmpty;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this.setSpriteCount(0);\r\n    }\r\n\r\n    public addSprite(sprite: SortableSprite): void\r\n    {\r\n        this._sprites.push(sprite);\r\n    }\r\n\r\n    public getSprite(k: number): SortableSprite\r\n    {\r\n        return this._sprites[k];\r\n    }\r\n\r\n    public get sprites(): SortableSprite[]\r\n    {\r\n        return this._sprites;\r\n    }\r\n\r\n    public needsUpdate(k: number, _arg_2: number): boolean\r\n    {\r\n        if((k === this._updateId1) && (_arg_2 === this._updateId2)) return false;\r\n\r\n        this._updateId1 = k;\r\n        this._updateId2 = _arg_2;\r\n\r\n        return true;\r\n    }\r\n\r\n    public setSpriteCount(k: number): void\r\n    {\r\n        if(k < this._sprites.length)\r\n        {\r\n            let iterator = k;\r\n\r\n            while(iterator < this._sprites.length)\r\n            {\r\n                const sprite = this._sprites[iterator];\r\n\r\n                if(sprite) sprite.dispose();\r\n\r\n                iterator++;\r\n            }\r\n\r\n            this._sprites.splice(k, (this._sprites.length - k));\r\n        }\r\n\r\n        this._isEmpty = (this._sprites.length) ? false : true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}