{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/layout/LayoutRoomThumbnailView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { GetConfiguration } from '../../api';\nimport { Base } from '../Base';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LayoutRoomThumbnailView = props => {\n  _s();\n\n  const {\n    roomId = -1,\n    customUrl = null,\n    shrink = true,\n    overflow = 'hidden',\n    classNames = [],\n    children = null,\n    ...rest\n  } = props;\n  const getClassNames = useMemo(() => {\n    const newClassNames = ['room-thumbnail', 'border'];\n    if (classNames.length) newClassNames.push(...classNames);\n    return newClassNames;\n  }, [classNames]);\n  const getImageUrl = useMemo(() => {\n    if (customUrl && customUrl.length) return GetConfiguration('image.library.url') + customUrl;\n    return GetConfiguration('thumbnails.url').replace('%thumbnail%', roomId.toString());\n  }, [customUrl, roomId]);\n  return /*#__PURE__*/_jsxDEV(Base, {\n    shrink: shrink,\n    overflow: overflow,\n    classNames: getClassNames,\n    ...rest,\n    children: [getImageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"\",\n      src: getImageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 30\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LayoutRoomThumbnailView, \"Y7XOxStU87jRSDLPumrCk4wCqfA=\");\n\n_c = LayoutRoomThumbnailView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutRoomThumbnailView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/layout/LayoutRoomThumbnailView.tsx"],"names":["useMemo","GetConfiguration","Base","LayoutRoomThumbnailView","props","roomId","customUrl","shrink","overflow","classNames","children","rest","getClassNames","newClassNames","length","push","getImageUrl","replace","toString"],"mappings":";;;AAAA,SAAaA,OAAb,QAA4B,OAA5B;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,IAAT,QAAgC,SAAhC;;AAQA,OAAO,MAAMC,uBAAyD,GAAGC,KAAK,IAC9E;AAAA;;AACI,QAAM;AAAEC,IAAAA,MAAM,GAAG,CAAC,CAAZ;AAAeC,IAAAA,SAAS,GAAG,IAA3B;AAAiCC,IAAAA,MAAM,GAAG,IAA1C;AAAgDC,IAAAA,QAAQ,GAAG,QAA3D;AAAqEC,IAAAA,UAAU,GAAG,EAAlF;AAAsFC,IAAAA,QAAQ,GAAG,IAAjG;AAAuG,OAAGC;AAA1G,MAAmHP,KAAzH;AAEA,QAAMQ,aAAa,GAAGZ,OAAO,CAAC,MAC9B;AACI,UAAMa,aAAuB,GAAG,CAAE,gBAAF,EAAoB,QAApB,CAAhC;AAEA,QAAGJ,UAAU,CAACK,MAAd,EAAsBD,aAAa,CAACE,IAAd,CAAmB,GAAGN,UAAtB;AAEtB,WAAOI,aAAP;AACH,GAP4B,EAO1B,CAAEJ,UAAF,CAP0B,CAA7B;AASA,QAAMO,WAAW,GAAGhB,OAAO,CAAC,MAC5B;AACI,QAAGM,SAAS,IAAIA,SAAS,CAACQ,MAA1B,EAAkC,OAAQb,gBAAgB,CAAS,mBAAT,CAAhB,GAAgDK,SAAxD;AAElC,WAAQL,gBAAgB,CAAS,gBAAT,CAAhB,CAA2CgB,OAA3C,CAAmD,aAAnD,EAAkEZ,MAAM,CAACa,QAAP,EAAlE,CAAR;AACH,GAL0B,EAKxB,CAAEZ,SAAF,EAAaD,MAAb,CALwB,CAA3B;AAOA,sBACI,QAAC,IAAD;AAAM,IAAA,MAAM,EAAGE,MAAf;AAAwB,IAAA,QAAQ,EAAGC,QAAnC;AAA8C,IAAA,UAAU,EAAGI,aAA3D;AAAA,OAAgFD,IAAhF;AAAA,eACMK,WAAW,iBAAI;AAAK,MAAA,GAAG,EAAC,EAAT;AAAY,MAAA,GAAG,EAAGA;AAAlB;AAAA;AAAA;AAAA;AAAA,YADrB,EAEMN,QAFN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA1BM;;GAAMP,uB;;KAAAA,uB","sourcesContent":["import { FC, useMemo } from 'react';\nimport { GetConfiguration } from '../../api';\nimport { Base, BaseProps } from '../Base';\n\nexport interface LayoutRoomThumbnailViewProps extends BaseProps<HTMLDivElement>\n{\n    roomId?: number;\n    customUrl?: string;\n}\n\nexport const LayoutRoomThumbnailView: FC<LayoutRoomThumbnailViewProps> = props =>\n{\n    const { roomId = -1, customUrl = null, shrink = true, overflow = 'hidden', classNames = [], children = null, ...rest } = props;\n\n    const getClassNames = useMemo(() =>\n    {\n        const newClassNames: string[] = [ 'room-thumbnail', 'border' ];\n\n        if(classNames.length) newClassNames.push(...classNames);\n\n        return newClassNames;\n    }, [ classNames ]);\n\n    const getImageUrl = useMemo(() =>\n    {\n        if(customUrl && customUrl.length) return (GetConfiguration<string>('image.library.url') + customUrl);\n\n        return (GetConfiguration<string>('thumbnails.url').replace('%thumbnail%', roomId.toString()));\n    }, [ customUrl, roomId ]);\n\n    return (\n        <Base shrink={ shrink } overflow={ overflow } classNames={ getClassNames } { ...rest }>\n            { getImageUrl && <img alt=\"\" src={ getImageUrl } /> }\n            { children }\n        </Base>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}