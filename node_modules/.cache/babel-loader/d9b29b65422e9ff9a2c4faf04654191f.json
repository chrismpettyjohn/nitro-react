{"ast":null,"code":"import { GroupBadgesEvent } from '../communication/messages/incoming/group/GroupBadgesEvent';\nimport { GroupBadgesComposer } from '../communication/messages/outgoing/group/GroupBadgesComposer';\nexport class GroupInformationManager {\n  constructor(sessionDataManager) {\n    this._sessionDataManager = void 0;\n    this._groupBadges = void 0;\n    this._messages = void 0;\n    this._sessionDataManager = sessionDataManager;\n    this._groupBadges = new Map();\n  }\n\n  init() {\n    if (this._sessionDataManager && this._sessionDataManager.communication) {\n      this._messages = [new GroupBadgesEvent(this.onGroupBadgesEvent.bind(this))];\n\n      for (const message of this._messages) this._sessionDataManager.communication.registerMessageEvent(message);\n    }\n  }\n\n  dispose() {\n    if (this.disposed) return;\n\n    if (this._messages && this._messages.length) {\n      for (const message of this._messages) this._sessionDataManager.communication.removeMessageEvent(message);\n\n      this._messages = null;\n    }\n\n    this._groupBadges = null;\n    this._sessionDataManager = null;\n  }\n\n  requestGroupBadges() {\n    this._sessionDataManager.send(new GroupBadgesComposer());\n  }\n\n  onGroupBadgesEvent(event) {\n    if (!event) return;\n    const parser = event.getParser();\n    if (!parser) return;\n    this._groupBadges = parser.badges;\n  }\n\n  getGroupBadge(groupId) {\n    return this._groupBadges.get(groupId);\n  }\n\n  get disposed() {\n    return !!this._sessionDataManager;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/session/GroupInformationManager.ts"],"names":["GroupBadgesEvent","GroupBadgesComposer","GroupInformationManager","constructor","sessionDataManager","_sessionDataManager","_groupBadges","_messages","Map","init","communication","onGroupBadgesEvent","bind","message","registerMessageEvent","dispose","disposed","length","removeMessageEvent","requestGroupBadges","send","event","parser","getParser","badges","getGroupBadge","groupId","get"],"mappings":"AAEA,SAASA,gBAAT,QAAiC,2DAAjC;AACA,SAASC,mBAAT,QAAoC,8DAApC;AAGA,OAAO,MAAMC,uBAAN,CACP;AAMIC,EAAAA,WAAW,CAACC,kBAAD,EACX;AAAA,SANQC,mBAMR;AAAA,SALQC,YAKR;AAAA,SAHQC,SAGR;AACI,SAAKF,mBAAL,GAA2BD,kBAA3B;AACA,SAAKE,YAAL,GAAoB,IAAIE,GAAJ,EAApB;AACH;;AAEMC,EAAAA,IAAI,GACX;AACI,QAAG,KAAKJ,mBAAL,IAA4B,KAAKA,mBAAL,CAAyBK,aAAxD,EACA;AACI,WAAKH,SAAL,GAAiB,CACb,IAAIP,gBAAJ,CAAqB,KAAKW,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAArB,CADa,CAAjB;;AAIA,WAAI,MAAMC,OAAV,IAAqB,KAAKN,SAA1B,EAAqC,KAAKF,mBAAL,CAAyBK,aAAzB,CAAuCI,oBAAvC,CAA4DD,OAA5D;AACxC;AACJ;;AAEME,EAAAA,OAAO,GACd;AACI,QAAG,KAAKC,QAAR,EAAkB;;AAElB,QAAG,KAAKT,SAAL,IAAkB,KAAKA,SAAL,CAAeU,MAApC,EACA;AACI,WAAI,MAAMJ,OAAV,IAAqB,KAAKN,SAA1B,EAAqC,KAAKF,mBAAL,CAAyBK,aAAzB,CAAuCQ,kBAAvC,CAA0DL,OAA1D;;AAErC,WAAKN,SAAL,GAAiB,IAAjB;AACH;;AAED,SAAKD,YAAL,GAAoB,IAApB;AACA,SAAKD,mBAAL,GAA2B,IAA3B;AACH;;AAEMc,EAAAA,kBAAkB,GACzB;AACI,SAAKd,mBAAL,CAAyBe,IAAzB,CAA8B,IAAInB,mBAAJ,EAA9B;AACH;;AAEOU,EAAAA,kBAAkB,CAACU,KAAD,EAC1B;AACI,QAAG,CAACA,KAAJ,EAAW;AAEX,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEA,QAAG,CAACD,MAAJ,EAAY;AAEZ,SAAKhB,YAAL,GAAoBgB,MAAM,CAACE,MAA3B;AACH;;AAEMC,EAAAA,aAAa,CAACC,OAAD,EACpB;AACI,WAAO,KAAKpB,YAAL,CAAkBqB,GAAlB,CAAsBD,OAAtB,CAAP;AACH;;AAEkB,MAARV,QAAQ,GACnB;AACI,WAAO,CAAC,CAAC,KAAKX,mBAAd;AACH;;AA/DL","sourcesContent":["import { IDisposable } from '../../core/common/disposable/IDisposable';\r\nimport { IMessageEvent } from '../../core/communication/messages/IMessageEvent';\r\nimport { GroupBadgesEvent } from '../communication/messages/incoming/group/GroupBadgesEvent';\r\nimport { GroupBadgesComposer } from '../communication/messages/outgoing/group/GroupBadgesComposer';\r\nimport { SessionDataManager } from './SessionDataManager';\r\n\r\nexport class GroupInformationManager implements IDisposable\r\n{\r\n    private _sessionDataManager: SessionDataManager;\r\n    private _groupBadges: Map<number, string>;\r\n\r\n    private _messages: IMessageEvent[];\r\n\r\n    constructor(sessionDataManager: SessionDataManager)\r\n    {\r\n        this._sessionDataManager = sessionDataManager;\r\n        this._groupBadges = new Map();\r\n    }\r\n\r\n    public init(): void\r\n    {\r\n        if(this._sessionDataManager && this._sessionDataManager.communication)\r\n        {\r\n            this._messages = [\r\n                new GroupBadgesEvent(this.onGroupBadgesEvent.bind(this))\r\n            ];\r\n\r\n            for(const message of this._messages) this._sessionDataManager.communication.registerMessageEvent(message);\r\n        }\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this.disposed) return;\r\n\r\n        if(this._messages && this._messages.length)\r\n        {\r\n            for(const message of this._messages) this._sessionDataManager.communication.removeMessageEvent(message);\r\n\r\n            this._messages = null;\r\n        }\r\n\r\n        this._groupBadges = null;\r\n        this._sessionDataManager = null;\r\n    }\r\n\r\n    public requestGroupBadges(): void\r\n    {\r\n        this._sessionDataManager.send(new GroupBadgesComposer());\r\n    }\r\n\r\n    private onGroupBadgesEvent(event: GroupBadgesEvent): void\r\n    {\r\n        if(!event) return;\r\n\r\n        const parser = event.getParser();\r\n\r\n        if(!parser) return;\r\n\r\n        this._groupBadges = parser.badges;\r\n    }\r\n\r\n    public getGroupBadge(groupId: number): string\r\n    {\r\n        return this._groupBadges.get(groupId);\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return !!this._sessionDataManager;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}