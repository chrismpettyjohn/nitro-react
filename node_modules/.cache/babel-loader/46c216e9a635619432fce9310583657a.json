{"ast":null,"code":"import { Vector3d } from '../../../../../room';\nexport class FurniturePlanetSystemVisualizationPlanetObject {\n  constructor(name, index, radius, arcSpeed, arcOffset, height) {\n    this._name = void 0;\n    this._index = void 0;\n    this._radius = void 0;\n    this._arcSpeed = void 0;\n    this._arcOffset = void 0;\n    this._height = void 0;\n    this._position = void 0;\n    this._positionVector = void 0;\n    this._children = void 0;\n    this._name = name;\n    this._index = index;\n    this._radius = radius;\n    this._arcSpeed = arcSpeed * Math.PI * 2 / 360;\n    this._arcOffset = arcOffset * Math.PI * 2 / 360;\n    this._height = height;\n    this._position = 0;\n    this._positionVector = new Vector3d(0, 0, 0);\n    this._children = [];\n  }\n\n  dispose() {\n    while (this._children.length > 0) {\n      const child = this._children.shift();\n\n      child.dispose();\n    }\n  }\n\n  update(offsets, rootPosition, scale) {\n    this._position = this._position + this._arcSpeed / FurniturePlanetSystemVisualizationPlanetObject.SYSTEM_TEMPO;\n    offsets[this._index] = this.getPositionVector(rootPosition, scale);\n\n    for (const child of this._children) child.update(offsets, this._positionVector, scale);\n  }\n\n  getPositionVector(position, scale) {\n    const cos = this._radius * Math.cos(this._position + this._arcOffset);\n    const sine = this._radius * Math.sin(this._position + this._arcOffset);\n    this._positionVector.x = (cos - sine) * (scale / 2);\n    this._positionVector.y = (sine + cos) * (scale / 2) * 0.5 - this._height * (scale / 2);\n    this._positionVector.z = -Math.trunc(4 * (cos + sine) - 0.7);\n    if (position) this._positionVector.add(position);\n    return this._positionVector;\n  }\n\n  addChild(planetObject) {\n    if (this._children.indexOf(planetObject) >= 0) return;\n\n    this._children.push(planetObject);\n  }\n\n  hasChild(name) {\n    return !!this.getChild(name);\n  }\n\n  getChild(name) {\n    for (const child of this._children) {\n      if (child.name === name) return child;\n      if (child.hasChild(name)) return child.getChild(name);\n    }\n\n    return null;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n}\nFurniturePlanetSystemVisualizationPlanetObject.SYSTEM_TEMPO = 30;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurniturePlanetSystemVisualizationPlanetObject.ts"],"names":["Vector3d","FurniturePlanetSystemVisualizationPlanetObject","constructor","name","index","radius","arcSpeed","arcOffset","height","_name","_index","_radius","_arcSpeed","_arcOffset","_height","_position","_positionVector","_children","Math","PI","dispose","length","child","shift","update","offsets","rootPosition","scale","SYSTEM_TEMPO","getPositionVector","position","cos","sine","sin","x","y","z","trunc","add","addChild","planetObject","indexOf","push","hasChild","getChild"],"mappings":"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","sourcesContent":["import { Vector3d } from '../../../../../room';\r\n\r\nexport class FurniturePlanetSystemVisualizationPlanetObject\r\n{\r\n    private static SYSTEM_TEMPO: number = 30;\r\n\r\n    private _name: string;\r\n    private _index: number;\r\n    private _radius: number;\r\n    private _arcSpeed: number;\r\n    private _arcOffset: number;\r\n    private _height: number;\r\n    private _position: number;\r\n    private _positionVector: Vector3d;\r\n    private _children: FurniturePlanetSystemVisualizationPlanetObject[];\r\n\r\n    constructor(name: string, index: number, radius: number, arcSpeed: number, arcOffset: number, height: number)\r\n    {\r\n        this._name = name;\r\n        this._index = index;\r\n        this._radius = radius;\r\n        this._arcSpeed = (((arcSpeed * Math.PI) * 2) / 360);\r\n        this._arcOffset = (((arcOffset * Math.PI) * 2) / 360);\r\n        this._height = height;\r\n        this._position = 0;\r\n        this._positionVector = new Vector3d(0, 0, 0);\r\n        this._children = [];\r\n    }\r\n\r\n    public dispose():void\r\n    {\r\n        while(this._children.length > 0)\r\n        {\r\n            const child = this._children.shift();\r\n\r\n            child.dispose();\r\n        }\r\n    }\r\n\r\n    public update(offsets: Vector3d[], rootPosition: Vector3d, scale: number):void\r\n    {\r\n        this._position = (this._position + (this._arcSpeed / FurniturePlanetSystemVisualizationPlanetObject.SYSTEM_TEMPO));\r\n\r\n        offsets[this._index] = this.getPositionVector(rootPosition, scale);\r\n\r\n        for(const child of this._children) child.update(offsets, this._positionVector, scale);\r\n    }\r\n\r\n    public getPositionVector(position: Vector3d, scale: number): Vector3d\r\n    {\r\n        const cos = (this._radius * Math.cos((this._position + this._arcOffset)));\r\n        const sine = (this._radius * Math.sin((this._position + this._arcOffset)));\r\n\r\n        this._positionVector.x = ((cos - sine) * (scale / 2));\r\n        this._positionVector.y = ((((sine + cos) * (scale / 2)) * 0.5) - (this._height * (scale / 2)));\r\n        this._positionVector.z = -(Math.trunc(((4 * (cos + sine)) - 0.7)));\r\n\r\n        if(position) this._positionVector.add(position);\r\n\r\n        return this._positionVector;\r\n    }\r\n\r\n    public addChild(planetObject: FurniturePlanetSystemVisualizationPlanetObject):void\r\n    {\r\n        if(this._children.indexOf(planetObject) >= 0) return;\r\n\r\n        this._children.push(planetObject);\r\n    }\r\n\r\n    public hasChild(name: string): boolean\r\n    {\r\n        return !!this.getChild(name);\r\n    }\r\n\r\n    public getChild(name: string): FurniturePlanetSystemVisualizationPlanetObject\r\n    {\r\n        for(const child of this._children)\r\n        {\r\n            if(child.name === name) return child;\r\n\r\n            if(child.hasChild(name)) return child.getChild(name);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get name(): string\r\n    {\r\n        return this._name;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}