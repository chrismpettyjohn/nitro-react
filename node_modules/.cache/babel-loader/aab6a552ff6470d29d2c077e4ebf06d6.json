{"ast":null,"code":"import { MessageEvent } from './MessageEvent';\nexport class MessageClassManager {\n  constructor() {\n    this._messageIdByEvent = void 0;\n    this._messageIdByComposer = void 0;\n    this._messageInstancesById = void 0;\n    this._messageIdByEvent = new Map();\n    this._messageIdByComposer = new Map();\n    this._messageInstancesById = new Map();\n  }\n\n  dispose() {\n    this._messageIdByEvent.clear();\n\n    this._messageIdByComposer.clear();\n\n    this._messageInstancesById.clear();\n  }\n\n  registerMessages(configuration) {\n    for (const [header, handler] of configuration.events) this.registerMessageEventClass(header, handler);\n\n    for (const [header, handler] of configuration.composers) this.registerMessageComposerClass(header, handler);\n  }\n\n  registerMessageEventClass(header, handler) {\n    if (!header || !handler) return;\n\n    this._messageIdByEvent.set(handler, header);\n  }\n\n  registerMessageComposerClass(header, handler) {\n    if (!header || !handler) return;\n\n    this._messageIdByComposer.set(handler, header);\n  }\n\n  registerMessageEvent(event) {\n    if (!event) return;\n    const header = this.getEventId(event);\n    if (!header) return;\n\n    let existing = this._messageInstancesById.get(header);\n\n    if (!existing || !existing.length) {\n      existing = [];\n\n      this._messageInstancesById.set(header, existing);\n    }\n\n    existing.push(event);\n  }\n\n  removeMessageEvent(event) {\n    if (!event) return;\n    const header = this.getEventId(event);\n    if (!header) return;\n\n    const existing = this._messageInstancesById.get(header);\n\n    if (!existing) return;\n\n    for (const [index, message] of existing.entries()) {\n      if (!message) continue;\n      if (message !== event) continue;\n      existing.splice(index, 1);\n      if (existing.length === 0) this._messageInstancesById.delete(header);\n      message.dispose();\n      return;\n    }\n  }\n\n  getEvents(header) {\n    if (!header) return;\n\n    const existing = this._messageInstancesById.get(header);\n\n    if (!existing) return;\n    return existing;\n  }\n\n  getEventId(event) {\n    if (!event) return -1; //@ts-ignore\n\n    const name = event instanceof MessageEvent ? event.constructor : event;\n\n    const existing = this._messageIdByEvent.get(name);\n\n    if (!existing) return -1;\n    return existing;\n  }\n\n  getComposerId(composer) {\n    if (!composer) return -1;\n\n    const existing = this._messageIdByComposer.get(composer.constructor);\n\n    if (!existing) return -1;\n    return existing;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/communication/messages/MessageClassManager.ts"],"names":["MessageEvent","MessageClassManager","constructor","_messageIdByEvent","_messageIdByComposer","_messageInstancesById","Map","dispose","clear","registerMessages","configuration","header","handler","events","registerMessageEventClass","composers","registerMessageComposerClass","set","registerMessageEvent","event","getEventId","existing","get","length","push","removeMessageEvent","index","message","entries","splice","delete","getEvents","name","getComposerId","composer"],"mappings":"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","sourcesContent":["import { IMessageComposer } from './IMessageComposer';\r\nimport { IMessageConfiguration } from './IMessageConfiguration';\r\nimport { IMessageEvent } from './IMessageEvent';\r\nimport { MessageEvent } from './MessageEvent';\r\n\r\nexport class MessageClassManager\r\n{\r\n    private _messageIdByEvent: Map<Function, number>;\r\n    private _messageIdByComposer: Map<Function, number>;\r\n    private _messageInstancesById: Map<number, IMessageEvent[]>;\r\n\r\n    constructor()\r\n    {\r\n        this._messageIdByEvent = new Map();\r\n        this._messageIdByComposer = new Map();\r\n        this._messageInstancesById = new Map();\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._messageIdByEvent.clear();\r\n        this._messageIdByComposer.clear();\r\n        this._messageInstancesById.clear();\r\n    }\r\n\r\n    public registerMessages(configuration: IMessageConfiguration): void\r\n    {\r\n        for(const [ header, handler ] of configuration.events) this.registerMessageEventClass(header, handler);\r\n\r\n        for(const [ header, handler ] of configuration.composers) this.registerMessageComposerClass(header, handler);\r\n    }\r\n\r\n    private registerMessageEventClass(header: number, handler: Function): void\r\n    {\r\n        if(!header || !handler) return;\r\n\r\n        this._messageIdByEvent.set(handler, header);\r\n    }\r\n\r\n    private registerMessageComposerClass(header: number, handler: Function): void\r\n    {\r\n        if(!header || !handler) return;\r\n\r\n        this._messageIdByComposer.set(handler, header);\r\n    }\r\n\r\n    public registerMessageEvent(event: IMessageEvent): void\r\n    {\r\n        if(!event) return;\r\n\r\n        const header = this.getEventId(event);\r\n\r\n        if(!header) return;\r\n\r\n        let existing = this._messageInstancesById.get(header);\r\n\r\n        if(!existing || !existing.length)\r\n        {\r\n            existing = [];\r\n\r\n            this._messageInstancesById.set(header, existing);\r\n        }\r\n\r\n        existing.push(event);\r\n    }\r\n\r\n    public removeMessageEvent(event: IMessageEvent): void\r\n    {\r\n        if(!event) return;\r\n\r\n        const header = this.getEventId(event);\r\n\r\n        if(!header) return;\r\n\r\n        const existing = this._messageInstancesById.get(header);\r\n\r\n        if(!existing) return;\r\n\r\n        for(const [ index, message ] of existing.entries())\r\n        {\r\n            if(!message) continue;\r\n\r\n            if(message !== event) continue;\r\n\r\n            existing.splice(index, 1);\r\n\r\n            if(existing.length === 0) this._messageInstancesById.delete(header);\r\n\r\n            message.dispose();\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    public getEvents(header: number): IMessageEvent[]\r\n    {\r\n        if(!header) return;\r\n\r\n        const existing = this._messageInstancesById.get(header);\r\n\r\n        if(!existing) return;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getEventId(event: IMessageEvent): number\r\n    {\r\n        if(!event) return -1;\r\n\r\n        //@ts-ignore\r\n        const name = (event instanceof MessageEvent ? event.constructor : event) as Function;\r\n\r\n        const existing = this._messageIdByEvent.get(name);\r\n\r\n        if(!existing) return -1;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getComposerId(composer: IMessageComposer<unknown[]>): number\r\n    {\r\n        if(!composer) return -1;\r\n\r\n        const existing = this._messageIdByComposer.get(composer.constructor);\r\n\r\n        if(!existing) return -1;\r\n\r\n        return existing;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}