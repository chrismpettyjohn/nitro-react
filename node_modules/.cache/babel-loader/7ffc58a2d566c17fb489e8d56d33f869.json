{"ast":null,"code":"import { IssueMessageData } from './IssueMessageData';\nimport { PatternMatchData } from './PatternMatchData';\nexport class IssueInfoMessageParser {\n  constructor() {\n    this._issueData = void 0;\n  }\n\n  get issueData() {\n    return this._issueData;\n  }\n\n  flush() {\n    this._issueData = null;\n    return true;\n  }\n\n  parse(k) {\n    const issueId = k.readInt();\n    const state = k.readInt();\n    const categoryId = k.readInt();\n    const reportedCategoryId = k.readInt();\n    const issueAgeInMs = k.readInt();\n    const priority = k.readInt();\n    const groupingId = k.readInt();\n    const reporterUserId = k.readInt();\n    const reporterUsername = k.readString();\n    const reportedUserId = k.readInt();\n    const reportedUsername = k.readString();\n    const pickerUserId = k.readInt();\n    const pickerUsername = k.readString();\n    const message = k.readString();\n    const chatRecordId = k.readInt();\n    const patternsCount = k.readInt();\n    const patterns = [];\n\n    for (let i = 0; i < patternsCount; i++) {\n      patterns.push(new PatternMatchData(k));\n    }\n\n    this._issueData = new IssueMessageData(issueId, state, categoryId, reportedCategoryId, issueAgeInMs, priority, groupingId, reporterUserId, reporterUsername, reportedUserId, reportedUsername, pickerUserId, pickerUsername, message, chatRecordId, patterns);\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/moderation/IssueInfoMessageParser.ts"],"names":["IssueMessageData","PatternMatchData","IssueInfoMessageParser","_issueData","issueData","flush","parse","k","issueId","readInt","state","categoryId","reportedCategoryId","issueAgeInMs","priority","groupingId","reporterUserId","reporterUsername","readString","reportedUserId","reportedUsername","pickerUserId","pickerUsername","message","chatRecordId","patternsCount","patterns","i","push"],"mappings":"AACA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAO,MAAMC,sBAAN,CACP;AAAA;AAAA,SACYC,UADZ;AAAA;;AAIwB,MAATC,SAAS,GACpB;AACI,WAAO,KAAKD,UAAZ;AACH;;AAEME,EAAAA,KAAK,GACZ;AACI,SAAKF,UAAL,GAAkB,IAAlB;AACA,WAAO,IAAP;AACH;;AAEMG,EAAAA,KAAK,CAACC,CAAD,EACZ;AACI,UAAMC,OAAe,GAAGD,CAAC,CAACE,OAAF,EAAxB;AACA,UAAMC,KAAa,GAAGH,CAAC,CAACE,OAAF,EAAtB;AACA,UAAME,UAAkB,GAAGJ,CAAC,CAACE,OAAF,EAA3B;AACA,UAAMG,kBAA0B,GAAGL,CAAC,CAACE,OAAF,EAAnC;AACA,UAAMI,YAAoB,GAAGN,CAAC,CAACE,OAAF,EAA7B;AACA,UAAMK,QAAgB,GAAGP,CAAC,CAACE,OAAF,EAAzB;AACA,UAAMM,UAAkB,GAAGR,CAAC,CAACE,OAAF,EAA3B;AACA,UAAMO,cAAsB,GAAGT,CAAC,CAACE,OAAF,EAA/B;AACA,UAAMQ,gBAAwB,GAAGV,CAAC,CAACW,UAAF,EAAjC;AACA,UAAMC,cAAsB,GAAGZ,CAAC,CAACE,OAAF,EAA/B;AACA,UAAMW,gBAAwB,GAAGb,CAAC,CAACW,UAAF,EAAjC;AACA,UAAMG,YAAoB,GAAGd,CAAC,CAACE,OAAF,EAA7B;AACA,UAAMa,cAAsB,GAAGf,CAAC,CAACW,UAAF,EAA/B;AACA,UAAMK,OAAe,GAAGhB,CAAC,CAACW,UAAF,EAAxB;AACA,UAAMM,YAAoB,GAAGjB,CAAC,CAACE,OAAF,EAA7B;AAEA,UAAMgB,aAAqB,GAAGlB,CAAC,CAACE,OAAF,EAA9B;AACA,UAAMiB,QAA2B,GAAG,EAApC;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,aAAnB,EAAkCE,CAAC,EAAnC,EACA;AACID,MAAAA,QAAQ,CAACE,IAAT,CAAc,IAAI3B,gBAAJ,CAAqBM,CAArB,CAAd;AACH;;AAED,SAAKJ,UAAL,GAAkB,IAAIH,gBAAJ,CAAqBQ,OAArB,EAA8BE,KAA9B,EAAqCC,UAArC,EAAiDC,kBAAjD,EAAqEC,YAArE,EACdC,QADc,EACJC,UADI,EACQC,cADR,EACwBC,gBADxB,EAC0CE,cAD1C,EAC0DC,gBAD1D,EAEdC,YAFc,EAEAC,cAFA,EAEgBC,OAFhB,EAEyBC,YAFzB,EAEuCE,QAFvC,CAAlB;AAGA,WAAO,IAAP;AACH;;AA7CL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../core';\r\nimport { IssueMessageData } from './IssueMessageData';\r\nimport { PatternMatchData } from './PatternMatchData';\r\n\r\nexport class IssueInfoMessageParser implements IMessageParser\r\n{\r\n    private _issueData:IssueMessageData;\r\n\r\n\r\n    public get issueData():IssueMessageData\r\n    {\r\n        return this._issueData;\r\n    }\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._issueData = null;\r\n        return true;\r\n    }\r\n\r\n    public parse(k:IMessageDataWrapper): boolean\r\n    {\r\n        const issueId: number = k.readInt();\r\n        const state: number = k.readInt();\r\n        const categoryId: number = k.readInt();\r\n        const reportedCategoryId: number = k.readInt();\r\n        const issueAgeInMs: number = k.readInt();\r\n        const priority: number = k.readInt();\r\n        const groupingId: number = k.readInt();\r\n        const reporterUserId: number = k.readInt();\r\n        const reporterUsername: string = k.readString();\r\n        const reportedUserId: number = k.readInt();\r\n        const reportedUsername: string = k.readString();\r\n        const pickerUserId: number = k.readInt();\r\n        const pickerUsername: string = k.readString();\r\n        const message: string = k.readString();\r\n        const chatRecordId: number = k.readInt();\r\n\r\n        const patternsCount: number = k.readInt();\r\n        const patterns:PatternMatchData[] = [];\r\n\r\n        for(let i = 0; i < patternsCount; i++)\r\n        {\r\n            patterns.push(new PatternMatchData(k));\r\n        }\r\n\r\n        this._issueData = new IssueMessageData(issueId, state, categoryId, reportedCategoryId, issueAgeInMs,\r\n            priority, groupingId, reporterUserId, reporterUsername, reportedUserId, reportedUsername,\r\n            pickerUserId, pickerUsername, message, chatRecordId, patterns);\r\n        return true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}