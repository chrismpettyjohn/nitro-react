{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/mod-tools/ModToolsView.tsx\",\n    _s = $RefreshSig$();\n\nimport { RoomEngineObjectEvent, RoomObjectCategory, RoomObjectType } from '@nitrots/nitro-renderer';\nimport { useCallback, useReducer, useRef, useState } from 'react';\nimport { GetRoomSession, GetSessionDataManager } from '../../api';\nimport { Base, DraggableWindowPosition, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../common';\nimport { ButtonModtool } from '../../common/ButtonModtool';\nimport { ModToolsEvent, ModToolsOpenRoomChatlogEvent, ModToolsOpenRoomInfoEvent, ModToolsOpenUserInfoEvent } from '../../events';\nimport { DispatchUiEvent, UseRoomEngineEvent, UseUiEvent } from '../../hooks';\nimport { ModToolsContextProvider } from './ModToolsContext';\nimport { ModToolsMessageHandler } from './ModToolsMessageHandler';\nimport { initialModTools, ModToolsActions, ModToolsReducer } from './reducers/ModToolsReducer';\nimport { ModToolsChatlogView } from './views/room/ModToolsChatlogView';\nimport { ModToolsRoomView } from './views/room/ModToolsRoomView';\nimport { ModToolsTicketsView } from './views/tickets/ModToolsTicketsView';\nimport { ModToolsUserChatlogView } from './views/user/ModToolsUserChatlogView';\nimport { ModToolsUserView } from './views/user/ModToolsUserView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModToolsView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(true);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [isTicketsVisible, setIsTicketsVisible] = useState(false);\n  const [modToolsState, dispatchModToolsState] = useReducer(ModToolsReducer, initialModTools);\n  const {\n    currentRoomId = null,\n    openRooms = null,\n    openRoomChatlogs = null,\n    openUserChatlogs = null,\n    openUserInfo = null\n  } = modToolsState;\n  const elementRef = useRef(null);\n  const isMod = GetSessionDataManager().isModerator;\n  const onModToolsEvent = useCallback(event => {\n    switch (event.type) {\n      case ModToolsEvent.SHOW_MOD_TOOLS:\n        setIsVisible(true);\n        return;\n\n      case ModToolsEvent.HIDE_MOD_TOOLS:\n        setIsVisible(false);\n        return;\n\n      case ModToolsEvent.TOGGLE_MOD_TOOLS:\n        setIsVisible(value => !value);\n        return;\n    }\n  }, []);\n  UseUiEvent(ModToolsEvent.SHOW_MOD_TOOLS, onModToolsEvent);\n  UseUiEvent(ModToolsEvent.HIDE_MOD_TOOLS, onModToolsEvent);\n  UseUiEvent(ModToolsEvent.TOGGLE_MOD_TOOLS, onModToolsEvent);\n  const onRoomEngineObjectEvent = useCallback(event => {\n    if (event.category !== RoomObjectCategory.UNIT) return;\n    const roomSession = GetRoomSession();\n    if (!roomSession) return;\n    const userData = roomSession.userDataManager.getUserDataByIndex(event.objectId);\n    if (!userData || userData.type !== RoomObjectType.USER) return;\n    setSelectedUser({\n      userId: userData.webID,\n      username: userData.name\n    });\n  }, []);\n  UseRoomEngineEvent(RoomEngineObjectEvent.SELECTED, onRoomEngineObjectEvent);\n  const handleClick = useCallback((action, value) => {\n    if (!action) return;\n\n    switch (action) {\n      case 'toggle_room':\n        {\n          if (!openRooms) {\n            DispatchUiEvent(new ModToolsOpenRoomInfoEvent(currentRoomId));\n            return;\n          }\n\n          if (openRooms.indexOf(currentRoomId) > -1) {\n            handleClick('close_room', currentRoomId.toString());\n          } else {\n            DispatchUiEvent(new ModToolsOpenRoomInfoEvent(currentRoomId));\n          }\n\n          return;\n        }\n\n      case 'close_room':\n        {\n          const itemIndex = openRooms.indexOf(Number(value));\n          const clone = Array.from(openRooms);\n          clone.splice(itemIndex, 1);\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_ROOMS,\n            payload: {\n              openRooms: clone\n            }\n          });\n          return;\n        }\n\n      case 'toggle_room_chatlog':\n        {\n          if (!openRoomChatlogs) {\n            DispatchUiEvent(new ModToolsOpenRoomChatlogEvent(currentRoomId));\n            return;\n          }\n\n          if (openRoomChatlogs.indexOf(currentRoomId) > -1) {\n            handleClick('close_room_chatlog', currentRoomId.toString());\n          } else {\n            DispatchUiEvent(new ModToolsOpenRoomChatlogEvent(currentRoomId));\n          }\n\n          return;\n        }\n\n      case 'close_room_chatlog':\n        {\n          const itemIndex = openRoomChatlogs.indexOf(Number(value));\n          const clone = Array.from(openRoomChatlogs);\n          clone.splice(itemIndex, 1);\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_ROOM_CHATLOGS,\n            payload: {\n              openRoomChatlogs: clone\n            }\n          });\n          return;\n        }\n\n      case 'toggle_user_info':\n        {\n          if (!selectedUser) return;\n          const userId = selectedUser.userId;\n\n          if (!openUserInfo) {\n            DispatchUiEvent(new ModToolsOpenUserInfoEvent(userId));\n            return;\n          }\n\n          if (openUserInfo.indexOf(userId) > -1) {\n            handleClick('close_user_info', userId.toString());\n          } else {\n            DispatchUiEvent(new ModToolsOpenUserInfoEvent(userId));\n          }\n\n          return;\n        }\n\n      case 'close_user_info':\n        {\n          const itemIndex = openUserInfo.indexOf(Number(value));\n          const clone = Array.from(openUserInfo);\n          clone.splice(itemIndex, 1);\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_USERINFO,\n            payload: {\n              openUserInfo: clone\n            }\n          });\n          return;\n        }\n\n      case 'close_user_chatlog':\n        {\n          const itemIndex = openUserChatlogs.indexOf(Number(value));\n          const clone = Array.from(openUserChatlogs);\n          clone.splice(itemIndex, 1);\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_USER_CHATLOGS,\n            payload: {\n              openUserChatlogs: clone\n            }\n          });\n          return;\n        }\n    }\n  }, [openRooms, currentRoomId, openRoomChatlogs, selectedUser, openUserInfo, openUserChatlogs]);\n  return /*#__PURE__*/_jsxDEV(ModToolsContextProvider, {\n    value: {\n      modToolsState,\n      dispatchModToolsState\n    },\n    children: [/*#__PURE__*/_jsxDEV(ModToolsMessageHandler, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), isVisible && isMod && /*#__PURE__*/_jsxDEV(NitroCardView, {\n      uniqueKey: \"mod-tools\",\n      className: \"nitro-mod-tools\",\n      windowPosition: DraggableWindowPosition.TOP_LEFT,\n      theme: \"primary-modtool\",\n      children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n        headerText: 'Mod Tools',\n        onCloseClick: event => setIsVisible(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n        className: \"text-black pb-3 pt-2\",\n        gap: 3,\n        children: [/*#__PURE__*/_jsxDEV(ButtonModtool, {\n          gap: 1,\n          onClick: event => handleClick('toggle_room'),\n          disabled: !currentRoomId,\n          className: \"position-relative\",\n          children: [/*#__PURE__*/_jsxDEV(Base, {\n            className: \"icon icon-small-room position-absolute start-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), \" Room tool\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ButtonModtool, {\n          innerRef: elementRef,\n          gap: 1,\n          onClick: event => handleClick('toggle_room_chatlog'),\n          disabled: !currentRoomId,\n          className: \"position-relative\",\n          children: [/*#__PURE__*/_jsxDEV(Base, {\n            className: \"icon icon-chat-history position-absolute start-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), \" Chatlog Tool\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ButtonModtool, {\n          gap: 1,\n          onClick: () => handleClick('toggle_user_info'),\n          disabled: !selectedUser,\n          className: \"position-relative\",\n          children: [/*#__PURE__*/_jsxDEV(Base, {\n            className: \"icon icon-user position-absolute start-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this), \" User: \", selectedUser ? selectedUser.username : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ButtonModtool, {\n          gap: 1,\n          onClick: () => setIsTicketsVisible(value => !value),\n          className: \"position-relative\",\n          children: [/*#__PURE__*/_jsxDEV(Base, {\n            className: \"icon icon-tickets position-absolute start-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this), \" Report Tool\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this), openRooms && openRooms.map(roomId => {\n      return /*#__PURE__*/_jsxDEV(ModToolsRoomView, {\n        roomId: roomId,\n        onCloseClick: () => handleClick('close_room', roomId.toString())\n      }, roomId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 24\n      }, this);\n    }), openRoomChatlogs && openRoomChatlogs.map(roomId => {\n      return /*#__PURE__*/_jsxDEV(ModToolsChatlogView, {\n        roomId: roomId,\n        onCloseClick: () => handleClick('close_room_chatlog', roomId.toString())\n      }, roomId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 24\n      }, this);\n    }), openUserInfo && openUserInfo.map(userId => {\n      return /*#__PURE__*/_jsxDEV(ModToolsUserView, {\n        userId: userId,\n        onCloseClick: () => handleClick('close_user_info', userId.toString())\n      }, userId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 24\n      }, this);\n    }), openUserChatlogs && openUserChatlogs.map(userId => {\n      return /*#__PURE__*/_jsxDEV(ModToolsUserChatlogView, {\n        userId: userId,\n        onCloseClick: () => handleClick('close_user_chatlog', userId.toString())\n      }, userId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 24\n      }, this);\n    }), isTicketsVisible && /*#__PURE__*/_jsxDEV(ModToolsTicketsView, {\n      onCloseClick: () => setIsTicketsVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModToolsView, \"zhwdPmIFUTKlMNyVuMPmMWnF0SE=\");\n\n_c = ModToolsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModToolsView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/mod-tools/ModToolsView.tsx"],"names":["RoomEngineObjectEvent","RoomObjectCategory","RoomObjectType","useCallback","useReducer","useRef","useState","GetRoomSession","GetSessionDataManager","Base","DraggableWindowPosition","NitroCardContentView","NitroCardHeaderView","NitroCardView","ButtonModtool","ModToolsEvent","ModToolsOpenRoomChatlogEvent","ModToolsOpenRoomInfoEvent","ModToolsOpenUserInfoEvent","DispatchUiEvent","UseRoomEngineEvent","UseUiEvent","ModToolsContextProvider","ModToolsMessageHandler","initialModTools","ModToolsActions","ModToolsReducer","ModToolsChatlogView","ModToolsRoomView","ModToolsTicketsView","ModToolsUserChatlogView","ModToolsUserView","ModToolsView","props","isVisible","setIsVisible","selectedUser","setSelectedUser","isTicketsVisible","setIsTicketsVisible","modToolsState","dispatchModToolsState","currentRoomId","openRooms","openRoomChatlogs","openUserChatlogs","openUserInfo","elementRef","isMod","isModerator","onModToolsEvent","event","type","SHOW_MOD_TOOLS","HIDE_MOD_TOOLS","TOGGLE_MOD_TOOLS","value","onRoomEngineObjectEvent","category","UNIT","roomSession","userData","userDataManager","getUserDataByIndex","objectId","USER","userId","webID","username","name","SELECTED","handleClick","action","indexOf","toString","itemIndex","Number","clone","Array","from","splice","SET_OPEN_ROOMS","payload","SET_OPEN_ROOM_CHATLOGS","SET_OPEN_USERINFO","SET_OPEN_USER_CHATLOGS","TOP_LEFT","map","roomId"],"mappings":"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","sourcesContent":["import { RoomEngineObjectEvent, RoomObjectCategory, RoomObjectType } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useReducer, useRef, useState } from 'react';\nimport { GetRoomSession, GetSessionDataManager } from '../../api';\nimport { Base, Button, DraggableWindowPosition, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../common';\nimport { ButtonModtool } from '../../common/ButtonModtool';\nimport { ModToolsEvent, ModToolsOpenRoomChatlogEvent, ModToolsOpenRoomInfoEvent, ModToolsOpenUserInfoEvent } from '../../events';\nimport { DispatchUiEvent, UseRoomEngineEvent, UseUiEvent } from '../../hooks';\nimport { ISelectedUser } from './common/ISelectedUser';\nimport { ModToolsContextProvider } from './ModToolsContext';\nimport { ModToolsMessageHandler } from './ModToolsMessageHandler';\nimport { initialModTools, ModToolsActions, ModToolsReducer } from './reducers/ModToolsReducer';\nimport { ModToolsChatlogView } from './views/room/ModToolsChatlogView';\nimport { ModToolsRoomView } from './views/room/ModToolsRoomView';\nimport { ModToolsTicketsView } from './views/tickets/ModToolsTicketsView';\nimport { ModToolsUserChatlogView } from './views/user/ModToolsUserChatlogView';\nimport { ModToolsUserView } from './views/user/ModToolsUserView';\n\nexport const ModToolsView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(true);\n    const [ selectedUser, setSelectedUser ] = useState<ISelectedUser>(null);\n    const [ isTicketsVisible, setIsTicketsVisible ] = useState(false);\n    const [ modToolsState, dispatchModToolsState ] = useReducer(ModToolsReducer, initialModTools);\n    const { currentRoomId = null, openRooms = null, openRoomChatlogs = null, openUserChatlogs = null, openUserInfo = null } = modToolsState;\n    const elementRef = useRef<HTMLDivElement>(null);\n    const isMod = GetSessionDataManager().isModerator;\n\n\n    const onModToolsEvent = useCallback((event: ModToolsEvent) =>\n    {\n        switch(event.type)\n        {\n            case ModToolsEvent.SHOW_MOD_TOOLS:\n                setIsVisible(true);\n                return;\n            case ModToolsEvent.HIDE_MOD_TOOLS:\n                setIsVisible(false);\n                return;   \n            case ModToolsEvent.TOGGLE_MOD_TOOLS:\n                setIsVisible(value => !value);\n                return;\n        }\n    }, []);\n\n    UseUiEvent(ModToolsEvent.SHOW_MOD_TOOLS, onModToolsEvent);\n    UseUiEvent(ModToolsEvent.HIDE_MOD_TOOLS, onModToolsEvent);\n    UseUiEvent(ModToolsEvent.TOGGLE_MOD_TOOLS, onModToolsEvent);\n    \n    const onRoomEngineObjectEvent = useCallback((event: RoomEngineObjectEvent) =>\n    {\n        if(event.category !== RoomObjectCategory.UNIT) return;\n\n        const roomSession = GetRoomSession();\n\n        if(!roomSession) return;\n\n        const userData = roomSession.userDataManager.getUserDataByIndex(event.objectId);\n\n        if(!userData || userData.type !== RoomObjectType.USER) return;\n\n        setSelectedUser({ userId: userData.webID, username: userData.name });\n    }, []);\n    \n    UseRoomEngineEvent(RoomEngineObjectEvent.SELECTED, onRoomEngineObjectEvent);\n\n    const handleClick = useCallback((action: string, value?: string) =>\n    {\n        if(!action) return;\n\n        switch(action)\n        {\n            case 'toggle_room': {\n                if(!openRooms)\n                {\n                    DispatchUiEvent(new ModToolsOpenRoomInfoEvent(currentRoomId));\n                    return;\n                }\n\n                if(openRooms.indexOf(currentRoomId) > -1)\n                {\n                    handleClick('close_room', currentRoomId.toString());\n                }\n                else\n                {\n                    DispatchUiEvent(new ModToolsOpenRoomInfoEvent(currentRoomId));\n                }\n                return;\n            }\n            case 'close_room': {\n                const itemIndex = openRooms.indexOf(Number(value));\n\n                const clone = Array.from(openRooms);\n                clone.splice(itemIndex, 1);\n\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_ROOMS,\n                    payload: {\n                        openRooms: clone\n                    }\n                });                \n                return;\n            }\n            case 'toggle_room_chatlog': {\n                if(!openRoomChatlogs)\n                {\n                    DispatchUiEvent(new ModToolsOpenRoomChatlogEvent(currentRoomId));\n                    return;\n                }\n\n                if(openRoomChatlogs.indexOf(currentRoomId) > -1)\n                {\n                    handleClick('close_room_chatlog', currentRoomId.toString());\n                }\n                else\n                {\n                    DispatchUiEvent(new ModToolsOpenRoomChatlogEvent(currentRoomId));\n                }\n                return;\n            }\n            case 'close_room_chatlog': {\n                const itemIndex = openRoomChatlogs.indexOf(Number(value));\n\n                const clone = Array.from(openRoomChatlogs);\n                clone.splice(itemIndex, 1);\n\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_ROOM_CHATLOGS,\n                    payload: {\n                        openRoomChatlogs: clone\n                    }\n                });                \n                return;\n            }\n            case 'toggle_user_info': {\n\n                if(!selectedUser) return;\n\n                const userId = selectedUser.userId;\n\n                if(!openUserInfo)\n                {\n                    DispatchUiEvent(new ModToolsOpenUserInfoEvent(userId));\n                    return;\n                }\n\n                if(openUserInfo.indexOf(userId) > -1)\n                {\n                    handleClick('close_user_info', userId.toString());\n                }\n                else\n                {\n                    DispatchUiEvent(new ModToolsOpenUserInfoEvent(userId));\n                }\n                return;\n            }\n            case 'close_user_info': {\n                const itemIndex = openUserInfo.indexOf(Number(value));\n\n                const clone = Array.from(openUserInfo);\n                clone.splice(itemIndex, 1);\n\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_USERINFO,\n                    payload: {\n                        openUserInfo: clone\n                    }\n                });                \n                return;\n            }\n            case 'close_user_chatlog': {\n                const itemIndex = openUserChatlogs.indexOf(Number(value));\n\n                const clone = Array.from(openUserChatlogs);\n                clone.splice(itemIndex, 1);\n\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_USER_CHATLOGS,\n                    payload: {\n                        openUserChatlogs: clone\n                    }\n                });                \n                return;\n            }\n        }\n    }, [ openRooms, currentRoomId, openRoomChatlogs, selectedUser, openUserInfo, openUserChatlogs ]);\n\n    return (\n        <ModToolsContextProvider value={ { modToolsState, dispatchModToolsState } }>\n            <ModToolsMessageHandler />\n            { isVisible && isMod &&\n                <NitroCardView uniqueKey=\"mod-tools\" className=\"nitro-mod-tools\" windowPosition={ DraggableWindowPosition.TOP_LEFT } theme=\"primary-modtool\" >\n                    <NitroCardHeaderView headerText={ 'Mod Tools' } onCloseClick={ event => setIsVisible(false) } />\n                    <NitroCardContentView className=\"text-black pb-3 pt-2\" gap={ 3 }>\n                        <ButtonModtool gap={ 1 } onClick={ event => handleClick('toggle_room') } disabled={ !currentRoomId } className=\"position-relative\">\n                            <Base className=\"icon icon-small-room position-absolute start-1\"/> Room tool\n                        </ButtonModtool>\n                        <ButtonModtool innerRef={ elementRef } gap={ 1 } onClick={ event => handleClick('toggle_room_chatlog') } disabled={ !currentRoomId } className=\"position-relative\">\n                            <Base className=\"icon icon-chat-history position-absolute start-1\"/> Chatlog Tool\n                        </ButtonModtool>\n                        <ButtonModtool gap={ 1 } onClick={ () => handleClick('toggle_user_info') } disabled={ !selectedUser } className=\"position-relative\">\n                            <Base className=\"icon icon-user position-absolute start-1\"/> User: { selectedUser ? selectedUser.username : '' }\n                        </ButtonModtool>\n                        <ButtonModtool gap={ 1 } onClick={ () => setIsTicketsVisible(value => !value) } className=\"position-relative\">\n                            <Base className=\"icon icon-tickets position-absolute start-1\"/> Report Tool\n                        </ButtonModtool>\n                    </NitroCardContentView>\n                </NitroCardView> }\n            { openRooms && openRooms.map(roomId =>\n            {\n                return <ModToolsRoomView key={ roomId } roomId={ roomId } onCloseClick={ () => handleClick('close_room', roomId.toString()) } />;\n            }) \n            }\n            { openRoomChatlogs && openRoomChatlogs.map(roomId =>\n            {\n                return <ModToolsChatlogView key={ roomId } roomId={ roomId } onCloseClick={ () => handleClick('close_room_chatlog', roomId.toString()) } />;\n            })\n            }\n            { openUserInfo && openUserInfo.map(userId =>\n            {\n                return <ModToolsUserView key={ userId } userId={ userId } onCloseClick={ () => handleClick('close_user_info', userId.toString()) }/>\n            })\n            }\n            { openUserChatlogs && openUserChatlogs.map(userId =>\n            {\n                return <ModToolsUserChatlogView key={ userId } userId={ userId } onCloseClick={ () => handleClick('close_user_chatlog', userId.toString()) }/>\n            })\n            }\n            { isTicketsVisible && <ModToolsTicketsView onCloseClick={ () => setIsTicketsVisible(false) } /> }\n        </ModToolsContextProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}