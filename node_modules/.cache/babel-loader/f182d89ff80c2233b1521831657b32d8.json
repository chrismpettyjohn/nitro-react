{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/layout/LayoutRoomPreviewerView.tsx\",\n    _s = $RefreshSig$();\n\nimport { ColorConverter, TextureUtils } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { GetNitroInstance } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LayoutRoomPreviewerView = props => {\n  _s();\n\n  const {\n    roomPreviewer = null,\n    height = 0\n  } = props;\n  const [renderingCanvas, setRenderingCanvas] = useState(null);\n  const elementRef = useRef();\n\n  const onClick = event => {\n    if (!roomPreviewer) return;\n\n    if (event.shiftKey) {\n      roomPreviewer.changeRoomObjectDirection();\n    } else {\n      roomPreviewer.changeRoomObjectState();\n    }\n  };\n\n  const update = useCallback(time => {\n    if (!roomPreviewer || !renderingCanvas || !elementRef.current) return;\n    roomPreviewer.updatePreviewRoomView();\n    if (!renderingCanvas.canvasUpdated) return;\n    elementRef.current.style.backgroundImage = `url(${TextureUtils.generateImageUrl(renderingCanvas.master)})`;\n  }, [roomPreviewer, renderingCanvas, elementRef]);\n  const setupPreviewer = useCallback(() => {\n    if (!elementRef.current || !roomPreviewer) return;\n    const computed = document.defaultView.getComputedStyle(elementRef.current, null);\n    let backgroundColor = computed.backgroundColor;\n    backgroundColor = ColorConverter.rgbStringToHex(backgroundColor);\n    backgroundColor = backgroundColor.replace('#', '0x');\n    roomPreviewer.backgroundColor = parseInt(backgroundColor, 16);\n    const width = elementRef.current.parentElement.clientWidth;\n    roomPreviewer.getRoomCanvas(width, height);\n    const canvas = roomPreviewer.getRenderingCanvas();\n    setRenderingCanvas(canvas);\n    canvas.canvasUpdated = true;\n    update(-1);\n  }, [elementRef, height, roomPreviewer, update]);\n  useEffect(() => {\n    if (!roomPreviewer) return;\n    if (!renderingCanvas) setupPreviewer();\n    GetNitroInstance().ticker.add(update);\n    const resizeObserver = new ResizeObserver(() => {\n      if (!roomPreviewer || !elementRef.current) return;\n      const width = elementRef.current.parentElement.offsetWidth;\n      roomPreviewer.modifyRoomCanvas(width, height);\n      update(-1);\n    });\n    resizeObserver.observe(elementRef.current);\n    return () => {\n      resizeObserver.disconnect();\n      GetNitroInstance().ticker.remove(update);\n    };\n  }, [renderingCanvas, roomPreviewer, elementRef, height, setupPreviewer, update]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-preview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: elementRef,\n      className: \"room-preview-image\",\n      style: {\n        height\n      },\n      onClick: onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), props.children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LayoutRoomPreviewerView, \"0dETM32YZ8RtUSl0OuLd3Gl45kg=\");\n\n_c = LayoutRoomPreviewerView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutRoomPreviewerView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/layout/LayoutRoomPreviewerView.tsx"],"names":["ColorConverter","TextureUtils","useCallback","useEffect","useRef","useState","GetNitroInstance","LayoutRoomPreviewerView","props","roomPreviewer","height","renderingCanvas","setRenderingCanvas","elementRef","onClick","event","shiftKey","changeRoomObjectDirection","changeRoomObjectState","update","time","current","updatePreviewRoomView","canvasUpdated","style","backgroundImage","generateImageUrl","master","setupPreviewer","computed","document","defaultView","getComputedStyle","backgroundColor","rgbStringToHex","replace","parseInt","width","parentElement","clientWidth","getRoomCanvas","canvas","getRenderingCanvas","ticker","add","resizeObserver","ResizeObserver","offsetWidth","modifyRoomCanvas","observe","disconnect","remove","children"],"mappings":"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","sourcesContent":["import { ColorConverter, IRoomRenderingCanvas, RoomPreviewer, TextureUtils } from '@nitrots/nitro-renderer';\nimport { FC, MouseEvent, useCallback, useEffect, useRef, useState } from 'react';\nimport { GetNitroInstance } from '../../api';\n\nexport interface LayoutRoomPreviewerViewProps\n{\n    roomPreviewer: RoomPreviewer;\n    height?: number;\n}\n\nexport const LayoutRoomPreviewerView: FC<LayoutRoomPreviewerViewProps> = props =>\n{\n    const { roomPreviewer = null, height = 0 } = props;\n    const [ renderingCanvas, setRenderingCanvas ] = useState<IRoomRenderingCanvas>(null);\n    const elementRef = useRef<HTMLDivElement>();\n\n    const onClick = (event: MouseEvent<HTMLDivElement>) =>\n    {\n        if(!roomPreviewer) return;\n\n        if(event.shiftKey)\n        {\n            roomPreviewer.changeRoomObjectDirection();\n        }\n        else\n        {\n            roomPreviewer.changeRoomObjectState();\n        }\n    }\n\n    const update = useCallback((time: number) =>\n    {\n        if(!roomPreviewer || !renderingCanvas || !elementRef.current) return;\n        \n        roomPreviewer.updatePreviewRoomView();\n\n        if(!renderingCanvas.canvasUpdated) return;\n\n        elementRef.current.style.backgroundImage = `url(${ TextureUtils.generateImageUrl(renderingCanvas.master) })`;\n    }, [ roomPreviewer, renderingCanvas, elementRef ]);\n\n    const setupPreviewer = useCallback(() =>\n    {\n        if(!elementRef.current || !roomPreviewer) return;\n\n        const computed = document.defaultView.getComputedStyle(elementRef.current, null);\n\n        let backgroundColor = computed.backgroundColor;\n\n        backgroundColor = ColorConverter.rgbStringToHex(backgroundColor);\n        backgroundColor = backgroundColor.replace('#', '0x');\n\n        roomPreviewer.backgroundColor = parseInt(backgroundColor, 16);\n\n        const width = elementRef.current.parentElement.clientWidth;\n        \n        roomPreviewer.getRoomCanvas(width, height);\n\n        const canvas = roomPreviewer.getRenderingCanvas();\n\n        setRenderingCanvas(canvas);\n\n        canvas.canvasUpdated = true;\n\n        update(-1);\n    }, [ elementRef, height, roomPreviewer, update ]);\n\n    useEffect(() =>\n    {\n        if(!roomPreviewer) return;\n\n        if(!renderingCanvas) setupPreviewer();\n\n        GetNitroInstance().ticker.add(update);\n\n        const resizeObserver = new ResizeObserver(() =>\n        {\n            if(!roomPreviewer || !elementRef.current) return;\n\n            const width = elementRef.current.parentElement.offsetWidth;\n\n            roomPreviewer.modifyRoomCanvas(width, height);\n\n            update(-1);\n        });\n        \n        resizeObserver.observe(elementRef.current);\n\n        return () =>\n        {\n            resizeObserver.disconnect();\n\n            GetNitroInstance().ticker.remove(update);\n        }\n\n    }, [ renderingCanvas, roomPreviewer, elementRef, height, setupPreviewer, update ]);\n\n    return (\n        <div className=\"room-preview-container\">\n            <div ref={ elementRef } className=\"room-preview-image\" style={ { height } } onClick={ onClick } />\n            { props.children }\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}