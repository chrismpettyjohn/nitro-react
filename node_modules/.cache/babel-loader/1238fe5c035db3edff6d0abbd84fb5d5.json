{"ast":null,"code":"export class RoomObjectModel {\n  constructor() {\n    this._map = void 0;\n    this._updateCounter = void 0;\n    this._map = new Map();\n    this._updateCounter = 0;\n  }\n\n  dispose() {\n    this._map.clear();\n\n    this._updateCounter = 0;\n  }\n\n  getValue(key) {\n    const existing = this._map.get(key);\n\n    return existing;\n  }\n\n  setValue(key, value) {\n    if (this._map.has(key)) {\n      if (this._map.get(key) === value) return;\n    }\n\n    this._map.set(key, value);\n\n    this._updateCounter++;\n  }\n\n  removeKey(key) {\n    if (!key) return;\n\n    this._map.delete(key);\n\n    this._updateCounter++;\n  }\n\n  get updateCounter() {\n    return this._updateCounter;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/object/RoomObjectModel.ts"],"names":["RoomObjectModel","constructor","_map","_updateCounter","Map","dispose","clear","getValue","key","existing","get","setValue","value","has","set","removeKey","delete","updateCounter"],"mappings":"AAEA,OAAO,MAAMA,eAAN,CACP;AAIIC,EAAAA,WAAW,GACX;AAAA,SAJQC,IAIR;AAAA,SAHQC,cAGR;AACI,SAAKD,IAAL,GAAY,IAAIE,GAAJ,EAAZ;AACA,SAAKD,cAAL,GAAsB,CAAtB;AACH;;AAEME,EAAAA,OAAO,GACd;AACI,SAAKH,IAAL,CAAUI,KAAV;;AAEA,SAAKH,cAAL,GAAsB,CAAtB;AACH;;AAEMI,EAAAA,QAAQ,CAAIC,GAAJ,EACf;AACI,UAAMC,QAAQ,GAAG,KAAKP,IAAL,CAAUQ,GAAV,CAAcF,GAAd,CAAjB;;AAEA,WAAQC,QAAR;AACH;;AAEME,EAAAA,QAAQ,CAAIH,GAAJ,EAAiBI,KAAjB,EACf;AACI,QAAG,KAAKV,IAAL,CAAUW,GAAV,CAAcL,GAAd,CAAH,EACA;AACI,UAAG,KAAKN,IAAL,CAAUQ,GAAV,CAAcF,GAAd,MAAuBI,KAA1B,EAAiC;AACpC;;AAED,SAAKV,IAAL,CAAUY,GAAV,CAAcN,GAAd,EAAoBI,KAApB;;AAEA,SAAKT,cAAL;AACH;;AAEMY,EAAAA,SAAS,CAACP,GAAD,EAChB;AACI,QAAG,CAACA,GAAJ,EAAS;;AAET,SAAKN,IAAL,CAAUc,MAAV,CAAiBR,GAAjB;;AAEA,SAAKL,cAAL;AACH;;AAEuB,MAAbc,aAAa,GACxB;AACI,WAAO,KAAKd,cAAZ;AACH;;AAhDL","sourcesContent":["import { IRoomObjectModel } from './IRoomObjectModel';\r\n\r\nexport class RoomObjectModel implements IRoomObjectModel\r\n{\r\n    private _map: Map<string, unknown>;\r\n    private _updateCounter: number;\r\n\r\n    constructor()\r\n    {\r\n        this._map = new Map();\r\n        this._updateCounter = 0;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._map.clear();\r\n\r\n        this._updateCounter = 0;\r\n    }\r\n\r\n    public getValue<T>(key: string): T\r\n    {\r\n        const existing = this._map.get(key);\r\n\r\n        return (existing as T);\r\n    }\r\n\r\n    public setValue<T>(key: string, value: T): void\r\n    {\r\n        if(this._map.has(key))\r\n        {\r\n            if(this._map.get(key) === value) return;\r\n        }\r\n\r\n        this._map.set(key, (value as T));\r\n\r\n        this._updateCounter++;\r\n    }\r\n\r\n    public removeKey(key: string): void\r\n    {\r\n        if(!key) return;\r\n\r\n        this._map.delete(key);\r\n\r\n        this._updateCounter++;\r\n    }\r\n\r\n    public get updateCounter(): number\r\n    {\r\n        return this._updateCounter;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}