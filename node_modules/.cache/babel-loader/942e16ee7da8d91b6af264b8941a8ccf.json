{"ast":null,"code":"import { RoomObjectSpriteData } from '../../data/RoomObjectSpriteData';\nimport { RoomObjectSpriteType } from '../../object/enum/RoomObjectSpriteType';\nimport { RoomObjectCacheItem } from './RoomObjectCacheItem';\nexport class RoomObjectCache {\n  constructor(accurateZ) {\n    this._data = void 0;\n    this._roomObjectVariableAccurateZ = void 0;\n    this._data = new Map();\n    this._roomObjectVariableAccurateZ = accurateZ;\n  }\n\n  dispose() {\n    if (this._data) {\n      for (const [key, item] of this._data.entries()) {\n        if (!item) continue;\n\n        this._data.delete(key);\n\n        item.dispose();\n      }\n\n      this._data = null;\n    }\n  }\n\n  getObjectCache(k) {\n    let existing = this._data.get(k);\n\n    if (!existing) {\n      existing = new RoomObjectCacheItem(this._roomObjectVariableAccurateZ);\n\n      this._data.set(k, existing);\n    }\n\n    return existing;\n  }\n\n  removeObjectCache(k) {\n    const existing = this._data.get(k);\n\n    if (!existing) return;\n\n    this._data.delete(k);\n\n    existing.dispose();\n  }\n\n  getSortableSpriteList() {\n    const spriteData = [];\n\n    for (const item of this._data.values()) {\n      if (!item) continue;\n      const sprites = item.sprites && item.sprites.sprites;\n      if (!sprites || !sprites.length) continue;\n\n      for (const sprite of sprites) {\n        if (!sprite) continue;\n\n        if (sprite.sprite.spriteType !== RoomObjectSpriteType.ROOM_PLANE && sprite.sprite.name !== '') {\n          const data = new RoomObjectSpriteData();\n          data.objectId = item.objectId;\n          data.x = sprite.x;\n          data.y = sprite.y;\n          data.z = sprite.z;\n          data.name = sprite.sprite.name || '';\n          data.flipH = sprite.sprite.flipH;\n          data.alpha = sprite.sprite.alpha;\n          data.color = sprite.sprite.color.toString();\n          data.blendMode = sprite.sprite.blendMode.toString();\n          data.width = sprite.sprite.width;\n          data.height = sprite.sprite.height;\n          data.type = sprite.sprite.type;\n          data.posture = sprite.sprite.posture;\n          const isSkewed = this.isSkewedSprite(sprite.sprite);\n\n          if (isSkewed) {\n            data.skew = sprite.sprite.direction % 4 === 0 ? -0.5 : 0.5;\n          }\n\n          if ((isSkewed || sprite.name.indexOf('%image.library.url%') >= 0 || sprite.name.indexOf('%group.badge.url%') >= 0) && data.width <= RoomObjectCache.MAX_SIZE_FOR_AVG_COLOR && data.height <= RoomObjectCache.MAX_SIZE_FOR_AVG_COLOR) {\n            //data.color = Canvas._Str_23439(sprite.sprite.texture).toString();\n            if (sprite.sprite.name.indexOf('external_image_wallitem') === 0) {\n              data.frame = true;\n            }\n          }\n\n          spriteData.push(data);\n        }\n      }\n    }\n\n    if (!spriteData || !spriteData.length) return null;\n    return spriteData;\n  }\n\n  isSkewedSprite(k) {\n    if (!k.type) return false;\n    if (k.type.indexOf('external_image_wallitem') === 0 && k.tag === 'THUMBNAIL') return true;\n    if (k.type.indexOf('guild_forum') === 0 && k.tag === 'THUMBNAIL') return true;\n    return false;\n  }\n\n  getPlaneSortableSprites() {\n    const sprites = [];\n\n    for (const item of this._data.values()) {\n      for (const sprite of item.sprites.sprites) {\n        if (sprite.sprite.spriteType === RoomObjectSpriteType.ROOM_PLANE) sprites.push(sprite);\n      }\n    }\n\n    return sprites;\n  }\n\n}\nRoomObjectCache.MAX_SIZE_FOR_AVG_COLOR = 200;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/renderer/cache/RoomObjectCache.ts"],"names":["RoomObjectSpriteData","RoomObjectSpriteType","RoomObjectCacheItem","RoomObjectCache","constructor","accurateZ","_data","_roomObjectVariableAccurateZ","Map","dispose","key","item","entries","delete","getObjectCache","k","existing","get","set","removeObjectCache","getSortableSpriteList","spriteData","values","sprites","length","sprite","spriteType","ROOM_PLANE","name","data","objectId","x","y","z","flipH","alpha","color","toString","blendMode","width","height","type","posture","isSkewed","isSkewedSprite","skew","direction","indexOf","MAX_SIZE_FOR_AVG_COLOR","frame","push","tag","getPlaneSortableSprites"],"mappings":"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","sourcesContent":["import { RoomObjectSpriteData } from '../../data/RoomObjectSpriteData';\r\nimport { RoomObjectSpriteType } from '../../object/enum/RoomObjectSpriteType';\r\nimport { IRoomObjectSprite } from '../../object/visualization/IRoomObjectSprite';\r\nimport { SortableSprite } from '../utils/SortableSprite';\r\nimport { RoomObjectCacheItem } from './RoomObjectCacheItem';\r\n\r\nexport class RoomObjectCache\r\n{\r\n    private static MAX_SIZE_FOR_AVG_COLOR: number = 200;\r\n\r\n    private _data: Map<string, RoomObjectCacheItem>;\r\n    private _roomObjectVariableAccurateZ: string;\r\n\r\n    constructor(accurateZ: string)\r\n    {\r\n        this._data = new Map();\r\n        this._roomObjectVariableAccurateZ = accurateZ;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._data)\r\n        {\r\n            for(const [ key, item ] of this._data.entries())\r\n            {\r\n                if(!item) continue;\r\n\r\n                this._data.delete(key);\r\n\r\n                item.dispose();\r\n            }\r\n\r\n            this._data = null;\r\n        }\r\n    }\r\n\r\n    public getObjectCache(k: string): RoomObjectCacheItem\r\n    {\r\n        let existing = this._data.get(k);\r\n\r\n        if(!existing)\r\n        {\r\n            existing = new RoomObjectCacheItem(this._roomObjectVariableAccurateZ);\r\n\r\n            this._data.set(k, existing);\r\n        }\r\n\r\n        return existing;\r\n    }\r\n\r\n    public removeObjectCache(k: string): void\r\n    {\r\n        const existing = this._data.get(k);\r\n\r\n        if(!existing) return;\r\n\r\n        this._data.delete(k);\r\n\r\n        existing.dispose();\r\n    }\r\n\r\n    public getSortableSpriteList(): RoomObjectSpriteData[]\r\n    {\r\n        const spriteData: RoomObjectSpriteData[] = [];\r\n\r\n        for(const item of this._data.values())\r\n        {\r\n            if(!item) continue;\r\n\r\n            const sprites = item.sprites && item.sprites.sprites;\r\n\r\n            if(!sprites || !sprites.length) continue;\r\n\r\n            for(const sprite of sprites)\r\n            {\r\n                if(!sprite) continue;\r\n\r\n                if((sprite.sprite.spriteType !== RoomObjectSpriteType.ROOM_PLANE) && (sprite.sprite.name !== ''))\r\n                {\r\n                    const data = new RoomObjectSpriteData();\r\n\r\n                    data.objectId = item.objectId;\r\n                    data.x = sprite.x;\r\n                    data.y = sprite.y;\r\n                    data.z = sprite.z;\r\n                    data.name = sprite.sprite.name || '';\r\n                    data.flipH = sprite.sprite.flipH;\r\n                    data.alpha = sprite.sprite.alpha;\r\n                    data.color = sprite.sprite.color.toString();\r\n                    data.blendMode = sprite.sprite.blendMode.toString();\r\n                    data.width = sprite.sprite.width;\r\n                    data.height = sprite.sprite.height;\r\n                    data.type = sprite.sprite.type;\r\n                    data.posture = sprite.sprite.posture;\r\n\r\n                    const isSkewed = this.isSkewedSprite(sprite.sprite);\r\n\r\n                    if(isSkewed)\r\n                    {\r\n                        data.skew = (((sprite.sprite.direction % 4) === 0) ? -0.5 : 0.5);\r\n                    }\r\n\r\n                    if(((((isSkewed || (sprite.name.indexOf('%image.library.url%') >= 0)) || (sprite.name.indexOf('%group.badge.url%') >= 0)) && (data.width <= RoomObjectCache.MAX_SIZE_FOR_AVG_COLOR)) && (data.height <= RoomObjectCache.MAX_SIZE_FOR_AVG_COLOR)))\r\n                    {\r\n                        //data.color = Canvas._Str_23439(sprite.sprite.texture).toString();\r\n\r\n                        if(sprite.sprite.name.indexOf('external_image_wallitem') === 0)\r\n                        {\r\n                            data.frame = true;\r\n                        }\r\n                    }\r\n\r\n                    spriteData.push(data);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!spriteData || !spriteData.length) return null;\r\n\r\n        return spriteData;\r\n    }\r\n\r\n    private isSkewedSprite(k: IRoomObjectSprite): boolean\r\n    {\r\n        if(!k.type) return false;\r\n\r\n        if((k.type.indexOf('external_image_wallitem') === 0) && (k.tag === 'THUMBNAIL')) return true;\r\n\r\n        if((k.type.indexOf('guild_forum') === 0) && (k.tag === 'THUMBNAIL')) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public getPlaneSortableSprites(): SortableSprite[]\r\n    {\r\n        const sprites: SortableSprite[] = [];\r\n\r\n        for(const item of this._data.values())\r\n        {\r\n            for(const sprite of item.sprites.sprites)\r\n            {\r\n                if(sprite.sprite.spriteType === RoomObjectSpriteType.ROOM_PLANE) sprites.push(sprite);\r\n            }\r\n        }\r\n\r\n        return sprites;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}