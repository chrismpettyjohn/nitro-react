{"ast":null,"code":"import { AvatarAction } from '../../../../../avatar/enum/AvatarAction';\nimport { Nitro } from '../../../../../Nitro';\nexport class FloatingIdleZAddition {\n  constructor(id, visualization) {\n    this._id = void 0;\n    this._visualization = void 0;\n    this._asset = void 0;\n    this._startTime = void 0;\n    this._offsetY = void 0;\n    this._scale = void 0;\n    this._state = void 0;\n    this._id = id;\n    this._visualization = visualization;\n    this._asset = null;\n    this._startTime = Nitro.instance.time;\n    this._offsetY = 0;\n    this._scale = 0;\n    this._state = 0;\n  }\n\n  dispose() {\n    this._visualization = null;\n    this._asset = null;\n  }\n\n  getSpriteAssetName(state) {\n    let side = 'left';\n    if (this._visualization.angle === 135 || this._visualization.angle === 180 || this._visualization.angle === 225 || this._visualization.angle === 270) side = 'right';\n    return 'avatar_addition_user_idle_' + side + '_' + state + (this._scale < 48 ? '_small' : '');\n  }\n\n  update(sprite, scale) {\n    if (!sprite) return;\n    this._scale = scale;\n    this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(this._state === FloatingIdleZAddition.STATE_FRAME_A ? 1 : 2));\n    let additionScale = 64;\n    let offsetX = 0;\n\n    if (scale < 48) {\n      if (this._visualization.angle === 135 || this._visualization.angle === 180 || this._visualization.angle === 225 || this._visualization.angle === 270) {\n        offsetX = 10;\n      } else {\n        offsetX = -16;\n      }\n\n      this._offsetY = -38;\n      additionScale = 32;\n    } else {\n      if (this._visualization.angle === 135 || this._visualization.angle === 180 || this._visualization.angle === 225 || this._visualization.angle === 270) {\n        offsetX = 22;\n      } else {\n        offsetX = -30;\n      }\n\n      this._offsetY = -70;\n    }\n\n    if (this._visualization.posture === AvatarAction.POSTURE_SIT) {\n      this._offsetY += additionScale / 2;\n    } else if (this._visualization.posture === AvatarAction.POSTURE_LAY) {\n      this._offsetY += additionScale - 0.3 * additionScale;\n    }\n\n    if (this._asset) {\n      sprite.texture = this._asset;\n      sprite.offsetX = offsetX;\n      sprite.offsetY = this._offsetY;\n      sprite.relativeDepth = -0.02;\n      sprite.alpha = 0;\n    }\n  }\n\n  animate(sprite) {\n    if (!sprite) return false;\n    const totalTimeRunning = Nitro.instance.time;\n\n    if (this._state === FloatingIdleZAddition.STATE_DELAY) {\n      if (totalTimeRunning - this._startTime >= FloatingIdleZAddition.DELAY_BEFORE_ANIMATION) {\n        this._state = FloatingIdleZAddition.STATE_FRAME_A;\n        this._startTime = totalTimeRunning;\n        this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1));\n      }\n    }\n\n    if (this._state === FloatingIdleZAddition.STATE_FRAME_A) {\n      if (totalTimeRunning - this._startTime >= FloatingIdleZAddition.DELAY_PER_FRAME) {\n        this._state = FloatingIdleZAddition.STATE_FRAME_B;\n        this._startTime = totalTimeRunning;\n        this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(2));\n      }\n    }\n\n    if (this._state === FloatingIdleZAddition.STATE_FRAME_B) {\n      if (totalTimeRunning - this._startTime >= FloatingIdleZAddition.DELAY_PER_FRAME) {\n        this._state = FloatingIdleZAddition.STATE_FRAME_A;\n        this._startTime = totalTimeRunning;\n        this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1));\n      }\n    }\n\n    if (this._asset) {\n      sprite.texture = this._asset;\n      sprite.alpha = 255;\n      sprite.visible = true;\n    } else {\n      sprite.visible = false;\n    }\n\n    return false;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n}\nFloatingIdleZAddition.DELAY_BEFORE_ANIMATION = 2000;\nFloatingIdleZAddition.DELAY_PER_FRAME = 2000;\nFloatingIdleZAddition.STATE_DELAY = 0;\nFloatingIdleZAddition.STATE_FRAME_A = 1;\nFloatingIdleZAddition.STATE_FRAME_B = 2;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/avatar/additions/FloatingIdleZAddition.ts"],"names":["AvatarAction","Nitro","FloatingIdleZAddition","constructor","id","visualization","_id","_visualization","_asset","_startTime","_offsetY","_scale","_state","instance","time","dispose","getSpriteAssetName","state","side","angle","update","sprite","scale","getAvatarRenderAsset","STATE_FRAME_A","additionScale","offsetX","posture","POSTURE_SIT","POSTURE_LAY","texture","offsetY","relativeDepth","alpha","animate","totalTimeRunning","STATE_DELAY","DELAY_BEFORE_ANIMATION","DELAY_PER_FRAME","STATE_FRAME_B","visible"],"mappings":"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","sourcesContent":["import { Resource, Texture } from '@pixi/core';\r\nimport { IRoomObjectSprite } from '../../../../../../room/object/visualization/IRoomObjectSprite';\r\nimport { AvatarAction } from '../../../../../avatar/enum/AvatarAction';\r\nimport { Nitro } from '../../../../../Nitro';\r\nimport { AvatarVisualization } from '../AvatarVisualization';\r\nimport { IAvatarAddition } from './IAvatarAddition';\r\n\r\nexport class FloatingIdleZAddition implements IAvatarAddition\r\n{\r\n    private static DELAY_BEFORE_ANIMATION: number = 2000;\r\n    private static DELAY_PER_FRAME: number = 2000;\r\n    private static STATE_DELAY: number = 0;\r\n    private static STATE_FRAME_A: number = 1;\r\n    private static STATE_FRAME_B: number = 2;\r\n\r\n    private _id: number;\r\n    private _visualization: AvatarVisualization;\r\n    private _asset: Texture<Resource>;\r\n    private _startTime: number;\r\n    private _offsetY: number;\r\n    private _scale: number;\r\n    private _state: number;\r\n\r\n    constructor(id: number, visualization: AvatarVisualization)\r\n    {\r\n        this._id = id;\r\n        this._visualization = visualization;\r\n        this._asset = null;\r\n        this._startTime = Nitro.instance.time;\r\n        this._offsetY = 0;\r\n        this._scale = 0;\r\n        this._state = 0;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._visualization = null;\r\n        this._asset = null;\r\n    }\r\n\r\n    private getSpriteAssetName(state: number): string\r\n    {\r\n        let side = 'left';\r\n\r\n        if((this._visualization.angle === 135) || (this._visualization.angle === 180) || (this._visualization.angle === 225) || (this._visualization.angle === 270)) side = 'right';\r\n\r\n        return ('avatar_addition_user_idle_' + side + '_' + state + ((this._scale < 48) ? '_small' : ''));\r\n    }\r\n\r\n    public update(sprite: IRoomObjectSprite, scale: number): void\r\n    {\r\n        if(!sprite) return;\r\n\r\n        this._scale = scale;\r\n        this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName((this._state === FloatingIdleZAddition.STATE_FRAME_A) ? 1 : 2));\r\n\r\n        let additionScale = 64;\r\n        let offsetX = 0;\r\n\r\n        if(scale < 48)\r\n        {\r\n            if((this._visualization.angle === 135) || (this._visualization.angle === 180) || (this._visualization.angle === 225) || (this._visualization.angle === 270))\r\n            {\r\n                offsetX = 10;\r\n            }\r\n            else\r\n            {\r\n                offsetX = -16;\r\n            }\r\n\r\n            this._offsetY = -38;\r\n\r\n            additionScale = 32;\r\n        }\r\n        else\r\n        {\r\n            if((this._visualization.angle === 135) || (this._visualization.angle === 180) || (this._visualization.angle === 225) || (this._visualization.angle === 270))\r\n            {\r\n                offsetX = 22;\r\n            }\r\n            else\r\n            {\r\n                offsetX = -30;\r\n            }\r\n\r\n            this._offsetY = -70;\r\n        }\r\n\r\n        if(this._visualization.posture === AvatarAction.POSTURE_SIT)\r\n        {\r\n            this._offsetY += (additionScale / 2);\r\n        }\r\n\r\n        else if(this._visualization.posture === AvatarAction.POSTURE_LAY)\r\n        {\r\n            this._offsetY += (additionScale - (0.3 * additionScale));\r\n        }\r\n\r\n        if(this._asset)\r\n        {\r\n            sprite.texture = this._asset;\r\n            sprite.offsetX = offsetX;\r\n            sprite.offsetY = this._offsetY;\r\n            sprite.relativeDepth = -0.02;\r\n            sprite.alpha = 0;\r\n        }\r\n    }\r\n\r\n    public animate(sprite: IRoomObjectSprite): boolean\r\n    {\r\n        if(!sprite) return false;\r\n\r\n        const totalTimeRunning = Nitro.instance.time;\r\n\r\n        if(this._state === FloatingIdleZAddition.STATE_DELAY)\r\n        {\r\n            if((totalTimeRunning - this._startTime) >= FloatingIdleZAddition.DELAY_BEFORE_ANIMATION)\r\n            {\r\n                this._state = FloatingIdleZAddition.STATE_FRAME_A;\r\n                this._startTime = totalTimeRunning;\r\n                this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1));\r\n            }\r\n        }\r\n\r\n        if(this._state === FloatingIdleZAddition.STATE_FRAME_A)\r\n        {\r\n            if((totalTimeRunning - this._startTime) >= FloatingIdleZAddition.DELAY_PER_FRAME)\r\n            {\r\n                this._state = FloatingIdleZAddition.STATE_FRAME_B;\r\n                this._startTime = totalTimeRunning;\r\n                this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(2));\r\n            }\r\n        }\r\n\r\n        if(this._state === FloatingIdleZAddition.STATE_FRAME_B)\r\n        {\r\n            if((totalTimeRunning - this._startTime) >= FloatingIdleZAddition.DELAY_PER_FRAME)\r\n            {\r\n                this._state = FloatingIdleZAddition.STATE_FRAME_A;\r\n                this._startTime = totalTimeRunning;\r\n                this._asset = this._visualization.getAvatarRenderAsset(this.getSpriteAssetName(1));\r\n            }\r\n        }\r\n\r\n        if(this._asset)\r\n        {\r\n            sprite.texture = this._asset;\r\n            sprite.alpha = 255;\r\n            sprite.visible = true;\r\n        }\r\n        else\r\n        {\r\n            sprite.visible = false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public get id(): number\r\n    {\r\n        return this._id;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}