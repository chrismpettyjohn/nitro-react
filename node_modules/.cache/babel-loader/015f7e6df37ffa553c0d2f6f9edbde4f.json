{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { Matrix, Point, Rectangle } from '@pixi/math';\nimport { NitroSprite } from '../../core';\nimport { NitroLogger } from '../../core/common/logger/NitroLogger';\nimport { NitroManager } from '../../core/common/NitroManager';\nimport { TextureUtils } from '../../room';\nimport { RoomObjectMouseEvent } from '../../room/events/RoomObjectMouseEvent';\nimport { RoomObjectUpdateMessage } from '../../room/messages/RoomObjectUpdateMessage';\nimport { RoomRendererFactory } from '../../room/renderer/RoomRendererFactory';\nimport { NumberBank } from '../../room/utils/NumberBank';\nimport { RoomEnterEffect } from '../../room/utils/RoomEnterEffect';\nimport { RoomGeometry } from '../../room/utils/RoomGeometry';\nimport { Vector3d } from '../../room/utils/Vector3d';\nimport { PetFigureData } from '../avatar/pets/PetFigureData';\nimport { RenderRoomMessageComposer, RenderRoomThumbnailMessageComposer } from '../communication';\nimport { ToolbarIconEnum } from '../enums/ToolbarIconEnum';\nimport { NitroToolbarAnimateIconEvent } from '../events/NitroToolbarAnimateIconEvent';\nimport { Nitro } from '../Nitro';\nimport { RoomControllerLevel } from '../session/enum/RoomControllerLevel';\nimport { BadgeImageReadyEvent } from '../session/events/BadgeImageReadyEvent';\nimport { RoomSessionEvent } from '../session/events/RoomSessionEvent';\nimport { MouseEventType } from '../ui/MouseEventType';\nimport { FurniId } from '../utils/FurniId';\nimport { RoomDragEvent } from './events';\nimport { RoomBackgroundColorEvent } from './events/RoomBackgroundColorEvent';\nimport { RoomEngineEvent } from './events/RoomEngineEvent';\nimport { RoomEngineObjectEvent } from './events/RoomEngineObjectEvent';\nimport { RoomObjectFurnitureActionEvent } from './events/RoomObjectFurnitureActionEvent';\nimport { RoomToObjectOwnAvatarMoveEvent } from './events/RoomToObjectOwnAvatarMoveEvent';\nimport { ImageResult } from './ImageResult';\nimport { ObjectAvatarCarryObjectUpdateMessage } from './messages/ObjectAvatarCarryObjectUpdateMessage';\nimport { ObjectAvatarChatUpdateMessage } from './messages/ObjectAvatarChatUpdateMessage';\nimport { ObjectAvatarDanceUpdateMessage } from './messages/ObjectAvatarDanceUpdateMessage';\nimport { ObjectAvatarEffectUpdateMessage } from './messages/ObjectAvatarEffectUpdateMessage';\nimport { ObjectAvatarExperienceUpdateMessage } from './messages/ObjectAvatarExperienceUpdateMessage';\nimport { ObjectAvatarExpressionUpdateMessage } from './messages/ObjectAvatarExpressionUpdateMessage';\nimport { ObjectAvatarFigureUpdateMessage } from './messages/ObjectAvatarFigureUpdateMessage';\nimport { ObjectAvatarFlatControlUpdateMessage } from './messages/ObjectAvatarFlatControlUpdateMessage';\nimport { ObjectAvatarGestureUpdateMessage } from './messages/ObjectAvatarGestureUpdateMessage';\nimport { ObjectAvatarGuideStatusUpdateMessage } from './messages/ObjectAvatarGuideStatusUpdateMessage';\nimport { ObjectAvatarMutedUpdateMessage } from './messages/ObjectAvatarMutedUpdateMessage';\nimport { ObjectAvatarOwnMessage } from './messages/ObjectAvatarOwnMessage';\nimport { ObjectAvatarPetGestureUpdateMessage } from './messages/ObjectAvatarPetGestureUpdateMessage';\nimport { ObjectAvatarPlayerValueUpdateMessage } from './messages/ObjectAvatarPlayerValueUpdateMessage';\nimport { ObjectAvatarPlayingGameUpdateMessage } from './messages/ObjectAvatarPlayingGameUpdateMessage';\nimport { ObjectAvatarPostureUpdateMessage } from './messages/ObjectAvatarPostureUpdateMessage';\nimport { ObjectAvatarSignUpdateMessage } from './messages/ObjectAvatarSignUpdateMessage';\nimport { ObjectAvatarSleepUpdateMessage } from './messages/ObjectAvatarSleepUpdateMessage';\nimport { ObjectAvatarTypingUpdateMessage } from './messages/ObjectAvatarTypingUpdateMessage';\nimport { ObjectAvatarUpdateMessage } from './messages/ObjectAvatarUpdateMessage';\nimport { ObjectAvatarUseObjectUpdateMessage } from './messages/ObjectAvatarUseObjectUpdateMessage';\nimport { ObjectDataUpdateMessage } from './messages/ObjectDataUpdateMessage';\nimport { ObjectGroupBadgeUpdateMessage } from './messages/ObjectGroupBadgeUpdateMessage';\nimport { ObjectHeightUpdateMessage } from './messages/ObjectHeightUpdateMessage';\nimport { ObjectItemDataUpdateMessage } from './messages/ObjectItemDataUpdateMessage';\nimport { ObjectModelDataUpdateMessage } from './messages/ObjectModelDataUpdateMessage';\nimport { ObjectMoveUpdateMessage } from './messages/ObjectMoveUpdateMessage';\nimport { ObjectRoomColorUpdateMessage } from './messages/ObjectRoomColorUpdateMessage';\nimport { ObjectRoomFloorHoleUpdateMessage } from './messages/ObjectRoomFloorHoleUpdateMessage';\nimport { ObjectRoomMaskUpdateMessage } from './messages/ObjectRoomMaskUpdateMessage';\nimport { ObjectRoomPlanePropertyUpdateMessage } from './messages/ObjectRoomPlanePropertyUpdateMessage';\nimport { ObjectRoomPlaneVisibilityUpdateMessage } from './messages/ObjectRoomPlaneVisibilityUpdateMessage';\nimport { ObjectRoomUpdateMessage } from './messages/ObjectRoomUpdateMessage';\nimport { ObjectDataFactory } from './object/data/ObjectDataFactory';\nimport { LegacyDataType } from './object/data/type/LegacyDataType';\nimport { RoomObjectCategory } from './object/RoomObjectCategory';\nimport { RoomObjectUserType } from './object/RoomObjectUserType';\nimport { RoomObjectVariable } from './object/RoomObjectVariable';\nimport { RoomObjectVisualizationFactory } from './object/RoomObjectVisualizationFactory';\nimport { RoomContentLoader } from './RoomContentLoader';\nimport { RoomMessageHandler } from './RoomMessageHandler';\nimport { RoomObjectEventHandler } from './RoomObjectEventHandler';\nimport { RoomObjectLogicFactory } from './RoomObjectLogicFactory';\nimport { RoomVariableEnum } from './RoomVariableEnum';\nimport { RoomData } from './utils/RoomData';\nimport { RoomFurnitureData } from './utils/RoomFurnitureData';\nimport { RoomInstanceData } from './utils/RoomInstanceData';\nimport { RoomObjectBadgeImageAssetListener } from './utils/RoomObjectBadgeImageAssetListener';\nimport { SpriteDataCollector } from './utils/SpriteDataCollector';\nexport class RoomEngine extends NitroManager {\n  constructor(communication) {\n    super();\n    this._communication = void 0;\n    this._roomRendererFactory = void 0;\n    this._roomManager = void 0;\n    this._visualizationFactory = void 0;\n    this._sessionDataManager = void 0;\n    this._roomSessionManager = void 0;\n    this._roomObjectEventHandler = void 0;\n    this._roomMessageHandler = void 0;\n    this._roomContentLoader = void 0;\n    this._ready = void 0;\n    this._roomContentLoaderReady = void 0;\n    this._imageObjectIdBank = void 0;\n    this._imageCallbacks = void 0;\n    this._thumbnailObjectIdBank = void 0;\n    this._thumbnailCallbacks = void 0;\n    this._activeRoomId = void 0;\n    this._activeRoomActiveCanvas = void 0;\n    this._activeRoomActiveCanvasMouseX = void 0;\n    this._activeRoomActiveCanvasMouseY = void 0;\n    this._activeRoomIsDragged = void 0;\n    this._activeRoomWasDragged = void 0;\n    this._activeRoomDragStartX = void 0;\n    this._activeRoomDragStartY = void 0;\n    this._activeRoomDragX = void 0;\n    this._activeRoomDragY = void 0;\n    this._roomDraggingAlwaysCenters = void 0;\n    this._roomAllowsDragging = void 0;\n    this._roomDatas = void 0;\n    this._roomInstanceDatas = void 0;\n    this._skipFurnitureCreationForNextFrame = void 0;\n    this._mouseCursorUpdate = void 0;\n    this._badgeListenerObjects = void 0;\n    this._logicFactory = void 0;\n    this._communication = communication;\n    this._sessionDataManager = null;\n    this._roomSessionManager = null;\n    this._roomManager = null;\n    this._roomObjectEventHandler = new RoomObjectEventHandler(this);\n    this._roomMessageHandler = new RoomMessageHandler(this);\n    this._roomContentLoader = new RoomContentLoader();\n    this._ready = false;\n    this._roomContentLoaderReady = false;\n    this._activeRoomId = -1;\n    this._activeRoomActiveCanvas = -1;\n    this._roomInstanceDatas = new Map();\n    this._roomDatas = new Map();\n    this._roomRendererFactory = new RoomRendererFactory();\n    this._visualizationFactory = new RoomObjectVisualizationFactory();\n    this._logicFactory = new RoomObjectLogicFactory();\n    this._activeRoomActiveCanvasMouseX = 0;\n    this._activeRoomActiveCanvasMouseY = 0;\n    this._activeRoomIsDragged = false;\n    this._activeRoomWasDragged = false;\n    this._activeRoomDragStartX = 0;\n    this._activeRoomDragStartY = 0;\n    this._activeRoomDragX = 0;\n    this._activeRoomDragY = 0;\n    this._skipFurnitureCreationForNextFrame = false;\n    this._mouseCursorUpdate = false;\n    this._imageObjectIdBank = null;\n    this._imageCallbacks = new Map();\n    this._thumbnailCallbacks = new Map();\n    this._roomDraggingAlwaysCenters = false;\n    this._roomAllowsDragging = true;\n    this._badgeListenerObjects = new Map();\n    this.runVisibilityUpdate = this.runVisibilityUpdate.bind(this);\n    this.processRoomObjectEvent = this.processRoomObjectEvent.bind(this);\n    this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this);\n    this.onRoomContentLoaderReadyEvent = this.onRoomContentLoaderReadyEvent.bind(this);\n    this.onBadgeImageReadyEvent = this.onBadgeImageReadyEvent.bind(this);\n  }\n\n  onInit() {\n    if (this._ready) return;\n    this._imageObjectIdBank = new NumberBank(1000);\n    this._thumbnailObjectIdBank = new NumberBank(1000);\n\n    this._logicFactory.registerEventFunction(this.processRoomObjectEvent);\n\n    if (this._roomManager) {\n      this._roomManager.setContentLoader(this._roomContentLoader);\n\n      this._roomManager.addUpdateCategory(RoomObjectCategory.FLOOR);\n\n      this._roomManager.addUpdateCategory(RoomObjectCategory.WALL);\n\n      this._roomManager.addUpdateCategory(RoomObjectCategory.UNIT);\n\n      this._roomManager.addUpdateCategory(RoomObjectCategory.CURSOR);\n\n      this._roomManager.addUpdateCategory(RoomObjectCategory.ROOM);\n    }\n\n    this._roomMessageHandler.setConnection(this._communication.connection);\n\n    this._roomContentLoader.initialize(this.events);\n\n    this._roomContentLoader.setSessionDataManager(this._sessionDataManager);\n\n    this._roomContentLoader.setIconListener(this);\n\n    if (this._roomSessionManager) {\n      this._roomSessionManager.events.addEventListener(RoomSessionEvent.STARTED, this.onRoomSessionEvent);\n\n      this._roomSessionManager.events.addEventListener(RoomSessionEvent.ENDED, this.onRoomSessionEvent);\n    }\n\n    this.events.addEventListener(RoomContentLoader.LOADER_READY, this.onRoomContentLoaderReadyEvent);\n    Nitro.instance.ticker.add(this.update, this);\n    document.addEventListener('visibilitychange', this.runVisibilityUpdate);\n  }\n\n  onDispose() {\n    if (!this._ready) return;\n\n    for (const [key, value] of this._roomInstanceDatas) {\n      this.removeRoomInstance(key);\n    }\n\n    document.removeEventListener('visibilitychange', this.runVisibilityUpdate);\n    Nitro.instance.ticker.remove(this.update, this);\n    if (this._roomObjectEventHandler) this._roomObjectEventHandler.dispose();\n    if (this._roomMessageHandler) this._roomMessageHandler.dispose();\n    if (this._roomContentLoader) this._roomContentLoader.dispose();\n    this.events.removeEventListener(RoomContentLoader.LOADER_READY, this.onRoomContentLoaderReadyEvent);\n\n    if (this._roomSessionManager) {\n      this._roomSessionManager.events.removeEventListener(RoomSessionEvent.STARTED, this.onRoomSessionEvent);\n\n      this._roomSessionManager.events.removeEventListener(RoomSessionEvent.ENDED, this.onRoomSessionEvent);\n    }\n\n    super.onDispose();\n  }\n\n  onRoomSessionEvent(event) {\n    if (!(event instanceof RoomSessionEvent)) return;\n\n    switch (event.type) {\n      case RoomSessionEvent.STARTED:\n        if (this._roomMessageHandler) this._roomMessageHandler.setRoomId(event.session.roomId);\n        return;\n\n      case RoomSessionEvent.ENDED:\n        if (this._roomMessageHandler) {\n          this._roomMessageHandler.clearRoomId();\n\n          this.removeRoomInstance(event.session.roomId);\n        }\n\n        return;\n    }\n  }\n\n  onRoomContentLoaderReadyEvent(event) {\n    this._roomContentLoaderReady = true;\n\n    this._roomManager.init();\n  }\n\n  setActiveRoomId(roomId) {\n    this._activeRoomId = roomId;\n  }\n\n  destroyRoom(roomId) {\n    this.removeRoomInstance(roomId);\n  }\n\n  getRoomInstance(roomId) {\n    return this._roomManager && this._roomManager.getRoomInstance(this.getRoomId(roomId)) || null;\n  }\n\n  removeRoomInstance(roomId) {\n    const instance = this.getRoomInstance(roomId);\n\n    if (instance) {\n      this._roomManager && this._roomManager.removeRoomInstance(this.getRoomId(roomId));\n    }\n\n    const existing = this._roomInstanceDatas.get(roomId);\n\n    if (existing) {\n      this._roomInstanceDatas.delete(existing.roomId);\n\n      existing.dispose();\n    }\n\n    this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.DISPOSED, roomId));\n  }\n\n  createRoomInstance(roomId, roomMap) {\n    let floorType = '111';\n    let wallType = '201';\n    let landscapeType = '1';\n\n    if (!this._ready) {\n      let data = this._roomDatas.get(roomId);\n\n      if (data) {\n        this._roomDatas.delete(roomId);\n\n        floorType = data.floorType;\n        wallType = data.wallType;\n        landscapeType = data.landscapeType;\n      }\n\n      data = new RoomData(roomId, roomMap);\n      data.floorType = floorType;\n      data.wallType = wallType;\n      data.landscapeType = landscapeType;\n\n      this._roomDatas.set(roomId, data);\n\n      NitroLogger.log('Room Engine not initilized yet, can not create room. Room data stored for later initialization.');\n      return;\n    }\n\n    if (!roomMap) {\n      NitroLogger.log('Room property messages received before floor height map, will initialize when floor height map received.');\n      return;\n    }\n\n    const data = this._roomDatas.get(roomId);\n\n    if (data) {\n      this._roomDatas.delete(roomId);\n\n      if (data.floorType) floorType = data.floorType;\n      if (data.wallType) wallType = data.wallType;\n      if (data.landscapeType) landscapeType = data.landscapeType;\n    }\n\n    const instance = this.setupRoomInstance(roomId, roomMap, floorType, wallType, landscapeType, this.getRoomInstanceModelName(roomId));\n    if (!instance) return;\n\n    if (roomMap.restrictsDragging) {\n      this._roomAllowsDragging = false;\n    } else {\n      this._roomAllowsDragging = true;\n    }\n\n    this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.INITIALIZED, roomId));\n  }\n\n  setupRoomInstance(roomId, roomMap, floorType, wallType, landscapeType, worldType) {\n    if (!this._ready || !this._roomManager) return;\n\n    const instance = this._roomManager.createRoomInstance(this.getRoomId(roomId));\n\n    if (!instance) return null;\n    const category = RoomObjectCategory.ROOM;\n    const roomObject = instance.createRoomObjectAndInitalize(RoomEngine.ROOM_OBJECT_ID, RoomEngine.ROOM_OBJECT_TYPE, category);\n    instance.model.setValue(RoomVariableEnum.ROOM_IS_PUBLIC, 0);\n    instance.model.setValue(RoomVariableEnum.ROOM_Z_SCALE, 1);\n\n    if (roomMap) {\n      instance.model.setValue(RoomVariableEnum.RESTRICTS_DRAGGING, roomMap.restrictsDragging);\n      instance.model.setValue(RoomVariableEnum.RESTRICTS_SCALING, roomMap.restrictsScaling);\n      instance.model.setValue(RoomVariableEnum.RESTRICTED_SCALE, roomMap.restrictedScale);\n      const dimensions = roomMap.dimensions;\n\n      if (dimensions) {\n        const minX = roomMap.dimensions.minX;\n        const maxX = roomMap.dimensions.maxX;\n        const minY = roomMap.dimensions.minY;\n        const maxY = roomMap.dimensions.maxY;\n        instance.model.setValue(RoomVariableEnum.ROOM_MIN_X, minX);\n        instance.model.setValue(RoomVariableEnum.ROOM_MAX_X, maxX);\n        instance.model.setValue(RoomVariableEnum.ROOM_MIN_Y, minY);\n        instance.model.setValue(RoomVariableEnum.ROOM_MAX_Y, maxY);\n        const seed = minX * 423 + maxX * 671 + minY * 913 + maxY * 7509;\n        if (roomObject && roomObject.model) roomObject.model.setValue(RoomObjectVariable.ROOM_RANDOM_SEED, seed);\n      }\n    }\n\n    const logic = roomObject && roomObject.logic || null;\n\n    if (logic) {\n      logic.initialize(roomMap);\n\n      if (floorType) {\n        logic.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_FLOOR_UPDATE, floorType));\n        instance.model.setValue(RoomObjectVariable.ROOM_FLOOR_TYPE, floorType);\n      }\n\n      if (wallType) {\n        logic.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_WALL_UPDATE, wallType));\n        instance.model.setValue(RoomObjectVariable.ROOM_WALL_TYPE, wallType);\n      }\n\n      if (landscapeType) {\n        logic.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_LANDSCAPE_UPDATE, landscapeType));\n        instance.model.setValue(RoomObjectVariable.ROOM_LANDSCAPE_TYPE, landscapeType);\n      }\n    }\n\n    if (roomMap && roomMap.doors.length) {\n      let doorIndex = 0;\n\n      while (doorIndex < roomMap.doors.length) {\n        const door = roomMap.doors[doorIndex];\n\n        if (door) {\n          const doorX = door.x;\n          const doorY = door.y;\n          const doorZ = door.z;\n          const doorDir = door.dir;\n          const maskType = ObjectRoomMaskUpdateMessage.DOOR;\n          const maskId = 'door_' + doorIndex;\n          const maskLocation = new Vector3d(doorX, doorY, doorZ);\n          logic.processUpdateMessage(new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.ADD_MASK, maskId, maskType, maskLocation, ObjectRoomMaskUpdateMessage.HOLE));\n\n          if (doorDir === 90 || doorDir === 180) {\n            if (doorDir === 90) {\n              instance.model.setValue(RoomObjectVariable.ROOM_DOOR_X, doorX - 0.5);\n              instance.model.setValue(RoomObjectVariable.ROOM_DOOR_Y, doorY);\n            }\n\n            if (doorDir === 180) {\n              instance.model.setValue(RoomObjectVariable.ROOM_DOOR_X, doorX);\n              instance.model.setValue(RoomObjectVariable.ROOM_DOOR_Y, doorY - 0.5);\n            }\n\n            instance.model.setValue(RoomObjectVariable.ROOM_DOOR_Z, doorZ);\n            instance.model.setValue(RoomObjectVariable.ROOM_DOOR_DIR, doorDir);\n          }\n        }\n\n        doorIndex++;\n      }\n    }\n\n    instance.createRoomObjectAndInitalize(RoomEngine.CURSOR_OBJECT_ID, RoomEngine.CURSOR_OBJECT_TYPE, RoomObjectCategory.CURSOR);\n    if (Nitro.instance.getConfiguration('enable.avatar.arrow', false)) instance.createRoomObjectAndInitalize(RoomEngine.ARROW_OBJECT_ID, RoomEngine.ARROW_OBJECT_TYPE, RoomObjectCategory.CURSOR);\n    return instance;\n  }\n\n  getRoomInstanceDisplay(roomId, id, width, height, scale) {\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    let renderer = instance.renderer;\n\n    if (!renderer) {\n      renderer = this._roomRendererFactory.createRenderer();\n      if (!renderer) return null;\n    }\n\n    renderer.roomObjectVariableAccurateZ = RoomObjectVariable.OBJECT_ACCURATE_Z_VALUE;\n    instance.setRenderer(renderer);\n    const canvas = renderer.createCanvas(id, width, height, scale);\n    if (!canvas) return null;\n    const restrictedScaling = instance.model.getValue(RoomVariableEnum.RESTRICTS_SCALING);\n\n    if (restrictedScaling) {\n      let restrictedScale = instance.model.getValue(RoomVariableEnum.RESTRICTED_SCALE);\n      if (!restrictedScale) restrictedScale = 1;\n      canvas.setScale(restrictedScale);\n      canvas.restrictsScaling = true;\n    } else {\n      canvas.restrictsScaling = false;\n    }\n\n    canvas.setMouseListener(this._roomObjectEventHandler);\n\n    if (canvas.geometry) {\n      canvas.geometry.z_scale = instance.model.getValue(RoomVariableEnum.ROOM_Z_SCALE);\n      const doorX = instance.model.getValue(RoomObjectVariable.ROOM_DOOR_X);\n      const doorY = instance.model.getValue(RoomObjectVariable.ROOM_DOOR_Y);\n      const doorZ = instance.model.getValue(RoomObjectVariable.ROOM_DOOR_Z);\n      const doorDirection = instance.model.getValue(RoomObjectVariable.ROOM_DOOR_DIR);\n      const vector = new Vector3d(doorX, doorY, doorZ);\n      let direction = null;\n      if (doorDirection === 90) direction = new Vector3d(-2000, 0, 0);\n      if (doorDirection === 180) direction = new Vector3d(0, -2000, 0);\n      canvas.geometry.setDisplacement(vector, direction);\n      const displayObject = canvas.master;\n\n      if (displayObject) {\n        const overlay = new NitroSprite(Texture.EMPTY);\n        overlay.name = RoomEngine.OVERLAY;\n        overlay.interactive = false;\n        displayObject.addChild(overlay);\n      }\n    }\n\n    return canvas.master;\n  }\n\n  setRoomInstanceRenderingCanvasMask(roomId, canvasId, flag) {\n    const roomCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    if (roomCanvas) roomCanvas.setMask(flag);\n  }\n\n  setRoomInstanceRenderingCanvasScale(roomId, canvasId, scale) {\n    let point = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let offsetPoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let override = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    let asDelta = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    const roomCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n\n    if (roomCanvas) {\n      if (roomCanvas.restrictsScaling && !override) return;\n      roomCanvas.setScale(scale, point, offsetPoint, override, asDelta);\n      this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.ROOM_ZOOMED, roomId));\n    }\n  }\n\n  getRoomInstanceRenderingCanvas(roomId) {\n    let canvasId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    const renderer = instance.renderer;\n    if (!renderer) return null;\n    if (canvasId === -1) canvasId = this._activeRoomActiveCanvas;\n    const canvas = renderer.getCanvas(canvasId);\n    if (!canvas) return null;\n    return canvas;\n  }\n\n  getActiveRoomInstanceRenderingCanvas() {\n    return this.getRoomInstanceRenderingCanvas(this._activeRoomId, this._activeRoomActiveCanvas);\n  }\n\n  getRoomInstanceRenderingCanvasOffset(roomId) {\n    let canvasId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    if (canvasId === -1) canvasId = this._activeRoomActiveCanvas;\n    const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    if (!renderingCanvas) return null;\n    return new Point(renderingCanvas.screenOffsetX, renderingCanvas.screenOffsetY);\n  }\n\n  setRoomInstanceRenderingCanvasOffset(roomId, canvasId, point) {\n    const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    if (!renderingCanvas || !point) return false;\n    const x = ~~point.x;\n    const y = ~~point.y;\n    if (renderingCanvas.screenOffsetX === x && renderingCanvas.screenOffsetY === y) return;\n    this.events.dispatchEvent(new RoomDragEvent(roomId, -(renderingCanvas.screenOffsetX - x), -(renderingCanvas.screenOffsetY - y)));\n    renderingCanvas.screenOffsetX = x;\n    renderingCanvas.screenOffsetY = y;\n    return true;\n  }\n\n  getRoomInstanceRenderingCanvasScale() {\n    let roomId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1000;\n    let canvasId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    if (roomId === -1000) roomId = this._activeRoomId;\n    if (canvasId === -1) canvasId = this._activeRoomActiveCanvas;\n    const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    if (!canvas) return 1;\n    return canvas.scale;\n  }\n\n  initializeRoomInstanceRenderingCanvas(roomId, canvasId, width, height) {\n    const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    if (!canvas) return;\n    canvas.initialize(width, height);\n  }\n\n  getRoomInstanceGeometry(roomId) {\n    let canvasId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    const renderer = instance.renderer;\n    if (!renderer) return null;\n    if (canvasId === -1) canvasId = this._activeRoomActiveCanvas;\n    const canvas = renderer.getCanvas(canvasId);\n    if (!canvas) return null;\n    return canvas.geometry;\n  }\n\n  getRoomInstanceVariable(roomId, key) {\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    return instance.model && instance.model.getValue(key) || null;\n  }\n\n  updateRoomInstancePlaneVisibility(roomId, wallVisible) {\n    let floorVisible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const object = this.getRoomOwnObject(roomId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectRoomPlaneVisibilityUpdateMessage(ObjectRoomPlaneVisibilityUpdateMessage.WALL_VISIBILITY, wallVisible));\n    object.processUpdateMessage(new ObjectRoomPlaneVisibilityUpdateMessage(ObjectRoomPlaneVisibilityUpdateMessage.FLOOR_VISIBILITY, floorVisible));\n    return true;\n  }\n\n  updateRoomInstancePlaneThickness(roomId, wallThickness, floorThickness) {\n    const object = this.getRoomOwnObject(roomId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectRoomPlanePropertyUpdateMessage(ObjectRoomPlanePropertyUpdateMessage.WALL_THICKNESS, wallThickness));\n    object.processUpdateMessage(new ObjectRoomPlanePropertyUpdateMessage(ObjectRoomPlanePropertyUpdateMessage.FLOOR_THICKNESS, floorThickness));\n    return true;\n  }\n\n  updateRoomInstancePlaneType(roomId) {\n    let floorType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let wallType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let landscapeType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    let _arg_5 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    const roomObject = this.getRoomOwnObject(roomId);\n    const roomInstance = this.getRoomInstance(roomId);\n\n    if (!roomObject) {\n      let roomData = this._roomDatas.get(roomId);\n\n      if (!roomData) {\n        roomData = new RoomData(roomId, null);\n\n        this._roomDatas.set(roomId, roomData);\n      }\n\n      if (floorType) roomData.floorType = floorType;\n      if (wallType) roomData.wallType = wallType;\n      if (landscapeType) roomData.landscapeType = landscapeType;\n      return true;\n    }\n\n    if (floorType) {\n      if (roomInstance && !_arg_5) roomInstance.model.setValue(RoomObjectVariable.ROOM_FLOOR_TYPE, floorType);\n      roomObject.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_FLOOR_UPDATE, floorType));\n    }\n\n    if (wallType) {\n      if (roomInstance && !_arg_5) roomInstance.model.setValue(RoomObjectVariable.ROOM_WALL_TYPE, wallType);\n      roomObject.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_WALL_UPDATE, wallType));\n    }\n\n    if (landscapeType) {\n      if (roomInstance && !_arg_5) roomInstance.model.setValue(RoomObjectVariable.ROOM_LANDSCAPE_TYPE, landscapeType);\n      roomObject.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_LANDSCAPE_UPDATE, landscapeType));\n    }\n\n    return true;\n  }\n\n  updateObjectRoomColor(k, _arg_2, _arg_3, _arg_4) {\n    const roomObject = this.getRoomOwnObject(k);\n    if (!roomObject || !roomObject.logic) return false;\n    const event = new ObjectRoomColorUpdateMessage(ObjectRoomColorUpdateMessage.BACKGROUND_COLOR, _arg_2, _arg_3, _arg_4);\n    roomObject.logic.processUpdateMessage(event);\n    this.events.dispatchEvent(new RoomBackgroundColorEvent(k, _arg_2, _arg_3, _arg_4));\n    return true;\n  }\n\n  addRoomInstanceFloorHole(roomId, objectId) {\n    if (objectId < 0) return;\n    const roomOwnObject = this.getRoomOwnObject(roomId);\n    const roomObject = this.getRoomObjectFloor(roomId, objectId);\n\n    if (roomOwnObject && roomOwnObject.logic && roomObject && roomObject.model) {\n      const location = roomObject.getLocation();\n      const sizeX = roomObject.model.getValue(RoomObjectVariable.FURNITURE_SIZE_X);\n      const sizeY = roomObject.model.getValue(RoomObjectVariable.FURNITURE_SIZE_Y);\n      roomOwnObject.processUpdateMessage(new ObjectRoomFloorHoleUpdateMessage(ObjectRoomFloorHoleUpdateMessage.ADD, objectId, location.x, location.y, sizeX, sizeY));\n    }\n  }\n\n  removeRoomInstanceFloorHole(roomId, objectId) {\n    if (objectId < 0) return;\n    const roomOwnObject = this.getRoomOwnObject(roomId);\n\n    if (roomOwnObject) {\n      roomOwnObject.processUpdateMessage(new ObjectRoomFloorHoleUpdateMessage(ObjectRoomFloorHoleUpdateMessage.REMOVE, objectId));\n    }\n  }\n\n  setRoomEngineGameMode(roomId, isPlaying) {\n    const roomInstance = this.getRoomInstance(roomId);\n    if (!roomInstance) return;\n    const mode = isPlaying ? 1 : 0;\n    roomInstance.model.setValue(RoomVariableEnum.IS_PLAYING_GAME, mode);\n\n    if (mode === 0) {\n      this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.NORMAL_MODE, roomId));\n    } else {\n      this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.GAME_MODE, roomId));\n    }\n  }\n\n  isRoomIdPlayingGame(roomId) {\n    const roomInstance = this.getRoomInstance(roomId);\n    if (!roomInstance) return false;\n    return roomInstance.model.getValue(RoomVariableEnum.IS_PLAYING_GAME) > 0;\n  }\n\n  isPlayingGame() {\n    return this.isRoomIdPlayingGame(this._activeRoomId);\n  }\n\n  disableUpdate(flag) {\n    if (flag) {\n      Nitro.instance.ticker.remove(this.update, this);\n    } else {\n      Nitro.instance.ticker.remove(this.update, this);\n      Nitro.instance.ticker.add(this.update, this);\n    }\n  }\n\n  runUpdate() {\n    this.update(1);\n  }\n\n  runVisibilityUpdate() {\n    if (!document.hidden) this.update(1, true);\n  }\n\n  update(time) {\n    let update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!this._roomManager) return;\n    time = Nitro.instance.time;\n    RoomEnterEffect.turnVisualizationOn();\n    this.processPendingFurniture();\n\n    this._roomManager.update(time, update);\n\n    this.updateRoomCameras(time);\n    if (this._mouseCursorUpdate) this.setPointer();\n    RoomEnterEffect.turnVisualizationOff();\n  }\n\n  setPointer() {\n    this._mouseCursorUpdate = false;\n    const instanceData = this.getRoomInstanceData(this._activeRoomId);\n\n    if (instanceData && instanceData.hasButtonMouseCursorOwners()) {\n      document.body.style.cursor = 'pointer';\n    } else {\n      document.body.style.cursor = 'auto';\n    }\n  }\n\n  processPendingFurniture() {\n    if (this._skipFurnitureCreationForNextFrame) {\n      this._skipFurnitureCreationForNextFrame = false;\n      return;\n    }\n\n    const startTime = new Date().valueOf();\n    const furniturePerTick = 5;\n    const hasTickLimit = true;\n\n    for (const instanceData of this._roomInstanceDatas.values()) {\n      if (!instanceData) continue;\n      let pendingData = null;\n      let totalFurnitureAdded = 0;\n      let furnitureAdded = false;\n\n      while (pendingData = instanceData.getNextPendingFurnitureFloor()) {\n        furnitureAdded = this.processPendingFurnitureFloor(instanceData.roomId, pendingData.id, pendingData);\n\n        if (hasTickLimit) {\n          if (!(++totalFurnitureAdded % furniturePerTick)) {\n            const time = new Date().valueOf();\n\n            if (time - startTime >= 40) {\n              this._skipFurnitureCreationForNextFrame = true;\n              break;\n            }\n          }\n        }\n      }\n\n      while (!this._skipFurnitureCreationForNextFrame && (pendingData = instanceData.getNextPendingFurnitureWall())) {\n        furnitureAdded = this.processPendingFurnitureWall(instanceData.roomId, pendingData.id, pendingData);\n\n        if (hasTickLimit) {\n          if (!(++totalFurnitureAdded % furniturePerTick)) {\n            const time = new Date().valueOf();\n\n            if (time - startTime >= 40) {\n              this._skipFurnitureCreationForNextFrame = true;\n              break;\n            }\n          }\n        }\n      }\n\n      if (furnitureAdded && this._roomManager) {\n        const roomInstance = this._roomManager.getRoomInstance(this.getRoomId(instanceData.roomId));\n\n        if (!roomInstance.hasUninitializedObjects()) this.objectsInitialized(instanceData.roomId.toString());\n      }\n\n      if (this._skipFurnitureCreationForNextFrame) return;\n    }\n  }\n\n  onRoomEngineInitalized(flag) {\n    if (!flag) return;\n    this._ready = true;\n    this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.ENGINE_INITIALIZED, 0));\n\n    for (const roomData of this._roomDatas.values()) {\n      if (!roomData) continue;\n      this.createRoomInstance(roomData.roomId, roomData.data);\n    }\n  }\n\n  processPendingFurnitureFloor(roomId, id, data) {\n    if (!data) {\n      const instanceData = this.getRoomInstanceData(roomId);\n      if (instanceData) data = instanceData.getPendingFurnitureFloor(id);\n      if (!data) return false;\n    }\n\n    let type = data.type;\n    let didLoad = false;\n\n    if (!type) {\n      type = this.getFurnitureFloorName(data.typeId);\n      didLoad = true;\n    }\n\n    const object = this.createRoomObjectFloor(roomId, id, type);\n    if (!object) return false;\n    const model = object.model;\n\n    if (model) {\n      model.setValue(RoomObjectVariable.FURNITURE_COLOR, this.getFurnitureFloorColorIndex(data.typeId));\n      model.setValue(RoomObjectVariable.FURNITURE_TYPE_ID, data.typeId);\n      model.setValue(RoomObjectVariable.FURNITURE_AD_URL, this.getRoomObjectAdUrl(data.type));\n      model.setValue(RoomObjectVariable.FURNITURE_REAL_ROOM_OBJECT, data.realRoomObject ? 1 : 0);\n      model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, data.expiryTime);\n      model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\n      model.setValue(RoomObjectVariable.FURNITURE_USAGE_POLICY, data.usagePolicy);\n      model.setValue(RoomObjectVariable.FURNITURE_OWNER_ID, data.ownerId);\n      model.setValue(RoomObjectVariable.FURNITURE_OWNER_NAME, data.ownerName);\n    }\n\n    if (!this.updateRoomObjectFloor(roomId, id, data.location, data.direction, data.state, data.data, data.extra)) return false;\n\n    if (data.sizeZ >= 0) {\n      if (!this.updateRoomObjectFloorHeight(roomId, id, data.sizeZ)) return false;\n    }\n\n    if (this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.ADDED, roomId, id, RoomObjectCategory.FLOOR));\n    const selectedRoomObjectData = this.getPlacedRoomObjectData(roomId);\n\n    if (selectedRoomObjectData && selectedRoomObjectData.id === id && selectedRoomObjectData.category === RoomObjectCategory.FLOOR) {\n      this.selectRoomObject(roomId, id, RoomObjectCategory.FLOOR);\n    }\n\n    if (object.isReady && data.synchronized) this.addObjectToTileMap(roomId, object);\n    return true;\n  }\n\n  processPendingFurnitureWall(roomId, id, data) {\n    if (!data) {\n      const instanceData = this.getRoomInstanceData(roomId);\n      if (instanceData) data = instanceData.getPendingFurnitureWall(id);\n      if (!data) return false;\n    }\n\n    let extra = '';\n    if (data.data) extra = data.data.getLegacyString();\n    let type = this.getFurnitureWallName(data.typeId, extra);\n    if (!type) type = '';\n    const object = this.createRoomObjectWall(roomId, id, type);\n    if (!object) return false;\n    const model = object.model;\n\n    if (model) {\n      model.setValue(RoomObjectVariable.FURNITURE_COLOR, this.getFurnitureWallColorIndex(data.typeId));\n      model.setValue(RoomObjectVariable.FURNITURE_TYPE_ID, data.typeId);\n      model.setValue(RoomObjectVariable.FURNITURE_AD_URL, this.getRoomObjectAdUrl(data.type));\n      model.setValue(RoomObjectVariable.FURNITURE_REAL_ROOM_OBJECT, data.realRoomObject ? 1 : 0);\n      model.setValue(RoomObjectVariable.OBJECT_ACCURATE_Z_VALUE, 1);\n      model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, data.expiryTime);\n      model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\n      model.setValue(RoomObjectVariable.FURNITURE_USAGE_POLICY, data.usagePolicy);\n      model.setValue(RoomObjectVariable.FURNITURE_OWNER_ID, data.ownerId);\n      model.setValue(RoomObjectVariable.FURNITURE_OWNER_NAME, data.ownerName);\n    }\n\n    if (!this.updateRoomObjectWall(roomId, id, data.location, data.direction, data.state, extra)) return false;\n    if (this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.ADDED, roomId, id, RoomObjectCategory.WALL));\n    const selectedRoomObjectData = this.getPlacedRoomObjectData(roomId);\n\n    if (selectedRoomObjectData && Math.abs(selectedRoomObjectData.id) === id && selectedRoomObjectData.category === RoomObjectCategory.WALL) {\n      this.selectRoomObject(roomId, id, RoomObjectCategory.WALL);\n    }\n\n    return true;\n  }\n\n  setRoomSessionOwnUser(roomId, objectId) {\n    if (!this._roomSessionManager) return;\n\n    const session = this._roomSessionManager.getSession(roomId);\n\n    if (session) {\n      session.setOwnRoomIndex(objectId);\n    }\n\n    const camera = this.getRoomCamera(roomId);\n\n    if (camera) {\n      camera.targetId = objectId;\n      camera.targetCategory = RoomObjectCategory.UNIT;\n      camera.activateFollowing(this.cameraFollowDuration);\n    }\n  }\n\n  get cameraFollowDuration() {\n    return 1000; //return (getBoolean(\"room.camera.follow_user\")) ? 1000 : 0;\n  }\n\n  updateRoomCameras(time) {\n    for (const instanceData of this._roomInstanceDatas.values()) {\n      if (!instanceData) continue;\n      const camera = instanceData.roomCamera;\n      if (!camera) continue;\n      let location = null;\n      const object = this.getRoomObject(instanceData.roomId, camera.targetId, camera.targetCategory);\n      if (object) location = object.getLocation();\n      if (!location) continue;\n\n      if (instanceData.roomId !== this._activeRoomId || !this._activeRoomIsDragged) {\n        this.updateRoomCamera(instanceData.roomId, 1, location, time);\n      }\n    }\n\n    if (this._activeRoomWasDragged) {\n      const renderingCanvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, 1);\n      if (renderingCanvas) this.setRoomInstanceRenderingCanvasOffset(this._activeRoomId, 1, new Point(renderingCanvas.screenOffsetX + this._activeRoomDragX, renderingCanvas.screenOffsetY + this._activeRoomDragY));\n      this._activeRoomDragX = 0;\n      this._activeRoomDragY = 0;\n    }\n  }\n\n  updateRoomCamera(roomId, canvasId, objectLocation, time) {\n    const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!renderingCanvas || !instanceData || renderingCanvas.scale !== 1) return;\n    const roomGeometry = renderingCanvas.geometry;\n    const roomCamera = instanceData.roomCamera;\n    const roomInstance = this.getRoomInstance(roomId);\n    if (!roomGeometry || !roomCamera || !roomInstance) return;\n    const canvasRectangle = this.getRoomCanvasRectangle(roomId, canvasId);\n    if (!canvasRectangle) return;\n\n    let _local_10 = Math.floor(objectLocation.z) + 1;\n\n    const width = Math.round(canvasRectangle.width);\n    const height = Math.round(canvasRectangle.height);\n    const bounds = this.getCanvasBoundingRectangle(canvasId);\n\n    if (bounds && (bounds.right < 0 || bounds.bottom < 0 || bounds.left >= width || bounds.top >= height)) {\n      roomCamera.reset();\n    }\n\n    if (roomCamera.screenWd !== width || roomCamera.screenHt !== height || roomCamera.scale !== roomGeometry.scale || roomCamera.geometryUpdateId !== roomGeometry.updateId || !Vector3d.isEqual(objectLocation, roomCamera.targetObjectLoc) || roomCamera.isMoving) {\n      roomCamera.targetObjectLoc = objectLocation;\n\n      const _local_15 = new Vector3d();\n\n      _local_15.assign(objectLocation);\n\n      _local_15.x = Math.round(_local_15.x);\n      _local_15.y = Math.round(_local_15.y);\n\n      const _local_16 = roomInstance.model.getValue(RoomVariableEnum.ROOM_MIN_X) - 0.5;\n\n      const _local_17 = roomInstance.model.getValue(RoomVariableEnum.ROOM_MIN_Y) - 0.5;\n\n      const _local_18 = roomInstance.model.getValue(RoomVariableEnum.ROOM_MAX_X) + 0.5;\n\n      const _local_19 = roomInstance.model.getValue(RoomVariableEnum.ROOM_MAX_Y) + 0.5;\n\n      const _local_20 = Math.round((_local_16 + _local_18) / 2);\n\n      const _local_21 = Math.round((_local_17 + _local_19) / 2);\n\n      const _local_22 = 2;\n\n      let _local_23 = new Point(_local_15.x - _local_20, _local_15.y - _local_21);\n\n      const _local_24 = roomGeometry.scale / Math.sqrt(2);\n\n      const _local_25 = _local_24 / 2;\n\n      const _local_26 = new Matrix();\n\n      _local_26.rotate(-(roomGeometry.direction.x + 90) / 180 * Math.PI);\n\n      _local_23 = _local_26.apply(_local_23);\n      _local_23.y = _local_23.y * (_local_25 / _local_24);\n\n      const _local_27 = canvasRectangle.width / 2 / _local_24 - 1;\n\n      const _local_28 = canvasRectangle.height / 2 / _local_25 - 1;\n\n      let _local_29 = 0;\n      let _local_30 = 0;\n      let _local_31 = 0;\n      let _local_32 = 0;\n\n      let _local_33 = roomGeometry.getScreenPoint(new Vector3d(_local_20, _local_21, _local_22));\n\n      if (!_local_33) return;\n      _local_33.x = _local_33.x + Math.round(canvasRectangle.width / 2);\n      _local_33.y = _local_33.y + Math.round(canvasRectangle.height / 2);\n\n      if (bounds) {\n        bounds.x += -renderingCanvas.screenOffsetX;\n        bounds.y += -renderingCanvas.screenOffsetY;\n\n        if (bounds.width > 1 && bounds.height > 1) {\n          _local_29 = (bounds.left - _local_33.x - roomGeometry.scale * 0.25) / _local_24;\n          _local_31 = (bounds.right - _local_33.x + roomGeometry.scale * 0.25) / _local_24;\n          _local_30 = (bounds.top - _local_33.y - roomGeometry.scale * 0.5) / _local_25;\n          _local_32 = (bounds.bottom - _local_33.y + roomGeometry.scale * 0.5) / _local_25;\n        } else {\n          roomGeometry.adjustLocation(new Vector3d(-30, -30), 25);\n          return;\n        }\n      } else {\n        roomGeometry.adjustLocation(new Vector3d(0, 0), 25);\n        return;\n      }\n\n      let _local_34 = false;\n      let _local_35 = false;\n      let _local_36 = false;\n      let _local_37 = false;\n\n      const _local_38 = Math.round((_local_31 - _local_29) * _local_24);\n\n      if (_local_38 < canvasRectangle.width) {\n        _local_10 = 2;\n        _local_23.x = (_local_31 + _local_29) / 2;\n        _local_36 = true;\n      } else {\n        if (_local_23.x > _local_31 - _local_27) {\n          _local_23.x = _local_31 - _local_27;\n          _local_34 = true;\n        }\n\n        if (_local_23.x < _local_29 + _local_27) {\n          _local_23.x = _local_29 + _local_27;\n          _local_34 = true;\n        }\n      }\n\n      const _local_39 = Math.round((_local_32 - _local_30) * _local_25);\n\n      if (_local_39 < canvasRectangle.height) {\n        _local_10 = 2;\n        _local_23.y = (_local_32 + _local_30) / 2;\n        _local_37 = true;\n      } else {\n        if (_local_23.y > _local_32 - _local_28) {\n          _local_23.y = _local_32 - _local_28;\n          _local_35 = true;\n        }\n\n        if (_local_23.y < _local_30 + _local_28) {\n          _local_23.y = _local_30 + _local_28;\n          _local_35 = true;\n        }\n\n        if (_local_35) {\n          _local_23.y = _local_23.y / (_local_25 / _local_24);\n        }\n      }\n\n      _local_26.invert();\n\n      _local_23 = _local_26.apply(_local_23);\n      _local_23.x = _local_23.x + _local_20;\n      _local_23.y = _local_23.y + _local_21;\n      let _local_40 = 0.35;\n      let _local_41 = 0.2;\n      let _local_42 = 0.2;\n      const _local_43 = 10;\n      const _local_44 = 10;\n\n      if (_local_42 * width > 100) {\n        _local_42 = 100 / width;\n      }\n\n      if (_local_40 * height > 150) {\n        _local_40 = 150 / height;\n      }\n\n      if (_local_41 * height > 150) {\n        _local_41 = 150 / height;\n      }\n\n      if (roomCamera.limitedLocationX && roomCamera.screenWd == width && roomCamera.screenHt == height) {\n        _local_42 = 0;\n      }\n\n      if (roomCamera.limitedLocationY && roomCamera.screenWd == width && roomCamera.screenHt == height) {\n        _local_40 = 0;\n        _local_41 = 0;\n      }\n\n      canvasRectangle.width = canvasRectangle.width * (1 - _local_42 * 2);\n      canvasRectangle.height = canvasRectangle.height * (1 - (_local_40 + _local_41));\n\n      if (canvasRectangle.width < _local_43) {\n        canvasRectangle.width = _local_43;\n      }\n\n      if (canvasRectangle.height < _local_44) {\n        canvasRectangle.height = _local_44;\n      }\n\n      if (_local_40 + _local_41 > 0) {\n        canvasRectangle.x += -canvasRectangle.width / 2;\n        canvasRectangle.y += -canvasRectangle.height * (_local_41 / (_local_40 + _local_41));\n      } else {\n        canvasRectangle.x += -canvasRectangle.width / 2;\n        canvasRectangle.y += -canvasRectangle.height / 2;\n      }\n\n      _local_33 = roomGeometry.getScreenPoint(_local_15);\n      if (!_local_33) return;\n\n      if (_local_33) {\n        _local_33.x = _local_33.x + renderingCanvas.screenOffsetX;\n        _local_33.y = _local_33.y + renderingCanvas.screenOffsetY;\n        _local_15.z = _local_10;\n        _local_15.x = Math.round(_local_23.x * 2) / 2;\n        _local_15.y = Math.round(_local_23.y * 2) / 2;\n\n        if (!roomCamera.location) {\n          roomGeometry.location = _local_15;\n\n          if (this.useOffsetScrolling) {\n            roomCamera.initializeLocation(new Vector3d(0, 0, 0));\n          } else {\n            roomCamera.initializeLocation(_local_15);\n          }\n        }\n\n        const _local_45 = roomGeometry.getScreenPoint(_local_15);\n\n        const _local_46 = new Vector3d(0, 0, 0);\n\n        if (_local_45) {\n          _local_46.x = _local_45.x;\n          _local_46.y = _local_45.y;\n        }\n\n        if ((_local_33.x < canvasRectangle.left || _local_33.x > canvasRectangle.right) && !roomCamera.centeredLocX || (_local_33.y < canvasRectangle.top || _local_33.y > canvasRectangle.bottom) && !roomCamera.centeredLocY || _local_36 && !roomCamera.centeredLocX && !(roomCamera.screenWd == width) || _local_37 && !roomCamera.centeredLocY && !(roomCamera.screenHt == height) || !(roomCamera.roomWd == bounds.width) || !(roomCamera.roomHt == bounds.height) || !(roomCamera.screenWd == width) || !(roomCamera.screenHt == height)) {\n          roomCamera.limitedLocationX = _local_34;\n          roomCamera.limitedLocationY = _local_35;\n\n          if (this.useOffsetScrolling) {\n            roomCamera.target = _local_46;\n          } else {\n            roomCamera.target = _local_15;\n          }\n        } else {\n          if (!_local_34) roomCamera.limitedLocationX = false;\n          if (!_local_35) roomCamera.limitedLocationY = false;\n        }\n      }\n\n      roomCamera.centeredLocX = _local_36;\n      roomCamera.centeredLocY = _local_37;\n      roomCamera.screenWd = width;\n      roomCamera.screenHt = height;\n      roomCamera.scale = roomGeometry.scale;\n      roomCamera.geometryUpdateId = roomGeometry.updateId;\n      roomCamera.roomWd = bounds.width;\n      roomCamera.roomHt = bounds.height;\n\n      if (!this._sessionDataManager.isCameraFollowDisabled) {\n        if (this.useOffsetScrolling) {\n          roomCamera.update(time, 8);\n        } else {\n          roomCamera.update(time, 0.5);\n        }\n      }\n\n      if (this.useOffsetScrolling) {\n        this.setRoomInstanceRenderingCanvasOffset(this.activeRoomId, 1, new Point(-roomCamera.location.x, -roomCamera.location.y));\n      } else {\n        roomGeometry.adjustLocation(roomCamera.location, 25);\n      }\n    } else {\n      roomCamera.limitedLocationX = false;\n      roomCamera.limitedLocationY = false;\n      roomCamera.centeredLocX = false;\n      roomCamera.centeredLocY = false;\n    }\n  }\n\n  getRoomCanvasRectangle(roomId, canvasId) {\n    const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    if (!canvas) return null;\n    return new Rectangle(0, 0, canvas.width, canvas.height);\n  }\n\n  getRoomObjectBoundingRectangle(roomId, objectId, category, canvasId) {\n    const geometry = this.getRoomInstanceGeometry(roomId, canvasId);\n    if (!geometry) return null;\n    const roomObject = this.getRoomObject(roomId, objectId, category);\n    if (!roomObject) return null;\n    const visualization = roomObject.visualization;\n    if (!visualization) return null;\n    const rectangle = visualization.getBoundingRectangle();\n    const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    const scale = canvas ? canvas.scale : 1;\n    const screenPoint = geometry.getScreenPoint(roomObject.getLocation());\n    if (!screenPoint) return null;\n    rectangle.x = rectangle.x * scale;\n    rectangle.y = rectangle.y * scale;\n    rectangle.width = rectangle.width * scale;\n    rectangle.height = rectangle.height * scale;\n    screenPoint.x = screenPoint.x * scale;\n    screenPoint.y = screenPoint.y * scale;\n    rectangle.x += screenPoint.x;\n    rectangle.y += screenPoint.y;\n    if (!canvas) return null;\n    rectangle.x += canvas.width / 2 + canvas.screenOffsetX;\n    rectangle.y += canvas.height / 2 + canvas.screenOffsetY;\n    return rectangle;\n  }\n\n  getCanvasBoundingRectangle(canvasId) {\n    return this.getRoomObjectBoundingRectangle(this._activeRoomId, RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM, canvasId);\n  }\n\n  getFurnitureFloorName(typeId) {\n    if (!this._roomContentLoader) return null;\n    return this._roomContentLoader.getFurnitureFloorNameForTypeId(typeId);\n  }\n\n  getFurnitureWallName(typeId) {\n    let extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!this._roomContentLoader) return null;\n    return this._roomContentLoader.getFurnitureWallNameForTypeId(typeId, extra);\n  }\n\n  getFurnitureFloorColorIndex(typeId) {\n    if (!this._roomContentLoader) return null;\n    return this._roomContentLoader.getFurnitureFloorColorIndex(typeId);\n  }\n\n  getFurnitureWallColorIndex(typeId) {\n    if (!this._roomContentLoader) return null;\n    return this._roomContentLoader.getFurnitureWallColorIndex(typeId);\n  }\n\n  getRoomInstanceData(roomId) {\n    const existing = this._roomInstanceDatas.get(roomId);\n\n    if (existing) return existing;\n    const data = new RoomInstanceData(roomId);\n\n    this._roomInstanceDatas.set(data.roomId, data);\n\n    return data;\n  }\n\n  getRoomInstanceModelName(roomId) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    return instanceData.modelName;\n  }\n\n  setRoomInstanceModelName(roomId, name) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return;\n    instanceData.setModelName(name);\n  }\n\n  getRoomTileObjectMap(k) {\n    const roomInstance = this.getRoomInstanceData(k);\n    if (!roomInstance) return null;\n    return roomInstance.tileObjectMap;\n  }\n\n  getCurrentRoomCamera() {\n    return this.getRoomCamera(this._activeRoomId);\n  }\n\n  getRoomCamera(roomId) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    return instanceData.roomCamera;\n  }\n\n  getSelectedRoomObjectData(roomId) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    return instanceData.selectedObject;\n  }\n\n  setSelectedRoomObjectData(roomId, data) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    instanceData.setSelectedObject(data);\n    if (data) instanceData.setPlacedObject(null);\n  }\n\n  getPlacedRoomObjectData(roomId) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    return instanceData.placedObject;\n  }\n\n  setPlacedRoomObjectData(roomId, data) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    instanceData.setPlacedObject(data);\n  }\n\n  cancelRoomObjectPlacement() {\n    if (!this._roomObjectEventHandler) return;\n\n    this._roomObjectEventHandler.cancelRoomObjectPlacement(this._activeRoomId);\n  }\n\n  getFurnitureStackingHeightMap(roomId) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    return instanceData.furnitureStackingHeightMap;\n  }\n\n  setFurnitureStackingHeightMap(roomId, heightMap) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    instanceData.setFurnitureStackingHeightMap(heightMap);\n  }\n\n  getLegacyWallGeometry(roomId) {\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return null;\n    return instanceData.legacyGeometry;\n  }\n\n  createRoomObjectAndInitialize(roomId, objectId, type, category) {\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    return instance.createRoomObjectAndInitalize(objectId, type, category);\n  }\n\n  getTotalObjectsForManager(roomId, category) {\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return 0;\n    return instance.getTotalObjectsForManager(category);\n  }\n\n  getRoomObject(roomId, objectId, category) {\n    if (!this._ready) return null;\n    let roomIdString = this.getRoomId(roomId);\n    if (roomId === 0) roomIdString = RoomEngine.TEMPORARY_ROOM;\n    return this.getObject(roomIdString, objectId, category);\n  }\n\n  getObject(roomId, objectId, category) {\n    let roomInstance = null;\n    if (this._roomManager) roomInstance = this._roomManager.getRoomInstance(roomId);\n    if (!roomInstance) return null;\n    let roomObject = roomInstance.getRoomObject(objectId, category);\n\n    if (!roomObject) {\n      switch (category) {\n        case RoomObjectCategory.FLOOR:\n          this.processPendingFurnitureFloor(this.getRoomIdFromString(roomId), objectId, null);\n          roomObject = roomInstance.getRoomObject(objectId, category);\n          break;\n\n        case RoomObjectCategory.WALL:\n          this.processPendingFurnitureWall(this.getRoomIdFromString(roomId), objectId, null);\n          roomObject = roomInstance.getRoomObject(objectId, category);\n          break;\n      }\n    }\n\n    return roomObject;\n  }\n\n  getRoomObjectByIndex(roomId, index, category) {\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    return instance.getRoomObjectByIndex(index, category);\n  }\n\n  getRoomObjectCategoryForType(type) {\n    if (!type || !this._roomContentLoader) return RoomObjectCategory.MINIMUM;\n    return this._roomContentLoader.getCategoryForType(type);\n  }\n\n  getRoomObjectCursor(roomId) {\n    return this.getObject(this.getRoomId(roomId), RoomEngine.CURSOR_OBJECT_ID, RoomObjectCategory.CURSOR);\n  }\n\n  getRoomObjectSelectionArrow(roomId) {\n    return this.getObject(this.getRoomId(roomId), RoomEngine.ARROW_OBJECT_ID, RoomObjectCategory.CURSOR);\n  }\n\n  getRoomOwnObject(roomId) {\n    return this.getObject(this.getRoomId(roomId), RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM);\n  }\n\n  getRoomObjectUser(roomId, objectId) {\n    return this.getObject(this.getRoomId(roomId), objectId, RoomObjectCategory.UNIT);\n  }\n\n  removeRoomObjectUser(roomId, objectId) {\n    return this.removeRoomObject(roomId, objectId, RoomObjectCategory.UNIT);\n  }\n\n  createRoomObjectUser(roomId, objectId, type) {\n    return this.createRoomObjectAndInitialize(roomId, objectId, type, RoomObjectCategory.UNIT);\n  }\n\n  getRoomObjectFloor(roomId, objectId) {\n    return this.getObject(this.getRoomId(roomId), objectId, RoomObjectCategory.FLOOR);\n  }\n\n  createRoomObjectFloor(roomId, id, type) {\n    return this.createRoomObjectAndInitialize(roomId, id, type, RoomObjectCategory.FLOOR);\n  }\n\n  removeRoomObjectFloor(roomId, objectId) {\n    let userId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n    let _arg_4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    const roomInstanceData = this.getRoomInstanceData(roomId);\n    if (roomInstanceData) roomInstanceData.removePendingFunitureFloor(objectId);\n\n    if (this._sessionDataManager && userId === this._sessionDataManager.userId && !FurniId.isBuilderClubId(objectId)) {\n      const roomObject = this.getRoomObject(roomId, objectId, RoomObjectCategory.FLOOR);\n\n      if (roomObject) {\n        const screenLocation = this.getRoomObjectScreenLocation(roomId, objectId, RoomObjectCategory.FLOOR, this._activeRoomActiveCanvas);\n\n        if (screenLocation) {\n          const disabledPickingAnimation = roomObject.model.getValue(RoomObjectVariable.FURNITURE_DISABLE_PICKING_ANIMATION) === 1;\n\n          if (!disabledPickingAnimation) {\n            const typeId = roomObject.model.getValue(RoomObjectVariable.FURNITURE_TYPE_ID);\n            const extras = roomObject.model.getValue(RoomObjectVariable.FURNITURE_EXTRAS);\n            const dataKey = roomObject.model.getValue(RoomObjectVariable.FURNITURE_DATA_FORMAT);\n            const objectData = ObjectDataFactory.getData(dataKey);\n            const icon = this.getFurnitureFloorIcon(typeId, null, extras, objectData).data;\n\n            if (icon) {\n              const image = TextureUtils.generateImage(icon);\n\n              if (this.events) {\n                const event = new NitroToolbarAnimateIconEvent(image, screenLocation.x, screenLocation.y);\n                event.iconName = ToolbarIconEnum.INVENTORY;\n                this.events.dispatchEvent(event);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.removeRoomObject(roomId, objectId, RoomObjectCategory.FLOOR);\n    this.setMouseDefault(roomId, RoomObjectCategory.FLOOR, objectId);\n    if (_arg_4) this.refreshTileObjectMap(roomId, 'RoomEngine.disposeObjectFurniture()');\n  }\n\n  getRoomObjectWall(roomId, objectId) {\n    return this.getObject(this.getRoomId(roomId), objectId, RoomObjectCategory.WALL);\n  }\n\n  removeRoomObjectWall(roomId, objectId) {\n    let userId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n    if (this._sessionDataManager && userId === this._sessionDataManager.userId && !FurniId.isBuilderClubId(objectId)) {\n      const roomObject = this.getRoomObject(roomId, objectId, RoomObjectCategory.WALL);\n\n      if (roomObject && roomObject.type.indexOf('post_it') === -1 && roomObject.type.indexOf('external_image_wallitem') === -1) {\n        const screenLocation = this.getRoomObjectScreenLocation(roomId, objectId, RoomObjectCategory.WALL, this._activeRoomActiveCanvas);\n\n        if (screenLocation) {\n          const typeId = roomObject.model.getValue(RoomObjectVariable.FURNITURE_TYPE_ID);\n          const objectData = roomObject.model.getValue(RoomObjectVariable.FURNITURE_DATA);\n          const icon = this.getFurnitureWallIcon(typeId, null, objectData).data;\n\n          if (icon) {\n            const image = TextureUtils.generateImage(icon);\n\n            if (this.events) {\n              const event = new NitroToolbarAnimateIconEvent(image, screenLocation.x, screenLocation.y);\n              event.iconName = ToolbarIconEnum.INVENTORY;\n              this.events.dispatchEvent(event);\n            }\n          }\n        }\n      }\n    }\n\n    this.removeRoomObject(roomId, objectId, RoomObjectCategory.WALL);\n    this.updateRoomObjectMask(roomId, objectId, false);\n    this.setMouseDefault(roomId, RoomObjectCategory.WALL, objectId);\n  }\n\n  createRoomObjectWall(roomId, id, type) {\n    return this.createRoomObjectAndInitialize(roomId, id, type, RoomObjectCategory.WALL);\n  }\n\n  removeRoomObject(roomId, objectId, category) {\n    const instance = this.getRoomInstance(roomId);\n    if (!instance) return null;\n    instance.removeRoomObject(objectId, category);\n    if (this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.REMOVED, roomId, objectId, category));\n  }\n\n  addFurnitureFloor(roomId, id, typeId, location, direction, state, objectData) {\n    let extra = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : NaN;\n    let expires = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : -1;\n    let usagePolicy = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let ownerId = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n    let ownerName = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : '';\n    let synchronized = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : true;\n    let realRoomObject = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : true;\n    let sizeZ = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : -1;\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return false;\n    const furnitureData = new RoomFurnitureData(id, typeId, null, location, direction, state, objectData, extra, expires, usagePolicy, ownerId, ownerName, synchronized, realRoomObject, sizeZ);\n    instanceData.addPendingFurnitureFloor(furnitureData);\n    return true;\n  }\n\n  addFurnitureFloorByTypeName(roomId, id, typeName, location, direction, state, objectData) {\n    let extra = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : NaN;\n    let expires = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : -1;\n    let usagePolicy = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let ownerId = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n    let ownerName = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : '';\n    let synchronized = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : true;\n    let realRoomObject = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : true;\n    let sizeZ = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : -1;\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return false;\n    const furnitureData = new RoomFurnitureData(id, 0, typeName, location, direction, state, objectData, extra, expires, usagePolicy, ownerId, ownerName, synchronized, realRoomObject, sizeZ);\n    instanceData.addPendingFurnitureFloor(furnitureData);\n    return true;\n  }\n\n  addFurnitureWall(roomId, id, typeId, location, direction, state, extra) {\n    let expires = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : -1;\n    let usagePolicy = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n    let ownerId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let ownerName = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : '';\n    let realRoomObject = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : true;\n    const instanceData = this.getRoomInstanceData(roomId);\n    if (!instanceData) return false;\n    const objectData = new LegacyDataType();\n    objectData.setString(extra);\n    const furnitureData = new RoomFurnitureData(id, typeId, null, location, direction, state, objectData, NaN, expires, usagePolicy, ownerId, ownerName, true, realRoomObject);\n    instanceData.addPendingFurnitureWall(furnitureData);\n    return true;\n  }\n\n  updateRoomObjectFloor(roomId, objectId, location, direction, state, data) {\n    let extra = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : NaN;\n    const object = this.getRoomObjectFloor(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new RoomObjectUpdateMessage(location, direction));\n    object.processUpdateMessage(new ObjectDataUpdateMessage(state, data, extra));\n    return true;\n  }\n\n  updateRoomObjectWall(roomId, objectId, location, direction, state) {\n    let extra = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    const object = this.getRoomObjectWall(roomId, objectId);\n    if (!object || !object.logic) return false;\n    const updateMessage = new RoomObjectUpdateMessage(location, direction);\n    const data = new LegacyDataType();\n    const dataUpdateMessage = new ObjectDataUpdateMessage(state, data);\n    data.setString(extra);\n    object.logic.processUpdateMessage(updateMessage);\n    object.logic.processUpdateMessage(dataUpdateMessage);\n    this.updateRoomObjectMask(roomId, objectId);\n    return true;\n  }\n\n  updateRoomObjectWallItemData(roomId, objectId, data) {\n    const object = this.getRoomObjectWall(roomId, objectId);\n    if (!object || !object.logic) return false;\n    object.logic.processUpdateMessage(new ObjectItemDataUpdateMessage(data));\n    return true;\n  }\n\n  updateRoomObjectFloorHeight(roomId, objectId, height) {\n    const object = this.getRoomObjectFloor(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectHeightUpdateMessage(null, null, height));\n    return true;\n  }\n\n  updateRoomObjectFloorExpiration(roomId, objectId, expires) {\n    const object = this.getRoomObjectFloor(roomId, objectId);\n    if (!object) return false;\n    object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, expires);\n    object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\n    return true;\n  }\n\n  updateRoomObjectWallExpiration(roomId, objectId, expires) {\n    const object = this.getRoomObjectWall(roomId, objectId);\n    if (!object) return false;\n    object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, expires);\n    object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\n    return true;\n  }\n\n  updateRoomObjectMask(roomId, objectId) {\n    let _arg_3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    const maskName = RoomObjectCategory.WALL + '_' + objectId;\n    const roomObject = this.getRoomObjectWall(roomId, objectId);\n    let maskUpdate = null;\n\n    if (roomObject && roomObject.model) {\n      if (roomObject.model.getValue(RoomObjectVariable.FURNITURE_USES_PLANE_MASK) > 0) {\n        const maskType = roomObject.model.getValue(RoomObjectVariable.FURNITURE_PLANE_MASK_TYPE);\n        const location = roomObject.getLocation();\n        if (_arg_3) maskUpdate = new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.ADD_MASK, maskName, maskType, location);else maskUpdate = new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.REMOVE_MASK, maskName);\n      }\n    } else {\n      maskUpdate = new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.REMOVE_MASK, maskName);\n    }\n\n    const roomOwnObject = this.getRoomOwnObject(roomId);\n    if (roomOwnObject && roomOwnObject.logic && maskUpdate) roomOwnObject.logic.processUpdateMessage(maskUpdate);\n  }\n\n  rollRoomObjectFloor(roomId, objectId, location, targetLocation) {\n    const object = this.getRoomObjectFloor(roomId, objectId);\n    if (!object) return;\n    object.processUpdateMessage(new ObjectMoveUpdateMessage(location, targetLocation, null, !!targetLocation));\n  }\n\n  updateRoomObjectWallLocation(roomId, objectId, location) {\n    const roomObject = this.getRoomObjectWall(roomId, objectId);\n    if (!roomObject) return false;\n    if (roomObject.logic) roomObject.logic.processUpdateMessage(new ObjectMoveUpdateMessage(location, null, null));\n    this.updateRoomObjectMask(roomId, objectId);\n    return true;\n  }\n\n  addRoomObjectUser(roomId, objectId, location, direction, headDirection, type, figure) {\n    const existing = this.getRoomObjectUser(roomId, objectId);\n    if (existing) return false;\n    let objectType = RoomObjectUserType.getTypeString(type);\n    if (objectType === RoomObjectUserType.PET) objectType = this.getPetType(figure);\n    const object = this.createRoomObjectUser(roomId, objectId, objectType);\n    if (!object) return false; //object.model.setValue(RoomObjectVariable.FIGURE_HIGHLIGHT_ENABLE, 1);\n\n    object.processUpdateMessage(new ObjectAvatarUpdateMessage(this.fixedUserLocation(roomId, location), null, direction, headDirection, false, 0));\n    if (figure) object.processUpdateMessage(new ObjectAvatarFigureUpdateMessage(figure));\n    if (this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.ADDED, roomId, objectId, RoomObjectCategory.UNIT));\n    return true;\n  }\n\n  updateRoomObjectUserLocation(roomId, objectId, location, targetLocation) {\n    let canStandUp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let baseY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let direction = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    let headDirection = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : NaN;\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    if (!location) location = object.getLocation();\n    if (!direction) direction = object.getDirection();\n    if (isNaN(headDirection)) headDirection = object.model.getValue(RoomObjectVariable.HEAD_DIRECTION);\n    object.processUpdateMessage(new ObjectAvatarUpdateMessage(this.fixedUserLocation(roomId, location), this.fixedUserLocation(roomId, targetLocation), direction, headDirection, canStandUp, baseY));\n    const roomSession = this._roomSessionManager && this._roomSessionManager.getSession(roomId) || null;\n\n    if (roomSession && roomSession.ownRoomIndex === objectId) {\n      this._logicFactory.events.dispatchEvent(new RoomToObjectOwnAvatarMoveEvent(RoomToObjectOwnAvatarMoveEvent.ROAME_MOVE_TO, targetLocation));\n    }\n\n    return true;\n  }\n\n  fixedUserLocation(roomId, location) {\n    if (!location) return null;\n    const heightMap = this.getFurnitureStackingHeightMap(roomId);\n    const wallGeometry = this.getLegacyWallGeometry(roomId);\n    if (!heightMap || !wallGeometry) return location;\n    let _local_5 = location.z;\n\n    const _local_6 = heightMap.getTileHeight(location.x, location.y);\n\n    const _local_7 = wallGeometry.getHeight(location.x, location.y);\n\n    if (Math.abs(_local_5 - _local_6) < 0.1 && Math.abs(_local_6 - _local_7) < 0.1) {\n      _local_5 = wallGeometry.getFloorAltitude(location.x, location.y);\n    }\n\n    return new Vector3d(location.x, location.y, _local_5);\n  }\n\n  updateRoomObjectUserAction(roomId, objectId, action, value) {\n    let parameter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    let message = null;\n\n    switch (action) {\n      case RoomObjectVariable.FIGURE_TALK:\n        message = new ObjectAvatarChatUpdateMessage(value);\n        break;\n\n      case RoomObjectVariable.FIGURE_SLEEP:\n        message = new ObjectAvatarSleepUpdateMessage(value === 1);\n        break;\n\n      case RoomObjectVariable.FIGURE_IS_TYPING:\n        message = new ObjectAvatarTypingUpdateMessage(value === 1);\n        break;\n\n      case RoomObjectVariable.FIGURE_IS_MUTED:\n        message = new ObjectAvatarMutedUpdateMessage(value === 1);\n        break;\n\n      case RoomObjectVariable.FIGURE_CARRY_OBJECT:\n        message = new ObjectAvatarCarryObjectUpdateMessage(value, parameter);\n        break;\n\n      case RoomObjectVariable.FIGURE_USE_OBJECT:\n        message = new ObjectAvatarUseObjectUpdateMessage(value);\n        break;\n\n      case RoomObjectVariable.FIGURE_DANCE:\n        message = new ObjectAvatarDanceUpdateMessage(value);\n        break;\n\n      case RoomObjectVariable.FIGURE_GAINED_EXPERIENCE:\n        message = new ObjectAvatarExperienceUpdateMessage(value);\n        break;\n\n      case RoomObjectVariable.FIGURE_NUMBER_VALUE:\n        message = new ObjectAvatarPlayerValueUpdateMessage(value);\n        break;\n\n      case RoomObjectVariable.FIGURE_SIGN:\n        message = new ObjectAvatarSignUpdateMessage(value);\n        break;\n\n      case RoomObjectVariable.FIGURE_EXPRESSION:\n        message = new ObjectAvatarExpressionUpdateMessage(value);\n        break;\n\n      case RoomObjectVariable.FIGURE_IS_PLAYING_GAME:\n        message = new ObjectAvatarPlayingGameUpdateMessage(value === 1);\n        break;\n\n      case RoomObjectVariable.FIGURE_GUIDE_STATUS:\n        message = new ObjectAvatarGuideStatusUpdateMessage(value);\n        break;\n    }\n\n    if (!message) return false;\n    object.processUpdateMessage(message);\n    return true;\n  }\n\n  updateRoomObjectUserFigure(roomId, objectId, figure) {\n    let gender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let subType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let isRiding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectAvatarFigureUpdateMessage(figure, gender, subType, isRiding));\n    return true;\n  }\n\n  updateRoomObjectUserFlatControl(roomId, objectId, level) {\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectAvatarFlatControlUpdateMessage(parseInt(level)));\n    return true;\n  }\n\n  updateRoomObjectUserEffect(roomId, objectId, effectId) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectAvatarEffectUpdateMessage(effectId, delay));\n    return true;\n  }\n\n  updateRoomObjectUserGesture(roomId, objectId, gestureId) {\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectAvatarGestureUpdateMessage(gestureId));\n    return true;\n  }\n\n  updateRoomObjectUserPetGesture(roomId, objectId, gesture) {\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectAvatarPetGestureUpdateMessage(gesture));\n    return true;\n  }\n\n  updateRoomObjectUserPosture(roomId, objectId, type) {\n    let parameter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return false;\n    object.processUpdateMessage(new ObjectAvatarPostureUpdateMessage(type, parameter));\n    return true;\n  }\n\n  updateRoomObjectUserOwn(roomId, objectId) {\n    const object = this.getRoomObjectUser(roomId, objectId);\n    if (!object) return;\n    object.processUpdateMessage(new ObjectAvatarOwnMessage());\n  }\n\n  useRoomObject(objectId, category) {\n    const roomObject = this.getRoomObject(this._activeRoomId, objectId, category);\n\n    if (roomObject) {\n      const eventHandler = roomObject.logic;\n\n      if (eventHandler) {\n        eventHandler.useObject();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  objectInitialized(roomId, objectId, category) {\n    const id = this.getRoomIdFromString(roomId);\n\n    if (category === RoomObjectCategory.WALL) {\n      this.updateRoomObjectMask(id, objectId);\n    }\n\n    const object = this.getRoomObject(id, objectId, category);\n\n    if (object && object.model && object.logic) {\n      const dataFormat = object.model.getValue(RoomObjectVariable.FURNITURE_DATA_FORMAT);\n\n      if (!isNaN(dataFormat)) {\n        const data = ObjectDataFactory.getData(dataFormat);\n        data.initializeFromRoomObjectModel(object.model);\n        object.processUpdateMessage(new ObjectDataUpdateMessage(object.getState(0), data));\n      }\n\n      this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.CONTENT_UPDATED, id, objectId, category));\n    }\n\n    if (roomId !== RoomEngine.TEMPORARY_ROOM) this.addObjectToTileMap(id, object);\n  }\n\n  changeObjectModelData(roomId, objectId, category, numberKey, numberValue) {\n    const roomObject = this.getObject(this.getRoomId(roomId), objectId, category);\n    if (!roomObject || !roomObject.logic) return false;\n    const message = new ObjectModelDataUpdateMessage(numberKey, numberValue);\n    roomObject.processUpdateMessage(message);\n    return true;\n  }\n\n  changeObjectState(roomId, objectId, category) {\n    const roomObject = this.getObject(this.getRoomId(roomId), objectId, category);\n    if (!roomObject || !roomObject.model) return;\n    let stateIndex = roomObject.model.getValue(RoomObjectVariable.FURNITURE_AUTOMATIC_STATE_INDEX);\n    if (isNaN(stateIndex)) stateIndex = 1;else stateIndex = stateIndex + 1;\n    roomObject.model.setValue(RoomObjectVariable.FURNITURE_AUTOMATIC_STATE_INDEX, stateIndex);\n    const objectDataKey = roomObject.model.getValue(RoomObjectVariable.FURNITURE_DATA_FORMAT);\n    const objectData = ObjectDataFactory.getData(objectDataKey);\n    objectData.initializeFromRoomObjectModel(roomObject.model);\n    if (roomObject.logic) roomObject.logic.processUpdateMessage(new ObjectDataUpdateMessage(stateIndex, objectData));\n  }\n\n  loadRoomObjectBadgeImage(roomId, objectId, objectCategory, badgeId) {\n    let groupBadge = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    if (!this._sessionDataManager) return;\n    let roomObject = null;\n\n    if (roomId === 0) {\n      const room = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\n\n      if (room) roomObject = room.getRoomObject(objectId, objectCategory);\n    } else {\n      roomObject = this.getRoomObjectFloor(roomId, objectId);\n    }\n\n    if (!roomObject || !roomObject.logic) return;\n    let badgeName = groupBadge ? this._sessionDataManager.loadGroupBadgeImage(badgeId) : this._sessionDataManager.loadBadgeImage(badgeId);\n\n    if (!badgeName) {\n      badgeName = 'loading_icon';\n      if (!this._badgeListenerObjects) this._badgeListenerObjects = new Map();\n\n      if (!this._badgeListenerObjects.size) {\n        this._sessionDataManager.events.addEventListener(BadgeImageReadyEvent.IMAGE_READY, this.onBadgeImageReadyEvent);\n      }\n\n      let listeners = this._badgeListenerObjects.get(badgeId);\n\n      if (!listeners) listeners = [];\n      listeners.push(new RoomObjectBadgeImageAssetListener(roomObject, groupBadge));\n\n      this._badgeListenerObjects.set(badgeId, listeners);\n    } else {\n      this.putBadgeInObjectAssets(roomObject, badgeId, groupBadge);\n    }\n\n    roomObject.logic.processUpdateMessage(new ObjectGroupBadgeUpdateMessage(badgeId, badgeName));\n  }\n\n  onBadgeImageReadyEvent(k) {\n    if (!this._sessionDataManager) return;\n\n    const listeners = this._badgeListenerObjects && this._badgeListenerObjects.get(k.badgeId);\n\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      if (!listener) continue;\n      this.putBadgeInObjectAssets(listener.object, k.badgeId, listener.groupBadge);\n      const badgeName = listener.groupBadge ? this._sessionDataManager.loadGroupBadgeImage(k.badgeId) : this._sessionDataManager.loadBadgeImage(k.badgeId);\n      if (listener.object && listener.object.logic) listener.object.logic.processUpdateMessage(new ObjectGroupBadgeUpdateMessage(k.badgeId, badgeName));\n    }\n\n    this._badgeListenerObjects.delete(k.badgeId);\n\n    if (!this._badgeListenerObjects.size) {\n      this._sessionDataManager.events.removeEventListener(BadgeImageReadyEvent.IMAGE_READY, this.onBadgeImageReadyEvent);\n    }\n  }\n\n  putBadgeInObjectAssets(object, badgeId) {\n    let groupBadge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!this._roomContentLoader || !this._sessionDataManager) return;\n    const badgeName = groupBadge ? this._sessionDataManager.loadGroupBadgeImage(badgeId) : this._sessionDataManager.loadBadgeImage(badgeId);\n    const badgeImage = groupBadge ? this._sessionDataManager.getGroupBadgeImage(badgeId) : this._sessionDataManager.getBadgeImage(badgeId);\n    if (badgeImage) this._roomContentLoader.addAssetToCollection(object.type, badgeName, badgeImage, false);\n  }\n\n  dispatchMouseEvent(canvasId, x, y, type, altKey, ctrlKey, shiftKey, buttonDown) {\n    const canvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, canvasId);\n    if (!canvas) return;\n    const overlay = this.getRenderingCanvasOverlay(canvas);\n    const sprite = this.getOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE);\n\n    if (sprite) {\n      const rectangle = sprite.getLocalBounds();\n      sprite.x = x - rectangle.width / 2;\n      sprite.y = y - rectangle.height / 2;\n    }\n\n    if (!this.handleRoomDragging(canvas, x, y, type, altKey, ctrlKey, shiftKey)) {\n      if (!canvas.handleMouseEvent(x, y, type, altKey, ctrlKey, shiftKey, buttonDown)) {\n        let eventType = null;\n\n        if (type === MouseEventType.MOUSE_CLICK) {\n          if (this.events) {\n            this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.DESELECTED, this._activeRoomId, -1, RoomObjectCategory.MINIMUM));\n          }\n\n          eventType = RoomObjectMouseEvent.CLICK;\n        } else {\n          if (type === MouseEventType.MOUSE_MOVE) eventType = RoomObjectMouseEvent.MOUSE_MOVE;else if (type === MouseEventType.MOUSE_DOWN) eventType = RoomObjectMouseEvent.MOUSE_DOWN;else if (type === MouseEventType.MOUSE_DOWN_LONG) eventType = RoomObjectMouseEvent.MOUSE_DOWN_LONG;else if (type === MouseEventType.MOUSE_UP) eventType = RoomObjectMouseEvent.MOUSE_UP;\n        }\n\n        this._roomObjectEventHandler.handleRoomObjectEvent(new RoomObjectMouseEvent(eventType, this.getRoomObject(this._activeRoomId, RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM), null, altKey), this._activeRoomId);\n      }\n    }\n\n    this._activeRoomActiveCanvas = canvasId;\n    this._activeRoomActiveCanvasMouseX = x;\n    this._activeRoomActiveCanvasMouseY = y;\n  }\n\n  handleRoomDragging(canvas, x, y, type, altKey, ctrlKey, shiftKey) {\n    let offsetX = x - this._activeRoomActiveCanvasMouseX;\n    let offsetY = y - this._activeRoomActiveCanvasMouseY;\n\n    if (type === MouseEventType.MOUSE_DOWN) {\n      if (!altKey && !ctrlKey && !shiftKey && !this.isDecorating) {\n        if (this._roomAllowsDragging) {\n          this._activeRoomIsDragged = true;\n          this._activeRoomWasDragged = false;\n          this._activeRoomDragStartX = this._activeRoomActiveCanvasMouseX;\n          this._activeRoomDragStartY = this._activeRoomActiveCanvasMouseY;\n        }\n      }\n    } else if (type === MouseEventType.MOUSE_UP) {\n      if (this._activeRoomIsDragged) {\n        this._activeRoomIsDragged = false;\n\n        if (this._activeRoomWasDragged) {\n          const instanceData = this.getRoomInstanceData(this._activeRoomId);\n\n          if (instanceData) {\n            const camera = instanceData.roomCamera;\n\n            if (camera) {\n              if (this.useOffsetScrolling) {\n                if (!camera.isMoving) {\n                  camera.centeredLocX = false;\n                  camera.centeredLocY = false;\n                }\n\n                camera.resetLocation(new Vector3d(-canvas.screenOffsetX, -canvas.screenOffsetY));\n              }\n\n              if (this._roomDraggingAlwaysCenters) camera.reset();\n            }\n          }\n        }\n      }\n    } else if (type === MouseEventType.MOUSE_MOVE) {\n      if (this._activeRoomIsDragged) {\n        if (!this._activeRoomWasDragged) {\n          offsetX = x - this._activeRoomDragStartX;\n          offsetY = y - this._activeRoomDragStartY;\n\n          if (offsetX <= -RoomEngine.DRAG_THRESHOLD || offsetX >= RoomEngine.DRAG_THRESHOLD || offsetY <= -RoomEngine.DRAG_THRESHOLD || offsetY >= RoomEngine.DRAG_THRESHOLD) {\n            this._activeRoomWasDragged = true;\n          }\n\n          offsetX = 0;\n          offsetY = 0;\n        }\n\n        if (!(offsetX == 0) || !(offsetY == 0)) {\n          this._activeRoomDragX += offsetX;\n          this._activeRoomDragY += offsetY;\n          this._activeRoomWasDragged = true;\n        }\n      }\n    } else if (type === MouseEventType.MOUSE_CLICK || type === MouseEventType.DOUBLE_CLICK) {\n      this._activeRoomIsDragged = false;\n\n      if (this._activeRoomWasDragged) {\n        this._activeRoomWasDragged = false;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  updateMousePointer(type, objectId, objectType) {\n    const category = this.getRoomObjectCategoryForType(objectType);\n\n    switch (type) {\n      case RoomObjectFurnitureActionEvent.MOUSE_BUTTON:\n        this.setMouseButton(this._activeRoomId, category, objectId);\n        return;\n\n      default:\n        this.setMouseDefault(this._activeRoomId, category, objectId);\n        return;\n    }\n  }\n\n  setMouseButton(roomId, category, objectId) {\n    if (!this._roomSessionManager) return;\n\n    const session = this._roomSessionManager.getSession(roomId);\n\n    if (!session) return;\n\n    if (category !== RoomObjectCategory.FLOOR && category !== RoomObjectCategory.WALL || session.controllerLevel >= RoomControllerLevel.GUEST) {\n      const instanceData = this.getRoomInstanceData(roomId);\n\n      if (instanceData) {\n        if (instanceData.addButtonMouseCursorOwner(category + '_' + objectId)) this._mouseCursorUpdate = true;\n      }\n    }\n  }\n\n  setMouseDefault(roomId, category, objectId) {\n    if (!this._roomSessionManager) return;\n    const instanceData = this.getRoomInstanceData(roomId);\n\n    if (instanceData) {\n      if (instanceData.removeButtonMouseCursorOwner(category + '_' + objectId)) this._mouseCursorUpdate = true;\n    }\n  }\n\n  processRoomObjectOperation(objectId, category, operation) {\n    if (!this._roomObjectEventHandler) return false;\n\n    this._roomObjectEventHandler.modifyRoomObject(this._activeRoomId, objectId, category, operation);\n  }\n\n  modifyRoomObjectDataWithMap(objectId, category, operation, data) {\n    if (!this._roomObjectEventHandler) return false;\n    if (category !== RoomObjectCategory.FLOOR) return;\n\n    this._roomObjectEventHandler.modifyRoomObjectDataWithMap(this._activeRoomId, objectId, category, operation, data);\n  }\n\n  modifyRoomObjectData(objectId, category, colorHex, data) {\n    if (!this._roomObjectEventHandler) return false;\n    if (category !== RoomObjectCategory.WALL) return;\n\n    this._roomObjectEventHandler.modifyWallItemData(this._activeRoomId, objectId, colorHex, data);\n  }\n\n  processRoomObjectEvent(event) {\n    if (!this._roomObjectEventHandler) return;\n    const roomIdString = this.getRoomObjectRoomId(event.object);\n    if (!roomIdString) return;\n    const roomId = this.getRoomIdFromString(roomIdString);\n\n    this._roomObjectEventHandler.handleRoomObjectEvent(event, roomId);\n  }\n\n  processRoomObjectPlacement(placementSource, id, category, typeId) {\n    let extra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let stuffData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let state = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : -1;\n    let frameNumber = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : -1;\n    let posture = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n    const roomInstance = this.getRoomInstance(this._activeRoomId);\n    if (!roomInstance || roomInstance.model.getValue(RoomVariableEnum.ROOM_IS_PUBLIC) !== 0) return false;\n    if (!this._roomObjectEventHandler) return false;\n    return this._roomObjectEventHandler.processRoomObjectPlacement(placementSource, this._activeRoomId, id, category, typeId, extra, stuffData, state, frameNumber, posture);\n  }\n\n  getRoomObjectScreenLocation(roomId, objectId, objectType) {\n    let canvasId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    if (canvasId == -1) canvasId = this._activeRoomActiveCanvas;\n    const geometry = this.getRoomInstanceGeometry(roomId, canvasId);\n    if (!geometry) return null;\n    const roomObject = this.getRoomObject(roomId, objectId, objectType);\n    if (!roomObject) return null;\n    const screenPoint = geometry.getScreenPoint(roomObject.getLocation());\n    if (!screenPoint) return null;\n    const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\n    if (!renderingCanvas) return null;\n    screenPoint.x = screenPoint.x * renderingCanvas.scale;\n    screenPoint.y = screenPoint.y * renderingCanvas.scale;\n    screenPoint.x += renderingCanvas.width / 2 + renderingCanvas.screenOffsetX;\n    screenPoint.y += renderingCanvas.height / 2 + renderingCanvas.screenOffsetY;\n    return screenPoint;\n  }\n\n  selectRoomObject(roomId, objectId, objectCategory) {\n    if (!this._roomObjectEventHandler) return;\n\n    this._roomObjectEventHandler.setSelectedObject(roomId, objectId, objectCategory);\n  }\n\n  setSelectedAvatar(roomId, objectId) {\n    if (this._roomObjectEventHandler) return;\n\n    this._roomObjectEventHandler.setSelectedAvatar(roomId, objectId, true);\n  }\n\n  cancelRoomObjectInsert() {\n    if (!this._roomObjectEventHandler) return;\n\n    this._roomObjectEventHandler.cancelRoomObjectInsert(this._activeRoomId);\n  }\n\n  addOverlayIconSprite(k, _arg_2, _arg_3) {\n    let scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    if (!k || !_arg_3) return;\n    let sprite = this.getOverlayIconSprite(k, _arg_2);\n    if (sprite) return null;\n    sprite = new NitroSprite(_arg_3);\n    sprite.name = _arg_2;\n    sprite.scale.set(scale);\n    k.addChild(sprite);\n    return sprite;\n  }\n\n  onRoomContentLoaded(id, assetName, success) {\n    if (!this._roomContentLoader || id === -1) return;\n\n    this._thumbnailObjectIdBank.freeNumber(id - 1);\n\n    const listeners = this._thumbnailCallbacks.get(assetName);\n\n    if (listeners) {\n      this._thumbnailCallbacks.delete(assetName);\n\n      const image = this._roomContentLoader.getImage(assetName);\n\n      if (image) {\n        for (const listener of listeners) {\n          if (!listener) continue;\n          listener.imageReady(id, null, image);\n        }\n      }\n    }\n  }\n\n  setObjectMoverIconSprite(objectId, category, _arg_3) {\n    let instanceData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let stuffData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let state = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;\n    let frameNumber = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : -1;\n    let posture = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    let type = null;\n    let colorIndex = 0;\n    let imageResult = null;\n    const scale = 1;\n\n    if (_arg_3) {\n      imageResult = this.getRoomObjectImage(this._activeRoomId, objectId, category, new Vector3d(), 1, null);\n    } else {\n      if (this._roomContentLoader) {\n        if (category === RoomObjectCategory.FLOOR) {\n          type = this._roomContentLoader.getFurnitureFloorNameForTypeId(objectId);\n          colorIndex = this._roomContentLoader.getFurnitureFloorColorIndex(objectId);\n        } else if (category === RoomObjectCategory.WALL) {\n          type = this._roomContentLoader.getFurnitureWallNameForTypeId(objectId, instanceData);\n          colorIndex = this._roomContentLoader.getFurnitureWallColorIndex(objectId);\n        }\n\n        if (category === RoomObjectCategory.UNIT) {\n          type = RoomObjectUserType.getTypeString(objectId);\n\n          if (type === 'pet') {\n            type = this.getPetType(instanceData);\n            const petFigureData = new PetFigureData(instanceData);\n            imageResult = this.getRoomObjectPetImage(petFigureData.typeId, petFigureData.paletteId, petFigureData.color, new Vector3d(180), 64, null, true, 0, petFigureData.customParts, posture);\n          } else {\n            imageResult = this.getGenericRoomObjectImage(type, instanceData, new Vector3d(180), 64, null, 0, null, stuffData, state, frameNumber, posture);\n          }\n        } else {\n          imageResult = this.getGenericRoomObjectImage(type, colorIndex.toString(), new Vector3d(), 1, null, 0, instanceData, stuffData, state, frameNumber, posture);\n        }\n      }\n    }\n\n    if (!imageResult || !imageResult.data) return;\n    const canvas = this.getActiveRoomInstanceRenderingCanvas();\n    if (!canvas) return;\n    const overlay = this.getRenderingCanvasOverlay(canvas);\n    this.removeOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE);\n\n    const _local_15 = this.addOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE, imageResult.data, scale);\n\n    if (_local_15) {\n      _local_15.x = this._activeRoomActiveCanvasMouseX - imageResult.data.width / 2;\n      _local_15.y = this._activeRoomActiveCanvasMouseY - imageResult.data.height / 2;\n    }\n  }\n\n  getRoomObjectImage(roomId, objectId, category, direction, scale, listener) {\n    let bgColor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    if (!this._roomManager) return null;\n    let id = -1;\n    let type = null;\n    let data = null;\n    let color = '';\n    let extras = null;\n    const roomIdString = this.getRoomId(roomId);\n\n    const roomInstance = this._roomManager.getRoomInstance(roomIdString);\n\n    if (roomInstance) {\n      const roomObject = roomInstance.getRoomObject(objectId, category);\n\n      if (roomObject && roomObject.model) {\n        id = roomObject.id;\n        type = roomObject.type;\n\n        switch (category) {\n          case RoomObjectCategory.FLOOR:\n          case RoomObjectCategory.WALL:\n            {\n              color = roomObject.model.getValue(RoomObjectVariable.FURNITURE_COLOR).toString();\n              extras = roomObject.model.getValue(RoomObjectVariable.FURNITURE_EXTRAS);\n              const dataFormat = roomObject.model.getValue(RoomObjectVariable.FURNITURE_DATA_FORMAT);\n\n              if (dataFormat !== LegacyDataType.FORMAT_KEY) {\n                data = ObjectDataFactory.getData(dataFormat);\n                data.initializeFromRoomObjectModel(roomObject.model);\n              }\n\n              break;\n            }\n\n          case RoomObjectCategory.UNIT:\n            color = roomObject.model.getValue(RoomObjectVariable.FIGURE);\n            break;\n        }\n      }\n    }\n\n    return this.getGenericRoomObjectImage(type, color, direction, scale, listener, bgColor, extras, data, -1, -1, null, id);\n  }\n\n  getFurnitureFloorIconUrl(typeId) {\n    let type = null;\n    let color = '';\n\n    if (this._roomContentLoader) {\n      type = this._roomContentLoader.getFurnitureFloorNameForTypeId(typeId);\n      color = this._roomContentLoader.getFurnitureFloorColorIndex(typeId).toString();\n      return this._roomContentLoader.getAssetIconUrl(type, color);\n    }\n\n    return null;\n  }\n\n  getFurnitureFloorIcon(typeId, listener) {\n    let extras = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let objectData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    return this.getFurnitureFloorImage(typeId, new Vector3d(), 1, listener, 0, extras, -1, -1, objectData);\n  }\n\n  getFurnitureWallIconUrl(typeId) {\n    let extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let type = null;\n    let color = '';\n\n    if (this._roomContentLoader) {\n      type = this._roomContentLoader.getFurnitureWallNameForTypeId(typeId, extra);\n      color = this._roomContentLoader.getFurnitureWallColorIndex(typeId).toString();\n      return this._roomContentLoader.getAssetIconUrl(type, color);\n    }\n\n    return null;\n  }\n\n  getFurnitureWallIcon(typeId, listener) {\n    let extras = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return this.getFurnitureWallImage(typeId, new Vector3d(), 1, listener, 0, extras);\n  }\n\n  getFurnitureFloorImage(typeId, direction, scale, listener) {\n    let bgColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let extras = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let state = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : -1;\n    let frameCount = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : -1;\n    let objectData = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n    let type = null;\n    let color = '';\n\n    if (this._roomContentLoader) {\n      type = this._roomContentLoader.getFurnitureFloorNameForTypeId(typeId);\n      color = this._roomContentLoader.getFurnitureFloorColorIndex(typeId).toString();\n    }\n\n    if (scale === 1 && listener) {\n      return this.getGenericRoomObjectThumbnail(type, color, listener, extras, objectData);\n    }\n\n    return this.getGenericRoomObjectImage(type, color, direction, scale, listener, bgColor, extras, objectData, state, frameCount);\n  }\n\n  getFurnitureWallImage(typeId, direction, scale, listener) {\n    let bgColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let extras = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let state = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : -1;\n    let frameCount = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : -1;\n    let type = null;\n    let color = '';\n\n    if (this._roomContentLoader) {\n      type = this._roomContentLoader.getFurnitureWallNameForTypeId(typeId);\n      color = this._roomContentLoader.getFurnitureWallColorIndex(typeId).toString();\n    }\n\n    if (scale === 1 && listener) {\n      return this.getGenericRoomObjectThumbnail(type, color, listener, extras, null);\n    }\n\n    return this.getGenericRoomObjectImage(type, color, direction, scale, listener, bgColor, extras, null, state, frameCount);\n  }\n\n  getRoomObjectPetImage(typeId, paletteId, color, direction, scale, listener) {\n    let headOnly = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let bgColor = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let customParts = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n    let posture = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n    let type = null;\n    let value = typeId + ' ' + paletteId + ' ' + color.toString(16);\n    if (headOnly) value = value + (' ' + 'head');\n\n    if (customParts) {\n      value = value + (' ' + customParts.length);\n\n      for (const _local_13 of customParts) {\n        value = value + (' ' + _local_13.layerId + ' ' + _local_13.partId + ' ' + _local_13.paletteId);\n      }\n    }\n\n    if (this._roomContentLoader) type = this._roomContentLoader.getPetNameForType(typeId);\n    return this.getGenericRoomObjectImage(type, value, direction, scale, listener, bgColor, null, null, -1, -1, posture);\n  }\n\n  getGenericRoomObjectImage(type, value, direction, scale, listener) {\n    let bgColor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let extras = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    let objectData = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    let state = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : -1;\n    let frameCount = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : -1;\n    let posture = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;\n    let originalId = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : -1;\n    if (!this._roomManager) return null;\n    const imageResult = new ImageResult();\n    imageResult.id = -1;\n    if (!this._ready || !type) return imageResult;\n\n    let roomInstance = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\n\n    if (!roomInstance) {\n      roomInstance = this._roomManager.createRoomInstance(RoomEngine.TEMPORARY_ROOM);\n      if (!roomInstance) return imageResult;\n    }\n\n    let objectId = this._imageObjectIdBank.reserveNumber();\n\n    const objectCategory = this.getRoomObjectCategoryForType(type);\n    if (objectId < 0) return imageResult;\n    objectId++;\n    const roomObject = roomInstance.createRoomObjectAndInitalize(objectId, type, objectCategory);\n    if (!roomObject || !roomObject.model || !roomObject.logic) return imageResult;\n    const model = roomObject.model;\n\n    switch (objectCategory) {\n      case RoomObjectCategory.FLOOR:\n      case RoomObjectCategory.WALL:\n        model.setValue(RoomObjectVariable.FURNITURE_COLOR, parseInt(value));\n        model.setValue(RoomObjectVariable.FURNITURE_EXTRAS, extras);\n        break;\n\n      case RoomObjectCategory.UNIT:\n        if (type === RoomObjectUserType.USER || type === RoomObjectUserType.BOT || type === RoomObjectUserType.RENTABLE_BOT || type === RoomObjectUserType.PET) {\n          model.setValue(RoomObjectVariable.FIGURE, value);\n        } else {\n          const figureData = new PetFigureData(value);\n          model.setValue(RoomObjectVariable.PET_PALETTE_INDEX, figureData.paletteId);\n          model.setValue(RoomObjectVariable.PET_COLOR, figureData.color);\n          if (figureData.headOnly) model.setValue(RoomObjectVariable.PET_HEAD_ONLY, 1);\n\n          if (figureData.hasCustomParts) {\n            model.setValue(RoomObjectVariable.PET_CUSTOM_LAYER_IDS, figureData.customLayerIds);\n            model.setValue(RoomObjectVariable.PET_CUSTOM_PARTS_IDS, figureData.customPartIds);\n            model.setValue(RoomObjectVariable.PET_CUSTOM_PALETTE_IDS, figureData.customPaletteIds);\n          }\n\n          if (posture) model.setValue(RoomObjectVariable.FIGURE_POSTURE, posture);\n        }\n\n        break;\n\n      case RoomObjectCategory.ROOM:\n        break;\n    }\n\n    roomObject.setDirection(direction);\n    const visualization = roomObject.visualization;\n\n    if (!visualization) {\n      roomInstance.removeRoomObject(objectId, objectCategory);\n      return imageResult;\n    }\n\n    if (state > -1 || objectData) {\n      if (objectData && objectData.getLegacyString() !== '') {\n        roomObject.logic.processUpdateMessage(new ObjectDataUpdateMessage(parseInt(objectData.getLegacyString()), objectData));\n      } else {\n        roomObject.logic.processUpdateMessage(new ObjectDataUpdateMessage(state, objectData));\n      }\n    }\n\n    const geometry = new RoomGeometry(scale, new Vector3d(-135, 30, 0), new Vector3d(11, 11, 5));\n    visualization.update(geometry, 0, true, false);\n\n    if (frameCount > 0) {\n      let i = 0;\n\n      while (i < frameCount) {\n        visualization.update(geometry, 0, true, false);\n        i++;\n      }\n    }\n\n    const texture = visualization.getImage(bgColor, originalId);\n    imageResult.data = texture;\n    imageResult.id = objectId;\n\n    if (!this.isRoomContentTypeLoaded(type) && listener) {\n      let imageListeners = this._imageCallbacks.get(objectId.toString());\n\n      if (!imageListeners) {\n        imageListeners = [];\n\n        this._imageCallbacks.set(objectId.toString(), imageListeners);\n      }\n\n      imageListeners.push(listener);\n      model.setValue(RoomObjectVariable.IMAGE_QUERY_SCALE, scale);\n    } else {\n      roomInstance.removeRoomObject(objectId, objectCategory);\n\n      this._imageObjectIdBank.freeNumber(objectId - 1);\n\n      imageResult.id = 0;\n    }\n\n    geometry.dispose();\n    return imageResult;\n  }\n\n  getGenericRoomObjectThumbnail(type, param, listener) {\n    let extraData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let stuffData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    if (!this._roomManager) return null;\n    const imageResult = new ImageResult();\n    imageResult.id = -1;\n    if (!this._ready || !type) return imageResult;\n\n    let roomInstance = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\n\n    if (!roomInstance) {\n      roomInstance = this._roomManager.createRoomInstance(RoomEngine.TEMPORARY_ROOM);\n      if (!roomInstance) return imageResult;\n    }\n\n    let objectId = this._thumbnailObjectIdBank.reserveNumber();\n\n    const objectCategory = this.getRoomObjectCategoryForType(type);\n    if (objectId < 0) return imageResult;\n    objectId++;\n    imageResult.id = objectId;\n    imageResult.data = null;\n    imageResult.image = null;\n    const assetName = [type, param].join('_');\n\n    const asset = this._roomContentLoader.getImage(assetName);\n\n    if (!asset && listener) {\n      let contentListeners = this._thumbnailCallbacks.get(assetName);\n\n      if (!contentListeners) {\n        contentListeners = [];\n\n        this._thumbnailCallbacks.set(assetName, contentListeners);\n\n        this._roomContentLoader.downloadImage(objectId, type, param, null);\n      }\n\n      contentListeners.push(listener);\n    } else {\n      if (asset) {\n        imageResult.image = asset;\n      }\n\n      this._thumbnailObjectIdBank.freeNumber(objectId - 1);\n\n      imageResult.id = 0;\n    }\n\n    return imageResult;\n  }\n\n  initalizeTemporaryObjectsByType(type, _arg_2) {\n    const roomInstance = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\n\n    if (!roomInstance || !this._roomContentLoader) return;\n\n    const objectCategory = this._roomContentLoader.getCategoryForType(type);\n\n    const objectManager = roomInstance.getManager(objectCategory);\n    let geometry = null;\n    let scale = 0;\n\n    if (objectManager && objectManager.objects.length) {\n      for (const roomObject of objectManager.objects.getValues()) {\n        if (roomObject && roomObject.model && roomObject.type === type) {\n          const objectId = roomObject.id;\n          const visualization = roomObject.visualization;\n          let texture = null;\n\n          if (visualization) {\n            const imageScale = roomObject.model.getValue(RoomObjectVariable.IMAGE_QUERY_SCALE);\n\n            if (geometry && scale !== imageScale) {\n              geometry.dispose();\n              geometry = null;\n            }\n\n            if (!geometry) {\n              scale = imageScale;\n              geometry = new RoomGeometry(imageScale, new Vector3d(-135, 30, 0), new Vector3d(11, 11, 5));\n            }\n\n            visualization.update(geometry, 0, true, false);\n            texture = visualization.image;\n          }\n\n          roomInstance.removeRoomObject(objectId, objectCategory);\n\n          this._imageObjectIdBank.freeNumber(objectId - 1);\n\n          const imageListeners = this._imageCallbacks.get(objectId.toString());\n\n          if (imageListeners) {\n            this._imageCallbacks.delete(objectId.toString());\n\n            for (const imageListener of imageListeners) {\n              if (!imageListener) continue;\n              if (texture) imageListener.imageReady(objectId, texture);else imageListener.imageFailed(objectId);\n            }\n          }\n        }\n      }\n    }\n\n    if (geometry) geometry.dispose();\n  }\n\n  setObjectMoverIconSpriteVisible(k) {\n    const canvas = this.getActiveRoomInstanceRenderingCanvas();\n    if (!canvas) return;\n    const overlay = this.getRenderingCanvasOverlay(canvas);\n    const sprite = this.getOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE);\n\n    if (sprite) {\n      sprite.visible = k;\n    }\n  }\n\n  removeObjectMoverIconSprite() {\n    const canvas = this.getActiveRoomInstanceRenderingCanvas();\n    if (!canvas) return;\n    const sprite = this.getRenderingCanvasOverlay(canvas);\n    this.removeOverlayIconSprite(sprite, RoomEngine.OBJECT_ICON_SPRITE);\n  }\n\n  getRenderingCanvasOverlay(k) {\n    if (!k) return null;\n    const displayObject = k.master;\n    if (!displayObject) return null;\n    return displayObject.getChildByName(RoomEngine.OVERLAY) || null;\n  }\n\n  removeOverlayIconSprite(k, _arg_2) {\n    if (!k) return false;\n    let index = k.children.length - 1;\n\n    while (index >= 0) {\n      const child = k.getChildAt(index);\n\n      if (child) {\n        if (child.name === _arg_2) {\n          k.removeChildAt(index);\n\n          if (child.children.length) {\n            const firstChild = child.getChildAt(0);\n            firstChild.parent.removeChild(firstChild);\n            firstChild.destroy();\n          }\n\n          return true;\n        }\n      }\n\n      index--;\n    }\n\n    return false;\n  }\n\n  getOverlayIconSprite(k, _arg_2) {\n    if (!k) return null;\n    let index = k.children.length - 1;\n\n    while (index >= 0) {\n      const child = k.getChildAt(index);\n\n      if (child) {\n        if (child.name === _arg_2) return child;\n      }\n\n      index--;\n    }\n\n    return null;\n  }\n\n  getRoomObjects(roomId, category) {\n    if (this._ready) {\n      const _local_3 = this.getRoomId(roomId);\n\n      const _local_4 = this._roomManager.getRoomInstance(_local_3);\n\n      if (_local_4) return _local_4.getRoomObjectsForCategory(category);\n    }\n\n    return [];\n  }\n\n  addObjectToTileMap(k, _arg_2) {\n    const tileObjectMap = this.getRoomInstanceData(k).tileObjectMap;\n    if (tileObjectMap) tileObjectMap.addRoomObject(_arg_2);\n  }\n\n  refreshTileObjectMap(k, _arg_2) {\n    const tileObjectMap = this.getRoomInstanceData(k).tileObjectMap;\n    if (tileObjectMap) tileObjectMap.populate(this.getRoomObjects(k, RoomObjectCategory.FLOOR));\n  }\n\n  getRenderRoomMessage(k, _arg_2) {\n    let _arg_3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    let _arg_4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    let _arg_5 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    let canvasId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;\n    let canvas = null;\n\n    if (canvasId > -1) {\n      canvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, canvasId);\n    } else {\n      canvas = this.getActiveRoomInstanceRenderingCanvas();\n    }\n\n    if (!canvas) return null;\n\n    if (_arg_5) {\n      canvas.skipSpriteVisibilityChecking();\n    }\n\n    let _local_8 = -1;\n\n    if (!_arg_4 && !(this._roomSessionManager.getSession(this._activeRoomId) == null)) {\n      _local_8 = this._roomSessionManager.getSession(this._activeRoomId).ownRoomIndex;\n    }\n\n    const _local_9 = new SpriteDataCollector();\n\n    const _local_10 = _local_9.getFurniData(k, canvas, this, _local_8);\n\n    const _local_11 = _local_9.getRoomRenderingModifiers(this);\n\n    const _local_12 = _local_9.getRoomPlanes(k, canvas, this, _arg_2);\n\n    if (_arg_5) canvas.resumeSpriteVisibilityChecking();\n\n    if (_arg_3) {//return new RenderRoomThumbnailMessageComposer(_local_12, _local_10, _local_11, this._activeRoomId, this._sessionDataManager._Str_8500);\n    }\n\n    console.log(_local_10, _local_11, _local_12); //return new RenderRoomMessageComposer(_local_12, _local_10, _local_11, this._activeRoomId, this._sessionDataManager._Str_8500);\n\n    return null;\n  }\n\n  createTextureFromRoom(roomId) {\n    let canvasId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let bounds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let canvas = null;\n\n    if (canvasId > -1) {\n      canvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, canvasId);\n    } else {\n      canvas = this.getActiveRoomInstanceRenderingCanvas();\n    }\n\n    let texture = null;\n\n    if (bounds) {\n      texture = TextureUtils.generateTexture(canvas.master, bounds);\n    } else {\n      texture = canvas.getDisplayAsTexture();\n    }\n\n    return texture;\n  }\n\n  saveTextureAsScreenshot(texture) {\n    let saveAsThumbnail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let composer = null;\n    if (saveAsThumbnail) composer = new RenderRoomThumbnailMessageComposer();else composer = new RenderRoomMessageComposer();\n    composer.assignBitmap(texture);\n\n    this._communication.connection.send(composer);\n  }\n\n  saveBase64AsScreenshot(base64) {\n    let saveAsThumbnail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let composer = null;\n    if (saveAsThumbnail) composer = new RenderRoomThumbnailMessageComposer();else composer = new RenderRoomMessageComposer();\n    composer.assignBase64(base64);\n\n    this._communication.connection.send(composer);\n  }\n\n  objectsInitialized(k) {\n    const roomId = this.getRoomIdFromString(k);\n    this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.OBJECTS_INITIALIZED, roomId));\n  }\n\n  getRoomId(id) {\n    return id.toString();\n  }\n\n  getRoomIdFromString(roomId) {\n    if (!roomId) return -1;\n    const split = roomId.split('_');\n    if (split.length <= 0) return -1;\n    return parseInt(split[0]) || 0;\n  }\n\n  getRoomObjectRoomId(object) {\n    if (!object || !object.model) return null;\n    return object.model.getValue(RoomObjectVariable.OBJECT_ROOM_ID);\n  }\n\n  getRoomObjectAdUrl(type) {\n    return this._roomContentLoader.getRoomObjectAdUrl(type);\n  }\n\n  getPetTypeId(figure) {\n    let type = -1;\n\n    if (figure) {\n      const parts = figure.split(' ');\n      if (parts.length > 1) type = parseInt(parts[0]);\n    }\n\n    return type;\n  }\n\n  getPetType(type) {\n    if (!type) return null;\n    const parts = type.split(' ');\n\n    if (parts.length > 1) {\n      const typeId = parseInt(parts[0]);\n      if (this._roomContentLoader) return this._roomContentLoader.getPetNameForType(typeId);\n      return 'pet';\n    }\n\n    return null;\n  }\n\n  isRoomContentTypeLoaded(name) {\n    if (!this._roomContentLoader) return false;\n    return this._roomContentLoader.getCollection(name) !== null;\n  }\n\n  getPetColorResult(petIndex, paletteIndex) {\n    if (!this._roomContentLoader) return null;\n    return this._roomContentLoader.getPetColorResult(petIndex, paletteIndex);\n  }\n\n  getPetColorResultsForTag(petIndex, tagName) {\n    if (!this._roomContentLoader) return null;\n    return this._roomContentLoader.getPetColorResultsForTag(petIndex, tagName);\n  }\n\n  deleteRoomObject(objectId, objectCategory) {\n    if (!this._roomObjectEventHandler || objectCategory !== RoomObjectCategory.WALL) return false;\n    return this._roomObjectEventHandler.deleteWallItem(this._activeRoomId, objectId);\n  }\n\n  get connection() {\n    return this._communication.connection;\n  }\n\n  get sessionDataManager() {\n    return this._sessionDataManager;\n  }\n\n  set sessionDataManager(manager) {\n    this._sessionDataManager = manager;\n  }\n\n  get roomSessionManager() {\n    return this._roomSessionManager;\n  }\n\n  set roomSessionManager(manager) {\n    this._roomSessionManager = manager;\n  }\n\n  get roomManager() {\n    return this._roomManager;\n  }\n\n  set roomManager(manager) {\n    this._roomManager = manager;\n  }\n\n  get objectEventHandler() {\n    return this._roomObjectEventHandler;\n  }\n\n  get roomRendererFactory() {\n    return this._roomRendererFactory;\n  }\n\n  get visualizationFactory() {\n    return this._visualizationFactory;\n  }\n\n  get logicFactory() {\n    return this._logicFactory;\n  }\n\n  get activeRoomId() {\n    return this._activeRoomId;\n  }\n\n  get ready() {\n    return this._ready;\n  }\n\n  get roomContentLoader() {\n    return this._roomContentLoader;\n  }\n\n  get isDecorating() {\n    if (!this._roomSessionManager) return false;\n\n    const session = this._roomSessionManager.getSession(this._activeRoomId);\n\n    return session && session.isDecorating || false;\n  }\n\n  get useOffsetScrolling() {\n    return true;\n  }\n\n  get selectedAvatarId() {\n    if (!this._roomObjectEventHandler) return -1;\n    return this._roomObjectEventHandler.selectedAvatarId;\n  }\n\n  getRoomObjectCount(roomId, categoryId) {\n    if (this._roomManager == null) return 0;\n    return this._roomManager.getRoomInstance(roomId.toString()).getRoomObjectsForCategory(categoryId).length;\n  }\n\n}\nRoomEngine.ROOM_OBJECT_ID = -1;\nRoomEngine.ROOM_OBJECT_TYPE = 'room';\nRoomEngine.CURSOR_OBJECT_ID = -2;\nRoomEngine.CURSOR_OBJECT_TYPE = 'tile_cursor';\nRoomEngine.ARROW_OBJECT_ID = -3;\nRoomEngine.ARROW_OBJECT_TYPE = 'selection_arrow';\nRoomEngine.OVERLAY = 'overlay';\nRoomEngine.OBJECT_ICON_SPRITE = 'object_icon_sprite';\nRoomEngine.DRAG_THRESHOLD = 15;\nRoomEngine.TEMPORARY_ROOM = 'temporary_room';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/RoomEngine.ts"],"names":["Texture","Matrix","Point","Rectangle","NitroSprite","NitroLogger","NitroManager","TextureUtils","RoomObjectMouseEvent","RoomObjectUpdateMessage","RoomRendererFactory","NumberBank","RoomEnterEffect","RoomGeometry","Vector3d","PetFigureData","RenderRoomMessageComposer","RenderRoomThumbnailMessageComposer","ToolbarIconEnum","NitroToolbarAnimateIconEvent","Nitro","RoomControllerLevel","BadgeImageReadyEvent","RoomSessionEvent","MouseEventType","FurniId","RoomDragEvent","RoomBackgroundColorEvent","RoomEngineEvent","RoomEngineObjectEvent","RoomObjectFurnitureActionEvent","RoomToObjectOwnAvatarMoveEvent","ImageResult","ObjectAvatarCarryObjectUpdateMessage","ObjectAvatarChatUpdateMessage","ObjectAvatarDanceUpdateMessage","ObjectAvatarEffectUpdateMessage","ObjectAvatarExperienceUpdateMessage","ObjectAvatarExpressionUpdateMessage","ObjectAvatarFigureUpdateMessage","ObjectAvatarFlatControlUpdateMessage","ObjectAvatarGestureUpdateMessage","ObjectAvatarGuideStatusUpdateMessage","ObjectAvatarMutedUpdateMessage","ObjectAvatarOwnMessage","ObjectAvatarPetGestureUpdateMessage","ObjectAvatarPlayerValueUpdateMessage","ObjectAvatarPlayingGameUpdateMessage","ObjectAvatarPostureUpdateMessage","ObjectAvatarSignUpdateMessage","ObjectAvatarSleepUpdateMessage","ObjectAvatarTypingUpdateMessage","ObjectAvatarUpdateMessage","ObjectAvatarUseObjectUpdateMessage","ObjectDataUpdateMessage","ObjectGroupBadgeUpdateMessage","ObjectHeightUpdateMessage","ObjectItemDataUpdateMessage","ObjectModelDataUpdateMessage","ObjectMoveUpdateMessage","ObjectRoomColorUpdateMessage","ObjectRoomFloorHoleUpdateMessage","ObjectRoomMaskUpdateMessage","ObjectRoomPlanePropertyUpdateMessage","ObjectRoomPlaneVisibilityUpdateMessage","ObjectRoomUpdateMessage","ObjectDataFactory","LegacyDataType","RoomObjectCategory","RoomObjectUserType","RoomObjectVariable","RoomObjectVisualizationFactory","RoomContentLoader","RoomMessageHandler","RoomObjectEventHandler","RoomObjectLogicFactory","RoomVariableEnum","RoomData","RoomFurnitureData","RoomInstanceData","RoomObjectBadgeImageAssetListener","SpriteDataCollector","RoomEngine","constructor","communication","_communication","_roomRendererFactory","_roomManager","_visualizationFactory","_sessionDataManager","_roomSessionManager","_roomObjectEventHandler","_roomMessageHandler","_roomContentLoader","_ready","_roomContentLoaderReady","_imageObjectIdBank","_imageCallbacks","_thumbnailObjectIdBank","_thumbnailCallbacks","_activeRoomId","_activeRoomActiveCanvas","_activeRoomActiveCanvasMouseX","_activeRoomActiveCanvasMouseY","_activeRoomIsDragged","_activeRoomWasDragged","_activeRoomDragStartX","_activeRoomDragStartY","_activeRoomDragX","_activeRoomDragY","_roomDraggingAlwaysCenters","_roomAllowsDragging","_roomDatas","_roomInstanceDatas","_skipFurnitureCreationForNextFrame","_mouseCursorUpdate","_badgeListenerObjects","_logicFactory","Map","runVisibilityUpdate","bind","processRoomObjectEvent","onRoomSessionEvent","onRoomContentLoaderReadyEvent","onBadgeImageReadyEvent","onInit","registerEventFunction","setContentLoader","addUpdateCategory","FLOOR","WALL","UNIT","CURSOR","ROOM","setConnection","connection","initialize","events","setSessionDataManager","setIconListener","addEventListener","STARTED","ENDED","LOADER_READY","instance","ticker","add","update","document","onDispose","key","value","removeRoomInstance","removeEventListener","remove","dispose","event","type","setRoomId","session","roomId","clearRoomId","init","setActiveRoomId","destroyRoom","getRoomInstance","getRoomId","existing","get","delete","dispatchEvent","DISPOSED","createRoomInstance","roomMap","floorType","wallType","landscapeType","data","set","log","setupRoomInstance","getRoomInstanceModelName","restrictsDragging","INITIALIZED","worldType","category","roomObject","createRoomObjectAndInitalize","ROOM_OBJECT_ID","ROOM_OBJECT_TYPE","model","setValue","ROOM_IS_PUBLIC","ROOM_Z_SCALE","RESTRICTS_DRAGGING","RESTRICTS_SCALING","restrictsScaling","RESTRICTED_SCALE","restrictedScale","dimensions","minX","maxX","minY","maxY","ROOM_MIN_X","ROOM_MAX_X","ROOM_MIN_Y","ROOM_MAX_Y","seed","ROOM_RANDOM_SEED","logic","processUpdateMessage","ROOM_FLOOR_UPDATE","ROOM_FLOOR_TYPE","ROOM_WALL_UPDATE","ROOM_WALL_TYPE","ROOM_LANDSCAPE_UPDATE","ROOM_LANDSCAPE_TYPE","doors","length","doorIndex","door","doorX","x","doorY","y","doorZ","z","doorDir","dir","maskType","DOOR","maskId","maskLocation","ADD_MASK","HOLE","ROOM_DOOR_X","ROOM_DOOR_Y","ROOM_DOOR_Z","ROOM_DOOR_DIR","CURSOR_OBJECT_ID","CURSOR_OBJECT_TYPE","getConfiguration","ARROW_OBJECT_ID","ARROW_OBJECT_TYPE","getRoomInstanceDisplay","id","width","height","scale","renderer","createRenderer","roomObjectVariableAccurateZ","OBJECT_ACCURATE_Z_VALUE","setRenderer","canvas","createCanvas","restrictedScaling","getValue","setScale","setMouseListener","geometry","z_scale","doorDirection","vector","direction","setDisplacement","displayObject","master","overlay","EMPTY","name","OVERLAY","interactive","addChild","setRoomInstanceRenderingCanvasMask","canvasId","flag","roomCanvas","getRoomInstanceRenderingCanvas","setMask","setRoomInstanceRenderingCanvasScale","point","offsetPoint","override","asDelta","ROOM_ZOOMED","getCanvas","getActiveRoomInstanceRenderingCanvas","getRoomInstanceRenderingCanvasOffset","renderingCanvas","screenOffsetX","screenOffsetY","setRoomInstanceRenderingCanvasOffset","getRoomInstanceRenderingCanvasScale","initializeRoomInstanceRenderingCanvas","getRoomInstanceGeometry","getRoomInstanceVariable","updateRoomInstancePlaneVisibility","wallVisible","floorVisible","object","getRoomOwnObject","WALL_VISIBILITY","FLOOR_VISIBILITY","updateRoomInstancePlaneThickness","wallThickness","floorThickness","WALL_THICKNESS","FLOOR_THICKNESS","updateRoomInstancePlaneType","_arg_5","roomInstance","roomData","updateObjectRoomColor","k","_arg_2","_arg_3","_arg_4","BACKGROUND_COLOR","addRoomInstanceFloorHole","objectId","roomOwnObject","getRoomObjectFloor","location","getLocation","sizeX","FURNITURE_SIZE_X","sizeY","FURNITURE_SIZE_Y","ADD","removeRoomInstanceFloorHole","REMOVE","setRoomEngineGameMode","isPlaying","mode","IS_PLAYING_GAME","NORMAL_MODE","GAME_MODE","isRoomIdPlayingGame","isPlayingGame","disableUpdate","runUpdate","hidden","time","turnVisualizationOn","processPendingFurniture","updateRoomCameras","setPointer","turnVisualizationOff","instanceData","getRoomInstanceData","hasButtonMouseCursorOwners","body","style","cursor","startTime","Date","valueOf","furniturePerTick","hasTickLimit","values","pendingData","totalFurnitureAdded","furnitureAdded","getNextPendingFurnitureFloor","processPendingFurnitureFloor","getNextPendingFurnitureWall","processPendingFurnitureWall","hasUninitializedObjects","objectsInitialized","toString","onRoomEngineInitalized","ENGINE_INITIALIZED","getPendingFurnitureFloor","didLoad","getFurnitureFloorName","typeId","createRoomObjectFloor","FURNITURE_COLOR","getFurnitureFloorColorIndex","FURNITURE_TYPE_ID","FURNITURE_AD_URL","getRoomObjectAdUrl","FURNITURE_REAL_ROOM_OBJECT","realRoomObject","FURNITURE_EXPIRY_TIME","expiryTime","FURNITURE_EXPIRTY_TIMESTAMP","FURNITURE_USAGE_POLICY","usagePolicy","FURNITURE_OWNER_ID","ownerId","FURNITURE_OWNER_NAME","ownerName","updateRoomObjectFloor","state","extra","sizeZ","updateRoomObjectFloorHeight","ADDED","selectedRoomObjectData","getPlacedRoomObjectData","selectRoomObject","isReady","synchronized","addObjectToTileMap","getPendingFurnitureWall","getLegacyString","getFurnitureWallName","createRoomObjectWall","getFurnitureWallColorIndex","updateRoomObjectWall","Math","abs","setRoomSessionOwnUser","getSession","setOwnRoomIndex","camera","getRoomCamera","targetId","targetCategory","activateFollowing","cameraFollowDuration","roomCamera","getRoomObject","updateRoomCamera","objectLocation","roomGeometry","canvasRectangle","getRoomCanvasRectangle","_local_10","floor","round","bounds","getCanvasBoundingRectangle","right","bottom","left","top","reset","screenWd","screenHt","geometryUpdateId","updateId","isEqual","targetObjectLoc","isMoving","_local_15","assign","_local_16","_local_17","_local_18","_local_19","_local_20","_local_21","_local_22","_local_23","_local_24","sqrt","_local_25","_local_26","rotate","PI","apply","_local_27","_local_28","_local_29","_local_30","_local_31","_local_32","_local_33","getScreenPoint","adjustLocation","_local_34","_local_35","_local_36","_local_37","_local_38","_local_39","invert","_local_40","_local_41","_local_42","_local_43","_local_44","limitedLocationX","limitedLocationY","useOffsetScrolling","initializeLocation","_local_45","_local_46","centeredLocX","centeredLocY","roomWd","roomHt","target","isCameraFollowDisabled","activeRoomId","getRoomObjectBoundingRectangle","visualization","rectangle","getBoundingRectangle","screenPoint","getFurnitureFloorNameForTypeId","getFurnitureWallNameForTypeId","modelName","setRoomInstanceModelName","setModelName","getRoomTileObjectMap","tileObjectMap","getCurrentRoomCamera","getSelectedRoomObjectData","selectedObject","setSelectedRoomObjectData","setSelectedObject","setPlacedObject","placedObject","setPlacedRoomObjectData","cancelRoomObjectPlacement","getFurnitureStackingHeightMap","furnitureStackingHeightMap","setFurnitureStackingHeightMap","heightMap","getLegacyWallGeometry","legacyGeometry","createRoomObjectAndInitialize","getTotalObjectsForManager","roomIdString","TEMPORARY_ROOM","getObject","getRoomIdFromString","getRoomObjectByIndex","index","getRoomObjectCategoryForType","MINIMUM","getCategoryForType","getRoomObjectCursor","getRoomObjectSelectionArrow","getRoomObjectUser","removeRoomObjectUser","removeRoomObject","createRoomObjectUser","removeRoomObjectFloor","userId","roomInstanceData","removePendingFunitureFloor","isBuilderClubId","screenLocation","getRoomObjectScreenLocation","disabledPickingAnimation","FURNITURE_DISABLE_PICKING_ANIMATION","extras","FURNITURE_EXTRAS","dataKey","FURNITURE_DATA_FORMAT","objectData","getData","icon","getFurnitureFloorIcon","image","generateImage","iconName","INVENTORY","setMouseDefault","refreshTileObjectMap","getRoomObjectWall","removeRoomObjectWall","indexOf","FURNITURE_DATA","getFurnitureWallIcon","updateRoomObjectMask","REMOVED","addFurnitureFloor","NaN","expires","furnitureData","addPendingFurnitureFloor","addFurnitureFloorByTypeName","typeName","addFurnitureWall","setString","addPendingFurnitureWall","updateMessage","dataUpdateMessage","updateRoomObjectWallItemData","updateRoomObjectFloorExpiration","updateRoomObjectWallExpiration","maskName","maskUpdate","FURNITURE_USES_PLANE_MASK","FURNITURE_PLANE_MASK_TYPE","REMOVE_MASK","rollRoomObjectFloor","targetLocation","updateRoomObjectWallLocation","addRoomObjectUser","headDirection","figure","objectType","getTypeString","PET","getPetType","fixedUserLocation","updateRoomObjectUserLocation","canStandUp","baseY","getDirection","isNaN","HEAD_DIRECTION","roomSession","ownRoomIndex","ROAME_MOVE_TO","wallGeometry","_local_5","_local_6","getTileHeight","_local_7","getHeight","getFloorAltitude","updateRoomObjectUserAction","action","parameter","message","FIGURE_TALK","FIGURE_SLEEP","FIGURE_IS_TYPING","FIGURE_IS_MUTED","FIGURE_CARRY_OBJECT","FIGURE_USE_OBJECT","FIGURE_DANCE","FIGURE_GAINED_EXPERIENCE","FIGURE_NUMBER_VALUE","FIGURE_SIGN","FIGURE_EXPRESSION","FIGURE_IS_PLAYING_GAME","FIGURE_GUIDE_STATUS","updateRoomObjectUserFigure","gender","subType","isRiding","updateRoomObjectUserFlatControl","level","parseInt","updateRoomObjectUserEffect","effectId","delay","updateRoomObjectUserGesture","gestureId","updateRoomObjectUserPetGesture","gesture","updateRoomObjectUserPosture","updateRoomObjectUserOwn","useRoomObject","eventHandler","useObject","objectInitialized","dataFormat","initializeFromRoomObjectModel","getState","CONTENT_UPDATED","changeObjectModelData","numberKey","numberValue","changeObjectState","stateIndex","FURNITURE_AUTOMATIC_STATE_INDEX","objectDataKey","loadRoomObjectBadgeImage","objectCategory","badgeId","groupBadge","room","badgeName","loadGroupBadgeImage","loadBadgeImage","size","IMAGE_READY","listeners","push","putBadgeInObjectAssets","listener","badgeImage","getGroupBadgeImage","getBadgeImage","addAssetToCollection","dispatchMouseEvent","altKey","ctrlKey","shiftKey","buttonDown","getRenderingCanvasOverlay","sprite","getOverlayIconSprite","OBJECT_ICON_SPRITE","getLocalBounds","handleRoomDragging","handleMouseEvent","eventType","MOUSE_CLICK","DESELECTED","CLICK","MOUSE_MOVE","MOUSE_DOWN","MOUSE_DOWN_LONG","MOUSE_UP","handleRoomObjectEvent","offsetX","offsetY","isDecorating","resetLocation","DRAG_THRESHOLD","DOUBLE_CLICK","updateMousePointer","MOUSE_BUTTON","setMouseButton","controllerLevel","GUEST","addButtonMouseCursorOwner","removeButtonMouseCursorOwner","processRoomObjectOperation","operation","modifyRoomObject","modifyRoomObjectDataWithMap","modifyRoomObjectData","colorHex","modifyWallItemData","getRoomObjectRoomId","processRoomObjectPlacement","placementSource","stuffData","frameNumber","posture","setSelectedAvatar","cancelRoomObjectInsert","addOverlayIconSprite","onRoomContentLoaded","assetName","success","freeNumber","getImage","imageReady","setObjectMoverIconSprite","colorIndex","imageResult","getRoomObjectImage","petFigureData","getRoomObjectPetImage","paletteId","color","customParts","getGenericRoomObjectImage","removeOverlayIconSprite","bgColor","FORMAT_KEY","FIGURE","getFurnitureFloorIconUrl","getAssetIconUrl","getFurnitureFloorImage","getFurnitureWallIconUrl","getFurnitureWallImage","frameCount","getGenericRoomObjectThumbnail","headOnly","_local_13","layerId","partId","getPetNameForType","originalId","reserveNumber","USER","BOT","RENTABLE_BOT","figureData","PET_PALETTE_INDEX","PET_COLOR","PET_HEAD_ONLY","hasCustomParts","PET_CUSTOM_LAYER_IDS","customLayerIds","PET_CUSTOM_PARTS_IDS","customPartIds","PET_CUSTOM_PALETTE_IDS","customPaletteIds","FIGURE_POSTURE","setDirection","i","texture","isRoomContentTypeLoaded","imageListeners","IMAGE_QUERY_SCALE","param","extraData","join","asset","contentListeners","downloadImage","initalizeTemporaryObjectsByType","objectManager","getManager","objects","getValues","imageScale","imageListener","imageFailed","setObjectMoverIconSpriteVisible","visible","removeObjectMoverIconSprite","getChildByName","children","child","getChildAt","removeChildAt","firstChild","parent","removeChild","destroy","getRoomObjects","_local_3","_local_4","getRoomObjectsForCategory","addRoomObject","populate","getRenderRoomMessage","skipSpriteVisibilityChecking","_local_8","_local_9","getFurniData","_local_11","getRoomRenderingModifiers","_local_12","getRoomPlanes","resumeSpriteVisibilityChecking","console","createTextureFromRoom","generateTexture","getDisplayAsTexture","saveTextureAsScreenshot","saveAsThumbnail","composer","assignBitmap","send","saveBase64AsScreenshot","base64","assignBase64","OBJECTS_INITIALIZED","split","OBJECT_ROOM_ID","getPetTypeId","parts","getCollection","getPetColorResult","petIndex","paletteIndex","getPetColorResultsForTag","tagName","deleteRoomObject","deleteWallItem","sessionDataManager","manager","roomSessionManager","roomManager","objectEventHandler","roomRendererFactory","visualizationFactory","logicFactory","ready","roomContentLoader","selectedAvatarId","getRoomObjectCount","categoryId"],"mappings":"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","sourcesContent":["import { RenderTexture, Resource, Texture } from '@pixi/core';\r\nimport { Container, DisplayObject } from '@pixi/display';\r\nimport { Matrix, Point, Rectangle } from '@pixi/math';\r\nimport { NitroSprite } from '../../core';\r\nimport { IDisposable } from '../../core/common/disposable/IDisposable';\r\nimport { IUpdateReceiver } from '../../core/common/IUpdateReceiver';\r\nimport { NitroLogger } from '../../core/common/logger/NitroLogger';\r\nimport { NitroManager } from '../../core/common/NitroManager';\r\nimport { IConnection } from '../../core/communication/connections/IConnection';\r\nimport { IMessageComposer } from '../../core/communication/messages/IMessageComposer';\r\nimport { NitroEvent } from '../../core/events/NitroEvent';\r\nimport { TextureUtils } from '../../room';\r\nimport { RoomObjectEvent } from '../../room/events/RoomObjectEvent';\r\nimport { RoomObjectMouseEvent } from '../../room/events/RoomObjectMouseEvent';\r\nimport { IRoomInstance } from '../../room/IRoomInstance';\r\nimport { IRoomManager } from '../../room/IRoomManager';\r\nimport { IRoomManagerListener } from '../../room/IRoomManagerListener';\r\nimport { RoomObjectUpdateMessage } from '../../room/messages/RoomObjectUpdateMessage';\r\nimport { IRoomObject } from '../../room/object/IRoomObject';\r\nimport { IRoomObjectController } from '../../room/object/IRoomObjectController';\r\nimport { IRoomObjectLogicFactory } from '../../room/object/logic/IRoomObjectLogicFactory';\r\nimport { IRoomObjectVisualizationFactory } from '../../room/object/visualization/IRoomObjectVisualizationFactory';\r\nimport { IRoomRenderer } from '../../room/renderer/IRoomRenderer';\r\nimport { IRoomRendererFactory } from '../../room/renderer/IRoomRendererFactory';\r\nimport { IRoomRenderingCanvas } from '../../room/renderer/IRoomRenderingCanvas';\r\nimport { RoomRendererFactory } from '../../room/renderer/RoomRendererFactory';\r\nimport { RoomInstance } from '../../room/RoomInstance';\r\nimport { IRoomGeometry } from '../../room/utils/IRoomGeometry';\r\nimport { IVector3D } from '../../room/utils/IVector3D';\r\nimport { NumberBank } from '../../room/utils/NumberBank';\r\nimport { RoomEnterEffect } from '../../room/utils/RoomEnterEffect';\r\nimport { RoomGeometry } from '../../room/utils/RoomGeometry';\r\nimport { Vector3d } from '../../room/utils/Vector3d';\r\nimport { PetCustomPart } from '../avatar/pets/PetCustomPart';\r\nimport { PetFigureData } from '../avatar/pets/PetFigureData';\r\nimport { RenderRoomMessageComposer, RenderRoomThumbnailMessageComposer } from '../communication';\r\nimport { INitroCommunicationManager } from '../communication/INitroCommunicationManager';\r\nimport { ToolbarIconEnum } from '../enums/ToolbarIconEnum';\r\nimport { NitroToolbarAnimateIconEvent } from '../events/NitroToolbarAnimateIconEvent';\r\nimport { Nitro } from '../Nitro';\r\nimport { RoomControllerLevel } from '../session/enum/RoomControllerLevel';\r\nimport { BadgeImageReadyEvent } from '../session/events/BadgeImageReadyEvent';\r\nimport { RoomSessionEvent } from '../session/events/RoomSessionEvent';\r\nimport { IRoomSessionManager } from '../session/IRoomSessionManager';\r\nimport { ISessionDataManager } from '../session/ISessionDataManager';\r\nimport { MouseEventType } from '../ui/MouseEventType';\r\nimport { FurniId } from '../utils/FurniId';\r\nimport { RoomDragEvent } from './events';\r\nimport { RoomBackgroundColorEvent } from './events/RoomBackgroundColorEvent';\r\nimport { RoomEngineEvent } from './events/RoomEngineEvent';\r\nimport { RoomEngineObjectEvent } from './events/RoomEngineObjectEvent';\r\nimport { RoomObjectFurnitureActionEvent } from './events/RoomObjectFurnitureActionEvent';\r\nimport { RoomToObjectOwnAvatarMoveEvent } from './events/RoomToObjectOwnAvatarMoveEvent';\r\nimport { IGetImageListener } from './IGetImageListener';\r\nimport { ImageResult } from './ImageResult';\r\nimport { IRoomContentListener } from './IRoomContentListener';\r\nimport { IRoomCreator } from './IRoomCreator';\r\nimport { IRoomEngine } from './IRoomEngine';\r\nimport { IRoomEngineServices } from './IRoomEngineServices';\r\nimport { ObjectAvatarCarryObjectUpdateMessage } from './messages/ObjectAvatarCarryObjectUpdateMessage';\r\nimport { ObjectAvatarChatUpdateMessage } from './messages/ObjectAvatarChatUpdateMessage';\r\nimport { ObjectAvatarDanceUpdateMessage } from './messages/ObjectAvatarDanceUpdateMessage';\r\nimport { ObjectAvatarEffectUpdateMessage } from './messages/ObjectAvatarEffectUpdateMessage';\r\nimport { ObjectAvatarExperienceUpdateMessage } from './messages/ObjectAvatarExperienceUpdateMessage';\r\nimport { ObjectAvatarExpressionUpdateMessage } from './messages/ObjectAvatarExpressionUpdateMessage';\r\nimport { ObjectAvatarFigureUpdateMessage } from './messages/ObjectAvatarFigureUpdateMessage';\r\nimport { ObjectAvatarFlatControlUpdateMessage } from './messages/ObjectAvatarFlatControlUpdateMessage';\r\nimport { ObjectAvatarGestureUpdateMessage } from './messages/ObjectAvatarGestureUpdateMessage';\r\nimport { ObjectAvatarGuideStatusUpdateMessage } from './messages/ObjectAvatarGuideStatusUpdateMessage';\r\nimport { ObjectAvatarMutedUpdateMessage } from './messages/ObjectAvatarMutedUpdateMessage';\r\nimport { ObjectAvatarOwnMessage } from './messages/ObjectAvatarOwnMessage';\r\nimport { ObjectAvatarPetGestureUpdateMessage } from './messages/ObjectAvatarPetGestureUpdateMessage';\r\nimport { ObjectAvatarPlayerValueUpdateMessage } from './messages/ObjectAvatarPlayerValueUpdateMessage';\r\nimport { ObjectAvatarPlayingGameUpdateMessage } from './messages/ObjectAvatarPlayingGameUpdateMessage';\r\nimport { ObjectAvatarPostureUpdateMessage } from './messages/ObjectAvatarPostureUpdateMessage';\r\nimport { ObjectAvatarSignUpdateMessage } from './messages/ObjectAvatarSignUpdateMessage';\r\nimport { ObjectAvatarSleepUpdateMessage } from './messages/ObjectAvatarSleepUpdateMessage';\r\nimport { ObjectAvatarTypingUpdateMessage } from './messages/ObjectAvatarTypingUpdateMessage';\r\nimport { ObjectAvatarUpdateMessage } from './messages/ObjectAvatarUpdateMessage';\r\nimport { ObjectAvatarUseObjectUpdateMessage } from './messages/ObjectAvatarUseObjectUpdateMessage';\r\nimport { ObjectDataUpdateMessage } from './messages/ObjectDataUpdateMessage';\r\nimport { ObjectGroupBadgeUpdateMessage } from './messages/ObjectGroupBadgeUpdateMessage';\r\nimport { ObjectHeightUpdateMessage } from './messages/ObjectHeightUpdateMessage';\r\nimport { ObjectItemDataUpdateMessage } from './messages/ObjectItemDataUpdateMessage';\r\nimport { ObjectModelDataUpdateMessage } from './messages/ObjectModelDataUpdateMessage';\r\nimport { ObjectMoveUpdateMessage } from './messages/ObjectMoveUpdateMessage';\r\nimport { ObjectRoomColorUpdateMessage } from './messages/ObjectRoomColorUpdateMessage';\r\nimport { ObjectRoomFloorHoleUpdateMessage } from './messages/ObjectRoomFloorHoleUpdateMessage';\r\nimport { ObjectRoomMaskUpdateMessage } from './messages/ObjectRoomMaskUpdateMessage';\r\nimport { ObjectRoomPlanePropertyUpdateMessage } from './messages/ObjectRoomPlanePropertyUpdateMessage';\r\nimport { ObjectRoomPlaneVisibilityUpdateMessage } from './messages/ObjectRoomPlaneVisibilityUpdateMessage';\r\nimport { ObjectRoomUpdateMessage } from './messages/ObjectRoomUpdateMessage';\r\nimport { ObjectStateUpdateMessage } from './messages/ObjectStateUpdateMessage';\r\nimport { IObjectData } from './object/data/IObjectData';\r\nimport { ObjectDataFactory } from './object/data/ObjectDataFactory';\r\nimport { LegacyDataType } from './object/data/type/LegacyDataType';\r\nimport { RoomLogic } from './object/logic/room/RoomLogic';\r\nimport { RoomMapData } from './object/RoomMapData';\r\nimport { RoomObjectCategory } from './object/RoomObjectCategory';\r\nimport { RoomObjectUserType } from './object/RoomObjectUserType';\r\nimport { RoomObjectVariable } from './object/RoomObjectVariable';\r\nimport { RoomObjectVisualizationFactory } from './object/RoomObjectVisualizationFactory';\r\nimport { PetColorResult } from './PetColorResult';\r\nimport { RoomContentLoader } from './RoomContentLoader';\r\nimport { RoomMessageHandler } from './RoomMessageHandler';\r\nimport { RoomObjectEventHandler } from './RoomObjectEventHandler';\r\nimport { RoomObjectLogicFactory } from './RoomObjectLogicFactory';\r\nimport { RoomVariableEnum } from './RoomVariableEnum';\r\nimport { FurnitureStackingHeightMap } from './utils/FurnitureStackingHeightMap';\r\nimport { LegacyWallGeometry } from './utils/LegacyWallGeometry';\r\nimport { RoomCamera } from './utils/RoomCamera';\r\nimport { RoomData } from './utils/RoomData';\r\nimport { RoomFurnitureData } from './utils/RoomFurnitureData';\r\nimport { RoomInstanceData } from './utils/RoomInstanceData';\r\nimport { RoomObjectBadgeImageAssetListener } from './utils/RoomObjectBadgeImageAssetListener';\r\nimport { SelectedRoomObjectData } from './utils/SelectedRoomObjectData';\r\nimport { SpriteDataCollector } from './utils/SpriteDataCollector';\r\nimport { TileObjectMap } from './utils/TileObjectMap';\r\n\r\nexport class RoomEngine extends NitroManager implements IRoomEngine, IRoomCreator, IRoomEngineServices, IRoomManagerListener, IRoomContentListener, IUpdateReceiver, IDisposable\r\n{\r\n    public static ROOM_OBJECT_ID: number = -1;\r\n    public static ROOM_OBJECT_TYPE: string = 'room';\r\n\r\n    public static CURSOR_OBJECT_ID: number = -2;\r\n    public static CURSOR_OBJECT_TYPE: string = 'tile_cursor';\r\n\r\n    public static ARROW_OBJECT_ID: number = -3;\r\n    public static ARROW_OBJECT_TYPE: string = 'selection_arrow';\r\n\r\n    public static OVERLAY: string = 'overlay';\r\n    public static OBJECT_ICON_SPRITE: string = 'object_icon_sprite';\r\n\r\n    private static DRAG_THRESHOLD: number = 15;\r\n    private static TEMPORARY_ROOM: string = 'temporary_room';\r\n\r\n    private _communication: INitroCommunicationManager;\r\n    private _roomRendererFactory: IRoomRendererFactory;\r\n    private _roomManager: IRoomManager;\r\n    private _visualizationFactory: IRoomObjectVisualizationFactory;\r\n    private _sessionDataManager: ISessionDataManager;\r\n    private _roomSessionManager: IRoomSessionManager;\r\n    private _roomObjectEventHandler: RoomObjectEventHandler;\r\n    private _roomMessageHandler: RoomMessageHandler;\r\n    private _roomContentLoader: RoomContentLoader;\r\n    private _ready: boolean;\r\n    private _roomContentLoaderReady: boolean;\r\n    private _imageObjectIdBank: NumberBank;\r\n    private _imageCallbacks: Map<string, IGetImageListener[]>;\r\n    private _thumbnailObjectIdBank: NumberBank;\r\n    private _thumbnailCallbacks: Map<string, IGetImageListener[]>;\r\n    private _activeRoomId: number;\r\n    private _activeRoomActiveCanvas: number;\r\n    private _activeRoomActiveCanvasMouseX: number;\r\n    private _activeRoomActiveCanvasMouseY: number;\r\n    private _activeRoomIsDragged: boolean;\r\n    private _activeRoomWasDragged: boolean;\r\n    private _activeRoomDragStartX: number;\r\n    private _activeRoomDragStartY: number;\r\n    private _activeRoomDragX: number;\r\n    private _activeRoomDragY: number;\r\n    private _roomDraggingAlwaysCenters: boolean;\r\n    private _roomAllowsDragging: boolean;\r\n    private _roomDatas: Map<number, RoomData>;\r\n    private _roomInstanceDatas: Map<number, RoomInstanceData>;\r\n    private _skipFurnitureCreationForNextFrame: boolean;\r\n    private _mouseCursorUpdate: boolean;\r\n    private _badgeListenerObjects: Map<string, RoomObjectBadgeImageAssetListener[]>;\r\n    private _logicFactory: IRoomObjectLogicFactory;\r\n\r\n    constructor(communication: INitroCommunicationManager)\r\n    {\r\n        super();\r\n\r\n        this._communication = communication;\r\n        this._sessionDataManager = null;\r\n        this._roomSessionManager = null;\r\n        this._roomManager = null;\r\n        this._roomObjectEventHandler = new RoomObjectEventHandler(this);\r\n        this._roomMessageHandler = new RoomMessageHandler(this);\r\n        this._roomContentLoader = new RoomContentLoader();\r\n        this._ready = false;\r\n        this._roomContentLoaderReady = false;\r\n\r\n        this._activeRoomId = -1;\r\n        this._activeRoomActiveCanvas = -1;\r\n        this._roomInstanceDatas = new Map();\r\n        this._roomDatas = new Map();\r\n\r\n        this._roomRendererFactory = new RoomRendererFactory();\r\n        this._visualizationFactory = new RoomObjectVisualizationFactory();\r\n        this._logicFactory = new RoomObjectLogicFactory();\r\n\r\n        this._activeRoomActiveCanvasMouseX = 0;\r\n        this._activeRoomActiveCanvasMouseY = 0;\r\n        this._activeRoomIsDragged = false;\r\n        this._activeRoomWasDragged = false;\r\n        this._activeRoomDragStartX = 0;\r\n        this._activeRoomDragStartY = 0;\r\n        this._activeRoomDragX = 0;\r\n        this._activeRoomDragY = 0;\r\n        this._skipFurnitureCreationForNextFrame = false;\r\n        this._mouseCursorUpdate = false;\r\n        this._imageObjectIdBank = null;\r\n        this._imageCallbacks = new Map();\r\n        this._thumbnailCallbacks = new Map();\r\n        this._roomDraggingAlwaysCenters = false;\r\n        this._roomAllowsDragging = true;\r\n        this._badgeListenerObjects = new Map();\r\n\r\n        this.runVisibilityUpdate = this.runVisibilityUpdate.bind(this);\r\n        this.processRoomObjectEvent = this.processRoomObjectEvent.bind(this);\r\n        this.onRoomSessionEvent = this.onRoomSessionEvent.bind(this);\r\n        this.onRoomContentLoaderReadyEvent = this.onRoomContentLoaderReadyEvent.bind(this);\r\n        this.onBadgeImageReadyEvent = this.onBadgeImageReadyEvent.bind(this);\r\n    }\r\n\r\n    public onInit(): void\r\n    {\r\n        if(this._ready) return;\r\n\r\n        this._imageObjectIdBank = new NumberBank(1000);\r\n        this._thumbnailObjectIdBank = new NumberBank(1000);\r\n\r\n        this._logicFactory.registerEventFunction(this.processRoomObjectEvent);\r\n\r\n        if(this._roomManager)\r\n        {\r\n            this._roomManager.setContentLoader(this._roomContentLoader);\r\n            this._roomManager.addUpdateCategory(RoomObjectCategory.FLOOR);\r\n            this._roomManager.addUpdateCategory(RoomObjectCategory.WALL);\r\n            this._roomManager.addUpdateCategory(RoomObjectCategory.UNIT);\r\n            this._roomManager.addUpdateCategory(RoomObjectCategory.CURSOR);\r\n            this._roomManager.addUpdateCategory(RoomObjectCategory.ROOM);\r\n        }\r\n\r\n        this._roomMessageHandler.setConnection(this._communication.connection);\r\n\r\n        this._roomContentLoader.initialize(this.events);\r\n        this._roomContentLoader.setSessionDataManager(this._sessionDataManager);\r\n        this._roomContentLoader.setIconListener(this);\r\n\r\n        if(this._roomSessionManager)\r\n        {\r\n            this._roomSessionManager.events.addEventListener(RoomSessionEvent.STARTED, this.onRoomSessionEvent);\r\n            this._roomSessionManager.events.addEventListener(RoomSessionEvent.ENDED, this.onRoomSessionEvent);\r\n        }\r\n\r\n        this.events.addEventListener(RoomContentLoader.LOADER_READY, this.onRoomContentLoaderReadyEvent);\r\n\r\n        Nitro.instance.ticker.add(this.update, this);\r\n\r\n        document.addEventListener('visibilitychange', this.runVisibilityUpdate);\r\n    }\r\n\r\n    public onDispose(): void\r\n    {\r\n        if(!this._ready) return;\r\n\r\n        for(const [ key, value ] of this._roomInstanceDatas)\r\n        {\r\n            this.removeRoomInstance(key);\r\n        }\r\n\r\n        document.removeEventListener('visibilitychange', this.runVisibilityUpdate);\r\n\r\n        Nitro.instance.ticker.remove(this.update, this);\r\n\r\n        if(this._roomObjectEventHandler) this._roomObjectEventHandler.dispose();\r\n\r\n        if(this._roomMessageHandler) this._roomMessageHandler.dispose();\r\n\r\n        if(this._roomContentLoader) this._roomContentLoader.dispose();\r\n\r\n        this.events.removeEventListener(RoomContentLoader.LOADER_READY, this.onRoomContentLoaderReadyEvent);\r\n\r\n        if(this._roomSessionManager)\r\n        {\r\n            this._roomSessionManager.events.removeEventListener(RoomSessionEvent.STARTED, this.onRoomSessionEvent);\r\n            this._roomSessionManager.events.removeEventListener(RoomSessionEvent.ENDED, this.onRoomSessionEvent);\r\n        }\r\n\r\n        super.onDispose();\r\n    }\r\n\r\n    private onRoomSessionEvent(event: RoomSessionEvent): void\r\n    {\r\n        if(!(event instanceof RoomSessionEvent)) return;\r\n\r\n        switch(event.type)\r\n        {\r\n            case RoomSessionEvent.STARTED:\r\n                if(this._roomMessageHandler) this._roomMessageHandler.setRoomId(event.session.roomId);\r\n                return;\r\n            case RoomSessionEvent.ENDED:\r\n                if(this._roomMessageHandler)\r\n                {\r\n                    this._roomMessageHandler.clearRoomId();\r\n                    this.removeRoomInstance(event.session.roomId);\r\n                }\r\n                return;\r\n        }\r\n    }\r\n\r\n    private onRoomContentLoaderReadyEvent(event: NitroEvent): void\r\n    {\r\n        this._roomContentLoaderReady = true;\r\n\r\n        this._roomManager.init();\r\n    }\r\n\r\n    public setActiveRoomId(roomId: number): void\r\n    {\r\n        this._activeRoomId = roomId;\r\n    }\r\n\r\n    public destroyRoom(roomId: number): void\r\n    {\r\n        this.removeRoomInstance(roomId);\r\n    }\r\n\r\n    public getRoomInstance(roomId: number): IRoomInstance\r\n    {\r\n        return (this._roomManager && this._roomManager.getRoomInstance(this.getRoomId(roomId))) || null;\r\n    }\r\n\r\n    public removeRoomInstance(roomId: number): void\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(instance)\r\n        {\r\n            this._roomManager && this._roomManager.removeRoomInstance(this.getRoomId(roomId));\r\n        }\r\n\r\n        const existing = this._roomInstanceDatas.get(roomId);\r\n\r\n        if(existing)\r\n        {\r\n            this._roomInstanceDatas.delete(existing.roomId);\r\n\r\n            existing.dispose();\r\n        }\r\n\r\n        this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.DISPOSED, roomId));\r\n    }\r\n\r\n    public createRoomInstance(roomId: number, roomMap: RoomMapData): void\r\n    {\r\n        let floorType = '111';\r\n        let wallType = '201';\r\n        let landscapeType = '1';\r\n\r\n        if(!this._ready)\r\n        {\r\n            let data = this._roomDatas.get(roomId);\r\n\r\n            if(data)\r\n            {\r\n                this._roomDatas.delete(roomId);\r\n\r\n                floorType = data.floorType;\r\n                wallType = data.wallType;\r\n                landscapeType = data.landscapeType;\r\n            }\r\n\r\n            data = new RoomData(roomId, roomMap);\r\n\r\n            data.floorType = floorType;\r\n            data.wallType = wallType;\r\n            data.landscapeType = landscapeType;\r\n\r\n            this._roomDatas.set(roomId, data);\r\n\r\n            NitroLogger.log('Room Engine not initilized yet, can not create room. Room data stored for later initialization.');\r\n\r\n            return;\r\n        }\r\n\r\n        if(!roomMap)\r\n        {\r\n            NitroLogger.log('Room property messages received before floor height map, will initialize when floor height map received.');\r\n\r\n            return;\r\n        }\r\n\r\n        const data = this._roomDatas.get(roomId);\r\n\r\n        if(data)\r\n        {\r\n            this._roomDatas.delete(roomId);\r\n\r\n            if(data.floorType) floorType = data.floorType;\r\n\r\n            if(data.wallType) wallType = data.wallType;\r\n\r\n            if(data.landscapeType) landscapeType = data.landscapeType;\r\n        }\r\n\r\n        const instance = this.setupRoomInstance(roomId, roomMap, floorType, wallType, landscapeType, this.getRoomInstanceModelName(roomId));\r\n\r\n        if(!instance) return;\r\n\r\n        if(roomMap.restrictsDragging)\r\n        {\r\n            this._roomAllowsDragging = false;\r\n        }\r\n        else\r\n        {\r\n            this._roomAllowsDragging = true;\r\n        }\r\n\r\n        this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.INITIALIZED, roomId));\r\n    }\r\n\r\n    private setupRoomInstance(roomId: number, roomMap: RoomMapData, floorType: string, wallType: string, landscapeType: string, worldType: string): IRoomInstance\r\n    {\r\n        if(!this._ready || !this._roomManager) return;\r\n\r\n        const instance = this._roomManager.createRoomInstance(this.getRoomId(roomId));\r\n\r\n        if(!instance) return null;\r\n\r\n        const category = RoomObjectCategory.ROOM;\r\n\r\n        const roomObject = instance.createRoomObjectAndInitalize(RoomEngine.ROOM_OBJECT_ID, RoomEngine.ROOM_OBJECT_TYPE, category) as IRoomObjectController;\r\n\r\n        instance.model.setValue(RoomVariableEnum.ROOM_IS_PUBLIC, 0);\r\n        instance.model.setValue(RoomVariableEnum.ROOM_Z_SCALE, 1);\r\n\r\n        if(roomMap)\r\n        {\r\n            instance.model.setValue(RoomVariableEnum.RESTRICTS_DRAGGING, roomMap.restrictsDragging);\r\n            instance.model.setValue(RoomVariableEnum.RESTRICTS_SCALING, roomMap.restrictsScaling);\r\n            instance.model.setValue(RoomVariableEnum.RESTRICTED_SCALE, roomMap.restrictedScale);\r\n\r\n            const dimensions = roomMap.dimensions;\r\n\r\n            if(dimensions)\r\n            {\r\n                const minX = roomMap.dimensions.minX;\r\n                const maxX = roomMap.dimensions.maxX;\r\n                const minY = roomMap.dimensions.minY;\r\n                const maxY = roomMap.dimensions.maxY;\r\n\r\n                instance.model.setValue(RoomVariableEnum.ROOM_MIN_X, minX);\r\n                instance.model.setValue(RoomVariableEnum.ROOM_MAX_X, maxX);\r\n                instance.model.setValue(RoomVariableEnum.ROOM_MIN_Y, minY);\r\n                instance.model.setValue(RoomVariableEnum.ROOM_MAX_Y, maxY);\r\n\r\n                const seed = ((((minX * 423) + (maxX * 671)) + (minY * 913)) + (maxY * 7509));\r\n\r\n                if(roomObject && roomObject.model) roomObject.model.setValue(RoomObjectVariable.ROOM_RANDOM_SEED, seed);\r\n            }\r\n        }\r\n\r\n        const logic = (roomObject && roomObject.logic as RoomLogic) || null;\r\n\r\n        if(logic)\r\n        {\r\n            logic.initialize(roomMap);\r\n\r\n            if(floorType)\r\n            {\r\n                logic.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_FLOOR_UPDATE, floorType));\r\n                instance.model.setValue(RoomObjectVariable.ROOM_FLOOR_TYPE, floorType);\r\n            }\r\n\r\n            if(wallType)\r\n            {\r\n                logic.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_WALL_UPDATE, wallType));\r\n                instance.model.setValue(RoomObjectVariable.ROOM_WALL_TYPE, wallType);\r\n            }\r\n\r\n            if(landscapeType)\r\n            {\r\n                logic.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_LANDSCAPE_UPDATE, landscapeType));\r\n                instance.model.setValue(RoomObjectVariable.ROOM_LANDSCAPE_TYPE, landscapeType);\r\n            }\r\n        }\r\n\r\n        if(roomMap && roomMap.doors.length)\r\n        {\r\n            let doorIndex = 0;\r\n\r\n            while(doorIndex < roomMap.doors.length)\r\n            {\r\n                const door = roomMap.doors[doorIndex];\r\n\r\n                if(door)\r\n                {\r\n                    const doorX = door.x;\r\n                    const doorY = door.y;\r\n                    const doorZ = door.z;\r\n                    const doorDir = door.dir;\r\n                    const maskType = ObjectRoomMaskUpdateMessage.DOOR;\r\n                    const maskId = 'door_' + doorIndex;\r\n                    const maskLocation = new Vector3d(doorX, doorY, doorZ);\r\n\r\n                    logic.processUpdateMessage(new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.ADD_MASK, maskId, maskType, maskLocation, ObjectRoomMaskUpdateMessage.HOLE));\r\n\r\n                    if((doorDir === 90) || (doorDir === 180))\r\n                    {\r\n                        if(doorDir === 90)\r\n                        {\r\n                            instance.model.setValue(RoomObjectVariable.ROOM_DOOR_X, (doorX - 0.5));\r\n                            instance.model.setValue(RoomObjectVariable.ROOM_DOOR_Y, doorY);\r\n                        }\r\n\r\n                        if(doorDir === 180)\r\n                        {\r\n                            instance.model.setValue(RoomObjectVariable.ROOM_DOOR_X, doorX);\r\n                            instance.model.setValue(RoomObjectVariable.ROOM_DOOR_Y, (doorY - 0.5));\r\n                        }\r\n\r\n                        instance.model.setValue(RoomObjectVariable.ROOM_DOOR_Z, doorZ);\r\n                        instance.model.setValue(RoomObjectVariable.ROOM_DOOR_DIR, doorDir);\r\n                    }\r\n                }\r\n\r\n                doorIndex++;\r\n            }\r\n        }\r\n\r\n        instance.createRoomObjectAndInitalize(RoomEngine.CURSOR_OBJECT_ID, RoomEngine.CURSOR_OBJECT_TYPE, RoomObjectCategory.CURSOR);\r\n        if(Nitro.instance.getConfiguration('enable.avatar.arrow', false)) instance.createRoomObjectAndInitalize(RoomEngine.ARROW_OBJECT_ID, RoomEngine.ARROW_OBJECT_TYPE, RoomObjectCategory.CURSOR);\r\n\r\n        return instance;\r\n    }\r\n\r\n    public getRoomInstanceDisplay(roomId: number, id: number, width: number, height: number, scale: number): DisplayObject\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        let renderer = instance.renderer as IRoomRenderer;\r\n\r\n        if(!renderer)\r\n        {\r\n            renderer = this._roomRendererFactory.createRenderer();\r\n\r\n            if(!renderer) return null;\r\n        }\r\n\r\n        renderer.roomObjectVariableAccurateZ = RoomObjectVariable.OBJECT_ACCURATE_Z_VALUE;\r\n\r\n        instance.setRenderer(renderer);\r\n\r\n        const canvas = renderer.createCanvas(id, width, height, scale);\r\n\r\n        if(!canvas) return null;\r\n\r\n        const restrictedScaling = instance.model.getValue<boolean>(RoomVariableEnum.RESTRICTS_SCALING);\r\n\r\n        if(restrictedScaling)\r\n        {\r\n            let restrictedScale = instance.model.getValue<number>(RoomVariableEnum.RESTRICTED_SCALE);\r\n\r\n            if(!restrictedScale) restrictedScale = 1;\r\n\r\n            canvas.setScale(restrictedScale);\r\n\r\n            canvas.restrictsScaling = true;\r\n        }\r\n        else\r\n        {\r\n            canvas.restrictsScaling = false;\r\n        }\r\n\r\n        canvas.setMouseListener(this._roomObjectEventHandler);\r\n\r\n        if(canvas.geometry)\r\n        {\r\n            canvas.geometry.z_scale = instance.model.getValue(RoomVariableEnum.ROOM_Z_SCALE);\r\n\r\n            const doorX = instance.model.getValue<number>(RoomObjectVariable.ROOM_DOOR_X);\r\n            const doorY = instance.model.getValue<number>(RoomObjectVariable.ROOM_DOOR_Y);\r\n            const doorZ = instance.model.getValue<number>(RoomObjectVariable.ROOM_DOOR_Z);\r\n            const doorDirection = instance.model.getValue<number>(RoomObjectVariable.ROOM_DOOR_DIR);\r\n            const vector = new Vector3d(doorX, doorY, doorZ);\r\n\r\n            let direction: IVector3D = null;\r\n\r\n            if(doorDirection === 90) direction = new Vector3d(-2000, 0, 0);\r\n\r\n            if(doorDirection === 180) direction = new Vector3d(0, -2000, 0);\r\n\r\n            canvas.geometry.setDisplacement(vector, direction);\r\n\r\n            const displayObject = (canvas.master as Container);\r\n\r\n            if(displayObject)\r\n            {\r\n                const overlay = new NitroSprite(Texture.EMPTY);\r\n\r\n                overlay.name = RoomEngine.OVERLAY;\r\n                overlay.interactive = false;\r\n\r\n                displayObject.addChild(overlay);\r\n            }\r\n        }\r\n\r\n        return canvas.master;\r\n    }\r\n\r\n    public setRoomInstanceRenderingCanvasMask(roomId: number, canvasId: number, flag: boolean): void\r\n    {\r\n        const roomCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(roomCanvas) roomCanvas.setMask(flag);\r\n    }\r\n\r\n    public setRoomInstanceRenderingCanvasScale(roomId: number, canvasId: number, scale: number, point: Point = null, offsetPoint: Point = null, override: boolean = false, asDelta: boolean = false): void\r\n    {\r\n        const roomCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(roomCanvas)\r\n        {\r\n            if(roomCanvas.restrictsScaling && !override) return;\r\n\r\n            roomCanvas.setScale(scale, point, offsetPoint, override, asDelta);\r\n\r\n            this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.ROOM_ZOOMED, roomId));\r\n        }\r\n    }\r\n\r\n    public getRoomInstanceRenderingCanvas(roomId: number, canvasId: number = -1): IRoomRenderingCanvas\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        const renderer = instance.renderer as IRoomRenderer;\r\n\r\n        if(!renderer) return null;\r\n\r\n        if(canvasId === -1) canvasId = this._activeRoomActiveCanvas;\r\n\r\n        const canvas = renderer.getCanvas(canvasId);\r\n\r\n        if(!canvas) return null;\r\n\r\n        return canvas;\r\n    }\r\n\r\n    public getActiveRoomInstanceRenderingCanvas(): IRoomRenderingCanvas\r\n    {\r\n        return this.getRoomInstanceRenderingCanvas(this._activeRoomId, this._activeRoomActiveCanvas);\r\n    }\r\n\r\n    public getRoomInstanceRenderingCanvasOffset(roomId: number, canvasId: number = -1): Point\r\n    {\r\n        if(canvasId === -1) canvasId = this._activeRoomActiveCanvas;\r\n\r\n        const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(!renderingCanvas) return null;\r\n\r\n        return new Point(renderingCanvas.screenOffsetX, renderingCanvas.screenOffsetY);\r\n    }\r\n\r\n    public setRoomInstanceRenderingCanvasOffset(roomId: number, canvasId: number, point: Point): boolean\r\n    {\r\n        const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(!renderingCanvas || !point) return false;\r\n\r\n        const x = ~~(point.x);\r\n        const y = ~~(point.y);\r\n\r\n        if((renderingCanvas.screenOffsetX === x) && (renderingCanvas.screenOffsetY === y)) return;\r\n\r\n        this.events.dispatchEvent(new RoomDragEvent(roomId, -(renderingCanvas.screenOffsetX - x), -(renderingCanvas.screenOffsetY - y)));\r\n\r\n        renderingCanvas.screenOffsetX = x;\r\n        renderingCanvas.screenOffsetY = y;\r\n\r\n        return true;\r\n    }\r\n\r\n    public getRoomInstanceRenderingCanvasScale(roomId: number = -1000, canvasId: number = -1): number\r\n    {\r\n        if(roomId === -1000) roomId = this._activeRoomId;\r\n\r\n        if(canvasId === -1) canvasId = this._activeRoomActiveCanvas;\r\n\r\n        const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(!canvas) return 1;\r\n\r\n        return canvas.scale;\r\n    }\r\n\r\n    public initializeRoomInstanceRenderingCanvas(roomId: number, canvasId: number, width: number, height: number): void\r\n    {\r\n        const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(!canvas) return;\r\n\r\n        canvas.initialize(width, height);\r\n    }\r\n\r\n    public getRoomInstanceGeometry(roomId: number, canvasId: number = -1): IRoomGeometry\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        const renderer = instance.renderer as IRoomRenderer;\r\n\r\n        if(!renderer) return null;\r\n\r\n        if(canvasId === -1) canvasId = this._activeRoomActiveCanvas;\r\n\r\n        const canvas = renderer.getCanvas(canvasId);\r\n\r\n        if(!canvas) return null;\r\n\r\n        return canvas.geometry;\r\n    }\r\n\r\n    public getRoomInstanceVariable<T>(roomId: number, key: string): T\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        return ((instance.model && instance.model.getValue(key)) || null);\r\n    }\r\n\r\n    public updateRoomInstancePlaneVisibility(roomId: number, wallVisible: boolean, floorVisible: boolean = true): boolean\r\n    {\r\n        const object = this.getRoomOwnObject(roomId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectRoomPlaneVisibilityUpdateMessage(ObjectRoomPlaneVisibilityUpdateMessage.WALL_VISIBILITY, wallVisible));\r\n        object.processUpdateMessage(new ObjectRoomPlaneVisibilityUpdateMessage(ObjectRoomPlaneVisibilityUpdateMessage.FLOOR_VISIBILITY, floorVisible));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomInstancePlaneThickness(roomId: number, wallThickness: number, floorThickness: number): boolean\r\n    {\r\n        const object = this.getRoomOwnObject(roomId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectRoomPlanePropertyUpdateMessage(ObjectRoomPlanePropertyUpdateMessage.WALL_THICKNESS, wallThickness));\r\n        object.processUpdateMessage(new ObjectRoomPlanePropertyUpdateMessage(ObjectRoomPlanePropertyUpdateMessage.FLOOR_THICKNESS, floorThickness));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomInstancePlaneType(roomId: number, floorType: string = null, wallType: string = null, landscapeType: string = null, _arg_5: boolean = false): boolean\r\n    {\r\n        const roomObject = this.getRoomOwnObject(roomId);\r\n        const roomInstance = this.getRoomInstance(roomId);\r\n\r\n        if(!roomObject)\r\n        {\r\n            let roomData = this._roomDatas.get(roomId);\r\n\r\n            if(!roomData)\r\n            {\r\n                roomData = new RoomData(roomId, null);\r\n\r\n                this._roomDatas.set(roomId, roomData);\r\n            }\r\n\r\n            if(floorType) roomData.floorType = floorType;\r\n\r\n            if(wallType) roomData.wallType = wallType;\r\n\r\n            if(landscapeType) roomData.landscapeType = landscapeType;\r\n\r\n            return true;\r\n        }\r\n\r\n        if(floorType)\r\n        {\r\n            if(roomInstance && !_arg_5) roomInstance.model.setValue(RoomObjectVariable.ROOM_FLOOR_TYPE, floorType);\r\n\r\n            roomObject.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_FLOOR_UPDATE, floorType));\r\n        }\r\n\r\n        if(wallType)\r\n        {\r\n            if(roomInstance && !_arg_5) roomInstance.model.setValue(RoomObjectVariable.ROOM_WALL_TYPE, wallType);\r\n\r\n            roomObject.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_WALL_UPDATE, wallType));\r\n        }\r\n\r\n        if(landscapeType)\r\n        {\r\n            if(roomInstance && !_arg_5) roomInstance.model.setValue(RoomObjectVariable.ROOM_LANDSCAPE_TYPE, landscapeType);\r\n\r\n            roomObject.processUpdateMessage(new ObjectRoomUpdateMessage(ObjectRoomUpdateMessage.ROOM_LANDSCAPE_UPDATE, landscapeType));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateObjectRoomColor(k: number, _arg_2: number, _arg_3: number, _arg_4: boolean): boolean\r\n    {\r\n        const roomObject = this.getRoomOwnObject(k);\r\n\r\n        if(!roomObject || !roomObject.logic) return false;\r\n\r\n        const event = new ObjectRoomColorUpdateMessage(ObjectRoomColorUpdateMessage.BACKGROUND_COLOR, _arg_2, _arg_3, _arg_4);\r\n\r\n        roomObject.logic.processUpdateMessage(event);\r\n\r\n        this.events.dispatchEvent(new RoomBackgroundColorEvent(k, _arg_2, _arg_3, _arg_4));\r\n\r\n        return true;\r\n    }\r\n\r\n    public addRoomInstanceFloorHole(roomId: number, objectId: number): void\r\n    {\r\n        if(objectId < 0) return;\r\n\r\n        const roomOwnObject = this.getRoomOwnObject(roomId);\r\n        const roomObject = this.getRoomObjectFloor(roomId, objectId);\r\n\r\n        if(roomOwnObject && roomOwnObject.logic && roomObject && roomObject.model)\r\n        {\r\n            const location = roomObject.getLocation();\r\n            const sizeX = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_SIZE_X);\r\n            const sizeY = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_SIZE_Y);\r\n\r\n            roomOwnObject.processUpdateMessage(new ObjectRoomFloorHoleUpdateMessage(ObjectRoomFloorHoleUpdateMessage.ADD, objectId, location.x, location.y, sizeX, sizeY));\r\n        }\r\n    }\r\n\r\n    public removeRoomInstanceFloorHole(roomId: number, objectId: number): void\r\n    {\r\n        if(objectId < 0) return;\r\n\r\n        const roomOwnObject = this.getRoomOwnObject(roomId);\r\n\r\n        if(roomOwnObject)\r\n        {\r\n            roomOwnObject.processUpdateMessage(new ObjectRoomFloorHoleUpdateMessage(ObjectRoomFloorHoleUpdateMessage.REMOVE, objectId));\r\n        }\r\n    }\r\n\r\n    public setRoomEngineGameMode(roomId: number, isPlaying: boolean): void\r\n    {\r\n        const roomInstance = this.getRoomInstance(roomId);\r\n\r\n        if(!roomInstance) return;\r\n\r\n        const mode = isPlaying ? 1 : 0;\r\n\r\n        roomInstance.model.setValue(RoomVariableEnum.IS_PLAYING_GAME, mode);\r\n\r\n        if(mode === 0)\r\n        {\r\n            this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.NORMAL_MODE, roomId));\r\n        }\r\n        else\r\n        {\r\n            this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.GAME_MODE, roomId));\r\n        }\r\n    }\r\n\r\n    public isRoomIdPlayingGame(roomId: number): boolean\r\n    {\r\n        const roomInstance = this.getRoomInstance(roomId);\r\n\r\n        if(!roomInstance) return false;\r\n\r\n        return (roomInstance.model.getValue<number>(RoomVariableEnum.IS_PLAYING_GAME) > 0);\r\n    }\r\n\r\n    public isPlayingGame(): boolean\r\n    {\r\n        return this.isRoomIdPlayingGame(this._activeRoomId);\r\n    }\r\n\r\n    public disableUpdate(flag: boolean): void\r\n    {\r\n        if(flag)\r\n        {\r\n            Nitro.instance.ticker.remove(this.update, this);\r\n        }\r\n        else\r\n        {\r\n            Nitro.instance.ticker.remove(this.update, this);\r\n            Nitro.instance.ticker.add(this.update, this);\r\n        }\r\n    }\r\n\r\n    public runUpdate(): void\r\n    {\r\n        this.update(1);\r\n    }\r\n\r\n    public runVisibilityUpdate(): void\r\n    {\r\n        if(!document.hidden) this.update(1, true);\r\n    }\r\n\r\n    public update(time: number, update: boolean = false): void\r\n    {\r\n        if(!this._roomManager) return;\r\n\r\n        time = Nitro.instance.time;\r\n\r\n        RoomEnterEffect.turnVisualizationOn();\r\n\r\n        this.processPendingFurniture();\r\n\r\n        this._roomManager.update(time, update);\r\n\r\n        this.updateRoomCameras(time);\r\n\r\n        if(this._mouseCursorUpdate) this.setPointer();\r\n\r\n        RoomEnterEffect.turnVisualizationOff();\r\n    }\r\n\r\n    private setPointer(): void\r\n    {\r\n        this._mouseCursorUpdate = false;\r\n\r\n        const instanceData = this.getRoomInstanceData(this._activeRoomId);\r\n\r\n        if(instanceData && instanceData.hasButtonMouseCursorOwners())\r\n        {\r\n            document.body.style.cursor = 'pointer';\r\n        }\r\n        else\r\n        {\r\n            document.body.style.cursor = 'auto';\r\n        }\r\n    }\r\n\r\n    private processPendingFurniture(): void\r\n    {\r\n        if(this._skipFurnitureCreationForNextFrame)\r\n        {\r\n            this._skipFurnitureCreationForNextFrame = false;\r\n\r\n            return;\r\n        }\r\n\r\n        const startTime = new Date().valueOf();\r\n        const furniturePerTick = 5;\r\n        const hasTickLimit = true;\r\n\r\n        for(const instanceData of this._roomInstanceDatas.values())\r\n        {\r\n            if(!instanceData) continue;\r\n\r\n            let pendingData: RoomFurnitureData = null;\r\n            let totalFurnitureAdded = 0;\r\n            let furnitureAdded = false;\r\n\r\n            while((pendingData = instanceData.getNextPendingFurnitureFloor()))\r\n            {\r\n                furnitureAdded = this.processPendingFurnitureFloor(instanceData.roomId, pendingData.id, pendingData);\r\n\r\n                if(hasTickLimit)\r\n                {\r\n                    if(!(++totalFurnitureAdded % furniturePerTick))\r\n                    {\r\n                        const time = new Date().valueOf();\r\n\r\n                        if((time - startTime) >= 40)\r\n                        {\r\n                            this._skipFurnitureCreationForNextFrame = true;\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            while(!this._skipFurnitureCreationForNextFrame && (pendingData = instanceData.getNextPendingFurnitureWall()))\r\n            {\r\n                furnitureAdded = this.processPendingFurnitureWall(instanceData.roomId, pendingData.id, pendingData);\r\n\r\n                if(hasTickLimit)\r\n                {\r\n                    if(!(++totalFurnitureAdded % furniturePerTick))\r\n                    {\r\n                        const time = new Date().valueOf();\r\n\r\n                        if((time - startTime) >= 40)\r\n                        {\r\n                            this._skipFurnitureCreationForNextFrame = true;\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(furnitureAdded && this._roomManager)\r\n            {\r\n                const roomInstance = this._roomManager.getRoomInstance(this.getRoomId(instanceData.roomId)) as RoomInstance;\r\n\r\n                if(!roomInstance.hasUninitializedObjects()) this.objectsInitialized(instanceData.roomId.toString());\r\n            }\r\n\r\n            if(this._skipFurnitureCreationForNextFrame) return;\r\n        }\r\n    }\r\n\r\n    public onRoomEngineInitalized(flag: boolean): void\r\n    {\r\n        if(!flag) return;\r\n\r\n        this._ready = true;\r\n\r\n        this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.ENGINE_INITIALIZED, 0));\r\n\r\n        for(const roomData of this._roomDatas.values())\r\n        {\r\n            if(!roomData) continue;\r\n\r\n            this.createRoomInstance(roomData.roomId, roomData.data);\r\n        }\r\n    }\r\n\r\n    private processPendingFurnitureFloor(roomId: number, id: number, data: RoomFurnitureData): boolean\r\n    {\r\n        if(!data)\r\n        {\r\n            const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n            if(instanceData) data = instanceData.getPendingFurnitureFloor(id);\r\n\r\n            if(!data) return false;\r\n        }\r\n\r\n        let type = data.type;\r\n        let didLoad = false;\r\n\r\n        if(!type)\r\n        {\r\n            type = this.getFurnitureFloorName(data.typeId);\r\n            didLoad = true;\r\n\r\n        }\r\n\r\n        const object = this.createRoomObjectFloor(roomId, id, type);\r\n\r\n        if(!object) return false;\r\n\r\n        const model = object.model;\r\n\r\n        if(model)\r\n        {\r\n            model.setValue(RoomObjectVariable.FURNITURE_COLOR, this.getFurnitureFloorColorIndex(data.typeId));\r\n            model.setValue(RoomObjectVariable.FURNITURE_TYPE_ID, data.typeId);\r\n            model.setValue(RoomObjectVariable.FURNITURE_AD_URL, this.getRoomObjectAdUrl(data.type));\r\n            model.setValue(RoomObjectVariable.FURNITURE_REAL_ROOM_OBJECT, (data.realRoomObject ? 1 : 0));\r\n            model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, data.expiryTime);\r\n            model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\r\n            model.setValue(RoomObjectVariable.FURNITURE_USAGE_POLICY, data.usagePolicy);\r\n            model.setValue(RoomObjectVariable.FURNITURE_OWNER_ID, data.ownerId);\r\n            model.setValue(RoomObjectVariable.FURNITURE_OWNER_NAME, data.ownerName);\r\n        }\r\n\r\n        if(!this.updateRoomObjectFloor(roomId, id, data.location, data.direction, data.state, data.data, data.extra)) return false;\r\n\r\n        if(data.sizeZ >= 0)\r\n        {\r\n            if(!this.updateRoomObjectFloorHeight(roomId, id, data.sizeZ)) return false;\r\n        }\r\n\r\n        if(this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.ADDED, roomId, id, RoomObjectCategory.FLOOR));\r\n\r\n        const selectedRoomObjectData = this.getPlacedRoomObjectData(roomId);\r\n\r\n        if(selectedRoomObjectData && (selectedRoomObjectData.id === id) && (selectedRoomObjectData.category === RoomObjectCategory.FLOOR))\r\n        {\r\n            this.selectRoomObject(roomId, id, RoomObjectCategory.FLOOR);\r\n        }\r\n\r\n        if(object.isReady && data.synchronized) this.addObjectToTileMap(roomId, object);\r\n\r\n        return true;\r\n    }\r\n\r\n    private processPendingFurnitureWall(roomId: number, id: number, data: RoomFurnitureData): boolean\r\n    {\r\n        if(!data)\r\n        {\r\n            const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n            if(instanceData) data = instanceData.getPendingFurnitureWall(id);\r\n\r\n            if(!data) return false;\r\n        }\r\n\r\n        let extra = '';\r\n\r\n        if(data.data) extra = data.data.getLegacyString();\r\n\r\n        let type = this.getFurnitureWallName(data.typeId, extra);\r\n\r\n        if(!type) type = '';\r\n\r\n        const object = this.createRoomObjectWall(roomId, id, type);\r\n\r\n        if(!object) return false;\r\n\r\n        const model = object.model;\r\n\r\n        if(model)\r\n        {\r\n            model.setValue(RoomObjectVariable.FURNITURE_COLOR, this.getFurnitureWallColorIndex(data.typeId));\r\n            model.setValue(RoomObjectVariable.FURNITURE_TYPE_ID, data.typeId);\r\n            model.setValue(RoomObjectVariable.FURNITURE_AD_URL, this.getRoomObjectAdUrl(data.type));\r\n            model.setValue(RoomObjectVariable.FURNITURE_REAL_ROOM_OBJECT, (data.realRoomObject ? 1 : 0));\r\n            model.setValue(RoomObjectVariable.OBJECT_ACCURATE_Z_VALUE, 1);\r\n            model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, data.expiryTime);\r\n            model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\r\n            model.setValue(RoomObjectVariable.FURNITURE_USAGE_POLICY, data.usagePolicy);\r\n            model.setValue(RoomObjectVariable.FURNITURE_OWNER_ID, data.ownerId);\r\n            model.setValue(RoomObjectVariable.FURNITURE_OWNER_NAME, data.ownerName);\r\n        }\r\n\r\n        if(!this.updateRoomObjectWall(roomId, id, data.location, data.direction, data.state, extra)) return false;\r\n\r\n        if(this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.ADDED, roomId, id, RoomObjectCategory.WALL));\r\n\r\n        const selectedRoomObjectData = this.getPlacedRoomObjectData(roomId);\r\n\r\n        if(selectedRoomObjectData && (Math.abs(selectedRoomObjectData.id) === id) && (selectedRoomObjectData.category === RoomObjectCategory.WALL))\r\n        {\r\n            this.selectRoomObject(roomId, id, RoomObjectCategory.WALL);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public setRoomSessionOwnUser(roomId: number, objectId: number): void\r\n    {\r\n        if(!this._roomSessionManager) return;\r\n\r\n        const session = this._roomSessionManager.getSession(roomId);\r\n\r\n        if(session)\r\n        {\r\n            session.setOwnRoomIndex(objectId);\r\n        }\r\n\r\n        const camera = this.getRoomCamera(roomId);\r\n\r\n        if(camera)\r\n        {\r\n            camera.targetId = objectId;\r\n            camera.targetCategory = RoomObjectCategory.UNIT;\r\n\r\n            camera.activateFollowing(this.cameraFollowDuration);\r\n        }\r\n    }\r\n\r\n    private get cameraFollowDuration(): number\r\n    {\r\n        return 1000;\r\n        //return (getBoolean(\"room.camera.follow_user\")) ? 1000 : 0;\r\n    }\r\n\r\n    private updateRoomCameras(time: number): void\r\n    {\r\n        for(const instanceData of this._roomInstanceDatas.values())\r\n        {\r\n            if(!instanceData) continue;\r\n\r\n            const camera = instanceData.roomCamera;\r\n\r\n            if(!camera) continue;\r\n\r\n            let location: IVector3D = null;\r\n\r\n            const object = this.getRoomObject(instanceData.roomId, camera.targetId, camera.targetCategory);\r\n\r\n            if(object) location = object.getLocation();\r\n\r\n            if(!location) continue;\r\n\r\n            if((instanceData.roomId !== this._activeRoomId) || !this._activeRoomIsDragged)\r\n            {\r\n                this.updateRoomCamera(instanceData.roomId, 1, location, time);\r\n            }\r\n        }\r\n\r\n        if(this._activeRoomWasDragged)\r\n        {\r\n            const renderingCanvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, 1);\r\n\r\n            if(renderingCanvas) this.setRoomInstanceRenderingCanvasOffset(this._activeRoomId, 1, new Point((renderingCanvas.screenOffsetX + this._activeRoomDragX), (renderingCanvas.screenOffsetY + this._activeRoomDragY)));\r\n\r\n            this._activeRoomDragX = 0;\r\n            this._activeRoomDragY = 0;\r\n        }\r\n    }\r\n\r\n    private updateRoomCamera(roomId: number, canvasId: number, objectLocation: IVector3D, time: number): void\r\n    {\r\n        const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!renderingCanvas || !instanceData || (renderingCanvas.scale !== 1)) return;\r\n\r\n        const roomGeometry = (renderingCanvas.geometry as RoomGeometry);\r\n        const roomCamera = instanceData.roomCamera;\r\n        const roomInstance = this.getRoomInstance(roomId);\r\n\r\n        if(!roomGeometry || !roomCamera || !roomInstance) return;\r\n\r\n        const canvasRectangle = this.getRoomCanvasRectangle(roomId, canvasId);\r\n\r\n        if(!canvasRectangle) return;\r\n\r\n        let _local_10 = (Math.floor(objectLocation.z) + 1);\r\n        const width = Math.round(canvasRectangle.width);\r\n        const height = Math.round(canvasRectangle.height);\r\n        const bounds = this.getCanvasBoundingRectangle(canvasId);\r\n\r\n        if(bounds && ((bounds.right < 0) || (bounds.bottom < 0) || (bounds.left >= width) || (bounds.top >= height)))\r\n        {\r\n            roomCamera.reset();\r\n        }\r\n\r\n        if((roomCamera.screenWd !== width) || (roomCamera.screenHt !== height) || (roomCamera.scale !== roomGeometry.scale) || (roomCamera.geometryUpdateId !== roomGeometry.updateId) || !Vector3d.isEqual(objectLocation, roomCamera.targetObjectLoc) || roomCamera.isMoving)\r\n        {\r\n            roomCamera.targetObjectLoc = objectLocation;\r\n\r\n            const _local_15 = new Vector3d();\r\n\r\n            _local_15.assign(objectLocation);\r\n\r\n            _local_15.x = Math.round(_local_15.x);\r\n            _local_15.y = Math.round(_local_15.y);\r\n\r\n            const _local_16 = (roomInstance.model.getValue<number>(RoomVariableEnum.ROOM_MIN_X) - 0.5);\r\n            const _local_17 = (roomInstance.model.getValue<number>(RoomVariableEnum.ROOM_MIN_Y) - 0.5);\r\n            const _local_18 = (roomInstance.model.getValue<number>(RoomVariableEnum.ROOM_MAX_X) + 0.5);\r\n            const _local_19 = (roomInstance.model.getValue<number>(RoomVariableEnum.ROOM_MAX_Y) + 0.5);\r\n            const _local_20 = Math.round(((_local_16 + _local_18) / 2));\r\n            const _local_21 = Math.round(((_local_17 + _local_19) / 2));\r\n            const _local_22 = 2;\r\n            let _local_23 = new Point((_local_15.x - _local_20), (_local_15.y - _local_21));\r\n            const _local_24 = (roomGeometry.scale / Math.sqrt(2));\r\n            const _local_25 = (_local_24 / 2);\r\n            const _local_26 = new Matrix();\r\n            _local_26.rotate(((-(roomGeometry.direction.x + 90) / 180) * Math.PI));\r\n            _local_23 = _local_26.apply(_local_23);\r\n            _local_23.y = (_local_23.y * (_local_25 / _local_24));\r\n            const _local_27 = (((canvasRectangle.width / 2) / _local_24) - 1);\r\n            const _local_28 = (((canvasRectangle.height / 2) / _local_25) - 1);\r\n\r\n            let _local_29 = 0;\r\n            let _local_30 = 0;\r\n            let _local_31 = 0;\r\n            let _local_32 = 0;\r\n            let _local_33 = roomGeometry.getScreenPoint(new Vector3d(_local_20, _local_21, _local_22));\r\n\r\n            if(!_local_33) return;\r\n\r\n            _local_33.x = (_local_33.x + Math.round((canvasRectangle.width / 2)));\r\n            _local_33.y = (_local_33.y + Math.round((canvasRectangle.height / 2)));\r\n\r\n            if(bounds)\r\n            {\r\n                bounds.x += -(renderingCanvas.screenOffsetX);\r\n                bounds.y += -(renderingCanvas.screenOffsetY);\r\n\r\n                if(((bounds.width > 1) && (bounds.height > 1)))\r\n                {\r\n                    _local_29 = (((bounds.left - _local_33.x) - (roomGeometry.scale * 0.25)) / _local_24);\r\n                    _local_31 = (((bounds.right - _local_33.x) + (roomGeometry.scale * 0.25)) / _local_24);\r\n                    _local_30 = (((bounds.top - _local_33.y) - (roomGeometry.scale * 0.5)) / _local_25);\r\n                    _local_32 = (((bounds.bottom - _local_33.y) + (roomGeometry.scale * 0.5)) / _local_25);\r\n                }\r\n                else\r\n                {\r\n                    roomGeometry.adjustLocation(new Vector3d(-30, -30), 25);\r\n\r\n                    return;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                roomGeometry.adjustLocation(new Vector3d(0, 0), 25);\r\n\r\n                return;\r\n            }\r\n\r\n            let _local_34 = false;\r\n            let _local_35 = false;\r\n            let _local_36 = false;\r\n            let _local_37 = false;\r\n            const _local_38 = Math.round(((_local_31 - _local_29) * _local_24));\r\n\r\n            if(_local_38 < canvasRectangle.width)\r\n            {\r\n                _local_10 = 2;\r\n                _local_23.x = ((_local_31 + _local_29) / 2);\r\n                _local_36 = true;\r\n            }\r\n            else\r\n            {\r\n                if(_local_23.x > (_local_31 - _local_27))\r\n                {\r\n                    _local_23.x = (_local_31 - _local_27);\r\n                    _local_34 = true;\r\n                }\r\n                if(_local_23.x < (_local_29 + _local_27))\r\n                {\r\n                    _local_23.x = (_local_29 + _local_27);\r\n                    _local_34 = true;\r\n                }\r\n            }\r\n            const _local_39 = Math.round(((_local_32 - _local_30) * _local_25));\r\n            if(_local_39 < canvasRectangle.height)\r\n            {\r\n                _local_10 = 2;\r\n                _local_23.y = ((_local_32 + _local_30) / 2);\r\n                _local_37 = true;\r\n            }\r\n            else\r\n            {\r\n                if(_local_23.y > (_local_32 - _local_28))\r\n                {\r\n                    _local_23.y = (_local_32 - _local_28);\r\n                    _local_35 = true;\r\n                }\r\n                if(_local_23.y < (_local_30 + _local_28))\r\n                {\r\n                    _local_23.y = (_local_30 + _local_28);\r\n                    _local_35 = true;\r\n                }\r\n                if(_local_35)\r\n                {\r\n                    _local_23.y = (_local_23.y / (_local_25 / _local_24));\r\n                }\r\n            }\r\n            _local_26.invert();\r\n            _local_23 = _local_26.apply(_local_23);\r\n            _local_23.x = (_local_23.x + _local_20);\r\n            _local_23.y = (_local_23.y + _local_21);\r\n            let _local_40 = 0.35;\r\n            let _local_41 = 0.2;\r\n            let _local_42 = 0.2;\r\n            const _local_43 = 10;\r\n            const _local_44 = 10;\r\n            if((_local_42 * width) > 100)\r\n            {\r\n                _local_42 = (100 / width);\r\n            }\r\n            if((_local_40 * height) > 150)\r\n            {\r\n                _local_40 = (150 / height);\r\n            }\r\n            if((_local_41 * height) > 150)\r\n            {\r\n                _local_41 = (150 / height);\r\n            }\r\n            if((((roomCamera.limitedLocationX) && (roomCamera.screenWd == width)) && (roomCamera.screenHt == height)))\r\n            {\r\n                _local_42 = 0;\r\n            }\r\n            if((((roomCamera.limitedLocationY) && (roomCamera.screenWd == width)) && (roomCamera.screenHt == height)))\r\n            {\r\n                _local_40 = 0;\r\n                _local_41 = 0;\r\n            }\r\n\r\n            canvasRectangle.width = (canvasRectangle.width * (1 - (_local_42 * 2)));\r\n            canvasRectangle.height = (canvasRectangle.height * (1 - (_local_40 + _local_41)));\r\n\r\n            if(canvasRectangle.width < _local_43)\r\n            {\r\n                canvasRectangle.width = _local_43;\r\n            }\r\n\r\n            if(canvasRectangle.height < _local_44)\r\n            {\r\n                canvasRectangle.height = _local_44;\r\n            }\r\n\r\n            if((_local_40 + _local_41) > 0)\r\n            {\r\n                canvasRectangle.x += (-(canvasRectangle.width) / 2);\r\n                canvasRectangle.y += (-(canvasRectangle.height) * (_local_41 / (_local_40 + _local_41)));\r\n            }\r\n            else\r\n            {\r\n                canvasRectangle.x += (-(canvasRectangle.width) / 2);\r\n                canvasRectangle.y += (-(canvasRectangle.height) / 2);\r\n            }\r\n\r\n            _local_33 = roomGeometry.getScreenPoint(_local_15);\r\n\r\n            if(!_local_33) return;\r\n\r\n            if(_local_33)\r\n            {\r\n                _local_33.x = (_local_33.x + renderingCanvas.screenOffsetX);\r\n                _local_33.y = (_local_33.y + renderingCanvas.screenOffsetY);\r\n                _local_15.z = _local_10;\r\n                _local_15.x = (Math.round((_local_23.x * 2)) / 2);\r\n                _local_15.y = (Math.round((_local_23.y * 2)) / 2);\r\n                if(!roomCamera.location)\r\n                {\r\n                    roomGeometry.location = _local_15;\r\n                    if(this.useOffsetScrolling)\r\n                    {\r\n                        roomCamera.initializeLocation(new Vector3d(0, 0, 0));\r\n                    }\r\n                    else\r\n                    {\r\n                        roomCamera.initializeLocation(_local_15);\r\n                    }\r\n                }\r\n                const _local_45 = roomGeometry.getScreenPoint(_local_15);\r\n                const _local_46 = new Vector3d(0, 0, 0);\r\n                if(_local_45)\r\n                {\r\n                    _local_46.x = _local_45.x;\r\n                    _local_46.y = _local_45.y;\r\n                }\r\n                if(((((((((_local_33.x < canvasRectangle.left) || (_local_33.x > canvasRectangle.right)) && (!(roomCamera.centeredLocX))) || (((_local_33.y < canvasRectangle.top) || (_local_33.y > canvasRectangle.bottom)) && (!(roomCamera.centeredLocY)))) || (((_local_36) && (!(roomCamera.centeredLocX))) && (!(roomCamera.screenWd == width)))) || (((_local_37) && (!(roomCamera.centeredLocY))) && (!(roomCamera.screenHt == height)))) || ((!(roomCamera.roomWd == bounds.width)) || (!(roomCamera.roomHt == bounds.height)))) || ((!(roomCamera.screenWd == width)) || (!(roomCamera.screenHt == height)))))\r\n                {\r\n                    roomCamera.limitedLocationX = _local_34;\r\n                    roomCamera.limitedLocationY = _local_35;\r\n                    if(this.useOffsetScrolling)\r\n                    {\r\n                        roomCamera.target = _local_46;\r\n                    }\r\n                    else\r\n                    {\r\n                        roomCamera.target = _local_15;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if(!_local_34) roomCamera.limitedLocationX = false;\r\n\r\n                    if(!_local_35) roomCamera.limitedLocationY = false;\r\n                }\r\n            }\r\n\r\n            roomCamera.centeredLocX = _local_36;\r\n            roomCamera.centeredLocY = _local_37;\r\n            roomCamera.screenWd = width;\r\n            roomCamera.screenHt = height;\r\n            roomCamera.scale = roomGeometry.scale;\r\n            roomCamera.geometryUpdateId = roomGeometry.updateId;\r\n            roomCamera.roomWd = bounds.width;\r\n            roomCamera.roomHt = bounds.height;\r\n\r\n            if(!this._sessionDataManager.isCameraFollowDisabled)\r\n            {\r\n                if(this.useOffsetScrolling)\r\n                {\r\n                    roomCamera.update(time, 8);\r\n                }\r\n                else\r\n                {\r\n                    roomCamera.update(time, 0.5);\r\n                }\r\n            }\r\n\r\n            if(this.useOffsetScrolling)\r\n            {\r\n                this.setRoomInstanceRenderingCanvasOffset(this.activeRoomId, 1, new Point(-(roomCamera.location.x), -(roomCamera.location.y)));\r\n            }\r\n            else\r\n            {\r\n                roomGeometry.adjustLocation(roomCamera.location, 25);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            roomCamera.limitedLocationX = false;\r\n            roomCamera.limitedLocationY = false;\r\n            roomCamera.centeredLocX = false;\r\n            roomCamera.centeredLocY = false;\r\n        }\r\n    }\r\n\r\n    private getRoomCanvasRectangle(roomId: number, canvasId: number): Rectangle\r\n    {\r\n        const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(!canvas) return null;\r\n\r\n        return new Rectangle(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    public getRoomObjectBoundingRectangle(roomId: number, objectId: number, category: number, canvasId: number): Rectangle\r\n    {\r\n        const geometry = this.getRoomInstanceGeometry(roomId, canvasId);\r\n\r\n        if(!geometry) return null;\r\n\r\n        const roomObject = this.getRoomObject(roomId, objectId, category);\r\n\r\n        if(!roomObject) return null;\r\n\r\n        const visualization = roomObject.visualization;\r\n\r\n        if(!visualization) return null;\r\n\r\n        const rectangle = visualization.getBoundingRectangle();\r\n        const canvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n        const scale = ((canvas) ? canvas.scale : 1);\r\n        const screenPoint = geometry.getScreenPoint(roomObject.getLocation());\r\n\r\n        if(!screenPoint) return null;\r\n\r\n        rectangle.x = (rectangle.x * scale);\r\n        rectangle.y = (rectangle.y * scale);\r\n        rectangle.width = (rectangle.width * scale);\r\n        rectangle.height = (rectangle.height * scale);\r\n\r\n        screenPoint.x = (screenPoint.x * scale);\r\n        screenPoint.y = (screenPoint.y * scale);\r\n\r\n        rectangle.x += screenPoint.x;\r\n        rectangle.y += screenPoint.y;\r\n\r\n        if(!canvas) return null;\r\n\r\n        rectangle.x += ((canvas.width / 2) + canvas.screenOffsetX);\r\n        rectangle.y += ((canvas.height / 2) + canvas.screenOffsetY);\r\n\r\n        return rectangle;\r\n    }\r\n\r\n    public getCanvasBoundingRectangle(canvasId: number): Rectangle\r\n    {\r\n        return this.getRoomObjectBoundingRectangle(this._activeRoomId, RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM, canvasId);\r\n    }\r\n\r\n    public getFurnitureFloorName(typeId: number): string\r\n    {\r\n        if(!this._roomContentLoader) return null;\r\n\r\n        return this._roomContentLoader.getFurnitureFloorNameForTypeId(typeId);\r\n    }\r\n\r\n    public getFurnitureWallName(typeId: number, extra: string = null): string\r\n    {\r\n        if(!this._roomContentLoader) return null;\r\n\r\n        return this._roomContentLoader.getFurnitureWallNameForTypeId(typeId, extra);\r\n    }\r\n\r\n    public getFurnitureFloorColorIndex(typeId: number): number\r\n    {\r\n        if(!this._roomContentLoader) return null;\r\n\r\n        return this._roomContentLoader.getFurnitureFloorColorIndex(typeId);\r\n    }\r\n\r\n    public getFurnitureWallColorIndex(typeId: number): number\r\n    {\r\n        if(!this._roomContentLoader) return null;\r\n\r\n        return this._roomContentLoader.getFurnitureWallColorIndex(typeId);\r\n    }\r\n\r\n    private getRoomInstanceData(roomId: number): RoomInstanceData\r\n    {\r\n        const existing = this._roomInstanceDatas.get(roomId);\r\n\r\n        if(existing) return existing;\r\n\r\n        const data = new RoomInstanceData(roomId);\r\n\r\n        this._roomInstanceDatas.set(data.roomId, data);\r\n\r\n        return data;\r\n    }\r\n\r\n    public getRoomInstanceModelName(roomId: number): string\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        return instanceData.modelName;\r\n    }\r\n\r\n    public setRoomInstanceModelName(roomId: number, name: string): void\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return;\r\n\r\n        instanceData.setModelName(name);\r\n    }\r\n\r\n    public getRoomTileObjectMap(k: number): TileObjectMap\r\n    {\r\n        const roomInstance = this.getRoomInstanceData(k);\r\n\r\n        if(!roomInstance) return null;\r\n\r\n        return roomInstance.tileObjectMap;\r\n    }\r\n\r\n    private getCurrentRoomCamera(): RoomCamera\r\n    {\r\n        return this.getRoomCamera(this._activeRoomId);\r\n    }\r\n\r\n    private getRoomCamera(roomId: number): RoomCamera\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        return instanceData.roomCamera;\r\n    }\r\n\r\n    public getSelectedRoomObjectData(roomId: number): SelectedRoomObjectData\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        return instanceData.selectedObject;\r\n    }\r\n\r\n    public setSelectedRoomObjectData(roomId: number, data: SelectedRoomObjectData): void\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        instanceData.setSelectedObject(data);\r\n\r\n        if(data) instanceData.setPlacedObject(null);\r\n    }\r\n\r\n    public getPlacedRoomObjectData(roomId: number): SelectedRoomObjectData\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        return instanceData.placedObject;\r\n    }\r\n\r\n    public setPlacedRoomObjectData(roomId: number, data: SelectedRoomObjectData): void\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        instanceData.setPlacedObject(data);\r\n    }\r\n\r\n    public cancelRoomObjectPlacement(): void\r\n    {\r\n        if(!this._roomObjectEventHandler) return;\r\n\r\n        this._roomObjectEventHandler.cancelRoomObjectPlacement(this._activeRoomId);\r\n    }\r\n\r\n    public getFurnitureStackingHeightMap(roomId: number): FurnitureStackingHeightMap\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        return instanceData.furnitureStackingHeightMap;\r\n    }\r\n\r\n    public setFurnitureStackingHeightMap(roomId: number, heightMap: FurnitureStackingHeightMap): void\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        instanceData.setFurnitureStackingHeightMap(heightMap);\r\n    }\r\n\r\n    public getLegacyWallGeometry(roomId: number): LegacyWallGeometry\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return null;\r\n\r\n        return instanceData.legacyGeometry;\r\n    }\r\n\r\n    private createRoomObjectAndInitialize(roomId: number, objectId: number, type: string, category: number): IRoomObjectController\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        return instance.createRoomObjectAndInitalize(objectId, type, category) as IRoomObjectController;\r\n    }\r\n\r\n    public getTotalObjectsForManager(roomId: number, category: number): number\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return 0;\r\n\r\n        return instance.getTotalObjectsForManager(category);\r\n    }\r\n\r\n    public getRoomObject(roomId: number, objectId: number, category: number): IRoomObjectController\r\n    {\r\n        if(!this._ready) return null;\r\n\r\n        let roomIdString = this.getRoomId(roomId);\r\n\r\n        if(roomId === 0) roomIdString = RoomEngine.TEMPORARY_ROOM;\r\n\r\n        return this.getObject(roomIdString, objectId, category);\r\n    }\r\n\r\n    public getObject(roomId: string, objectId: number, category: number): IRoomObjectController\r\n    {\r\n        let roomInstance: IRoomInstance = null;\r\n\r\n        if(this._roomManager) roomInstance = this._roomManager.getRoomInstance(roomId);\r\n\r\n        if(!roomInstance) return null;\r\n\r\n        let roomObject = (roomInstance.getRoomObject(objectId, category) as IRoomObjectController);\r\n\r\n        if(!roomObject)\r\n        {\r\n            switch(category)\r\n            {\r\n                case RoomObjectCategory.FLOOR:\r\n                    this.processPendingFurnitureFloor(this.getRoomIdFromString(roomId), objectId, null);\r\n\r\n                    roomObject = (roomInstance.getRoomObject(objectId, category) as IRoomObjectController);\r\n                    break;\r\n                case RoomObjectCategory.WALL:\r\n                    this.processPendingFurnitureWall(this.getRoomIdFromString(roomId), objectId, null);\r\n\r\n                    roomObject = (roomInstance.getRoomObject(objectId, category) as IRoomObjectController);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return roomObject;\r\n    }\r\n\r\n    public getRoomObjectByIndex(roomId: number, index: number, category: number): IRoomObjectController\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        return instance.getRoomObjectByIndex(index, category) as IRoomObjectController;\r\n    }\r\n\r\n    public getRoomObjectCategoryForType(type: string): number\r\n    {\r\n        if(!type || !this._roomContentLoader) return RoomObjectCategory.MINIMUM;\r\n\r\n        return this._roomContentLoader.getCategoryForType(type);\r\n    }\r\n\r\n    public getRoomObjectCursor(roomId: number): IRoomObjectController\r\n    {\r\n        return this.getObject(this.getRoomId(roomId), RoomEngine.CURSOR_OBJECT_ID, RoomObjectCategory.CURSOR);\r\n    }\r\n\r\n    public getRoomObjectSelectionArrow(roomId: number): IRoomObjectController\r\n    {\r\n        return this.getObject(this.getRoomId(roomId), RoomEngine.ARROW_OBJECT_ID, RoomObjectCategory.CURSOR);\r\n    }\r\n\r\n    public getRoomOwnObject(roomId: number): IRoomObjectController\r\n    {\r\n        return this.getObject(this.getRoomId(roomId), RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM);\r\n    }\r\n\r\n    public getRoomObjectUser(roomId: number, objectId: number): IRoomObjectController\r\n    {\r\n        return this.getObject(this.getRoomId(roomId), objectId, RoomObjectCategory.UNIT);\r\n    }\r\n\r\n    public removeRoomObjectUser(roomId: number, objectId: number): void\r\n    {\r\n        return this.removeRoomObject(roomId, objectId, RoomObjectCategory.UNIT);\r\n    }\r\n\r\n    public createRoomObjectUser(roomId: number, objectId: number, type: string): IRoomObjectController\r\n    {\r\n        return this.createRoomObjectAndInitialize(roomId, objectId, type, RoomObjectCategory.UNIT);\r\n    }\r\n\r\n    public getRoomObjectFloor(roomId: number, objectId: number): IRoomObjectController\r\n    {\r\n        return this.getObject(this.getRoomId(roomId), objectId, RoomObjectCategory.FLOOR);\r\n    }\r\n\r\n    public createRoomObjectFloor(roomId: number, id: number, type: string): IRoomObjectController\r\n    {\r\n        return this.createRoomObjectAndInitialize(roomId, id, type, RoomObjectCategory.FLOOR);\r\n    }\r\n\r\n    public removeRoomObjectFloor(roomId: number, objectId: number, userId: number = -1, _arg_4: boolean = false): void\r\n    {\r\n        const roomInstanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(roomInstanceData) roomInstanceData.removePendingFunitureFloor(objectId);\r\n\r\n        if(this._sessionDataManager && (userId === this._sessionDataManager.userId) && !FurniId.isBuilderClubId(objectId))\r\n        {\r\n            const roomObject = this.getRoomObject(roomId, objectId, RoomObjectCategory.FLOOR);\r\n\r\n            if(roomObject)\r\n            {\r\n                const screenLocation = this.getRoomObjectScreenLocation(roomId, objectId, RoomObjectCategory.FLOOR, this._activeRoomActiveCanvas);\r\n\r\n                if(screenLocation)\r\n                {\r\n                    const disabledPickingAnimation = (roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_DISABLE_PICKING_ANIMATION) === 1);\r\n\r\n                    if(!disabledPickingAnimation)\r\n                    {\r\n                        const typeId = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_TYPE_ID);\r\n                        const extras = roomObject.model.getValue<string>(RoomObjectVariable.FURNITURE_EXTRAS);\r\n                        const dataKey = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_DATA_FORMAT);\r\n                        const objectData = ObjectDataFactory.getData(dataKey);\r\n                        const icon = this.getFurnitureFloorIcon(typeId, null, extras, objectData).data;\r\n\r\n                        if(icon)\r\n                        {\r\n                            const image = TextureUtils.generateImage(icon);\r\n\r\n                            if(this.events)\r\n                            {\r\n                                const event = new NitroToolbarAnimateIconEvent(image, screenLocation.x, screenLocation.y);\r\n\r\n                                event.iconName = ToolbarIconEnum.INVENTORY;\r\n\r\n                                this.events.dispatchEvent(event);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.removeRoomObject(roomId, objectId, RoomObjectCategory.FLOOR);\r\n        this.setMouseDefault(roomId, RoomObjectCategory.FLOOR, objectId);\r\n\r\n        if(_arg_4) this.refreshTileObjectMap(roomId, 'RoomEngine.disposeObjectFurniture()');\r\n    }\r\n\r\n    public getRoomObjectWall(roomId: number, objectId: number): IRoomObjectController\r\n    {\r\n        return this.getObject(this.getRoomId(roomId), objectId, RoomObjectCategory.WALL);\r\n    }\r\n\r\n    public removeRoomObjectWall(roomId: number, objectId: number, userId: number = -1): void\r\n    {\r\n        if(this._sessionDataManager && (userId === this._sessionDataManager.userId) && !FurniId.isBuilderClubId(objectId))\r\n        {\r\n            const roomObject = this.getRoomObject(roomId, objectId, RoomObjectCategory.WALL);\r\n\r\n            if(roomObject && (roomObject.type.indexOf('post_it') === -1) && (roomObject.type.indexOf('external_image_wallitem') === -1))\r\n            {\r\n                const screenLocation = this.getRoomObjectScreenLocation(roomId, objectId, RoomObjectCategory.WALL, this._activeRoomActiveCanvas);\r\n\r\n                if(screenLocation)\r\n                {\r\n                    const typeId = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_TYPE_ID);\r\n                    const objectData = roomObject.model.getValue<string>(RoomObjectVariable.FURNITURE_DATA);\r\n                    const icon = this.getFurnitureWallIcon(typeId, null, objectData).data;\r\n\r\n                    if(icon)\r\n                    {\r\n                        const image = TextureUtils.generateImage(icon);\r\n\r\n                        if(this.events)\r\n                        {\r\n                            const event = new NitroToolbarAnimateIconEvent(image, screenLocation.x, screenLocation.y);\r\n\r\n                            event.iconName = ToolbarIconEnum.INVENTORY;\r\n\r\n                            this.events.dispatchEvent(event);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.removeRoomObject(roomId, objectId, RoomObjectCategory.WALL);\r\n        this.updateRoomObjectMask(roomId, objectId, false);\r\n        this.setMouseDefault(roomId, RoomObjectCategory.WALL, objectId);\r\n    }\r\n\r\n    public createRoomObjectWall(roomId: number, id: number, type: string): IRoomObjectController\r\n    {\r\n        return this.createRoomObjectAndInitialize(roomId, id, type, RoomObjectCategory.WALL);\r\n    }\r\n\r\n    private removeRoomObject(roomId: number, objectId: number, category: number): void\r\n    {\r\n        const instance = this.getRoomInstance(roomId);\r\n\r\n        if(!instance) return null;\r\n\r\n        instance.removeRoomObject(objectId, category);\r\n\r\n        if(this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.REMOVED, roomId, objectId, category));\r\n    }\r\n\r\n    public addFurnitureFloor(roomId: number, id: number, typeId: number, location: IVector3D, direction: IVector3D, state: number, objectData: IObjectData, extra: number = NaN, expires: number = -1, usagePolicy: number = 0, ownerId: number = 0, ownerName: string = '', synchronized: boolean = true, realRoomObject: boolean = true, sizeZ: number = -1): boolean\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return false;\r\n\r\n        const furnitureData = new RoomFurnitureData(id, typeId, null, location, direction, state, objectData, extra, expires, usagePolicy, ownerId, ownerName, synchronized, realRoomObject, sizeZ);\r\n\r\n        instanceData.addPendingFurnitureFloor(furnitureData);\r\n\r\n        return true;\r\n    }\r\n\r\n    public addFurnitureFloorByTypeName(roomId: number, id: number, typeName: string, location: IVector3D, direction: IVector3D, state: number, objectData: IObjectData, extra: number = NaN, expires: number = -1, usagePolicy: number = 0, ownerId: number = 0, ownerName: string = '', synchronized: boolean = true, realRoomObject: boolean = true, sizeZ: number = -1): boolean\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return false;\r\n\r\n        const furnitureData = new RoomFurnitureData(id, 0, typeName, location, direction, state, objectData, extra, expires, usagePolicy, ownerId, ownerName, synchronized, realRoomObject, sizeZ);\r\n\r\n        instanceData.addPendingFurnitureFloor(furnitureData);\r\n\r\n        return true;\r\n    }\r\n\r\n    public addFurnitureWall(roomId: number, id: number, typeId: number, location: IVector3D, direction: IVector3D, state: number, extra: string, expires: number = -1, usagePolicy: number = 0, ownerId: number = 0, ownerName: string = '', realRoomObject: boolean = true): boolean\r\n    {\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(!instanceData) return false;\r\n\r\n        const objectData = new LegacyDataType();\r\n\r\n        objectData.setString(extra);\r\n\r\n        const furnitureData = new RoomFurnitureData(id, typeId, null, location, direction, state, objectData, NaN, expires, usagePolicy, ownerId, ownerName, true, realRoomObject);\r\n\r\n        instanceData.addPendingFurnitureWall(furnitureData);\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectFloor(roomId: number, objectId: number, location: IVector3D, direction: IVector3D, state: number, data: IObjectData, extra: number = NaN): boolean\r\n    {\r\n        const object = this.getRoomObjectFloor(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new RoomObjectUpdateMessage(location, direction));\r\n        object.processUpdateMessage(new ObjectDataUpdateMessage(state, data, extra));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectWall(roomId: number, objectId: number, location: IVector3D, direction: IVector3D, state: number, extra: string = null): boolean\r\n    {\r\n        const object = this.getRoomObjectWall(roomId, objectId);\r\n\r\n        if(!object || !object.logic) return false;\r\n\r\n        const updateMessage = new RoomObjectUpdateMessage(location, direction);\r\n        const data = new LegacyDataType();\r\n        const dataUpdateMessage = new ObjectDataUpdateMessage(state, data);\r\n\r\n        data.setString(extra);\r\n\r\n        object.logic.processUpdateMessage(updateMessage);\r\n        object.logic.processUpdateMessage(dataUpdateMessage);\r\n\r\n        this.updateRoomObjectMask(roomId, objectId);\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectWallItemData(roomId: number, objectId: number, data: string): boolean\r\n    {\r\n        const object = this.getRoomObjectWall(roomId, objectId);\r\n\r\n        if(!object || !object.logic) return false;\r\n\r\n        object.logic.processUpdateMessage(new ObjectItemDataUpdateMessage(data));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectFloorHeight(roomId: number, objectId: number, height: number): boolean\r\n    {\r\n        const object = this.getRoomObjectFloor(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectHeightUpdateMessage(null, null, height));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectFloorExpiration(roomId: number, objectId: number, expires: number): boolean\r\n    {\r\n        const object = this.getRoomObjectFloor(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, expires);\r\n        object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectWallExpiration(roomId: number, objectId: number, expires: number): boolean\r\n    {\r\n        const object = this.getRoomObjectWall(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRY_TIME, expires);\r\n        object.model.setValue(RoomObjectVariable.FURNITURE_EXPIRTY_TIMESTAMP, Nitro.instance.time);\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectMask(roomId: number, objectId: number, _arg_3: boolean = true): void\r\n    {\r\n        const maskName = RoomObjectCategory.WALL + '_' + objectId;\r\n        const roomObject = this.getRoomObjectWall(roomId, objectId);\r\n\r\n        let maskUpdate: ObjectRoomMaskUpdateMessage = null;\r\n\r\n        if(roomObject && roomObject.model)\r\n        {\r\n            if(roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_USES_PLANE_MASK) > 0)\r\n            {\r\n                const maskType = roomObject.model.getValue<string>(RoomObjectVariable.FURNITURE_PLANE_MASK_TYPE);\r\n                const location = roomObject.getLocation();\r\n\r\n                if(_arg_3) maskUpdate = new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.ADD_MASK, maskName, maskType, location);\r\n                else maskUpdate = new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.REMOVE_MASK, maskName);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            maskUpdate = new ObjectRoomMaskUpdateMessage(ObjectRoomMaskUpdateMessage.REMOVE_MASK, maskName);\r\n        }\r\n\r\n        const roomOwnObject = this.getRoomOwnObject(roomId);\r\n\r\n        if(roomOwnObject && roomOwnObject.logic && maskUpdate) roomOwnObject.logic.processUpdateMessage(maskUpdate);\r\n    }\r\n\r\n    public rollRoomObjectFloor(roomId: number, objectId: number, location: IVector3D, targetLocation: IVector3D): void\r\n    {\r\n        const object = this.getRoomObjectFloor(roomId, objectId);\r\n\r\n        if(!object) return;\r\n\r\n        object.processUpdateMessage(new ObjectMoveUpdateMessage(location, targetLocation, null, !!targetLocation));\r\n    }\r\n\r\n    public updateRoomObjectWallLocation(roomId: number, objectId: number, location: IVector3D): boolean\r\n    {\r\n        const roomObject = this.getRoomObjectWall(roomId, objectId);\r\n\r\n        if(!roomObject) return false;\r\n\r\n        if(roomObject.logic) roomObject.logic.processUpdateMessage(new ObjectMoveUpdateMessage(location, null, null));\r\n\r\n        this.updateRoomObjectMask(roomId, objectId);\r\n\r\n        return true;\r\n    }\r\n\r\n    public addRoomObjectUser(roomId: number, objectId: number, location: IVector3D, direction: IVector3D, headDirection: number, type: number, figure: string): boolean\r\n    {\r\n        const existing = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(existing) return false;\r\n\r\n        let objectType = RoomObjectUserType.getTypeString(type);\r\n\r\n        if(objectType === RoomObjectUserType.PET) objectType = this.getPetType(figure);\r\n\r\n        const object = this.createRoomObjectUser(roomId, objectId, objectType);\r\n\r\n        if(!object) return false;\r\n\r\n        //object.model.setValue(RoomObjectVariable.FIGURE_HIGHLIGHT_ENABLE, 1);\r\n\r\n        object.processUpdateMessage(new ObjectAvatarUpdateMessage(this.fixedUserLocation(roomId, location), null, direction, headDirection, false, 0));\r\n\r\n        if(figure) object.processUpdateMessage(new ObjectAvatarFigureUpdateMessage(figure));\r\n\r\n        if(this.events) this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.ADDED, roomId, objectId, RoomObjectCategory.UNIT));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserLocation(roomId: number, objectId: number, location: IVector3D, targetLocation: IVector3D, canStandUp: boolean = false, baseY: number = 0, direction: IVector3D = null, headDirection: number = NaN): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        if(!location) location = object.getLocation();\r\n\r\n        if(!direction) direction = object.getDirection();\r\n\r\n        if(isNaN(headDirection)) headDirection = object.model.getValue<number>(RoomObjectVariable.HEAD_DIRECTION);\r\n\r\n        object.processUpdateMessage(new ObjectAvatarUpdateMessage(this.fixedUserLocation(roomId, location), this.fixedUserLocation(roomId, targetLocation), direction, headDirection, canStandUp, baseY));\r\n\r\n        const roomSession = ((this._roomSessionManager && this._roomSessionManager.getSession(roomId)) || null);\r\n\r\n        if(roomSession && (roomSession.ownRoomIndex === objectId))\r\n        {\r\n            this._logicFactory.events.dispatchEvent(new RoomToObjectOwnAvatarMoveEvent(RoomToObjectOwnAvatarMoveEvent.ROAME_MOVE_TO, targetLocation));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private fixedUserLocation(roomId: number, location: IVector3D): IVector3D\r\n    {\r\n        if(!location) return null;\r\n\r\n        const heightMap = this.getFurnitureStackingHeightMap(roomId);\r\n        const wallGeometry = this.getLegacyWallGeometry(roomId);\r\n\r\n        if(!heightMap || !wallGeometry) return location;\r\n\r\n        let _local_5 = location.z;\r\n        const _local_6 = heightMap.getTileHeight(location.x, location.y);\r\n        const _local_7 = wallGeometry.getHeight(location.x, location.y);\r\n\r\n        if((Math.abs((_local_5 - _local_6)) < 0.1) && (Math.abs((_local_6 - _local_7)) < 0.1))\r\n        {\r\n            _local_5 = wallGeometry.getFloorAltitude(location.x, location.y);\r\n        }\r\n\r\n        return new Vector3d(location.x, location.y, _local_5);\r\n    }\r\n\r\n    public updateRoomObjectUserAction(roomId: number, objectId: number, action: string, value: number, parameter: string = null): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        let message: ObjectStateUpdateMessage = null;\r\n\r\n        switch(action)\r\n        {\r\n            case RoomObjectVariable.FIGURE_TALK:\r\n                message = new ObjectAvatarChatUpdateMessage(value);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_SLEEP:\r\n                message = new ObjectAvatarSleepUpdateMessage(value === 1);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_IS_TYPING:\r\n                message = new ObjectAvatarTypingUpdateMessage(value === 1);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_IS_MUTED:\r\n                message = new ObjectAvatarMutedUpdateMessage(value === 1);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_CARRY_OBJECT:\r\n                message = new ObjectAvatarCarryObjectUpdateMessage(value, parameter);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_USE_OBJECT:\r\n                message = new ObjectAvatarUseObjectUpdateMessage(value);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_DANCE:\r\n                message = new ObjectAvatarDanceUpdateMessage(value);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_GAINED_EXPERIENCE:\r\n                message = new ObjectAvatarExperienceUpdateMessage(value);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_NUMBER_VALUE:\r\n                message = new ObjectAvatarPlayerValueUpdateMessage(value);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_SIGN:\r\n                message = new ObjectAvatarSignUpdateMessage(value);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_EXPRESSION:\r\n                message = new ObjectAvatarExpressionUpdateMessage(value);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_IS_PLAYING_GAME:\r\n                message = new ObjectAvatarPlayingGameUpdateMessage(value === 1);\r\n                break;\r\n            case RoomObjectVariable.FIGURE_GUIDE_STATUS:\r\n                message = new ObjectAvatarGuideStatusUpdateMessage(value);\r\n                break;\r\n        }\r\n\r\n        if(!message) return false;\r\n\r\n        object.processUpdateMessage(message);\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserFigure(roomId: number, objectId: number, figure: string, gender: string = null, subType: string = null, isRiding: boolean = false): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectAvatarFigureUpdateMessage(figure, gender, subType, isRiding));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserFlatControl(roomId: number, objectId: number, level: string): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectAvatarFlatControlUpdateMessage(parseInt(level)));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserEffect(roomId: number, objectId: number, effectId: number, delay: number = 0): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectAvatarEffectUpdateMessage(effectId, delay));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserGesture(roomId: number, objectId: number, gestureId: number): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectAvatarGestureUpdateMessage(gestureId));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserPetGesture(roomId: number, objectId: number, gesture: string): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectAvatarPetGestureUpdateMessage(gesture));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserPosture(roomId: number, objectId: number, type: string, parameter: string = null): boolean\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return false;\r\n\r\n        object.processUpdateMessage(new ObjectAvatarPostureUpdateMessage(type, parameter));\r\n\r\n        return true;\r\n    }\r\n\r\n    public updateRoomObjectUserOwn(roomId: number, objectId: number): void\r\n    {\r\n        const object = this.getRoomObjectUser(roomId, objectId);\r\n\r\n        if(!object) return;\r\n\r\n        object.processUpdateMessage(new ObjectAvatarOwnMessage());\r\n    }\r\n\r\n    public useRoomObject(objectId: number, category: number): boolean\r\n    {\r\n        const roomObject = this.getRoomObject(this._activeRoomId, objectId, category);\r\n\r\n        if(roomObject)\r\n        {\r\n            const eventHandler = roomObject.logic;\r\n\r\n            if(eventHandler)\r\n            {\r\n                eventHandler.useObject();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public objectInitialized(roomId: string, objectId: number, category: number): void\r\n    {\r\n        const id = this.getRoomIdFromString(roomId);\r\n\r\n        if(category === RoomObjectCategory.WALL)\r\n        {\r\n            this.updateRoomObjectMask(id, objectId);\r\n        }\r\n\r\n        const object = this.getRoomObject(id, objectId, category);\r\n\r\n        if(object && object.model && object.logic)\r\n        {\r\n            const dataFormat = object.model.getValue<number>(RoomObjectVariable.FURNITURE_DATA_FORMAT);\r\n\r\n            if(!isNaN(dataFormat))\r\n            {\r\n                const data = ObjectDataFactory.getData(dataFormat);\r\n\r\n                data.initializeFromRoomObjectModel(object.model);\r\n\r\n                object.processUpdateMessage(new ObjectDataUpdateMessage(object.getState(0), data));\r\n            }\r\n\r\n            this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.CONTENT_UPDATED, id, objectId, category));\r\n        }\r\n\r\n        if(roomId !== RoomEngine.TEMPORARY_ROOM) this.addObjectToTileMap(id, object);\r\n    }\r\n\r\n    public changeObjectModelData(roomId: number, objectId: number, category: number, numberKey: string, numberValue: number): boolean\r\n    {\r\n        const roomObject = this.getObject(this.getRoomId(roomId), objectId, category);\r\n\r\n        if(!roomObject || !roomObject.logic) return false;\r\n\r\n        const message = new ObjectModelDataUpdateMessage(numberKey, numberValue);\r\n\r\n        roomObject.processUpdateMessage(message);\r\n\r\n        return true;\r\n    }\r\n\r\n    public changeObjectState(roomId: number, objectId: number, category: number): void\r\n    {\r\n        const roomObject = this.getObject(this.getRoomId(roomId), objectId, category);\r\n\r\n        if(!roomObject || !roomObject.model) return;\r\n\r\n        let stateIndex = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_AUTOMATIC_STATE_INDEX);\r\n\r\n        if(isNaN(stateIndex)) stateIndex = 1;\r\n        else stateIndex = (stateIndex + 1);\r\n\r\n        roomObject.model.setValue(RoomObjectVariable.FURNITURE_AUTOMATIC_STATE_INDEX, stateIndex);\r\n\r\n        const objectDataKey = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_DATA_FORMAT);\r\n        const objectData = ObjectDataFactory.getData(objectDataKey);\r\n\r\n        objectData.initializeFromRoomObjectModel(roomObject.model);\r\n\r\n        if(roomObject.logic) roomObject.logic.processUpdateMessage(new ObjectDataUpdateMessage(stateIndex, objectData));\r\n    }\r\n\r\n    public loadRoomObjectBadgeImage(roomId: number, objectId: number, objectCategory: number, badgeId: string, groupBadge: boolean = true): void\r\n    {\r\n        if(!this._sessionDataManager) return;\r\n\r\n        let roomObject: IRoomObjectController = null;\r\n\r\n        if(roomId === 0)\r\n        {\r\n            const room = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\r\n\r\n            if(room) roomObject = (room.getRoomObject(objectId, objectCategory) as IRoomObjectController);\r\n        }\r\n        else\r\n        {\r\n            roomObject = this.getRoomObjectFloor(roomId, objectId);\r\n        }\r\n\r\n        if(!roomObject || !roomObject.logic) return;\r\n\r\n        let badgeName = (groupBadge) ? this._sessionDataManager.loadGroupBadgeImage(badgeId) : this._sessionDataManager.loadBadgeImage(badgeId);\r\n\r\n        if(!badgeName)\r\n        {\r\n            badgeName = 'loading_icon';\r\n\r\n            if(!this._badgeListenerObjects) this._badgeListenerObjects = new Map();\r\n\r\n            if(!this._badgeListenerObjects.size)\r\n            {\r\n                this._sessionDataManager.events.addEventListener(BadgeImageReadyEvent.IMAGE_READY, this.onBadgeImageReadyEvent);\r\n            }\r\n\r\n            let listeners = this._badgeListenerObjects.get(badgeId);\r\n\r\n            if(!listeners) listeners = [];\r\n\r\n            listeners.push(new RoomObjectBadgeImageAssetListener(roomObject, groupBadge));\r\n\r\n            this._badgeListenerObjects.set(badgeId, listeners);\r\n        }\r\n        else\r\n        {\r\n            this.putBadgeInObjectAssets(roomObject, badgeId, groupBadge);\r\n        }\r\n\r\n        roomObject.logic.processUpdateMessage(new ObjectGroupBadgeUpdateMessage(badgeId, badgeName));\r\n    }\r\n\r\n    private onBadgeImageReadyEvent(k: BadgeImageReadyEvent): void\r\n    {\r\n        if(!this._sessionDataManager) return;\r\n\r\n        const listeners = this._badgeListenerObjects && this._badgeListenerObjects.get(k.badgeId);\r\n\r\n        if(!listeners) return;\r\n\r\n        for(const listener of listeners)\r\n        {\r\n            if(!listener) continue;\r\n\r\n            this.putBadgeInObjectAssets(listener.object, k.badgeId, listener.groupBadge);\r\n\r\n            const badgeName = (listener.groupBadge) ? this._sessionDataManager.loadGroupBadgeImage(k.badgeId) : this._sessionDataManager.loadBadgeImage(k.badgeId);\r\n\r\n            if(listener.object && listener.object.logic) listener.object.logic.processUpdateMessage(new ObjectGroupBadgeUpdateMessage(k.badgeId, badgeName));\r\n        }\r\n\r\n        this._badgeListenerObjects.delete(k.badgeId);\r\n\r\n        if(!this._badgeListenerObjects.size)\r\n        {\r\n            this._sessionDataManager.events.removeEventListener(BadgeImageReadyEvent.IMAGE_READY, this.onBadgeImageReadyEvent);\r\n        }\r\n    }\r\n\r\n    private putBadgeInObjectAssets(object: IRoomObjectController, badgeId: string, groupBadge: boolean = false): void\r\n    {\r\n        if(!this._roomContentLoader || !this._sessionDataManager) return;\r\n\r\n        const badgeName = (groupBadge) ? this._sessionDataManager.loadGroupBadgeImage(badgeId) : this._sessionDataManager.loadBadgeImage(badgeId);\r\n        const badgeImage = (groupBadge) ? this._sessionDataManager.getGroupBadgeImage(badgeId) : this._sessionDataManager.getBadgeImage(badgeId);\r\n\r\n        if(badgeImage) this._roomContentLoader.addAssetToCollection(object.type, badgeName, badgeImage, false);\r\n    }\r\n\r\n    public dispatchMouseEvent(canvasId: number, x: number, y: number, type: string, altKey: boolean, ctrlKey: boolean, shiftKey: boolean, buttonDown: boolean): void\r\n    {\r\n        const canvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, canvasId);\r\n\r\n        if(!canvas) return;\r\n\r\n        const overlay = this.getRenderingCanvasOverlay(canvas);\r\n        const sprite = this.getOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE);\r\n\r\n        if(sprite)\r\n        {\r\n            const rectangle = sprite.getLocalBounds();\r\n\r\n            sprite.x = (x - (rectangle.width / 2));\r\n            sprite.y = (y - (rectangle.height / 2));\r\n        }\r\n\r\n        if(!this.handleRoomDragging(canvas, x, y, type, altKey, ctrlKey, shiftKey))\r\n        {\r\n            if(!canvas.handleMouseEvent(x, y, type, altKey, ctrlKey, shiftKey, buttonDown))\r\n            {\r\n                let eventType: string = null;\r\n\r\n                if(type === MouseEventType.MOUSE_CLICK)\r\n                {\r\n                    if(this.events)\r\n                    {\r\n                        this.events.dispatchEvent(new RoomEngineObjectEvent(RoomEngineObjectEvent.DESELECTED, this._activeRoomId, -1, RoomObjectCategory.MINIMUM));\r\n                    }\r\n\r\n                    eventType = RoomObjectMouseEvent.CLICK;\r\n                }\r\n                else\r\n                {\r\n                    if(type === MouseEventType.MOUSE_MOVE) eventType = RoomObjectMouseEvent.MOUSE_MOVE;\r\n\r\n                    else if(type === MouseEventType.MOUSE_DOWN) eventType = RoomObjectMouseEvent.MOUSE_DOWN;\r\n\r\n                    else if(type === MouseEventType.MOUSE_DOWN_LONG) eventType = RoomObjectMouseEvent.MOUSE_DOWN_LONG;\r\n\r\n                    else if(type === MouseEventType.MOUSE_UP) eventType = RoomObjectMouseEvent.MOUSE_UP;\r\n                }\r\n\r\n                this._roomObjectEventHandler.handleRoomObjectEvent(new RoomObjectMouseEvent(eventType, this.getRoomObject(this._activeRoomId, RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM), null, altKey), this._activeRoomId);\r\n            }\r\n        }\r\n\r\n        this._activeRoomActiveCanvas = canvasId;\r\n        this._activeRoomActiveCanvasMouseX = x;\r\n        this._activeRoomActiveCanvasMouseY = y;\r\n    }\r\n\r\n    private handleRoomDragging(canvas: IRoomRenderingCanvas, x: number, y: number, type: string, altKey: boolean, ctrlKey: boolean, shiftKey: boolean): boolean\r\n    {\r\n        let offsetX = (x - this._activeRoomActiveCanvasMouseX);\r\n        let offsetY = (y - this._activeRoomActiveCanvasMouseY);\r\n\r\n        if(type === MouseEventType.MOUSE_DOWN)\r\n        {\r\n            if(!altKey && !ctrlKey && !shiftKey && !this.isDecorating)\r\n            {\r\n                if(this._roomAllowsDragging)\r\n                {\r\n                    this._activeRoomIsDragged = true;\r\n                    this._activeRoomWasDragged = false;\r\n                    this._activeRoomDragStartX = this._activeRoomActiveCanvasMouseX;\r\n                    this._activeRoomDragStartY = this._activeRoomActiveCanvasMouseY;\r\n                }\r\n            }\r\n        }\r\n\r\n        else if(type === MouseEventType.MOUSE_UP)\r\n        {\r\n            if(this._activeRoomIsDragged)\r\n            {\r\n                this._activeRoomIsDragged = false;\r\n\r\n                if(this._activeRoomWasDragged)\r\n                {\r\n                    const instanceData = this.getRoomInstanceData(this._activeRoomId);\r\n\r\n                    if(instanceData)\r\n                    {\r\n                        const camera = instanceData.roomCamera;\r\n\r\n                        if(camera)\r\n                        {\r\n                            if(this.useOffsetScrolling)\r\n                            {\r\n                                if(!camera.isMoving)\r\n                                {\r\n                                    camera.centeredLocX = false;\r\n                                    camera.centeredLocY = false;\r\n                                }\r\n\r\n                                camera.resetLocation(new Vector3d(-(canvas.screenOffsetX), -(canvas.screenOffsetY)));\r\n                            }\r\n\r\n                            if(this._roomDraggingAlwaysCenters) camera.reset();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        else if(type === MouseEventType.MOUSE_MOVE)\r\n        {\r\n            if(this._activeRoomIsDragged)\r\n            {\r\n                if(!this._activeRoomWasDragged)\r\n                {\r\n                    offsetX = (x - this._activeRoomDragStartX);\r\n                    offsetY = (y - this._activeRoomDragStartY);\r\n\r\n                    if(((((offsetX <= -(RoomEngine.DRAG_THRESHOLD)) || (offsetX >= RoomEngine.DRAG_THRESHOLD)) || (offsetY <= -(RoomEngine.DRAG_THRESHOLD))) || (offsetY >= RoomEngine.DRAG_THRESHOLD)))\r\n                    {\r\n                        this._activeRoomWasDragged = true;\r\n                    }\r\n\r\n                    offsetX = 0;\r\n                    offsetY = 0;\r\n                }\r\n\r\n                if(((!(offsetX == 0)) || (!(offsetY == 0))))\r\n                {\r\n                    this._activeRoomDragX += offsetX;\r\n                    this._activeRoomDragY += offsetY;\r\n\r\n                    this._activeRoomWasDragged = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        else if((type === MouseEventType.MOUSE_CLICK) || (type === MouseEventType.DOUBLE_CLICK))\r\n        {\r\n            this._activeRoomIsDragged = false;\r\n\r\n            if(this._activeRoomWasDragged)\r\n            {\r\n                this._activeRoomWasDragged = false;\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public updateMousePointer(type: string, objectId: number, objectType: string): void\r\n    {\r\n        const category = this.getRoomObjectCategoryForType(objectType);\r\n\r\n        switch(type)\r\n        {\r\n            case RoomObjectFurnitureActionEvent.MOUSE_BUTTON:\r\n                this.setMouseButton(this._activeRoomId, category, objectId);\r\n                return;\r\n            default:\r\n                this.setMouseDefault(this._activeRoomId, category, objectId);\r\n                return;\r\n        }\r\n    }\r\n\r\n    private setMouseButton(roomId: number, category: number, objectId: number): void\r\n    {\r\n        if(!this._roomSessionManager) return;\r\n\r\n        const session = this._roomSessionManager.getSession(roomId);\r\n\r\n        if(!session) return;\r\n\r\n        if(((category !== RoomObjectCategory.FLOOR) && (category !== RoomObjectCategory.WALL)) || ((session.controllerLevel >= RoomControllerLevel.GUEST)))\r\n        {\r\n            const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n            if(instanceData)\r\n            {\r\n                if(instanceData.addButtonMouseCursorOwner((category + '_' + objectId))) this._mouseCursorUpdate = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private setMouseDefault(roomId: number, category: number, objectId: number): void\r\n    {\r\n        if(!this._roomSessionManager) return;\r\n\r\n        const instanceData = this.getRoomInstanceData(roomId);\r\n\r\n        if(instanceData)\r\n        {\r\n            if(instanceData.removeButtonMouseCursorOwner((category + '_' + objectId))) this._mouseCursorUpdate = true;\r\n        }\r\n    }\r\n\r\n    public processRoomObjectOperation(objectId: number, category: number, operation: string): boolean\r\n    {\r\n        if(!this._roomObjectEventHandler) return false;\r\n\r\n        this._roomObjectEventHandler.modifyRoomObject(this._activeRoomId, objectId, category, operation);\r\n    }\r\n\r\n    public modifyRoomObjectDataWithMap(objectId: number, category: number, operation: string, data: Map<string, string>): boolean\r\n    {\r\n        if(!this._roomObjectEventHandler) return false;\r\n\r\n        if(category !== RoomObjectCategory.FLOOR) return;\r\n\r\n        this._roomObjectEventHandler.modifyRoomObjectDataWithMap(this._activeRoomId, objectId, category, operation, data);\r\n    }\r\n\r\n    public modifyRoomObjectData(objectId: number, category: number, colorHex: string, data: string): boolean\r\n    {\r\n        if(!this._roomObjectEventHandler) return false;\r\n\r\n        if(category !== RoomObjectCategory.WALL) return;\r\n\r\n        this._roomObjectEventHandler.modifyWallItemData(this._activeRoomId, objectId, colorHex, data);\r\n    }\r\n\r\n    private processRoomObjectEvent(event: RoomObjectEvent): void\r\n    {\r\n        if(!this._roomObjectEventHandler) return;\r\n\r\n        const roomIdString = this.getRoomObjectRoomId(event.object);\r\n\r\n        if(!roomIdString) return;\r\n\r\n        const roomId = this.getRoomIdFromString(roomIdString);\r\n\r\n        this._roomObjectEventHandler.handleRoomObjectEvent(event, roomId);\r\n    }\r\n\r\n    public processRoomObjectPlacement(placementSource: string, id: number, category: number, typeId: number, extra: string = null, stuffData: IObjectData = null, state: number = -1, frameNumber: number = -1, posture: string = null): boolean\r\n    {\r\n        const roomInstance = this.getRoomInstance(this._activeRoomId);\r\n\r\n        if(!roomInstance || (roomInstance.model.getValue<number>(RoomVariableEnum.ROOM_IS_PUBLIC) !== 0)) return false;\r\n\r\n        if(!this._roomObjectEventHandler) return false;\r\n\r\n        return this._roomObjectEventHandler.processRoomObjectPlacement(placementSource, this._activeRoomId, id, category, typeId, extra, stuffData, state, frameNumber, posture);\r\n    }\r\n\r\n    public getRoomObjectScreenLocation(roomId: number, objectId: number, objectType: number, canvasId: number = -1): Point\r\n    {\r\n        if(canvasId == -1) canvasId = this._activeRoomActiveCanvas;\r\n\r\n        const geometry = this.getRoomInstanceGeometry(roomId, canvasId);\r\n\r\n        if(!geometry) return null;\r\n\r\n        const roomObject = this.getRoomObject(roomId, objectId, objectType);\r\n\r\n        if(!roomObject) return null;\r\n\r\n        const screenPoint = geometry.getScreenPoint(roomObject.getLocation());\r\n\r\n        if(!screenPoint) return null;\r\n\r\n        const renderingCanvas = this.getRoomInstanceRenderingCanvas(roomId, canvasId);\r\n\r\n        if(!renderingCanvas) return null;\r\n\r\n        screenPoint.x = (screenPoint.x * renderingCanvas.scale);\r\n        screenPoint.y = (screenPoint.y * renderingCanvas.scale);\r\n\r\n        screenPoint.x += ((renderingCanvas.width / 2) + renderingCanvas.screenOffsetX);\r\n        screenPoint.y += ((renderingCanvas.height / 2) + renderingCanvas.screenOffsetY);\r\n\r\n        return screenPoint;\r\n    }\r\n\r\n    public selectRoomObject(roomId: number, objectId: number, objectCategory: number): void\r\n    {\r\n        if(!this._roomObjectEventHandler) return;\r\n\r\n        this._roomObjectEventHandler.setSelectedObject(roomId, objectId, objectCategory);\r\n    }\r\n\r\n    public setSelectedAvatar(roomId: number, objectId: number): void\r\n    {\r\n        if(this._roomObjectEventHandler) return;\r\n\r\n        this._roomObjectEventHandler.setSelectedAvatar(roomId, objectId, true);\r\n    }\r\n\r\n    public cancelRoomObjectInsert(): void\r\n    {\r\n        if(!this._roomObjectEventHandler) return;\r\n\r\n        this._roomObjectEventHandler.cancelRoomObjectInsert(this._activeRoomId);\r\n    }\r\n\r\n    private addOverlayIconSprite(k: NitroSprite, _arg_2: string, _arg_3: Texture<Resource>, scale: number = 1): NitroSprite\r\n    {\r\n        if(!k || !_arg_3) return;\r\n\r\n        let sprite = this.getOverlayIconSprite(k, _arg_2);\r\n\r\n        if(sprite) return null;\r\n\r\n        sprite = new NitroSprite(_arg_3);\r\n\r\n        sprite.name = _arg_2;\r\n\r\n        sprite.scale.set(scale);\r\n\r\n        k.addChild(sprite);\r\n\r\n        return sprite;\r\n    }\r\n\r\n    public onRoomContentLoaded(id: number, assetName: string, success: boolean): void\r\n    {\r\n        if(!this._roomContentLoader || (id === -1)) return;\r\n\r\n        this._thumbnailObjectIdBank.freeNumber((id - 1));\r\n\r\n        const listeners = this._thumbnailCallbacks.get(assetName);\r\n\r\n        if(listeners)\r\n        {\r\n            this._thumbnailCallbacks.delete(assetName);\r\n\r\n            const image = this._roomContentLoader.getImage(assetName);\r\n\r\n            if(image)\r\n            {\r\n                for(const listener of listeners)\r\n                {\r\n                    if(!listener) continue;\r\n\r\n                    listener.imageReady(id, null, image);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public setObjectMoverIconSprite(objectId: number, category: number, _arg_3: boolean, instanceData: string = null, stuffData: IObjectData = null, state: number = -1, frameNumber: number = -1, posture: string = null): void\r\n    {\r\n        let type: string = null;\r\n        let colorIndex = 0;\r\n        let imageResult: ImageResult = null;\r\n        const scale = 1;\r\n\r\n        if(_arg_3)\r\n        {\r\n            imageResult = this.getRoomObjectImage(this._activeRoomId, objectId, category, new Vector3d(), 1, null);\r\n        }\r\n        else\r\n        {\r\n            if(this._roomContentLoader)\r\n            {\r\n                if(category === RoomObjectCategory.FLOOR)\r\n                {\r\n                    type = this._roomContentLoader.getFurnitureFloorNameForTypeId(objectId);\r\n                    colorIndex = this._roomContentLoader.getFurnitureFloorColorIndex(objectId);\r\n                }\r\n\r\n                else if(category === RoomObjectCategory.WALL)\r\n                {\r\n                    type = this._roomContentLoader.getFurnitureWallNameForTypeId(objectId, instanceData);\r\n                    colorIndex = this._roomContentLoader.getFurnitureWallColorIndex(objectId);\r\n                }\r\n\r\n                if(category === RoomObjectCategory.UNIT)\r\n                {\r\n                    type = RoomObjectUserType.getTypeString(objectId);\r\n\r\n                    if(type === 'pet')\r\n                    {\r\n                        type = this.getPetType(instanceData);\r\n\r\n                        const petFigureData = new PetFigureData(instanceData);\r\n\r\n                        imageResult = this.getRoomObjectPetImage(petFigureData.typeId, petFigureData.paletteId, petFigureData.color, new Vector3d(180), 64, null, true, 0, petFigureData.customParts, posture);\r\n                    }\r\n                    else\r\n                    {\r\n                        imageResult = this.getGenericRoomObjectImage(type, instanceData, new Vector3d(180), 64, null, 0, null, stuffData, state, frameNumber, posture);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    imageResult = this.getGenericRoomObjectImage(type, colorIndex.toString(), new Vector3d(), 1, null, 0, instanceData, stuffData, state, frameNumber, posture);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!imageResult || !imageResult.data) return;\r\n\r\n        const canvas = this.getActiveRoomInstanceRenderingCanvas();\r\n\r\n        if(!canvas) return;\r\n\r\n        const overlay = this.getRenderingCanvasOverlay(canvas);\r\n\r\n        this.removeOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE);\r\n\r\n        const _local_15 = this.addOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE, imageResult.data, scale);\r\n\r\n        if(_local_15)\r\n        {\r\n            _local_15.x = (this._activeRoomActiveCanvasMouseX - (imageResult.data.width / 2));\r\n            _local_15.y = (this._activeRoomActiveCanvasMouseY - (imageResult.data.height / 2));\r\n        }\r\n    }\r\n\r\n    public getRoomObjectImage(roomId: number, objectId: number, category: number, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor: number = 0): ImageResult\r\n    {\r\n        if(!this._roomManager) return null;\r\n\r\n        let id = -1;\r\n        let type: string = null;\r\n        let data: IObjectData = null;\r\n        let color = '';\r\n        let extras: string = null;\r\n\r\n        const roomIdString = this.getRoomId(roomId);\r\n        const roomInstance = this._roomManager.getRoomInstance(roomIdString);\r\n\r\n        if(roomInstance)\r\n        {\r\n            const roomObject = roomInstance.getRoomObject(objectId, category);\r\n\r\n            if(roomObject && roomObject.model)\r\n            {\r\n                id = roomObject.id;\r\n                type = roomObject.type;\r\n\r\n                switch(category)\r\n                {\r\n                    case RoomObjectCategory.FLOOR:\r\n                    case RoomObjectCategory.WALL: {\r\n                        color = (roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_COLOR).toString());\r\n                        extras = roomObject.model.getValue<string>(RoomObjectVariable.FURNITURE_EXTRAS);\r\n\r\n                        const dataFormat = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_DATA_FORMAT);\r\n\r\n                        if(dataFormat !== LegacyDataType.FORMAT_KEY)\r\n                        {\r\n                            data = ObjectDataFactory.getData(dataFormat);\r\n\r\n                            data.initializeFromRoomObjectModel(roomObject.model);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    case RoomObjectCategory.UNIT:\r\n                        color = roomObject.model.getValue<string>(RoomObjectVariable.FIGURE);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.getGenericRoomObjectImage(type, color, direction, scale, listener, bgColor, extras, data, -1, -1, null, id);\r\n    }\r\n\r\n    public getFurnitureFloorIconUrl(typeId: number): string\r\n    {\r\n        let type: string = null;\r\n        let color = '';\r\n\r\n        if(this._roomContentLoader)\r\n        {\r\n            type = this._roomContentLoader.getFurnitureFloorNameForTypeId(typeId);\r\n            color = (this._roomContentLoader.getFurnitureFloorColorIndex(typeId).toString());\r\n\r\n            return this._roomContentLoader.getAssetIconUrl(type, color);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getFurnitureFloorIcon(typeId: number, listener: IGetImageListener, extras: string = null, objectData: IObjectData = null): ImageResult\r\n    {\r\n        return this.getFurnitureFloorImage(typeId, new Vector3d(), 1, listener, 0, extras, -1, -1, objectData);\r\n    }\r\n\r\n    public getFurnitureWallIconUrl(typeId: number, extra: string = null): string\r\n    {\r\n        let type: string = null;\r\n        let color = '';\r\n\r\n        if(this._roomContentLoader)\r\n        {\r\n            type = this._roomContentLoader.getFurnitureWallNameForTypeId(typeId, extra);\r\n            color = (this._roomContentLoader.getFurnitureWallColorIndex(typeId).toString());\r\n\r\n            return this._roomContentLoader.getAssetIconUrl(type, color);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getFurnitureWallIcon(typeId: number, listener: IGetImageListener, extras: string = null): ImageResult\r\n    {\r\n        return this.getFurnitureWallImage(typeId, new Vector3d(), 1, listener, 0, extras);\r\n    }\r\n\r\n    public getFurnitureFloorImage(typeId: number, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor: number = 0, extras: string = null, state: number = -1, frameCount: number = -1, objectData: IObjectData = null): ImageResult\r\n    {\r\n        let type: string = null;\r\n        let color = '';\r\n\r\n        if(this._roomContentLoader)\r\n        {\r\n            type = this._roomContentLoader.getFurnitureFloorNameForTypeId(typeId);\r\n            color = (this._roomContentLoader.getFurnitureFloorColorIndex(typeId).toString());\r\n        }\r\n\r\n        if((scale === 1) && listener)\r\n        {\r\n            return this.getGenericRoomObjectThumbnail(type, color, listener, extras, objectData);\r\n        }\r\n\r\n        return this.getGenericRoomObjectImage(type, color, direction, scale, listener, bgColor, extras, objectData, state, frameCount);\r\n    }\r\n\r\n    public getFurnitureWallImage(typeId: number, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor: number = 0, extras: string = null, state: number =-1, frameCount: number = -1): ImageResult\r\n    {\r\n        let type: string = null;\r\n        let color = '';\r\n\r\n        if(this._roomContentLoader)\r\n        {\r\n            type = this._roomContentLoader.getFurnitureWallNameForTypeId(typeId);\r\n            color = this._roomContentLoader.getFurnitureWallColorIndex(typeId).toString();\r\n        }\r\n\r\n        if((scale === 1) && listener)\r\n        {\r\n            return this.getGenericRoomObjectThumbnail(type, color, listener, extras, null);\r\n        }\r\n\r\n        return this.getGenericRoomObjectImage(type, color, direction, scale, listener, bgColor, extras, null, state, frameCount);\r\n    }\r\n\r\n    public getRoomObjectPetImage(typeId: number, paletteId: number, color: number, direction: IVector3D, scale: number, listener: IGetImageListener, headOnly: boolean = false, bgColor: number = 0, customParts: PetCustomPart[] = null, posture: string = null): ImageResult\r\n    {\r\n        let type: string = null;\r\n        let value = ((((typeId + ' ') + paletteId) + ' ') + color.toString(16));\r\n\r\n        if(headOnly) value = (value + (' ' + 'head'));\r\n\r\n        if(customParts)\r\n        {\r\n            value = (value + (' ' + customParts.length));\r\n\r\n            for(const _local_13 of customParts)\r\n            {\r\n                value = (value + (((((' ' + _local_13.layerId) + ' ') + _local_13.partId) + ' ') + _local_13.paletteId));\r\n            }\r\n        }\r\n\r\n        if(this._roomContentLoader) type = this._roomContentLoader.getPetNameForType(typeId);\r\n\r\n        return this.getGenericRoomObjectImage(type, value, direction, scale, listener, bgColor, null, null, -1, -1, posture);\r\n    }\r\n\r\n    public getGenericRoomObjectImage(type: string, value: string, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor: number = 0, extras: string = null, objectData: IObjectData = null, state: number = -1, frameCount: number = -1, posture: string = null, originalId: number = -1): ImageResult\r\n    {\r\n        if(!this._roomManager) return null;\r\n\r\n        const imageResult = new ImageResult();\r\n\r\n        imageResult.id = -1;\r\n\r\n        if(!this._ready || !type) return imageResult;\r\n\r\n        let roomInstance = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\r\n\r\n        if(!roomInstance)\r\n        {\r\n            roomInstance = this._roomManager.createRoomInstance(RoomEngine.TEMPORARY_ROOM);\r\n\r\n            if(!roomInstance) return imageResult;\r\n        }\r\n\r\n        let objectId = this._imageObjectIdBank.reserveNumber();\r\n        const objectCategory = this.getRoomObjectCategoryForType(type);\r\n\r\n        if(objectId < 0) return imageResult;\r\n\r\n        objectId++;\r\n\r\n        const roomObject = (roomInstance.createRoomObjectAndInitalize(objectId, type, objectCategory) as IRoomObjectController);\r\n\r\n        if(!roomObject || !roomObject.model || !roomObject.logic) return imageResult;\r\n\r\n        const model = roomObject.model;\r\n\r\n        switch(objectCategory)\r\n        {\r\n            case RoomObjectCategory.FLOOR:\r\n            case RoomObjectCategory.WALL:\r\n                model.setValue(RoomObjectVariable.FURNITURE_COLOR, parseInt(value));\r\n                model.setValue(RoomObjectVariable.FURNITURE_EXTRAS, extras);\r\n                break;\r\n            case RoomObjectCategory.UNIT:\r\n                if((type === RoomObjectUserType.USER) || (type === RoomObjectUserType.BOT) || (type === RoomObjectUserType.RENTABLE_BOT) || (type === RoomObjectUserType.PET))\r\n                {\r\n                    model.setValue(RoomObjectVariable.FIGURE, value);\r\n                }\r\n                else\r\n                {\r\n                    const figureData = new PetFigureData(value);\r\n\r\n                    model.setValue(RoomObjectVariable.PET_PALETTE_INDEX, figureData.paletteId);\r\n                    model.setValue(RoomObjectVariable.PET_COLOR, figureData.color);\r\n\r\n                    if(figureData.headOnly) model.setValue(RoomObjectVariable.PET_HEAD_ONLY, 1);\r\n\r\n                    if(figureData.hasCustomParts)\r\n                    {\r\n                        model.setValue(RoomObjectVariable.PET_CUSTOM_LAYER_IDS, figureData.customLayerIds);\r\n                        model.setValue(RoomObjectVariable.PET_CUSTOM_PARTS_IDS, figureData.customPartIds);\r\n                        model.setValue(RoomObjectVariable.PET_CUSTOM_PALETTE_IDS, figureData.customPaletteIds);\r\n                    }\r\n\r\n                    if(posture) model.setValue(RoomObjectVariable.FIGURE_POSTURE, posture);\r\n                }\r\n                break;\r\n            case RoomObjectCategory.ROOM:\r\n                break;\r\n        }\r\n\r\n        roomObject.setDirection(direction);\r\n\r\n        const visualization = roomObject.visualization;\r\n\r\n        if(!visualization)\r\n        {\r\n            roomInstance.removeRoomObject(objectId, objectCategory);\r\n\r\n            return imageResult;\r\n        }\r\n\r\n        if((state > -1) || objectData)\r\n        {\r\n            if(objectData && (objectData.getLegacyString() !== ''))\r\n            {\r\n                roomObject.logic.processUpdateMessage(new ObjectDataUpdateMessage(parseInt(objectData.getLegacyString()), objectData));\r\n            }\r\n            else\r\n            {\r\n                roomObject.logic.processUpdateMessage(new ObjectDataUpdateMessage(state, objectData));\r\n            }\r\n        }\r\n\r\n        const geometry = new RoomGeometry(scale, new Vector3d(-135, 30, 0), new Vector3d(11, 11, 5));\r\n\r\n        visualization.update(geometry, 0, true, false);\r\n\r\n        if(frameCount > 0)\r\n        {\r\n            let i = 0;\r\n\r\n            while(i < frameCount)\r\n            {\r\n                visualization.update(geometry, 0, true, false);\r\n\r\n                i++;\r\n            }\r\n        }\r\n\r\n        const texture = visualization.getImage(bgColor, originalId);\r\n\r\n        imageResult.data = texture;\r\n        imageResult.id = objectId;\r\n\r\n        if(!this.isRoomContentTypeLoaded(type) && listener)\r\n        {\r\n            let imageListeners = this._imageCallbacks.get(objectId.toString());\r\n\r\n            if(!imageListeners)\r\n            {\r\n                imageListeners = [];\r\n\r\n                this._imageCallbacks.set(objectId.toString(), imageListeners);\r\n            }\r\n\r\n            imageListeners.push(listener);\r\n\r\n            model.setValue(RoomObjectVariable.IMAGE_QUERY_SCALE, scale);\r\n        }\r\n        else\r\n        {\r\n            roomInstance.removeRoomObject(objectId, objectCategory);\r\n\r\n            this._imageObjectIdBank.freeNumber((objectId - 1));\r\n\r\n            imageResult.id = 0;\r\n        }\r\n\r\n        geometry.dispose();\r\n\r\n        return imageResult;\r\n    }\r\n\r\n    public getGenericRoomObjectThumbnail(type: string, param: string, listener: IGetImageListener, extraData: string = null, stuffData: IObjectData = null): ImageResult\r\n    {\r\n        if(!this._roomManager) return null;\r\n\r\n        const imageResult = new ImageResult();\r\n\r\n        imageResult.id = -1;\r\n\r\n        if(!this._ready || !type) return imageResult;\r\n\r\n        let roomInstance = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\r\n\r\n        if(!roomInstance)\r\n        {\r\n            roomInstance = this._roomManager.createRoomInstance(RoomEngine.TEMPORARY_ROOM);\r\n\r\n            if(!roomInstance) return imageResult;\r\n        }\r\n\r\n        let objectId = this._thumbnailObjectIdBank.reserveNumber();\r\n        const objectCategory = this.getRoomObjectCategoryForType(type);\r\n\r\n        if(objectId < 0) return imageResult;\r\n\r\n        objectId++;\r\n\r\n        imageResult.id = objectId;\r\n        imageResult.data = null;\r\n        imageResult.image = null;\r\n\r\n        const assetName = [ type, param ].join('_');\r\n\r\n        const asset = this._roomContentLoader.getImage(assetName);\r\n\r\n        if(!asset && listener)\r\n        {\r\n            let contentListeners = this._thumbnailCallbacks.get(assetName);\r\n\r\n            if(!contentListeners)\r\n            {\r\n                contentListeners = [];\r\n\r\n                this._thumbnailCallbacks.set(assetName, contentListeners);\r\n\r\n                this._roomContentLoader.downloadImage(objectId, type, param, null);\r\n            }\r\n\r\n            contentListeners.push(listener);\r\n        }\r\n        else\r\n        {\r\n            if(asset)\r\n            {\r\n                imageResult.image = asset;\r\n            }\r\n\r\n            this._thumbnailObjectIdBank.freeNumber((objectId - 1));\r\n\r\n            imageResult.id = 0;\r\n        }\r\n\r\n        return imageResult;\r\n    }\r\n\r\n    public initalizeTemporaryObjectsByType(type: string, _arg_2: boolean): void\r\n    {\r\n        const roomInstance = this._roomManager.getRoomInstance(RoomEngine.TEMPORARY_ROOM);\r\n\r\n        if(!roomInstance || !this._roomContentLoader) return;\r\n\r\n        const objectCategory = this._roomContentLoader.getCategoryForType(type);\r\n        const objectManager = roomInstance.getManager(objectCategory);\r\n\r\n        let geometry: RoomGeometry = null;\r\n        let scale = 0;\r\n\r\n        if(objectManager && objectManager.objects.length)\r\n        {\r\n            for(const roomObject of objectManager.objects.getValues())\r\n            {\r\n                if(roomObject && roomObject.model && (roomObject.type === type))\r\n                {\r\n                    const objectId = roomObject.id;\r\n                    const visualization = roomObject.visualization;\r\n\r\n                    let texture: RenderTexture = null;\r\n\r\n                    if(visualization)\r\n                    {\r\n                        const imageScale = roomObject.model.getValue<number>(RoomObjectVariable.IMAGE_QUERY_SCALE);\r\n\r\n                        if(geometry && (scale !== imageScale))\r\n                        {\r\n                            geometry.dispose();\r\n\r\n                            geometry = null;\r\n                        }\r\n\r\n                        if(!geometry)\r\n                        {\r\n                            scale = imageScale;\r\n\r\n                            geometry = new RoomGeometry(imageScale, new Vector3d(-135, 30, 0), new Vector3d(11, 11, 5));\r\n                        }\r\n\r\n                        visualization.update(geometry, 0, true, false);\r\n\r\n                        texture = visualization.image;\r\n                    }\r\n\r\n                    roomInstance.removeRoomObject(objectId, objectCategory);\r\n\r\n                    this._imageObjectIdBank.freeNumber((objectId - 1));\r\n\r\n                    const imageListeners = this._imageCallbacks.get(objectId.toString());\r\n\r\n                    if(imageListeners)\r\n                    {\r\n                        this._imageCallbacks.delete(objectId.toString());\r\n\r\n                        for(const imageListener of imageListeners)\r\n                        {\r\n                            if(!imageListener) continue;\r\n\r\n                            if(texture) imageListener.imageReady(objectId, texture);\r\n                            else imageListener.imageFailed(objectId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(geometry) geometry.dispose();\r\n    }\r\n\r\n    public setObjectMoverIconSpriteVisible(k: boolean): void\r\n    {\r\n        const canvas = this.getActiveRoomInstanceRenderingCanvas();\r\n\r\n        if(!canvas) return;\r\n\r\n        const overlay = this.getRenderingCanvasOverlay(canvas);\r\n        const sprite = this.getOverlayIconSprite(overlay, RoomEngine.OBJECT_ICON_SPRITE);\r\n\r\n        if(sprite)\r\n        {\r\n            sprite.visible = k;\r\n        }\r\n    }\r\n\r\n    public removeObjectMoverIconSprite(): void\r\n    {\r\n        const canvas = this.getActiveRoomInstanceRenderingCanvas();\r\n\r\n        if(!canvas) return;\r\n\r\n        const sprite = this.getRenderingCanvasOverlay(canvas);\r\n\r\n        this.removeOverlayIconSprite(sprite, RoomEngine.OBJECT_ICON_SPRITE);\r\n    }\r\n\r\n    private getRenderingCanvasOverlay(k: IRoomRenderingCanvas): NitroSprite\r\n    {\r\n        if(!k) return null;\r\n\r\n        const displayObject = (k.master as Container);\r\n\r\n        if(!displayObject) return null;\r\n\r\n        return ((displayObject.getChildByName(RoomEngine.OVERLAY) as NitroSprite) || null);\r\n    }\r\n\r\n    private removeOverlayIconSprite(k: NitroSprite, _arg_2: string): boolean\r\n    {\r\n        if(!k) return false;\r\n\r\n        let index = (k.children.length - 1);\r\n\r\n        while(index >= 0)\r\n        {\r\n            const child = (k.getChildAt(index) as NitroSprite);\r\n\r\n            if(child)\r\n            {\r\n                if(child.name === _arg_2)\r\n                {\r\n                    k.removeChildAt(index);\r\n\r\n                    if(child.children.length)\r\n                    {\r\n                        const firstChild = (child.getChildAt(0) as NitroSprite);\r\n\r\n                        firstChild.parent.removeChild(firstChild);\r\n\r\n                        firstChild.destroy();\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            index--;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getOverlayIconSprite(k: NitroSprite, _arg_2: string): NitroSprite\r\n    {\r\n        if(!k) return null;\r\n\r\n        let index = (k.children.length - 1);\r\n\r\n        while(index >= 0)\r\n        {\r\n            const child = (k.getChildAt(index) as NitroSprite);\r\n\r\n            if(child)\r\n            {\r\n                if(child.name === _arg_2) return child;\r\n            }\r\n\r\n            index--;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getRoomObjects(roomId: number, category: number): IRoomObject[]\r\n    {\r\n        if(this._ready)\r\n        {\r\n            const _local_3 = this.getRoomId(roomId);\r\n            const _local_4 = this._roomManager.getRoomInstance(_local_3);\r\n\r\n\r\n            if(_local_4) return _local_4.getRoomObjectsForCategory(category);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    protected addObjectToTileMap(k: number, _arg_2: IRoomObject): void\r\n    {\r\n        const tileObjectMap = this.getRoomInstanceData(k).tileObjectMap;\r\n\r\n        if(tileObjectMap) tileObjectMap.addRoomObject(_arg_2);\r\n    }\r\n\r\n    public refreshTileObjectMap(k: number, _arg_2: string): void\r\n    {\r\n        const tileObjectMap = this.getRoomInstanceData(k).tileObjectMap;\r\n\r\n        if(tileObjectMap) tileObjectMap.populate(this.getRoomObjects(k, RoomObjectCategory.FLOOR));\r\n    }\r\n\r\n    public getRenderRoomMessage(k: Rectangle, _arg_2: number, _arg_3: boolean = false, _arg_4: boolean = true, _arg_5: boolean = false, canvasId: number = -1): IMessageComposer<unknown[]>\r\n    {\r\n        let canvas: IRoomRenderingCanvas = null;\r\n\r\n        if(canvasId > -1)\r\n        {\r\n            canvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, canvasId);\r\n        }\r\n        else\r\n        {\r\n            canvas = this.getActiveRoomInstanceRenderingCanvas();\r\n        }\r\n\r\n        if(!canvas) return null;\r\n\r\n        if(_arg_5)\r\n        {\r\n            canvas.skipSpriteVisibilityChecking();\r\n        }\r\n\r\n        let _local_8 = -1;\r\n\r\n        if(((!(_arg_4)) && (!(this._roomSessionManager.getSession(this._activeRoomId) == null))))\r\n        {\r\n            _local_8 = this._roomSessionManager.getSession(this._activeRoomId).ownRoomIndex;\r\n        }\r\n\r\n        const _local_9 = new SpriteDataCollector();\r\n        const _local_10 = _local_9.getFurniData(k, canvas, this, _local_8);\r\n        const _local_11 = _local_9.getRoomRenderingModifiers(this);\r\n        const _local_12 = _local_9.getRoomPlanes(k, canvas, this, _arg_2);\r\n\r\n        if(_arg_5) canvas.resumeSpriteVisibilityChecking();\r\n\r\n        if(_arg_3)\r\n        {\r\n            //return new RenderRoomThumbnailMessageComposer(_local_12, _local_10, _local_11, this._activeRoomId, this._sessionDataManager._Str_8500);\r\n        }\r\n\r\n        console.log(_local_10, _local_11, _local_12);\r\n\r\n        //return new RenderRoomMessageComposer(_local_12, _local_10, _local_11, this._activeRoomId, this._sessionDataManager._Str_8500);\r\n\r\n        return null;\r\n    }\r\n\r\n    public createTextureFromRoom(roomId: number, canvasId: number = -1, bounds: Rectangle = null): RenderTexture\r\n    {\r\n        let canvas: IRoomRenderingCanvas = null;\r\n\r\n        if(canvasId > -1)\r\n        {\r\n            canvas = this.getRoomInstanceRenderingCanvas(this._activeRoomId, canvasId);\r\n        }\r\n        else\r\n        {\r\n            canvas = this.getActiveRoomInstanceRenderingCanvas();\r\n        }\r\n\r\n        let texture: RenderTexture = null;\r\n\r\n        if(bounds)\r\n        {\r\n            texture = TextureUtils.generateTexture(canvas.master, bounds);\r\n        }\r\n        else\r\n        {\r\n            texture = canvas.getDisplayAsTexture();\r\n        }\r\n\r\n        return texture;\r\n    }\r\n\r\n    public saveTextureAsScreenshot(texture: RenderTexture, saveAsThumbnail: boolean = false): void\r\n    {\r\n        let composer: RenderRoomMessageComposer = null;\r\n\r\n        if(saveAsThumbnail) composer = new RenderRoomThumbnailMessageComposer();\r\n        else composer = new RenderRoomMessageComposer();\r\n\r\n        composer.assignBitmap(texture);\r\n\r\n        this._communication.connection.send(composer);\r\n    }\r\n\r\n    public saveBase64AsScreenshot(base64: string, saveAsThumbnail: boolean = false): void\r\n    {\r\n        let composer: RenderRoomMessageComposer = null;\r\n\r\n        if(saveAsThumbnail) composer = new RenderRoomThumbnailMessageComposer();\r\n        else composer = new RenderRoomMessageComposer();\r\n\r\n        composer.assignBase64(base64);\r\n\r\n        this._communication.connection.send(composer);\r\n    }\r\n\r\n    public objectsInitialized(k: string): void\r\n    {\r\n        const roomId = this.getRoomIdFromString(k);\r\n\r\n        this.events.dispatchEvent(new RoomEngineEvent(RoomEngineEvent.OBJECTS_INITIALIZED, roomId));\r\n    }\r\n\r\n    public getRoomId(id: number): string\r\n    {\r\n        return (id.toString());\r\n    }\r\n\r\n    private getRoomIdFromString(roomId: string): number\r\n    {\r\n        if(!roomId) return -1;\r\n\r\n        const split = roomId.split('_');\r\n\r\n        if(split.length <= 0) return -1;\r\n\r\n        return (parseInt(split[0]) || 0);\r\n    }\r\n\r\n    private getRoomObjectRoomId(object: IRoomObject): string\r\n    {\r\n        if(!object || !object.model) return null;\r\n\r\n        return (object.model.getValue<string>(RoomObjectVariable.OBJECT_ROOM_ID));\r\n    }\r\n\r\n    private getRoomObjectAdUrl(type: string): string\r\n    {\r\n        return this._roomContentLoader.getRoomObjectAdUrl(type);\r\n    }\r\n\r\n    public getPetTypeId(figure: string): number\r\n    {\r\n        let type = -1;\r\n\r\n        if(figure)\r\n        {\r\n            const parts = figure.split(' ');\r\n\r\n            if(parts.length > 1) type = parseInt(parts[0]);\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    private getPetType(type: string): string\r\n    {\r\n        if(!type) return null;\r\n\r\n        const parts = type.split(' ');\r\n\r\n        if(parts.length > 1)\r\n        {\r\n            const typeId = parseInt(parts[0]);\r\n\r\n            if(this._roomContentLoader) return this._roomContentLoader.getPetNameForType(typeId);\r\n\r\n            return 'pet';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public isRoomContentTypeLoaded(name: string): boolean\r\n    {\r\n        if(!this._roomContentLoader) return false;\r\n\r\n        return (this._roomContentLoader.getCollection(name) !== null);\r\n    }\r\n\r\n    public getPetColorResult(petIndex: number, paletteIndex: number): PetColorResult\r\n    {\r\n        if(!this._roomContentLoader) return null;\r\n\r\n        return this._roomContentLoader.getPetColorResult(petIndex, paletteIndex);\r\n    }\r\n\r\n    public getPetColorResultsForTag(petIndex: number, tagName: string): PetColorResult[]\r\n    {\r\n        if(!this._roomContentLoader) return null;\r\n\r\n        return this._roomContentLoader.getPetColorResultsForTag(petIndex, tagName);\r\n    }\r\n\r\n    public deleteRoomObject(objectId: number, objectCategory: number): boolean\r\n    {\r\n        if(!this._roomObjectEventHandler || (objectCategory !== RoomObjectCategory.WALL)) return false;\r\n\r\n        return this._roomObjectEventHandler.deleteWallItem(this._activeRoomId, objectId);\r\n    }\r\n\r\n    public get connection(): IConnection\r\n    {\r\n        return this._communication.connection;\r\n    }\r\n\r\n    public get sessionDataManager(): ISessionDataManager\r\n    {\r\n        return this._sessionDataManager;\r\n    }\r\n\r\n    public set sessionDataManager(manager: ISessionDataManager)\r\n    {\r\n        this._sessionDataManager = manager;\r\n    }\r\n\r\n    public get roomSessionManager(): IRoomSessionManager\r\n    {\r\n        return this._roomSessionManager;\r\n    }\r\n\r\n    public set roomSessionManager(manager: IRoomSessionManager)\r\n    {\r\n        this._roomSessionManager = manager;\r\n    }\r\n\r\n    public get roomManager(): IRoomManager\r\n    {\r\n        return this._roomManager;\r\n    }\r\n\r\n    public set roomManager(manager: IRoomManager)\r\n    {\r\n        this._roomManager = manager;\r\n    }\r\n\r\n    public get objectEventHandler(): RoomObjectEventHandler\r\n    {\r\n        return this._roomObjectEventHandler;\r\n    }\r\n\r\n    public get roomRendererFactory(): IRoomRendererFactory\r\n    {\r\n        return this._roomRendererFactory;\r\n    }\r\n\r\n    public get visualizationFactory(): IRoomObjectVisualizationFactory\r\n    {\r\n        return this._visualizationFactory;\r\n    }\r\n\r\n    public get logicFactory(): IRoomObjectLogicFactory\r\n    {\r\n        return this._logicFactory;\r\n    }\r\n\r\n    public get activeRoomId(): number\r\n    {\r\n        return this._activeRoomId;\r\n    }\r\n\r\n    public get ready(): boolean\r\n    {\r\n        return this._ready;\r\n    }\r\n\r\n    public get roomContentLoader(): RoomContentLoader\r\n    {\r\n        return this._roomContentLoader;\r\n    }\r\n\r\n    public get isDecorating(): boolean\r\n    {\r\n        if(!this._roomSessionManager) return false;\r\n\r\n        const session = this._roomSessionManager.getSession(this._activeRoomId);\r\n\r\n        return (session && session.isDecorating) || false;\r\n    }\r\n\r\n    private get useOffsetScrolling(): boolean\r\n    {\r\n        return true;\r\n    }\r\n\r\n    public get selectedAvatarId(): number\r\n    {\r\n        if(!this._roomObjectEventHandler) return -1;\r\n\r\n        return this._roomObjectEventHandler.selectedAvatarId;\r\n    }\r\n\r\n    public getRoomObjectCount(roomId: number, categoryId: number): number\r\n    {\r\n        if(this._roomManager == null) return 0;\r\n\r\n        return this._roomManager.getRoomInstance(roomId.toString()).getRoomObjectsForCategory(categoryId).length;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}