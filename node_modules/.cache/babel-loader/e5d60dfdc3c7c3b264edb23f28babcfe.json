{"ast":null,"code":"export class AvatarFigureContainer {\n  constructor(figure) {\n    this._parts = void 0;\n    this._parts = new Map();\n    this.parseFigure(figure);\n  }\n\n  getPartTypeIds() {\n    return this.partSets().keys();\n  }\n\n  hasPartType(k) {\n    return !!this.partSets().get(k);\n  }\n\n  getPartSetId(k) {\n    const existing = this.partSets().get(k);\n    if (!existing) return 0;\n    return existing.get('setid');\n  }\n\n  getPartColorIds(k) {\n    const existing = this.partSets().get(k);\n    if (!existing) return null;\n    return existing.get('colorids');\n  }\n\n  updatePart(setType, partSetId, colorIds) {\n    const set = new Map();\n    set.set('type', setType);\n    set.set('setid', partSetId);\n    set.set('colorids', colorIds);\n    const existingSets = this.partSets();\n    existingSets.delete(setType);\n    existingSets.set(setType, set);\n  }\n\n  removePart(k) {\n    this.partSets().delete(k);\n  }\n\n  getFigureString() {\n    const parts = [];\n\n    for (const key of this.partSets().keys()) {\n      if (!key) continue;\n      let setParts = [];\n      setParts.push(key);\n      setParts.push(this.getPartSetId(key));\n      setParts = setParts.concat(this.getPartColorIds(key));\n      parts.push(setParts.join('-'));\n    }\n\n    return parts.join('.');\n  }\n\n  partSets() {\n    if (!this._parts) this._parts = new Map();\n    return this._parts;\n  }\n\n  parseFigure(figure) {\n    if (!figure) figure = '';\n\n    for (const part of figure.split('.')) {\n      const pieces = part.split('-');\n\n      if (pieces.length >= 2) {\n        const type = pieces[0];\n        const setId = parseInt(pieces[1]);\n        const colors = [];\n        let index = 2;\n\n        while (index < pieces.length) {\n          colors.push(parseInt(pieces[index]));\n          index++;\n        }\n\n        this.updatePart(type, setId, colors);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/AvatarFigureContainer.ts"],"names":["AvatarFigureContainer","constructor","figure","_parts","Map","parseFigure","getPartTypeIds","partSets","keys","hasPartType","k","get","getPartSetId","existing","getPartColorIds","updatePart","setType","partSetId","colorIds","set","existingSets","delete","removePart","getFigureString","parts","key","setParts","push","concat","join","part","split","pieces","length","type","setId","parseInt","colors","index"],"mappings":"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","sourcesContent":["import { IAvatarFigureContainer } from './IAvatarFigureContainer';\r\n\r\nexport class AvatarFigureContainer implements IAvatarFigureContainer\r\n{\r\n    private _parts: Map<string, Map<string, any>>;\r\n\r\n    constructor(figure: string)\r\n    {\r\n        this._parts = new Map();\r\n\r\n        this.parseFigure(figure);\r\n    }\r\n\r\n    public getPartTypeIds(): IterableIterator<string>\r\n    {\r\n        return this.partSets().keys();\r\n    }\r\n\r\n    public hasPartType(k: string): boolean\r\n    {\r\n        return !!this.partSets().get(k);\r\n    }\r\n\r\n    public getPartSetId(k: string): number\r\n    {\r\n        const existing = this.partSets().get(k);\r\n\r\n        if(!existing) return 0;\r\n\r\n        return existing.get('setid');\r\n    }\r\n\r\n    public getPartColorIds(k: string): number[]\r\n    {\r\n        const existing = this.partSets().get(k);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing.get('colorids');\r\n    }\r\n\r\n    public updatePart(setType: string, partSetId: number, colorIds: number[]): void\r\n    {\r\n        const set: Map<string, any> = new Map();\r\n\r\n        set.set('type', setType);\r\n        set.set('setid', partSetId);\r\n        set.set('colorids', colorIds);\r\n\r\n        const existingSets = this.partSets();\r\n\r\n        existingSets.delete(setType);\r\n        existingSets.set(setType, set);\r\n    }\r\n\r\n    public removePart(k: string): void\r\n    {\r\n        this.partSets().delete(k);\r\n    }\r\n\r\n    public getFigureString(): string\r\n    {\r\n        const parts: string[] = [];\r\n\r\n        for(const key of this.partSets().keys())\r\n        {\r\n            if(!key) continue;\r\n\r\n            let setParts = [];\r\n\r\n            setParts.push(key);\r\n            setParts.push(this.getPartSetId(key));\r\n\r\n            setParts = setParts.concat(this.getPartColorIds(key));\r\n\r\n            parts.push(setParts.join('-'));\r\n        }\r\n\r\n        return parts.join('.');\r\n    }\r\n\r\n    private partSets(): Map<string, Map<string, any>>\r\n    {\r\n        if(!this._parts) this._parts = new Map();\r\n\r\n        return this._parts;\r\n    }\r\n\r\n    private parseFigure(figure: string): void\r\n    {\r\n        if(!figure) figure = '';\r\n\r\n        for(const part of figure.split('.'))\r\n        {\r\n            const pieces = part.split('-');\r\n\r\n            if(pieces.length >= 2)\r\n            {\r\n                const type = pieces[0];\r\n                const setId = parseInt(pieces[1]);\r\n                const colors = [];\r\n\r\n                let index = 2;\r\n\r\n                while(index < pieces.length)\r\n                {\r\n                    colors.push(parseInt(pieces[index]));\r\n\r\n                    index++;\r\n                }\r\n\r\n                this.updatePart(type, setId, colors);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}