{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { FurnitureListAddOrUpdateEvent, FurnitureListComposer, FurnitureListEvent, FurnitureListInvalidateEvent, FurnitureListRemovedEvent, FurniturePostItPlacedEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryUnseenTracker } from '.';\nimport { UseMessageEventHook } from '..';\nimport { addFurnitureItem, attemptItemPlacement, cancelRoomObjectPlacement, CloneObject, CreateLinkEvent, FurnitureItem, getAllItemIds, getPlacingItemId, mergeFurniFragments, SendMessageComposer, UnseenItemCategory } from '../../api';\nimport { InventoryFurniAddedEvent } from '../../events';\nimport { DispatchUiEvent } from '../events';\nimport { useSharedVisibility } from '../useSharedVisibility';\nlet furniMsgFragments = null;\n\nconst useInventoryFurniState = () => {\n  _s();\n\n  const [needsUpdate, setNeedsUpdate] = useState(true);\n  const [groupItems, setGroupItems] = useState([]);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const {\n    isVisible = false,\n    activate = null,\n    deactivate = null\n  } = useSharedVisibility();\n  const {\n    isUnseen = null,\n    resetCategory = null\n  } = useInventoryUnseenTracker();\n  const onFurnitureListAddOrUpdateEvent = useCallback(event => {\n    const parser = event.getParser();\n    setGroupItems(prevValue => {\n      const newValue = [...prevValue];\n\n      for (const item of parser.items) {\n        let i = 0;\n        let groupItem = null;\n\n        while (i < newValue.length) {\n          const group = newValue[i];\n          let j = 0;\n\n          while (j < group.items.length) {\n            const furniture = group.items[j];\n\n            if (furniture.id === item.itemId) {\n              furniture.update(item);\n              const newFurniture = [...group.items];\n              newFurniture[j] = furniture;\n              group.items = newFurniture;\n              groupItem = group;\n              break;\n            }\n\n            j++;\n          }\n\n          if (groupItem) break;\n          i++;\n        }\n\n        if (groupItem) {\n          groupItem.hasUnseenItems = true;\n          newValue[i] = CloneObject(groupItem);\n        } else {\n          const furniture = new FurnitureItem(item);\n          addFurnitureItem(newValue, furniture, isUnseen(UnseenItemCategory.FURNI, item.itemId));\n          DispatchUiEvent(new InventoryFurniAddedEvent(furniture.id, furniture.type, furniture.category));\n        }\n      }\n\n      return newValue;\n    });\n  }, [isUnseen]);\n  UseMessageEventHook(FurnitureListAddOrUpdateEvent, onFurnitureListAddOrUpdateEvent);\n  const onFurnitureListEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!furniMsgFragments) furniMsgFragments = new Array(parser.totalFragments);\n    const fragment = mergeFurniFragments(parser.fragment, parser.totalFragments, parser.fragmentNumber, furniMsgFragments);\n    if (!fragment) return;\n    setGroupItems(prevValue => {\n      const newValue = [...prevValue];\n      const existingIds = getAllItemIds(newValue);\n\n      for (const existingId of existingIds) {\n        if (fragment.get(existingId)) continue;\n        let index = 0;\n\n        while (index < newValue.length) {\n          const group = newValue[index];\n          const item = group.remove(existingId);\n\n          if (!item) {\n            index++;\n            continue;\n          }\n\n          if (getPlacingItemId() === item.ref) {\n            cancelRoomObjectPlacement();\n\n            if (!attemptItemPlacement(group)) {\n              CreateLinkEvent('inventory/show');\n            }\n          }\n\n          if (group.getTotalCount() <= 0) {\n            newValue.splice(index, 1);\n            group.dispose();\n          }\n\n          break;\n        }\n      }\n\n      for (const itemId of fragment.keys()) {\n        if (existingIds.indexOf(itemId) >= 0) continue;\n        const parser = fragment.get(itemId);\n        if (!parser) continue;\n        const item = new FurnitureItem(parser);\n        addFurnitureItem(newValue, item, isUnseen(UnseenItemCategory.FURNI, itemId));\n        DispatchUiEvent(new InventoryFurniAddedEvent(item.id, item.type, item.category));\n      }\n\n      return newValue;\n    });\n    furniMsgFragments = null;\n  }, [isUnseen]);\n  UseMessageEventHook(FurnitureListEvent, onFurnitureListEvent);\n  const onFurnitureListInvalidateEvent = useCallback(event => {\n    setNeedsUpdate(true);\n  }, []);\n  UseMessageEventHook(FurnitureListInvalidateEvent, onFurnitureListInvalidateEvent);\n  const onFurnitureListRemovedEvent = useCallback(event => {\n    const parser = event.getParser();\n    setGroupItems(prevValue => {\n      const newValue = [...prevValue];\n      let index = 0;\n\n      while (index < newValue.length) {\n        const group = newValue[index];\n        const item = group.remove(parser.itemId);\n\n        if (!item) {\n          index++;\n          continue;\n        }\n\n        if (getPlacingItemId() === item.ref) {\n          cancelRoomObjectPlacement();\n          if (!attemptItemPlacement(group)) CreateLinkEvent('inventory/show');\n        }\n\n        if (group.getTotalCount() <= 0) {\n          newValue.splice(index, 1);\n          group.dispose();\n        }\n\n        break;\n      }\n\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(FurnitureListRemovedEvent, onFurnitureListRemovedEvent);\n  const onFurniturePostItPlacedEvent = useCallback(event => {}, []);\n  UseMessageEventHook(FurniturePostItPlacedEvent, onFurniturePostItPlacedEvent);\n  useEffect(() => {\n    if (!groupItems || !groupItems.length) return;\n    setSelectedItem(prevValue => {\n      let newValue = prevValue;\n      if (newValue && groupItems.indexOf(newValue) === -1) newValue = null;\n      if (!newValue) newValue = groupItems[0];\n      return newValue;\n    });\n  }, [groupItems]);\n  useEffect(() => {\n    if (!isVisible) return;\n    return () => {\n      if (resetCategory(UnseenItemCategory.FURNI)) {\n        setGroupItems(prevValue => {\n          const newValue = [...prevValue];\n\n          for (const newGroup of newValue) newGroup.hasUnseenItems = false;\n\n          return newValue;\n        });\n      }\n    };\n  }, [isVisible, resetCategory]);\n  useEffect(() => {\n    if (!isVisible || !needsUpdate) return;\n    SendMessageComposer(new FurnitureListComposer());\n    setNeedsUpdate(false);\n  }, [isVisible, needsUpdate]);\n  return {\n    isVisible,\n    groupItems,\n    setGroupItems,\n    selectedItem,\n    setSelectedItem,\n    activate,\n    deactivate\n  };\n};\n\n_s(useInventoryFurniState, \"3NgqW/n2vuv1bNdkungtYj9CGw8=\", false, function () {\n  return [useSharedVisibility, useInventoryUnseenTracker];\n});\n\nexport const useInventoryFurni = () => {\n  _s2();\n\n  return useBetween(useInventoryFurniState);\n};\n\n_s2(useInventoryFurni, \"diiQ3+ccnY3J9PmIrayiMDIOaiY=\", false, function () {\n  return [useBetween];\n});","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/hooks/inventory/useInventoryFurni.ts"],"names":["FurnitureListAddOrUpdateEvent","FurnitureListComposer","FurnitureListEvent","FurnitureListInvalidateEvent","FurnitureListRemovedEvent","FurniturePostItPlacedEvent","useCallback","useEffect","useState","useBetween","useInventoryUnseenTracker","UseMessageEventHook","addFurnitureItem","attemptItemPlacement","cancelRoomObjectPlacement","CloneObject","CreateLinkEvent","FurnitureItem","getAllItemIds","getPlacingItemId","mergeFurniFragments","SendMessageComposer","UnseenItemCategory","InventoryFurniAddedEvent","DispatchUiEvent","useSharedVisibility","furniMsgFragments","useInventoryFurniState","needsUpdate","setNeedsUpdate","groupItems","setGroupItems","selectedItem","setSelectedItem","isVisible","activate","deactivate","isUnseen","resetCategory","onFurnitureListAddOrUpdateEvent","event","parser","getParser","prevValue","newValue","item","items","i","groupItem","length","group","j","furniture","id","itemId","update","newFurniture","hasUnseenItems","FURNI","type","category","onFurnitureListEvent","Array","totalFragments","fragment","fragmentNumber","existingIds","existingId","get","index","remove","ref","getTotalCount","splice","dispose","keys","indexOf","onFurnitureListInvalidateEvent","onFurnitureListRemovedEvent","onFurniturePostItPlacedEvent","newGroup","useInventoryFurni"],"mappings":";;;AAAA,SAASA,6BAAT,EAAwCC,qBAAxC,EAA+DC,kBAA/D,EAAmFC,4BAAnF,EAA0IC,yBAA1I,EAAqKC,0BAArK,QAAuM,yBAAvM;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,yBAAT,QAA0C,GAA1C;AACA,SAASC,mBAAT,QAAoC,IAApC;AACA,SAASC,gBAAT,EAA2BC,oBAA3B,EAAiDC,yBAAjD,EAA4EC,WAA5E,EAAyFC,eAAzF,EAA0GC,aAA1G,EAAyHC,aAAzH,EAAwIC,gBAAxI,EAAqKC,mBAArK,EAA0LC,mBAA1L,EAA+MC,kBAA/M,QAAyO,WAAzO;AACA,SAASC,wBAAT,QAAyC,cAAzC;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,mBAAT,QAAoC,wBAApC;AAEA,IAAIC,iBAAyD,GAAG,IAAhE;;AAEA,MAAMC,sBAAsB,GAAG,MAC/B;AAAA;;AACI,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCrB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAAEsB,UAAF,EAAcC,aAAd,IAAgCvB,QAAQ,CAAc,EAAd,CAA9C;AACA,QAAM,CAAEwB,YAAF,EAAgBC,eAAhB,IAAoCzB,QAAQ,CAAY,IAAZ,CAAlD;AACA,QAAM;AAAE0B,IAAAA,SAAS,GAAG,KAAd;AAAqBC,IAAAA,QAAQ,GAAG,IAAhC;AAAsCC,IAAAA,UAAU,GAAG;AAAnD,MAA4DX,mBAAmB,EAArF;AACA,QAAM;AAAEY,IAAAA,QAAQ,GAAG,IAAb;AAAmBC,IAAAA,aAAa,GAAG;AAAnC,MAA4C5B,yBAAyB,EAA3E;AAEA,QAAM6B,+BAA+B,GAAGjC,WAAW,CAAEkC,KAAD,IACpD;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAX,IAAAA,aAAa,CAACY,SAAS,IACvB;AACI,YAAMC,QAAQ,GAAG,CAAE,GAAGD,SAAL,CAAjB;;AAEA,WAAI,MAAME,IAAV,IAAkBJ,MAAM,CAACK,KAAzB,EACA;AACI,YAAIC,CAAC,GAAG,CAAR;AACA,YAAIC,SAAoB,GAAG,IAA3B;;AAEA,eAAMD,CAAC,GAAGH,QAAQ,CAACK,MAAnB,EACA;AACI,gBAAMC,KAAK,GAAGN,QAAQ,CAACG,CAAD,CAAtB;AAEA,cAAII,CAAC,GAAG,CAAR;;AAEA,iBAAMA,CAAC,GAAGD,KAAK,CAACJ,KAAN,CAAYG,MAAtB,EACA;AACI,kBAAMG,SAAS,GAAGF,KAAK,CAACJ,KAAN,CAAYK,CAAZ,CAAlB;;AAEA,gBAAGC,SAAS,CAACC,EAAV,KAAiBR,IAAI,CAACS,MAAzB,EACA;AACIF,cAAAA,SAAS,CAACG,MAAV,CAAiBV,IAAjB;AAEA,oBAAMW,YAAY,GAAG,CAAE,GAAGN,KAAK,CAACJ,KAAX,CAArB;AAEAU,cAAAA,YAAY,CAACL,CAAD,CAAZ,GAAkBC,SAAlB;AAEAF,cAAAA,KAAK,CAACJ,KAAN,GAAcU,YAAd;AAEAR,cAAAA,SAAS,GAAGE,KAAZ;AAEA;AACH;;AAEDC,YAAAA,CAAC;AACJ;;AAED,cAAGH,SAAH,EAAc;AAEdD,UAAAA,CAAC;AACJ;;AAED,YAAGC,SAAH,EACA;AACIA,UAAAA,SAAS,CAACS,cAAV,GAA2B,IAA3B;AAEAb,UAAAA,QAAQ,CAACG,CAAD,CAAR,GAAchC,WAAW,CAACiC,SAAD,CAAzB;AACH,SALD,MAOA;AACI,gBAAMI,SAAS,GAAG,IAAInC,aAAJ,CAAkB4B,IAAlB,CAAlB;AAEAjC,UAAAA,gBAAgB,CAACgC,QAAD,EAAWQ,SAAX,EAAsBf,QAAQ,CAACf,kBAAkB,CAACoC,KAApB,EAA2Bb,IAAI,CAACS,MAAhC,CAA9B,CAAhB;AAEA9B,UAAAA,eAAe,CAAC,IAAID,wBAAJ,CAA6B6B,SAAS,CAACC,EAAvC,EAA2CD,SAAS,CAACO,IAArD,EAA2DP,SAAS,CAACQ,QAArE,CAAD,CAAf;AACH;AACJ;;AAED,aAAOhB,QAAP;AACH,KA3DY,CAAb;AA4DH,GAhEkD,EAgEhD,CAAEP,QAAF,CAhEgD,CAAnD;AAkEA1B,EAAAA,mBAAmB,CAACX,6BAAD,EAAgCuC,+BAAhC,CAAnB;AAEA,QAAMsB,oBAAoB,GAAGvD,WAAW,CAAEkC,KAAD,IACzC;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEA,QAAG,CAAChB,iBAAJ,EAAuBA,iBAAiB,GAAG,IAAIoC,KAAJ,CAAUrB,MAAM,CAACsB,cAAjB,CAApB;AAEvB,UAAMC,QAAQ,GAAG5C,mBAAmB,CAACqB,MAAM,CAACuB,QAAR,EAAkBvB,MAAM,CAACsB,cAAzB,EAAyCtB,MAAM,CAACwB,cAAhD,EAAgEvC,iBAAhE,CAApC;AAEA,QAAG,CAACsC,QAAJ,EAAc;AAEdjC,IAAAA,aAAa,CAACY,SAAS,IACvB;AACI,YAAMC,QAAQ,GAAG,CAAE,GAAGD,SAAL,CAAjB;AACA,YAAMuB,WAAW,GAAGhD,aAAa,CAAC0B,QAAD,CAAjC;;AAEA,WAAI,MAAMuB,UAAV,IAAwBD,WAAxB,EACA;AACI,YAAGF,QAAQ,CAACI,GAAT,CAAaD,UAAb,CAAH,EAA6B;AAE7B,YAAIE,KAAK,GAAG,CAAZ;;AAEA,eAAMA,KAAK,GAAGzB,QAAQ,CAACK,MAAvB,EACA;AACI,gBAAMC,KAAK,GAAGN,QAAQ,CAACyB,KAAD,CAAtB;AACA,gBAAMxB,IAAI,GAAGK,KAAK,CAACoB,MAAN,CAAaH,UAAb,CAAb;;AAEA,cAAG,CAACtB,IAAJ,EACA;AACIwB,YAAAA,KAAK;AAEL;AACH;;AAED,cAAGlD,gBAAgB,OAAO0B,IAAI,CAAC0B,GAA/B,EACA;AACIzD,YAAAA,yBAAyB;;AAEzB,gBAAG,CAACD,oBAAoB,CAACqC,KAAD,CAAxB,EACA;AACIlC,cAAAA,eAAe,CAAC,gBAAD,CAAf;AACH;AACJ;;AAED,cAAGkC,KAAK,CAACsB,aAAN,MAAyB,CAA5B,EACA;AACI5B,YAAAA,QAAQ,CAAC6B,MAAT,CAAgBJ,KAAhB,EAAuB,CAAvB;AAEAnB,YAAAA,KAAK,CAACwB,OAAN;AACH;;AAED;AACH;AACJ;;AAED,WAAI,MAAMpB,MAAV,IAAoBU,QAAQ,CAACW,IAAT,EAApB,EACA;AACI,YAAGT,WAAW,CAACU,OAAZ,CAAoBtB,MAApB,KAA+B,CAAlC,EAAqC;AAErC,cAAMb,MAAM,GAAGuB,QAAQ,CAACI,GAAT,CAAad,MAAb,CAAf;AAEA,YAAG,CAACb,MAAJ,EAAY;AAEZ,cAAMI,IAAI,GAAG,IAAI5B,aAAJ,CAAkBwB,MAAlB,CAAb;AAEA7B,QAAAA,gBAAgB,CAACgC,QAAD,EAAWC,IAAX,EAAiBR,QAAQ,CAACf,kBAAkB,CAACoC,KAApB,EAA2BJ,MAA3B,CAAzB,CAAhB;AAEA9B,QAAAA,eAAe,CAAC,IAAID,wBAAJ,CAA6BsB,IAAI,CAACQ,EAAlC,EAAsCR,IAAI,CAACc,IAA3C,EAAiDd,IAAI,CAACe,QAAtD,CAAD,CAAf;AAEH;;AAED,aAAOhB,QAAP;AACH,KA7DY,CAAb;AA+DAlB,IAAAA,iBAAiB,GAAG,IAApB;AACH,GA1EuC,EA0ErC,CAAEW,QAAF,CA1EqC,CAAxC;AA4EA1B,EAAAA,mBAAmB,CAACT,kBAAD,EAAqB2D,oBAArB,CAAnB;AAEA,QAAMgB,8BAA8B,GAAGvE,WAAW,CAAEkC,KAAD,IACnD;AACIX,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAHiD,EAG/C,EAH+C,CAAlD;AAKAlB,EAAAA,mBAAmB,CAACR,4BAAD,EAA+B0E,8BAA/B,CAAnB;AAEA,QAAMC,2BAA2B,GAAGxE,WAAW,CAAEkC,KAAD,IAChD;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAX,IAAAA,aAAa,CAACY,SAAS,IACvB;AACI,YAAMC,QAAQ,GAAG,CAAE,GAAGD,SAAL,CAAjB;AAEA,UAAI0B,KAAK,GAAG,CAAZ;;AAEA,aAAMA,KAAK,GAAGzB,QAAQ,CAACK,MAAvB,EACA;AACI,cAAMC,KAAK,GAAGN,QAAQ,CAACyB,KAAD,CAAtB;AACA,cAAMxB,IAAI,GAAGK,KAAK,CAACoB,MAAN,CAAa7B,MAAM,CAACa,MAApB,CAAb;;AAEA,YAAG,CAACT,IAAJ,EACA;AACIwB,UAAAA,KAAK;AAEL;AACH;;AAED,YAAGlD,gBAAgB,OAAO0B,IAAI,CAAC0B,GAA/B,EACA;AACIzD,UAAAA,yBAAyB;AAEzB,cAAG,CAACD,oBAAoB,CAACqC,KAAD,CAAxB,EAAiClC,eAAe,CAAC,gBAAD,CAAf;AACpC;;AAED,YAAGkC,KAAK,CAACsB,aAAN,MAAyB,CAA5B,EACA;AACI5B,UAAAA,QAAQ,CAAC6B,MAAT,CAAgBJ,KAAhB,EAAuB,CAAvB;AAEAnB,UAAAA,KAAK,CAACwB,OAAN;AACH;;AAED;AACH;;AAED,aAAO9B,QAAP;AACH,KApCY,CAAb;AAqCH,GAzC8C,EAyC5C,EAzC4C,CAA/C;AA2CAjC,EAAAA,mBAAmB,CAACP,yBAAD,EAA4B0E,2BAA5B,CAAnB;AAEA,QAAMC,4BAA4B,GAAGzE,WAAW,CAAEkC,KAAD,IACjD,CAEC,CAH+C,EAG7C,EAH6C,CAAhD;AAKA7B,EAAAA,mBAAmB,CAACN,0BAAD,EAA6B0E,4BAA7B,CAAnB;AAEAxE,EAAAA,SAAS,CAAC,MACV;AACI,QAAG,CAACuB,UAAD,IAAe,CAACA,UAAU,CAACmB,MAA9B,EAAsC;AAEtChB,IAAAA,eAAe,CAACU,SAAS,IACzB;AACI,UAAIC,QAAQ,GAAGD,SAAf;AAEA,UAAGC,QAAQ,IAAKd,UAAU,CAAC8C,OAAX,CAAmBhC,QAAnB,MAAiC,CAAC,CAAlD,EAAsDA,QAAQ,GAAG,IAAX;AAEtD,UAAG,CAACA,QAAJ,EAAcA,QAAQ,GAAGd,UAAU,CAAC,CAAD,CAArB;AAEd,aAAOc,QAAP;AACH,KATc,CAAf;AAUH,GAdQ,EAcN,CAAEd,UAAF,CAdM,CAAT;AAgBAvB,EAAAA,SAAS,CAAC,MACV;AACI,QAAG,CAAC2B,SAAJ,EAAe;AAEf,WAAO,MACP;AACI,UAAGI,aAAa,CAAChB,kBAAkB,CAACoC,KAApB,CAAhB,EACA;AACI3B,QAAAA,aAAa,CAACY,SAAS,IACvB;AACI,gBAAMC,QAAQ,GAAG,CAAE,GAAGD,SAAL,CAAjB;;AAEA,eAAI,MAAMqC,QAAV,IAAsBpC,QAAtB,EAAgCoC,QAAQ,CAACvB,cAAT,GAA0B,KAA1B;;AAEhC,iBAAOb,QAAP;AACH,SAPY,CAAb;AAQH;AACJ,KAbD;AAcH,GAlBQ,EAkBN,CAAEV,SAAF,EAAaI,aAAb,CAlBM,CAAT;AAoBA/B,EAAAA,SAAS,CAAC,MACV;AACI,QAAG,CAAC2B,SAAD,IAAc,CAACN,WAAlB,EAA+B;AAE/BP,IAAAA,mBAAmB,CAAC,IAAIpB,qBAAJ,EAAD,CAAnB;AAEA4B,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAPQ,EAON,CAAEK,SAAF,EAAaN,WAAb,CAPM,CAAT;AASA,SAAO;AAAEM,IAAAA,SAAF;AAAaJ,IAAAA,UAAb;AAAyBC,IAAAA,aAAzB;AAAwCC,IAAAA,YAAxC;AAAsDC,IAAAA,eAAtD;AAAuEE,IAAAA,QAAvE;AAAiFC,IAAAA;AAAjF,GAAP;AACH,CAnQD;;GAAMT,sB;UAKgEF,mB,EAChBf,yB;;;AA+PtD,OAAO,MAAMuE,iBAAiB,GAAG;AAAA;;AAAA,SAAMxE,UAAU,CAACkB,sBAAD,CAAhB;AAAA,CAA1B;;IAAMsD,iB;UAA0BxE,U","sourcesContent":["import { FurnitureListAddOrUpdateEvent, FurnitureListComposer, FurnitureListEvent, FurnitureListInvalidateEvent, FurnitureListItemParser, FurnitureListRemovedEvent, FurniturePostItPlacedEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { useInventoryUnseenTracker } from '.';\nimport { UseMessageEventHook } from '..';\nimport { addFurnitureItem, attemptItemPlacement, cancelRoomObjectPlacement, CloneObject, CreateLinkEvent, FurnitureItem, getAllItemIds, getPlacingItemId, GroupItem, mergeFurniFragments, SendMessageComposer, UnseenItemCategory } from '../../api';\nimport { InventoryFurniAddedEvent } from '../../events';\nimport { DispatchUiEvent } from '../events';\nimport { useSharedVisibility } from '../useSharedVisibility';\n\nlet furniMsgFragments: Map<number, FurnitureListItemParser>[] = null;\n\nconst useInventoryFurniState = () =>\n{\n    const [ needsUpdate, setNeedsUpdate ] = useState(true);\n    const [ groupItems, setGroupItems ] = useState<GroupItem[]>([]);\n    const [ selectedItem, setSelectedItem ] = useState<GroupItem>(null);\n    const { isVisible = false, activate = null, deactivate = null } = useSharedVisibility();\n    const { isUnseen = null, resetCategory = null } = useInventoryUnseenTracker();\n\n    const onFurnitureListAddOrUpdateEvent = useCallback((event: FurnitureListAddOrUpdateEvent) =>\n    {\n        const parser = event.getParser();\n\n        setGroupItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            for(const item of parser.items)\n            {\n                let i = 0;\n                let groupItem: GroupItem = null;\n\n                while(i < newValue.length)\n                {\n                    const group = newValue[i];\n\n                    let j = 0;\n\n                    while(j < group.items.length)\n                    {\n                        const furniture = group.items[j];\n\n                        if(furniture.id === item.itemId)\n                        {\n                            furniture.update(item);\n\n                            const newFurniture = [ ...group.items ];\n\n                            newFurniture[j] = furniture;\n\n                            group.items = newFurniture;\n\n                            groupItem = group;\n\n                            break;\n                        }\n\n                        j++\n                    }\n\n                    if(groupItem) break;\n\n                    i++;\n                }\n\n                if(groupItem)\n                {\n                    groupItem.hasUnseenItems = true;\n\n                    newValue[i] = CloneObject(groupItem);\n                }\n                else\n                {\n                    const furniture = new FurnitureItem(item);\n\n                    addFurnitureItem(newValue, furniture, isUnseen(UnseenItemCategory.FURNI, item.itemId));\n\n                    DispatchUiEvent(new InventoryFurniAddedEvent(furniture.id, furniture.type, furniture.category));\n                }\n            }\n\n            return newValue;\n        });\n    }, [ isUnseen ]);\n\n    UseMessageEventHook(FurnitureListAddOrUpdateEvent, onFurnitureListAddOrUpdateEvent);\n\n    const onFurnitureListEvent = useCallback((event: FurnitureListEvent) =>\n    {\n        const parser = event.getParser();\n        \n        if(!furniMsgFragments) furniMsgFragments = new Array(parser.totalFragments);\n\n        const fragment = mergeFurniFragments(parser.fragment, parser.totalFragments, parser.fragmentNumber, furniMsgFragments);\n\n        if(!fragment) return;\n\n        setGroupItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n            const existingIds = getAllItemIds(newValue);\n\n            for(const existingId of existingIds)\n            {\n                if(fragment.get(existingId)) continue;\n\n                let index = 0;\n\n                while(index < newValue.length)\n                {\n                    const group = newValue[index];\n                    const item = group.remove(existingId);\n\n                    if(!item)\n                    {\n                        index++;\n\n                        continue;\n                    }\n                        \n                    if(getPlacingItemId() === item.ref)\n                    {\n                        cancelRoomObjectPlacement();\n\n                        if(!attemptItemPlacement(group))\n                        {\n                            CreateLinkEvent('inventory/show');\n                        }\n                    }\n\n                    if(group.getTotalCount() <= 0)\n                    {\n                        newValue.splice(index, 1);\n\n                        group.dispose();\n                    }\n\n                    break;\n                }\n            }\n\n            for(const itemId of fragment.keys())\n            {\n                if(existingIds.indexOf(itemId) >= 0) continue;\n\n                const parser = fragment.get(itemId);\n\n                if(!parser) continue;\n\n                const item = new FurnitureItem(parser);\n\n                addFurnitureItem(newValue, item, isUnseen(UnseenItemCategory.FURNI, itemId));\n\n                DispatchUiEvent(new InventoryFurniAddedEvent(item.id, item.type, item.category));\n\n            }\n\n            return newValue;\n        });\n\n        furniMsgFragments = null;\n    }, [ isUnseen ]);\n\n    UseMessageEventHook(FurnitureListEvent, onFurnitureListEvent);\n\n    const onFurnitureListInvalidateEvent = useCallback((event: FurnitureListInvalidateEvent) =>\n    {\n        setNeedsUpdate(true);\n    }, []);\n\n    UseMessageEventHook(FurnitureListInvalidateEvent, onFurnitureListInvalidateEvent);\n\n    const onFurnitureListRemovedEvent = useCallback((event: FurnitureListRemovedEvent) =>\n    {\n        const parser = event.getParser();\n\n        setGroupItems(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            let index = 0;\n\n            while(index < newValue.length)\n            {\n                const group = newValue[index];\n                const item = group.remove(parser.itemId);\n\n                if(!item)\n                {\n                    index++;\n\n                    continue;\n                }\n                    \n                if(getPlacingItemId() === item.ref)\n                {\n                    cancelRoomObjectPlacement();\n\n                    if(!attemptItemPlacement(group)) CreateLinkEvent('inventory/show');\n                }\n\n                if(group.getTotalCount() <= 0)\n                {\n                    newValue.splice(index, 1);\n\n                    group.dispose();\n                }\n\n                break;\n            }\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(FurnitureListRemovedEvent, onFurnitureListRemovedEvent);\n\n    const onFurniturePostItPlacedEvent = useCallback((event: FurniturePostItPlacedEvent) =>\n    {\n\n    }, []);\n\n    UseMessageEventHook(FurniturePostItPlacedEvent, onFurniturePostItPlacedEvent);\n\n    useEffect(() =>\n    {\n        if(!groupItems || !groupItems.length) return;\n\n        setSelectedItem(prevValue =>\n        {\n            let newValue = prevValue;\n\n            if(newValue && (groupItems.indexOf(newValue) === -1)) newValue = null;\n\n            if(!newValue) newValue = groupItems[0];\n\n            return newValue;\n        });\n    }, [ groupItems ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible) return;\n\n        return () =>\n        {\n            if(resetCategory(UnseenItemCategory.FURNI))\n            {\n                setGroupItems(prevValue =>\n                {\n                    const newValue = [ ...prevValue ];\n        \n                    for(const newGroup of newValue) newGroup.hasUnseenItems = false;\n        \n                    return newValue;\n                });\n            }\n        }\n    }, [ isVisible, resetCategory ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible || !needsUpdate) return;\n\n        SendMessageComposer(new FurnitureListComposer());\n\n        setNeedsUpdate(false);\n    }, [ isVisible, needsUpdate ]);\n\n    return { isVisible, groupItems, setGroupItems, selectedItem, setSelectedItem, activate, deactivate };\n}\n\nexport const useInventoryFurni = () => useBetween(useInventoryFurniState);\n"]},"metadata":{},"sourceType":"module"}