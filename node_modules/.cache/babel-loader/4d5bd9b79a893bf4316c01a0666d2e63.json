{"ast":null,"code":"export class QuizDataMessageParser {\n  constructor() {\n    this._quizCode = void 0;\n    this._questionIds = void 0;\n  }\n\n  flush() {\n    this._quizCode = null;\n    this._questionIds = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    this._quizCode = wrapper.readString();\n    const size = wrapper.readInt();\n    this._questionIds = [];\n\n    for (let i = 0; i < size; i++) this._questionIds.push(wrapper.readInt());\n\n    return true;\n  }\n\n  get quizCode() {\n    return this._quizCode;\n  }\n\n  get questionIds() {\n    return this._questionIds;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/help/QuizDataMessageParser.ts"],"names":["QuizDataMessageParser","_quizCode","_questionIds","flush","parse","wrapper","readString","size","readInt","i","push","quizCode","questionIds"],"mappings":"AAEA,OAAO,MAAMA,qBAAN,CACP;AAAA;AAAA,SACYC,SADZ;AAAA,SAEYC,YAFZ;AAAA;;AAIWC,EAAAA,KAAK,GACZ;AACI,SAAKF,SAAL,GAAiB,IAAjB;AACA,SAAKC,YAAL,GAAoB,EAApB;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,SAAKJ,SAAL,GAAiBI,OAAO,CAACC,UAAR,EAAjB;AAEA,UAAMC,IAAI,GAAGF,OAAO,CAACG,OAAR,EAAb;AAEA,SAAKN,YAAL,GAAoB,EAApB;;AAEA,SAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAnB,EAAyBE,CAAC,EAA1B,EAA8B,KAAKP,YAAL,CAAkBQ,IAAlB,CAAuBL,OAAO,CAACG,OAAR,EAAvB;;AAE9B,WAAO,IAAP;AACH;;AAEkB,MAARG,QAAQ,GACnB;AACI,WAAO,KAAKV,SAAZ;AACH;;AAEqB,MAAXW,WAAW,GACtB;AACI,WAAO,KAAKV,YAAZ;AACH;;AAnCL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../core';\r\n\r\nexport class QuizDataMessageParser implements IMessageParser\r\n{\r\n    private _quizCode: string;\r\n    private _questionIds: number[];\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._quizCode = null;\r\n        this._questionIds = [];\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        this._quizCode = wrapper.readString();\r\n\r\n        const size = wrapper.readInt();\r\n\r\n        this._questionIds = [];\r\n\r\n        for(let i = 0; i < size; i++) this._questionIds.push(wrapper.readInt());\r\n\r\n        return true;\r\n    }\r\n\r\n    public get quizCode(): string\r\n    {\r\n        return this._quizCode;\r\n    }\r\n\r\n    public get questionIds(): number[]\r\n    {\r\n        return this._questionIds;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}