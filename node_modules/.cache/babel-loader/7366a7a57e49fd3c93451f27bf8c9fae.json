{"ast":null,"code":"import { AnimationFrame } from './AnimationFrame';\nexport class AnimationStateData {\n  constructor() {\n    this._animationId = void 0;\n    this._animationAfterTransitionId = void 0;\n    this._animationOver = void 0;\n    this._frameCounter = void 0;\n    this._frames = void 0;\n    this._lastFramePlayed = void 0;\n    this._animationPlayed = void 0;\n    this._layerCount = void 0;\n    this._animationId = -1;\n    this._animationAfterTransitionId = 0;\n    this._animationOver = false;\n    this._frameCounter = 0;\n    this._frames = [];\n    this._lastFramePlayed = [];\n    this._animationPlayed = [];\n    this._layerCount = 0;\n  }\n\n  get animationOver() {\n    return this._animationOver;\n  }\n\n  set animationOver(k) {\n    this._animationOver = k;\n  }\n\n  get frameCounter() {\n    return this._frameCounter;\n  }\n\n  set frameCounter(k) {\n    this._frameCounter = k;\n  }\n\n  get animationId() {\n    return this._animationId;\n  }\n\n  set animationId(animationId) {\n    if (animationId === this._animationId) return;\n    this._animationId = animationId;\n    this.resetAnimationFrames(false);\n  }\n\n  get animationAfterTransitionId() {\n    return this._animationAfterTransitionId;\n  }\n\n  set animationAfterTransitionId(k) {\n    this._animationAfterTransitionId = k;\n  }\n\n  dispose() {\n    this.recycleFrames();\n    this._frames = null;\n    this._lastFramePlayed = null;\n    this._animationPlayed = null;\n  }\n\n  setLayerCount(k) {\n    this._layerCount = k;\n    this.resetAnimationFrames();\n  }\n\n  resetAnimationFrames() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    if (k || !this._frames) {\n      this.recycleFrames();\n      this._frames = [];\n    }\n\n    this._lastFramePlayed = [];\n    this._animationPlayed = [];\n    this._animationOver = false;\n    this._frameCounter = 0;\n    let layerId = 0;\n\n    while (layerId < this._layerCount) {\n      if (k || this._frames.length <= layerId) {\n        this._frames[layerId] = null;\n      } else {\n        const frame = this._frames[layerId];\n\n        if (frame) {\n          frame.recycle();\n          this._frames[layerId] = AnimationFrame.allocate(frame.id, frame.x, frame.y, frame.repeats, 0, frame.isLastFrame);\n        }\n      }\n\n      this._lastFramePlayed[layerId] = false;\n      this._animationPlayed[layerId] = false;\n      layerId++;\n    }\n  }\n\n  recycleFrames() {\n    if (!this._frames || !this._frames.length) return;\n\n    for (const frame of this._frames) {\n      if (!frame) continue;\n      frame.recycle();\n    }\n  }\n\n  getFrame(layerId) {\n    if (layerId < 0 || layerId >= this._layerCount) return null;\n    return this._frames[layerId];\n  }\n\n  setFrame(layerId, frame) {\n    if (layerId < 0 || layerId >= this._layerCount) return;\n    const existingFrame = this._frames[layerId];\n    if (existingFrame) existingFrame.recycle();\n    this._frames[layerId] = frame;\n  }\n\n  getAnimationPlayed(layerId) {\n    if (layerId < 0 || layerId >= this._layerCount) return true;\n    return this._animationPlayed[layerId];\n  }\n\n  setAnimationPlayed(layerId, flag) {\n    if (layerId < 0 || layerId >= this._layerCount) return;\n    this._animationPlayed[layerId] = flag;\n  }\n\n  getLastFramePlayed(layerId) {\n    if (layerId < 0 || layerId >= this._layerCount) return true;\n    return this._lastFramePlayed[layerId];\n  }\n\n  setLastFramePlayed(layerId, flag) {\n    if (layerId < 0 || layerId >= this._layerCount) return;\n    this._lastFramePlayed[layerId] = flag;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/AnimationStateData.ts"],"names":["AnimationFrame","AnimationStateData","constructor","_animationId","_animationAfterTransitionId","_animationOver","_frameCounter","_frames","_lastFramePlayed","_animationPlayed","_layerCount","animationOver","k","frameCounter","animationId","resetAnimationFrames","animationAfterTransitionId","dispose","recycleFrames","setLayerCount","layerId","length","frame","recycle","allocate","id","x","y","repeats","isLastFrame","getFrame","setFrame","existingFrame","getAnimationPlayed","setAnimationPlayed","flag","getLastFramePlayed","setLastFramePlayed"],"mappings":"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","sourcesContent":["import { AnimationFrame } from './AnimationFrame';\r\n\r\nexport class AnimationStateData\r\n{\r\n    private _animationId: number;\r\n    private _animationAfterTransitionId: number;\r\n    private _animationOver: boolean;\r\n    private _frameCounter: number;\r\n    private _frames: AnimationFrame[];\r\n    private _lastFramePlayed: boolean[];\r\n    private _animationPlayed: boolean[];\r\n    private _layerCount: number;\r\n\r\n    constructor()\r\n    {\r\n        this._animationId = -1;\r\n        this._animationAfterTransitionId = 0;\r\n        this._animationOver = false;\r\n        this._frameCounter = 0;\r\n        this._frames = [];\r\n        this._lastFramePlayed = [];\r\n        this._animationPlayed = [];\r\n        this._layerCount = 0;\r\n    }\r\n\r\n    public get animationOver(): boolean\r\n    {\r\n        return this._animationOver;\r\n    }\r\n\r\n    public set animationOver(k: boolean)\r\n    {\r\n        this._animationOver = k;\r\n    }\r\n\r\n    public get frameCounter(): number\r\n    {\r\n        return this._frameCounter;\r\n    }\r\n\r\n    public set frameCounter(k: number)\r\n    {\r\n        this._frameCounter = k;\r\n    }\r\n\r\n    public get animationId(): number\r\n    {\r\n        return this._animationId;\r\n    }\r\n\r\n    public set animationId(animationId: number)\r\n    {\r\n        if(animationId === this._animationId) return;\r\n\r\n        this._animationId = animationId;\r\n\r\n        this.resetAnimationFrames(false);\r\n    }\r\n\r\n    public get animationAfterTransitionId(): number\r\n    {\r\n        return this._animationAfterTransitionId;\r\n    }\r\n\r\n    public set animationAfterTransitionId(k: number)\r\n    {\r\n        this._animationAfterTransitionId = k;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this.recycleFrames();\r\n\r\n        this._frames = null;\r\n        this._lastFramePlayed = null;\r\n        this._animationPlayed = null;\r\n    }\r\n\r\n    public setLayerCount(k: number): void\r\n    {\r\n        this._layerCount = k;\r\n\r\n        this.resetAnimationFrames();\r\n    }\r\n\r\n    public resetAnimationFrames(k: boolean = true): void\r\n    {\r\n        if(k || (!this._frames))\r\n        {\r\n            this.recycleFrames();\r\n\r\n            this._frames = [];\r\n        }\r\n\r\n        this._lastFramePlayed = [];\r\n        this._animationPlayed = [];\r\n        this._animationOver = false;\r\n        this._frameCounter = 0;\r\n\r\n        let layerId = 0;\r\n\r\n        while(layerId < this._layerCount)\r\n        {\r\n            if(k || (this._frames.length <= layerId))\r\n            {\r\n                this._frames[layerId] = null;\r\n            }\r\n            else\r\n            {\r\n                const frame = this._frames[layerId];\r\n\r\n                if(frame)\r\n                {\r\n                    frame.recycle();\r\n\r\n                    this._frames[layerId] = AnimationFrame.allocate(frame.id, frame.x, frame.y, frame.repeats, 0, frame.isLastFrame);\r\n                }\r\n            }\r\n\r\n            this._lastFramePlayed[layerId] = false;\r\n            this._animationPlayed[layerId] = false;\r\n\r\n            layerId++;\r\n        }\r\n    }\r\n\r\n    private recycleFrames(): void\r\n    {\r\n        if(!this._frames || !this._frames.length) return;\r\n\r\n        for(const frame of this._frames)\r\n        {\r\n            if(!frame) continue;\r\n\r\n            frame.recycle();\r\n        }\r\n    }\r\n\r\n    public getFrame(layerId: number): AnimationFrame\r\n    {\r\n        if((layerId < 0) || (layerId >= this._layerCount)) return null;\r\n\r\n        return this._frames[layerId];\r\n    }\r\n\r\n    public setFrame(layerId: number, frame: AnimationFrame): void\r\n    {\r\n        if((layerId < 0) || (layerId >= this._layerCount)) return;\r\n\r\n        const existingFrame = this._frames[layerId];\r\n\r\n        if(existingFrame) existingFrame.recycle();\r\n\r\n        this._frames[layerId] = frame;\r\n    }\r\n\r\n    public getAnimationPlayed(layerId: number): boolean\r\n    {\r\n        if((layerId < 0) || (layerId >= this._layerCount)) return true;\r\n\r\n        return this._animationPlayed[layerId];\r\n    }\r\n\r\n    public setAnimationPlayed(layerId: number, flag: boolean): void\r\n    {\r\n        if((layerId < 0) || (layerId >= this._layerCount)) return;\r\n\r\n        this._animationPlayed[layerId] = flag;\r\n    }\r\n\r\n    public getLastFramePlayed(layerId: number): boolean\r\n    {\r\n        if((layerId < 0) || (layerId >= this._layerCount)) return true;\r\n\r\n        return this._lastFramePlayed[layerId];\r\n    }\r\n\r\n    public setLastFramePlayed(layerId: number, flag: boolean): void\r\n    {\r\n        if((layerId < 0) || (layerId >= this._layerCount)) return;\r\n\r\n        this._lastFramePlayed[layerId] = flag;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}