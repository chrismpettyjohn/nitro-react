{"ast":null,"code":"import { PlaneMaterialCellMatrix } from './PlaneMaterialCellMatrix';\nexport class PlaneMaterial {\n  constructor() {\n    this._planeMaterialItems = void 0;\n    this._isCached = void 0;\n    this._planeMaterialItems = [];\n    this._isCached = false;\n  }\n\n  dispose() {\n    if (this._planeMaterialItems && this._planeMaterialItems.length) {\n      for (const item of this._planeMaterialItems) {\n        if (!item) continue;\n        item.dispose();\n      }\n\n      this._planeMaterialItems = null;\n    }\n\n    this._isCached = false;\n  }\n\n  clearCache() {\n    if (!this._isCached) return;\n\n    if (this._planeMaterialItems && this._planeMaterialItems.length) {\n      for (const item of this._planeMaterialItems) {\n        if (!item) continue;\n        item.clearCache();\n      }\n    }\n\n    this._isCached = false;\n  }\n\n  addMaterialCellMatrix(totalColumns, repeatMode, align) {\n    let normalMinX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let normalMaxX = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let normalMinY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;\n    let normalMaxY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n    const cellMatrix = new PlaneMaterialCellMatrix(totalColumns, repeatMode, align, normalMinX, normalMaxX, normalMinY, normalMaxY);\n\n    this._planeMaterialItems.push(cellMatrix);\n\n    return cellMatrix;\n  }\n\n  getMaterialCellMatrix(normal) {\n    if (!normal) return null;\n\n    if (this._planeMaterialItems && this._planeMaterialItems.length) {\n      for (const item of this._planeMaterialItems) {\n        if (!item) continue;\n        if (normal.x >= item.normalMinX && normal.x <= item.normalMaxX && normal.y >= item.normalMinY && normal.y <= item.normalMaxY) return item;\n      }\n    }\n\n    return null;\n  }\n\n  render(canvas, width, height, normal, useTexture, offsetX, offsetY, topAlign) {\n    if (width < 1) width = 1;\n    if (height < 1) height = 1;\n    const cellMatrix = this.getMaterialCellMatrix(normal);\n    if (!cellMatrix) return null;\n    this._isCached = true;\n    return cellMatrix.render(canvas, width, height, normal, useTexture, offsetX, offsetY, topAlign);\n  }\n\n}\nPlaneMaterial.MIN_NORMAL_COORDINATE_VALUE = -1;\nPlaneMaterial.MAX_NORMAL_COORDINATE_VALUE = 1;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/PlaneMaterial.ts"],"names":["PlaneMaterialCellMatrix","PlaneMaterial","constructor","_planeMaterialItems","_isCached","dispose","length","item","clearCache","addMaterialCellMatrix","totalColumns","repeatMode","align","normalMinX","normalMaxX","normalMinY","normalMaxY","cellMatrix","push","getMaterialCellMatrix","normal","x","y","render","canvas","width","height","useTexture","offsetX","offsetY","topAlign","MIN_NORMAL_COORDINATE_VALUE","MAX_NORMAL_COORDINATE_VALUE"],"mappings":"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","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { PlaneMaterialCellMatrix } from './PlaneMaterialCellMatrix';\r\n\r\nexport class PlaneMaterial\r\n{\r\n    public static MIN_NORMAL_COORDINATE_VALUE: number = -1;\r\n    public static MAX_NORMAL_COORDINATE_VALUE: number = 1;\r\n\r\n    private _planeMaterialItems: PlaneMaterialCellMatrix[];\r\n    private _isCached: boolean;\r\n\r\n    constructor()\r\n    {\r\n        this._planeMaterialItems = [];\r\n        this._isCached = false;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._planeMaterialItems && this._planeMaterialItems.length)\r\n        {\r\n            for(const item of this._planeMaterialItems)\r\n            {\r\n                if(!item) continue;\r\n\r\n                item.dispose();\r\n            }\r\n\r\n            this._planeMaterialItems = null;\r\n        }\r\n\r\n        this._isCached = false;\r\n    }\r\n\r\n    public clearCache(): void\r\n    {\r\n        if(!this._isCached) return;\r\n\r\n        if(this._planeMaterialItems && this._planeMaterialItems.length)\r\n        {\r\n            for(const item of this._planeMaterialItems)\r\n            {\r\n                if(!item) continue;\r\n\r\n                item.clearCache();\r\n            }\r\n        }\r\n\r\n        this._isCached = false;\r\n    }\r\n\r\n    public addMaterialCellMatrix(totalColumns: number, repeatMode: number, align: number, normalMinX: number = -1, normalMaxX: number = 1, normalMinY: number = -1, normalMaxY: number = 1): PlaneMaterialCellMatrix\r\n    {\r\n        const cellMatrix = new PlaneMaterialCellMatrix(totalColumns, repeatMode, align, normalMinX, normalMaxX, normalMinY, normalMaxY);\r\n\r\n        this._planeMaterialItems.push(cellMatrix);\r\n\r\n        return cellMatrix;\r\n    }\r\n\r\n    public getMaterialCellMatrix(normal: IVector3D): PlaneMaterialCellMatrix\r\n    {\r\n        if(!normal) return null;\r\n\r\n        if(this._planeMaterialItems && this._planeMaterialItems.length)\r\n        {\r\n            for(const item of this._planeMaterialItems)\r\n            {\r\n                if(!item) continue;\r\n\r\n                if((((normal.x >= item.normalMinX) && (normal.x <= item.normalMaxX)) && (normal.y >= item.normalMinY)) && (normal.y <= item.normalMaxY)) return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public render(canvas: Graphics, width: number, height: number, normal: IVector3D, useTexture: boolean, offsetX: number, offsetY: number, topAlign: boolean): Graphics\r\n    {\r\n        if(width < 1) width = 1;\r\n\r\n        if(height < 1) height = 1;\r\n\r\n        const cellMatrix = this.getMaterialCellMatrix(normal);\r\n\r\n        if(!cellMatrix) return null;\r\n\r\n        this._isCached = true;\r\n\r\n        return cellMatrix.render(canvas, width, height, normal, useTexture, offsetX, offsetY, topAlign);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}