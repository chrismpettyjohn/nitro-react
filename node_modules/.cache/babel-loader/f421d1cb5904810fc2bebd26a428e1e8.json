{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/mod-tools/views/tickets/ModToolsTicketsView.tsx\",\n    _s = $RefreshSig$();\n\nimport { IssueMessageData } from '@nitrots/nitro-renderer';\nimport { useCallback, useMemo, useState } from 'react';\nimport { GetSessionDataManager } from '../../../../api';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../../../common';\nimport { useModToolsContext } from '../../ModToolsContext';\nimport { ModToolsIssueInfoView } from './ModToolsIssueInfoView';\nimport { ModToolsMyIssuesTabView } from './ModToolsMyIssuesTabView';\nimport { ModToolsOpenIssuesTabView } from './ModToolsOpenIssuesTabView';\nimport { ModToolsPickedIssuesTabView } from './ModToolsPickedIssuesTabView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TABS = ['Open Issues', 'My Issues', 'Picked Issues'];\nexport const ModToolsTicketsView = props => {\n  _s();\n\n  const {\n    onCloseClick = null\n  } = props;\n  const {\n    modToolsState = null\n  } = useModToolsContext();\n  const {\n    tickets = null\n  } = modToolsState;\n  const [currentTab, setCurrentTab] = useState(0);\n  const [issueInfoWindows, setIssueInfoWindows] = useState([]);\n  const openIssues = useMemo(() => {\n    if (!tickets) return [];\n    return tickets.filter(issue => issue.state === IssueMessageData.STATE_OPEN);\n  }, [tickets]);\n  const myIssues = useMemo(() => {\n    if (!tickets) return [];\n    return tickets.filter(issue => issue.state === IssueMessageData.STATE_PICKED && issue.pickerUserId === GetSessionDataManager().userId);\n  }, [tickets]);\n  const pickedIssues = useMemo(() => {\n    if (!tickets) return [];\n    return tickets.filter(issue => issue.state === IssueMessageData.STATE_PICKED);\n  }, [tickets]);\n  const onIssueInfoClosed = useCallback(issueId => {\n    const indexOfValue = issueInfoWindows.indexOf(issueId);\n    if (indexOfValue === -1) return;\n    const newValues = Array.from(issueInfoWindows);\n    newValues.splice(indexOfValue, 1);\n    setIssueInfoWindows(newValues);\n  }, [issueInfoWindows]);\n  const onIssueHandleClicked = useCallback(issueId => {\n    if (issueInfoWindows.indexOf(issueId) === -1) {\n      const newValues = Array.from(issueInfoWindows);\n      newValues.push(issueId);\n      setIssueInfoWindows(newValues);\n    } else {\n      onIssueInfoClosed(issueId);\n    }\n  }, [issueInfoWindows, onIssueInfoClosed]);\n  const CurrentTabComponent = useCallback(() => {\n    switch (currentTab) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(ModToolsOpenIssuesTabView, {\n          openIssues: openIssues\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 28\n        }, this);\n\n      case 1:\n        return /*#__PURE__*/_jsxDEV(ModToolsMyIssuesTabView, {\n          myIssues: myIssues,\n          onIssueHandleClick: onIssueHandleClicked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 28\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(ModToolsPickedIssuesTabView, {\n          pickedIssues: pickedIssues\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 28\n        }, this);\n\n      default:\n        return null;\n    }\n  }, [currentTab, myIssues, onIssueHandleClicked, openIssues, pickedIssues]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NitroCardView, {\n      className: \"nitro-mod-tools-tickets\",\n      children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n        headerText: 'Tickets',\n        onCloseClick: onCloseClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardTabsView, {\n        children: TABS.map((tab, index) => {\n          return /*#__PURE__*/_jsxDEV(NitroCardTabsItemView, {\n            isActive: currentTab === index,\n            onClick: event => setCurrentTab(index),\n            children: tab\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n        gap: 1,\n        children: /*#__PURE__*/_jsxDEV(CurrentTabComponent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), issueInfoWindows && issueInfoWindows.length > 0 && issueInfoWindows.map(issueId => /*#__PURE__*/_jsxDEV(ModToolsIssueInfoView, {\n      issueId: issueId,\n      onIssueInfoClosed: onIssueInfoClosed\n    }, issueId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 100\n    }, this))]\n  }, void 0, true);\n};\n\n_s(ModToolsTicketsView, \"aHO0LpDZSU5bwiAj6HnThhg8Nv4=\", false, function () {\n  return [useModToolsContext];\n});\n\n_c = ModToolsTicketsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModToolsTicketsView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/mod-tools/views/tickets/ModToolsTicketsView.tsx"],"names":["IssueMessageData","useCallback","useMemo","useState","GetSessionDataManager","NitroCardContentView","NitroCardHeaderView","NitroCardTabsItemView","NitroCardTabsView","NitroCardView","useModToolsContext","ModToolsIssueInfoView","ModToolsMyIssuesTabView","ModToolsOpenIssuesTabView","ModToolsPickedIssuesTabView","TABS","ModToolsTicketsView","props","onCloseClick","modToolsState","tickets","currentTab","setCurrentTab","issueInfoWindows","setIssueInfoWindows","openIssues","filter","issue","state","STATE_OPEN","myIssues","STATE_PICKED","pickerUserId","userId","pickedIssues","onIssueInfoClosed","issueId","indexOfValue","indexOf","newValues","Array","from","splice","onIssueHandleClicked","push","CurrentTabComponent","map","tab","index","event","length"],"mappings":"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","sourcesContent":["import { IssueMessageData } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useMemo, useState } from 'react';\nimport { GetSessionDataManager } from '../../../../api';\nimport { NitroCardContentView, NitroCardHeaderView, NitroCardTabsItemView, NitroCardTabsView, NitroCardView } from '../../../../common';\nimport { useModToolsContext } from '../../ModToolsContext';\nimport { ModToolsIssueInfoView } from './ModToolsIssueInfoView';\nimport { ModToolsMyIssuesTabView } from './ModToolsMyIssuesTabView';\nimport { ModToolsOpenIssuesTabView } from './ModToolsOpenIssuesTabView';\nimport { ModToolsPickedIssuesTabView } from './ModToolsPickedIssuesTabView';\n\ninterface ModToolsTicketsViewProps\n{\n    onCloseClick: () => void;\n}\n\nconst TABS: string[] = [\n    'Open Issues',\n    'My Issues',\n    'Picked Issues'\n];\n\nexport const ModToolsTicketsView: FC<ModToolsTicketsViewProps> = props =>\n{\n    const { onCloseClick = null } = props;\n    const { modToolsState = null } = useModToolsContext();\n    const { tickets= null } = modToolsState;\n    const [ currentTab, setCurrentTab ] = useState<number>(0);\n    const [ issueInfoWindows, setIssueInfoWindows ] = useState<number[]>([]);\n\n    const openIssues = useMemo(() =>\n    {\n        if(!tickets) return [];\n        \n        return tickets.filter(issue => issue.state === IssueMessageData.STATE_OPEN);\n    }, [ tickets ]);\n\n    const myIssues = useMemo(() =>\n    {\n        if(!tickets) return [];\n\n        return tickets.filter(issue => (issue.state === IssueMessageData.STATE_PICKED) && (issue.pickerUserId === GetSessionDataManager().userId));\n    }, [ tickets ]);\n\n    const pickedIssues = useMemo(() =>\n    {\n        if(!tickets) return [];\n\n        return tickets.filter(issue => issue.state === IssueMessageData.STATE_PICKED);\n    }, [ tickets ]);\n\n    const onIssueInfoClosed = useCallback((issueId: number) =>\n    {\n        const indexOfValue = issueInfoWindows.indexOf(issueId);\n\n        if(indexOfValue === -1) return;\n\n        const newValues = Array.from(issueInfoWindows);\n        newValues.splice(indexOfValue, 1);\n        setIssueInfoWindows(newValues);\n    }, [ issueInfoWindows ]);\n    \n    const onIssueHandleClicked = useCallback((issueId: number) =>\n    {\n        if(issueInfoWindows.indexOf(issueId) === -1)\n        {\n            const newValues = Array.from(issueInfoWindows);\n            newValues.push(issueId);\n            setIssueInfoWindows(newValues);\n        }\n        else \n        {\n            onIssueInfoClosed(issueId);\n        }\n    }, [ issueInfoWindows, onIssueInfoClosed ]);\n\n    const CurrentTabComponent = useCallback(() =>\n    {\n        switch(currentTab)\n        {\n            case 0: return <ModToolsOpenIssuesTabView openIssues={ openIssues }/>;\n            case 1: return <ModToolsMyIssuesTabView myIssues={ myIssues } onIssueHandleClick={ onIssueHandleClicked }/>;\n            case 2: return <ModToolsPickedIssuesTabView pickedIssues={ pickedIssues }/>;\n            default: return null;\n        }\n    }, [ currentTab, myIssues, onIssueHandleClicked, openIssues, pickedIssues ]);\n\n    return (\n        <>\n            <NitroCardView className=\"nitro-mod-tools-tickets\">\n                <NitroCardHeaderView headerText={ 'Tickets' } onCloseClick={ onCloseClick } />\n                <NitroCardTabsView>\n                    { TABS.map((tab, index) =>\n                    {\n                        return (<NitroCardTabsItemView key={ index } isActive={ (currentTab === index) } onClick={ event => setCurrentTab(index) }>\n                            { tab }\n                        </NitroCardTabsItemView>);\n                    }) }\n                </NitroCardTabsView>\n                <NitroCardContentView gap={ 1 }>\n                    <CurrentTabComponent />\n                </NitroCardContentView>\n            </NitroCardView>\n            { issueInfoWindows && (issueInfoWindows.length > 0) && issueInfoWindows.map(issueId => <ModToolsIssueInfoView key={ issueId } issueId={ issueId } onIssueInfoClosed={ onIssueInfoClosed } />) }\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}