{"ast":null,"code":"import { Vector3d } from '../../../../../../../room/utils/Vector3d';\nimport { Plane } from './Plane';\nexport class FloorPlane extends Plane {\n  render(canvas, width, height, scale, normal, useTexture, offsetX, offsetY) {\n    const visualization = this.getPlaneVisualization(scale);\n    if (!visualization || !visualization.geometry) return null;\n\n    const _local_10 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 0));\n\n    const _local_11 = visualization.geometry.getScreenPoint(new Vector3d(0, height / visualization.geometry.scale, 0));\n\n    const _local_12 = visualization.geometry.getScreenPoint(new Vector3d(width / visualization.geometry.scale, 0, 0));\n\n    let x = 0;\n    let y = 0;\n\n    if (_local_10 && _local_11 && _local_12) {\n      width = Math.round(Math.abs(_local_10.x - _local_12.x));\n      height = Math.round(Math.abs(_local_10.x - _local_11.x));\n\n      const _local_15 = _local_10.x - visualization.geometry.getScreenPoint(new Vector3d(1, 0, 0)).x;\n\n      x = offsetX * Math.trunc(Math.abs(_local_15));\n      y = offsetY * Math.trunc(Math.abs(_local_15));\n    }\n\n    return visualization.render(canvas, width, height, normal, useTexture, x, y);\n  }\n\n}\nFloorPlane.DEFAULT_COLOR = 0xFFFFFF;\nFloorPlane.HORIZONTAL_ANGLE_DEFAULT = 45;\nFloorPlane.VERTICAL_ANGLE_DEFAULT = 30;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/FloorPlane.ts"],"names":["Vector3d","Plane","FloorPlane","render","canvas","width","height","scale","normal","useTexture","offsetX","offsetY","visualization","getPlaneVisualization","geometry","_local_10","getScreenPoint","_local_11","_local_12","x","y","Math","round","abs","_local_15","trunc","DEFAULT_COLOR","HORIZONTAL_ANGLE_DEFAULT","VERTICAL_ANGLE_DEFAULT"],"mappings":"AAEA,SAASA,QAAT,QAAyB,0CAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,UAAN,SAAyBD,KAAzB,CACP;AAKWE,EAAAA,MAAM,CAACC,MAAD,EAAmBC,KAAnB,EAAkCC,MAAlC,EAAkDC,KAAlD,EAAiEC,MAAjE,EAAoFC,UAApF,EAAyGC,OAAzG,EAA0HC,OAA1H,EACb;AACI,UAAMC,aAAa,GAAG,KAAKC,qBAAL,CAA2BN,KAA3B,CAAtB;AAEA,QAAG,CAACK,aAAD,IAAkB,CAACA,aAAa,CAACE,QAApC,EAA8C,OAAO,IAAP;;AAE9C,UAAMC,SAAS,GAAGH,aAAa,CAACE,QAAd,CAAuBE,cAAvB,CAAsC,IAAIhB,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAtC,CAAlB;;AACA,UAAMiB,SAAS,GAAGL,aAAa,CAACE,QAAd,CAAuBE,cAAvB,CAAsC,IAAIhB,QAAJ,CAAa,CAAb,EAAiBM,MAAM,GAAGM,aAAa,CAACE,QAAd,CAAuBP,KAAjD,EAAyD,CAAzD,CAAtC,CAAlB;;AACA,UAAMW,SAAS,GAAGN,aAAa,CAACE,QAAd,CAAuBE,cAAvB,CAAsC,IAAIhB,QAAJ,CAAcK,KAAK,GAAGO,aAAa,CAACE,QAAd,CAAuBP,KAA7C,EAAqD,CAArD,EAAwD,CAAxD,CAAtC,CAAlB;;AAEA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;;AAEA,QAAGL,SAAS,IAAIE,SAAb,IAA0BC,SAA7B,EACA;AACIb,MAAAA,KAAK,GAAGgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAAUR,SAAS,CAACI,CAAV,GAAcD,SAAS,CAACC,CAAlC,CAAX,CAAR;AACAb,MAAAA,MAAM,GAAGe,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAAUR,SAAS,CAACI,CAAV,GAAcF,SAAS,CAACE,CAAlC,CAAX,CAAT;;AAEA,YAAMK,SAAS,GAAIT,SAAS,CAACI,CAAV,GAAcP,aAAa,CAACE,QAAd,CAAuBE,cAAvB,CAAsC,IAAIhB,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAtC,EAA6DmB,CAA9F;;AAEAA,MAAAA,CAAC,GAAIT,OAAO,GAAGW,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACE,GAAL,CAASC,SAAT,CAAX,CAAf;AACAJ,MAAAA,CAAC,GAAIT,OAAO,GAAGU,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACE,GAAL,CAASC,SAAT,CAAX,CAAf;AACH;;AAED,WAAOZ,aAAa,CAACT,MAAd,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,EAA4CE,MAA5C,EAAoDC,UAApD,EAAgEU,CAAhE,EAAmEC,CAAnE,CAAP;AACH;;AA9BL;AADalB,U,CAEKwB,a,GAAwB,Q;AAF7BxB,U,CAGKyB,wB,GAAmC,E;AAHxCzB,U,CAIK0B,sB,GAAiC,E","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { Vector3d } from '../../../../../../../room/utils/Vector3d';\r\nimport { Plane } from './Plane';\r\n\r\nexport class FloorPlane extends Plane\r\n{\r\n    public static DEFAULT_COLOR: number = 0xFFFFFF;\r\n    public static HORIZONTAL_ANGLE_DEFAULT: number = 45;\r\n    public static VERTICAL_ANGLE_DEFAULT: number = 30;\r\n\r\n    public render(canvas: Graphics, width: number, height: number, scale: number, normal: IVector3D, useTexture: boolean, offsetX: number, offsetY: number): Graphics\r\n    {\r\n        const visualization = this.getPlaneVisualization(scale);\r\n\r\n        if(!visualization || !visualization.geometry) return null;\r\n\r\n        const _local_10 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 0));\r\n        const _local_11 = visualization.geometry.getScreenPoint(new Vector3d(0, (height / visualization.geometry.scale), 0));\r\n        const _local_12 = visualization.geometry.getScreenPoint(new Vector3d((width / visualization.geometry.scale), 0, 0));\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        if(_local_10 && _local_11 && _local_12)\r\n        {\r\n            width = Math.round(Math.abs((_local_10.x - _local_12.x)));\r\n            height = Math.round(Math.abs((_local_10.x - _local_11.x)));\r\n\r\n            const _local_15 = (_local_10.x - visualization.geometry.getScreenPoint(new Vector3d(1, 0, 0)).x);\r\n\r\n            x = (offsetX * Math.trunc(Math.abs(_local_15)));\r\n            y = (offsetY * Math.trunc(Math.abs(_local_15)));\r\n        }\r\n\r\n        return visualization.render(canvas, width, height, normal, useTexture, x, y);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}