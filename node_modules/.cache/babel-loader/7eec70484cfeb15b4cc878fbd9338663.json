{"ast":null,"code":"import { RoomObjectVariable } from '../../RoomObjectVariable';\nimport { FurnitureVisualization } from './FurnitureVisualization';\nexport class FurnitureGiftWrappedVisualization extends FurnitureVisualization {\n  constructor() {\n    super(...arguments);\n    this._packetType = 0;\n    this._ribbonType = 0;\n  }\n\n  update(geometry, time, update, skipUpdate) {\n    this.updatePresentWrap();\n    super.update(geometry, time, update, skipUpdate);\n  }\n\n  updatePresentWrap() {\n    if (!this.object) return;\n    const extras = this.object.model.getValue(RoomObjectVariable.FURNITURE_EXTRAS);\n    const local3 = 1000;\n    const typeIndex = parseInt(extras);\n    this._packetType = Math.floor(typeIndex / local3);\n    this._ribbonType = typeIndex % local3;\n  }\n\n  getFrameNumber(scale, layerId) {\n    if (layerId <= 1) return this._packetType;\n    return this._ribbonType;\n  }\n\n  getSpriteAssetName(scale, layerId) {\n    const size = this.getValidSize(scale);\n    let assetName = this._type;\n    let layerCode = '';\n\n    if (layerId < this.spriteCount - 1) {\n      layerCode = String.fromCharCode('a'.charCodeAt(0) + layerId);\n    } else {\n      layerCode = 'sd';\n    }\n\n    const frameNumber = this.getFrameNumber(scale, layerId);\n    assetName = assetName + ('_' + size + '_' + layerCode + '_' + this.direction);\n    assetName = assetName + ('_' + frameNumber);\n    return assetName;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurnitureGiftWrappedVisualization.ts"],"names":["RoomObjectVariable","FurnitureVisualization","FurnitureGiftWrappedVisualization","_packetType","_ribbonType","update","geometry","time","skipUpdate","updatePresentWrap","object","extras","model","getValue","FURNITURE_EXTRAS","local3","typeIndex","parseInt","Math","floor","getFrameNumber","scale","layerId","getSpriteAssetName","size","getValidSize","assetName","_type","layerCode","spriteCount","String","fromCharCode","charCodeAt","frameNumber","direction"],"mappings":"AACA,SAASA,kBAAT,QAAmC,0BAAnC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA,OAAO,MAAMC,iCAAN,SAAgDD,sBAAhD,CACP;AAAA;AAAA;AAAA,SACYE,WADZ,GACkC,CADlC;AAAA,SAEYC,WAFZ,GAEkC,CAFlC;AAAA;;AAIWC,EAAAA,MAAM,CAACC,QAAD,EAA0BC,IAA1B,EAAwCF,MAAxC,EAAyDG,UAAzD,EACb;AACI,SAAKC,iBAAL;AAEA,UAAMJ,MAAN,CAAaC,QAAb,EAAuBC,IAAvB,EAA6BF,MAA7B,EAAqCG,UAArC;AACH;;AAEOC,EAAAA,iBAAiB,GACzB;AACI,QAAG,CAAC,KAAKC,MAAT,EAAiB;AAEjB,UAAMC,MAAM,GAAG,KAAKD,MAAL,CAAYE,KAAZ,CAAkBC,QAAlB,CAAmCb,kBAAkB,CAACc,gBAAtD,CAAf;AAEA,UAAMC,MAAM,GAAG,IAAf;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACN,MAAD,CAA1B;AAEA,SAAKR,WAAL,GAAmBe,IAAI,CAACC,KAAL,CAAYH,SAAS,GAAGD,MAAxB,CAAnB;AACA,SAAKX,WAAL,GAAoBY,SAAS,GAAGD,MAAhC;AACH;;AAEMK,EAAAA,cAAc,CAACC,KAAD,EAAgBC,OAAhB,EACrB;AACI,QAAGA,OAAO,IAAI,CAAd,EAAiB,OAAO,KAAKnB,WAAZ;AAEjB,WAAO,KAAKC,WAAZ;AACH;;AAEMmB,EAAAA,kBAAkB,CAACF,KAAD,EAAgBC,OAAhB,EACzB;AACI,UAAME,IAAI,GAAG,KAAKC,YAAL,CAAkBJ,KAAlB,CAAb;AAEA,QAAIK,SAAS,GAAG,KAAKC,KAArB;AACA,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAGN,OAAO,GAAI,KAAKO,WAAL,GAAmB,CAAjC,EACA;AACID,MAAAA,SAAS,GAAGE,MAAM,CAACC,YAAP,CAAqB,IAAIC,UAAJ,CAAe,CAAf,IAAoBV,OAAzC,CAAZ;AACH,KAHD,MAKA;AACIM,MAAAA,SAAS,GAAG,IAAZ;AACH;;AAED,UAAMK,WAAW,GAAG,KAAKb,cAAL,CAAoBC,KAApB,EAA2BC,OAA3B,CAApB;AAEAI,IAAAA,SAAS,GAAIA,SAAS,IAAQ,MAAMF,IAAP,GAAe,GAAhB,GAAuBI,SAAxB,GAAqC,GAAtC,GAA6C,KAAKM,SAAtD,CAAtB;AACAR,IAAAA,SAAS,GAAIA,SAAS,IAAI,MAAMO,WAAV,CAAtB;AAEA,WAAOP,SAAP;AAEH;;AAtDL","sourcesContent":["import { IRoomGeometry } from '../../../../../room/utils/IRoomGeometry';\r\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\r\nimport { FurnitureVisualization } from './FurnitureVisualization';\r\n\r\nexport class FurnitureGiftWrappedVisualization extends FurnitureVisualization\r\n{\r\n    private _packetType: number = 0;\r\n    private _ribbonType: number = 0;\r\n\r\n    public update(geometry: IRoomGeometry, time: number, update: boolean, skipUpdate: boolean): void\r\n    {\r\n        this.updatePresentWrap();\r\n\r\n        super.update(geometry, time, update, skipUpdate);\r\n    }\r\n\r\n    private updatePresentWrap(): void\r\n    {\r\n        if(!this.object) return;\r\n\r\n        const extras = this.object.model.getValue<string>(RoomObjectVariable.FURNITURE_EXTRAS);\r\n\r\n        const local3 = 1000;\r\n        const typeIndex = parseInt(extras);\r\n\r\n        this._packetType = Math.floor((typeIndex / local3));\r\n        this._ribbonType = (typeIndex % local3);\r\n    }\r\n\r\n    public getFrameNumber(scale: number, layerId: number): number\r\n    {\r\n        if(layerId <= 1) return this._packetType;\r\n\r\n        return this._ribbonType;\r\n    }\r\n\r\n    public getSpriteAssetName(scale: number, layerId: number): string\r\n    {\r\n        const size = this.getValidSize(scale);\r\n\r\n        let assetName = this._type;\r\n        let layerCode = '';\r\n\r\n        if(layerId < (this.spriteCount - 1))\r\n        {\r\n            layerCode = String.fromCharCode(('a'.charCodeAt(0) + layerId));\r\n        }\r\n        else\r\n        {\r\n            layerCode = 'sd';\r\n        }\r\n\r\n        const frameNumber = this.getFrameNumber(scale, layerId);\r\n\r\n        assetName = (assetName + ((((('_' + size) + '_') + layerCode) + '_') + this.direction));\r\n        assetName = (assetName + ('_' + frameNumber));\r\n\r\n        return assetName;\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}