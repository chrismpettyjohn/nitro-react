{"ast":null,"code":"export class GroupBadgePartsParser {\n  constructor() {\n    this._bases = void 0;\n    this._symbols = void 0;\n    this._partColors = void 0;\n    this._colorsA = void 0;\n    this._colorsB = void 0;\n  }\n\n  flush() {\n    this._bases = new Map();\n    this._symbols = new Map();\n    this._partColors = new Map();\n    this._colorsA = new Map();\n    this._colorsB = new Map();\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    let basesCount = wrapper.readInt();\n\n    while (basesCount > 0) {\n      const id = wrapper.readInt();\n      const valueA = wrapper.readString();\n      const valueB = wrapper.readString();\n\n      this._bases.set(id, [valueA, valueB]);\n\n      basesCount--;\n    }\n\n    let symbolsCount = wrapper.readInt();\n\n    while (symbolsCount > 0) {\n      const id = wrapper.readInt();\n      const valueA = wrapper.readString();\n      const valueB = wrapper.readString();\n\n      this._symbols.set(id, [valueA, valueB]);\n\n      symbolsCount--;\n    }\n\n    let partColorsCount = wrapper.readInt();\n\n    while (partColorsCount > 0) {\n      const id = wrapper.readInt();\n      const color = wrapper.readString();\n\n      this._partColors.set(id, color);\n\n      partColorsCount--;\n    }\n\n    let colorsACount = wrapper.readInt();\n\n    while (colorsACount > 0) {\n      const id = wrapper.readInt();\n      const color = wrapper.readString();\n\n      this._colorsA.set(id, color);\n\n      colorsACount--;\n    }\n\n    let colorsBCount = wrapper.readInt();\n\n    while (colorsBCount > 0) {\n      const id = wrapper.readInt();\n      const color = wrapper.readString();\n\n      this._colorsB.set(id, color);\n\n      colorsBCount--;\n    }\n\n    return true;\n  }\n\n  get bases() {\n    return this._bases;\n  }\n\n  get symbols() {\n    return this._symbols;\n  }\n\n  get partColors() {\n    return this._partColors;\n  }\n\n  get colorsA() {\n    return this._colorsA;\n  }\n\n  get colorsB() {\n    return this._colorsB;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/group/GroupBadgePartsParser.ts"],"names":["GroupBadgePartsParser","_bases","_symbols","_partColors","_colorsA","_colorsB","flush","Map","parse","wrapper","basesCount","readInt","id","valueA","readString","valueB","set","symbolsCount","partColorsCount","color","colorsACount","colorsBCount","bases","symbols","partColors","colorsA","colorsB"],"mappings":"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","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../core';\r\n\r\nexport class GroupBadgePartsParser implements IMessageParser\r\n{\r\n    private _bases: Map<number, string[]>;\r\n    private _symbols: Map<number, string[]>;\r\n    private _partColors: Map<number, string>;\r\n    private _colorsA: Map<number, string>;\r\n    private _colorsB: Map<number, string>;\r\n\r\n    flush(): boolean\r\n    {\r\n        this._bases = new Map();\r\n        this._symbols = new Map();\r\n        this._partColors = new Map();\r\n        this._colorsA = new Map();\r\n        this._colorsB = new Map();\r\n\r\n        return true;\r\n    }\r\n\r\n    parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        let basesCount = wrapper.readInt();\r\n\r\n        while(basesCount > 0)\r\n        {\r\n            const id = wrapper.readInt();\r\n            const valueA = wrapper.readString();\r\n            const valueB = wrapper.readString();\r\n\r\n            this._bases.set(id, [valueA, valueB]);\r\n            basesCount--;\r\n        }\r\n\r\n        let symbolsCount = wrapper.readInt();\r\n\r\n        while(symbolsCount > 0)\r\n        {\r\n            const id = wrapper.readInt();\r\n            const valueA = wrapper.readString();\r\n            const valueB = wrapper.readString();\r\n\r\n            this._symbols.set(id, [valueA, valueB]);\r\n            symbolsCount--;\r\n        }\r\n\r\n        let partColorsCount = wrapper.readInt();\r\n\r\n        while(partColorsCount > 0)\r\n        {\r\n            const id = wrapper.readInt();\r\n            const color = wrapper.readString();\r\n\r\n            this._partColors.set(id, color);\r\n            partColorsCount--;\r\n        }\r\n\r\n        let colorsACount = wrapper.readInt();\r\n\r\n        while(colorsACount > 0)\r\n        {\r\n            const id = wrapper.readInt();\r\n            const color = wrapper.readString();\r\n\r\n            this._colorsA.set(id, color);\r\n            colorsACount--;\r\n        }\r\n\r\n        let colorsBCount = wrapper.readInt();\r\n\r\n        while(colorsBCount > 0)\r\n        {\r\n            const id = wrapper.readInt();\r\n            const color = wrapper.readString();\r\n\r\n            this._colorsB.set(id, color);\r\n            colorsBCount--;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public get bases(): Map<number, string[]>\r\n    {\r\n        return this._bases;\r\n    }\r\n\r\n    public get symbols(): Map<number, string[]>\r\n    {\r\n        return this._symbols;\r\n    }\r\n\r\n    public get partColors(): Map<number, string>\r\n    {\r\n        return this._partColors;\r\n    }\r\n\r\n    public get colorsA(): Map<number, string>\r\n    {\r\n        return this._colorsA;\r\n    }\r\n\r\n    public get colorsB(): Map<number, string>\r\n    {\r\n        return this._colorsB;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}