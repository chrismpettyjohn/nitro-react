{"ast":null,"code":"import { AdvancedMap, StringDataType } from '@nitrots/nitro-renderer';\nimport { GetSessionDataManager } from '../nitro';\nimport { FurniCategory } from './FurniCategory';\nimport { FurnitureItem } from './FurnitureItem';\nimport { createGroupItem } from './FurnitureUtilities';\n\nconst isExternalImage = spriteId => {\n  var _GetSessionDataManage;\n\n  return ((_GetSessionDataManage = GetSessionDataManager().getWallItemData(spriteId)) === null || _GetSessionDataManage === void 0 ? void 0 : _GetSessionDataManage.isExternalImage) || false;\n};\n\nexport const parseTradeItems = items => {\n  const existingItems = new AdvancedMap();\n  const totalItems = items.length;\n\n  if (totalItems) {\n    for (const item of items) {\n      const spriteId = item.spriteId;\n      const category = item.category;\n      let name = item.furniType + spriteId;\n\n      if (!item.isGroupable || isExternalImage(spriteId)) {\n        name = 'itemid' + item.itemId;\n      }\n\n      if (item.category === FurniCategory.POSTER) {\n        name = item.itemId + 'poster' + item.stuffData.getLegacyString();\n      } else if (item.category === FurniCategory.GUILD_FURNI) {\n        name = '';\n      }\n\n      let groupItem = item.isGroupable && !isExternalImage(item.spriteId) ? existingItems.getValue(name) : null;\n\n      if (!groupItem) {\n        groupItem = createGroupItem(spriteId, category, item.stuffData);\n        existingItems.add(name, groupItem);\n      }\n\n      groupItem.push(new FurnitureItem(item));\n    }\n  }\n\n  return existingItems;\n};\nexport const getGuildFurniType = (spriteId, stuffData) => {\n  let type = spriteId.toString();\n  if (!(stuffData instanceof StringDataType)) return type;\n  let i = 1;\n\n  while (i < 5) {\n    type = type + (',' + stuffData.getValue(i));\n    i++;\n  }\n\n  return type;\n};","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/api/inventory/TradingUtilities.ts"],"names":["AdvancedMap","StringDataType","GetSessionDataManager","FurniCategory","FurnitureItem","createGroupItem","isExternalImage","spriteId","getWallItemData","parseTradeItems","items","existingItems","totalItems","length","item","category","name","furniType","isGroupable","itemId","POSTER","stuffData","getLegacyString","GUILD_FURNI","groupItem","getValue","add","push","getGuildFurniType","type","toString","i"],"mappings":"AAAA,SAASA,WAAT,EAAsDC,cAAtD,QAA4E,yBAA5E;AACA,SAASC,qBAAT,QAAsC,UAAtC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,eAAT,QAAgC,sBAAhC;;AAGA,MAAMC,eAAe,GAAIC,QAAD;AAAA;;AAAA,SAAsB,0BAAAL,qBAAqB,GAAGM,eAAxB,CAAwCD,QAAxC,iFAAmDD,eAAnD,KAAsE,KAA5F;AAAA,CAAxB;;AAEA,OAAO,MAAMG,eAAe,GAAIC,KAAD,IAC/B;AACI,QAAMC,aAAa,GAAG,IAAIX,WAAJ,EAAtB;AACA,QAAMY,UAAU,GAAGF,KAAK,CAACG,MAAzB;;AAEA,MAAGD,UAAH,EACA;AACI,SAAI,MAAME,IAAV,IAAkBJ,KAAlB,EACA;AACI,YAAMH,QAAQ,GAAGO,IAAI,CAACP,QAAtB;AACA,YAAMQ,QAAQ,GAAGD,IAAI,CAACC,QAAtB;AAEA,UAAIC,IAAI,GAAIF,IAAI,CAACG,SAAL,GAAiBV,QAA7B;;AAEA,UAAG,CAACO,IAAI,CAACI,WAAN,IAAqBZ,eAAe,CAACC,QAAD,CAAvC,EACA;AACIS,QAAAA,IAAI,GAAI,WAAWF,IAAI,CAACK,MAAxB;AACH;;AAED,UAAGL,IAAI,CAACC,QAAL,KAAkBZ,aAAa,CAACiB,MAAnC,EACA;AACIJ,QAAAA,IAAI,GAAIF,IAAI,CAACK,MAAL,GAAc,QAAd,GAAyBL,IAAI,CAACO,SAAL,CAAeC,eAAf,EAAjC;AACH,OAHD,MAKK,IAAGR,IAAI,CAACC,QAAL,KAAkBZ,aAAa,CAACoB,WAAnC,EACL;AACIP,QAAAA,IAAI,GAAG,EAAP;AACH;;AAED,UAAIQ,SAAS,GAAKV,IAAI,CAACI,WAAL,IAAoB,CAACZ,eAAe,CAACQ,IAAI,CAACP,QAAN,CAArC,GAAwDI,aAAa,CAACc,QAAd,CAAuBT,IAAvB,CAAxD,GAAuF,IAAxG;;AAEA,UAAG,CAACQ,SAAJ,EACA;AACIA,QAAAA,SAAS,GAAGnB,eAAe,CAACE,QAAD,EAAWQ,QAAX,EAAqBD,IAAI,CAACO,SAA1B,CAA3B;AAEAV,QAAAA,aAAa,CAACe,GAAd,CAAkBV,IAAlB,EAAwBQ,SAAxB;AACH;;AAEDA,MAAAA,SAAS,CAACG,IAAV,CAAe,IAAIvB,aAAJ,CAAkBU,IAAlB,CAAf;AACH;AACJ;;AAED,SAAOH,aAAP;AACH,CA3CM;AA6CP,OAAO,MAAMiB,iBAAiB,GAAG,CAACrB,QAAD,EAAmBc,SAAnB,KACjC;AACI,MAAIQ,IAAI,GAAGtB,QAAQ,CAACuB,QAAT,EAAX;AAEA,MAAG,EAAET,SAAS,YAAYpB,cAAvB,CAAH,EAA2C,OAAO4B,IAAP;AAE3C,MAAIE,CAAC,GAAG,CAAR;;AAEA,SAAMA,CAAC,GAAG,CAAV,EACA;AACIF,IAAAA,IAAI,GAAIA,IAAI,IAAI,MAAMR,SAAS,CAACI,QAAV,CAAmBM,CAAnB,CAAV,CAAZ;AAEAA,IAAAA,CAAC;AACJ;;AAED,SAAOF,IAAP;AACH,CAhBM","sourcesContent":["import { AdvancedMap, IObjectData, ItemDataStructure, StringDataType } from '@nitrots/nitro-renderer';\nimport { GetSessionDataManager } from '../nitro';\nimport { FurniCategory } from './FurniCategory';\nimport { FurnitureItem } from './FurnitureItem';\nimport { createGroupItem } from './FurnitureUtilities';\nimport { GroupItem } from './GroupItem';\n\nconst isExternalImage = (spriteId: number) => GetSessionDataManager().getWallItemData(spriteId)?.isExternalImage || false;\n\nexport const parseTradeItems = (items: ItemDataStructure[]) =>\n{\n    const existingItems = new AdvancedMap<string, GroupItem>();\n    const totalItems = items.length;\n\n    if(totalItems)\n    {\n        for(const item of items)\n        {\n            const spriteId = item.spriteId;\n            const category = item.category;\n    \n            let name = (item.furniType + spriteId);\n    \n            if(!item.isGroupable || isExternalImage(spriteId))\n            {\n                name = ('itemid' + item.itemId);\n            }\n    \n            if(item.category === FurniCategory.POSTER)\n            {\n                name = (item.itemId + 'poster' + item.stuffData.getLegacyString());\n            }\n    \n            else if(item.category === FurniCategory.GUILD_FURNI)\n            {\n                name = '';\n            }\n    \n            let groupItem = ((item.isGroupable && !isExternalImage(item.spriteId)) ? existingItems.getValue(name) : null);\n    \n            if(!groupItem)\n            {\n                groupItem = createGroupItem(spriteId, category, item.stuffData);\n    \n                existingItems.add(name, groupItem);\n            }\n    \n            groupItem.push(new FurnitureItem(item));\n        }\n    }\n\n    return existingItems;\n}\n\nexport const getGuildFurniType = (spriteId: number, stuffData: IObjectData) =>\n{\n    let type = spriteId.toString();\n\n    if(!(stuffData instanceof StringDataType)) return type;\n\n    let i = 1;\n\n    while(i < 5)\n    {\n        type = (type + (',' + stuffData.getValue(i)));\n\n        i++;\n    }\n\n    return type;\n}\n"]},"metadata":{},"sourceType":"module"}