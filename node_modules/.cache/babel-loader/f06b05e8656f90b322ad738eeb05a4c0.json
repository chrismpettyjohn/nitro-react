{"ast":null,"code":"import { RoomPlaneParser } from '../../../../../room/object/RoomPlaneParser';\nexport class FloorHeightMapMessageParser {\n  constructor() {\n    this._model = void 0;\n    this._width = void 0;\n    this._height = void 0;\n    this._heightMap = void 0;\n    this._wallHeight = void 0;\n    this._scale = void 0;\n  }\n\n  flush() {\n    this._model = null;\n    this._width = 0;\n    this._height = 0;\n    this._wallHeight = -1;\n    this._heightMap = [];\n    this._scale = 64;\n    this._model = null;\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    const scale = wrapper.readBoolean();\n    const wallHeight = wrapper.readInt();\n    const model = wrapper.readString();\n    return this.parseExplicitly(model, wallHeight, scale);\n  }\n\n  parseModel(modelString, wallHeight) {\n    let scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.parseExplicitly(modelString, wallHeight, scale);\n  }\n\n  parseExplicitly(modelString, wallHeight) {\n    let scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._scale = scale ? 32 : 64;\n    this._wallHeight = wallHeight;\n    this._model = modelString;\n\n    const model = this._model.split('\\r');\n\n    const modelRows = model.length;\n    let width = 0;\n    const height = 0;\n    let iterator = 0;\n\n    while (iterator < modelRows) {\n      const row = model[iterator];\n\n      if (row.length > width) {\n        width = row.length;\n      }\n\n      iterator++;\n    }\n\n    this._heightMap = [];\n    iterator = 0;\n\n    while (iterator < modelRows) {\n      const heightMap = [];\n      let subIterator = 0;\n\n      while (subIterator < width) {\n        heightMap.push(RoomPlaneParser.TILE_BLOCKED);\n        subIterator++;\n      }\n\n      this._heightMap.push(heightMap);\n\n      iterator++;\n    }\n\n    this._width = width;\n    this._height = modelRows;\n    iterator = 0;\n\n    while (iterator < modelRows) {\n      const heightMap = this._heightMap[iterator];\n      const text = model[iterator];\n\n      if (text.length > 0) {\n        let subIterator = 0;\n\n        while (subIterator < text.length) {\n          const char = text.charAt(subIterator);\n          let height = RoomPlaneParser.TILE_BLOCKED;\n          if (char !== 'x' && char !== 'X') height = parseInt(char, 36);\n          heightMap[subIterator] = height;\n          subIterator++;\n        }\n      }\n\n      iterator++;\n    }\n\n    return true;\n  }\n\n  getHeight(x, y) {\n    if (x < 0 || x >= this._width || y < 0 || y >= this._height) return -110;\n    const row = this._heightMap[y];\n    if (row === undefined) return -110;\n    const height = row[x];\n    if (height === undefined) return -110;\n    return height;\n  }\n\n  get model() {\n    return this._model;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get heightMap() {\n    return this._heightMap;\n  }\n\n  get wallHeight() {\n    return this._wallHeight;\n  }\n\n  get scale() {\n    return this._scale;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/room/mapping/FloorHeightMapMessageParser.ts"],"names":["RoomPlaneParser","FloorHeightMapMessageParser","_model","_width","_height","_heightMap","_wallHeight","_scale","flush","parse","wrapper","scale","readBoolean","wallHeight","readInt","model","readString","parseExplicitly","parseModel","modelString","split","modelRows","length","width","height","iterator","row","heightMap","subIterator","push","TILE_BLOCKED","text","char","charAt","parseInt","getHeight","x","y","undefined"],"mappings":"AACA,SAASA,eAAT,QAAgC,4CAAhC;AAEA,OAAO,MAAMC,2BAAN,CACP;AAAA;AAAA,SACYC,MADZ;AAAA,SAEYC,MAFZ;AAAA,SAGYC,OAHZ;AAAA,SAIYC,UAJZ;AAAA,SAKYC,WALZ;AAAA,SAMYC,MANZ;AAAA;;AAQWC,EAAAA,KAAK,GACZ;AACI,SAAKN,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKE,WAAL,GAAmB,CAAC,CAApB;AACA,SAAKD,UAAL,GAAkB,EAAlB;AACA,SAAKE,MAAL,GAAc,EAAd;AACA,SAAKL,MAAL,GAAc,IAAd;AAEA,WAAO,IAAP;AACH;;AAEMO,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,UAAMC,KAAK,GAAGD,OAAO,CAACE,WAAR,EAAd;AACA,UAAMC,UAAU,GAAGH,OAAO,CAACI,OAAR,EAAnB;AACA,UAAMC,KAAK,GAAGL,OAAO,CAACM,UAAR,EAAd;AAEA,WAAO,KAAKC,eAAL,CAAqBF,KAArB,EAA4BF,UAA5B,EAAwCF,KAAxC,CAAP;AACH;;AAEMO,EAAAA,UAAU,CAACC,WAAD,EAAsBN,UAAtB,EACjB;AAAA,QAD2DF,KAC3D,uEAD4E,IAC5E;AACI,WAAO,KAAKM,eAAL,CAAqBE,WAArB,EAAkCN,UAAlC,EAA8CF,KAA9C,CAAP;AACH;;AAEOM,EAAAA,eAAe,CAACE,WAAD,EAAsBN,UAAtB,EACvB;AAAA,QADiEF,KACjE,uEADkF,IAClF;AACI,SAAKJ,MAAL,GAAcI,KAAK,GAAG,EAAH,GAAQ,EAA3B;AACA,SAAKL,WAAL,GAAmBO,UAAnB;AACA,SAAKX,MAAL,GAAciB,WAAd;;AAEA,UAAMJ,KAAK,GAAG,KAAKb,MAAL,CAAYkB,KAAZ,CAAkB,IAAlB,CAAd;;AACA,UAAMC,SAAS,GAAGN,KAAK,CAACO,MAAxB;AAEA,QAAIC,KAAK,GAAG,CAAZ;AACA,UAAMC,MAAM,GAAG,CAAf;AAEA,QAAIC,QAAQ,GAAG,CAAf;;AAEA,WAAMA,QAAQ,GAAGJ,SAAjB,EACA;AACI,YAAMK,GAAG,GAAGX,KAAK,CAACU,QAAD,CAAjB;;AAEA,UAAGC,GAAG,CAACJ,MAAJ,GAAaC,KAAhB,EACA;AACIA,QAAAA,KAAK,GAAGG,GAAG,CAACJ,MAAZ;AACH;;AAEDG,MAAAA,QAAQ;AACX;;AAED,SAAKpB,UAAL,GAAkB,EAAlB;AACAoB,IAAAA,QAAQ,GAAG,CAAX;;AAEA,WAAMA,QAAQ,GAAGJ,SAAjB,EACA;AACI,YAAMM,SAAmB,GAAG,EAA5B;AAEA,UAAIC,WAAW,GAAG,CAAlB;;AAEA,aAAMA,WAAW,GAAGL,KAApB,EACA;AACII,QAAAA,SAAS,CAACE,IAAV,CAAe7B,eAAe,CAAC8B,YAA/B;AAEAF,QAAAA,WAAW;AACd;;AAED,WAAKvB,UAAL,CAAgBwB,IAAhB,CAAqBF,SAArB;;AAEAF,MAAAA,QAAQ;AACX;;AAED,SAAKtB,MAAL,GAAcoB,KAAd;AACA,SAAKnB,OAAL,GAAeiB,SAAf;AAEAI,IAAAA,QAAQ,GAAG,CAAX;;AAEA,WAAMA,QAAQ,GAAGJ,SAAjB,EACA;AACI,YAAMM,SAAS,GAAG,KAAKtB,UAAL,CAAgBoB,QAAhB,CAAlB;AACA,YAAMM,IAAI,GAAGhB,KAAK,CAACU,QAAD,CAAlB;;AAEA,UAAGM,IAAI,CAACT,MAAL,GAAc,CAAjB,EACA;AACI,YAAIM,WAAW,GAAG,CAAlB;;AAEA,eAAMA,WAAW,GAAGG,IAAI,CAACT,MAAzB,EACA;AACI,gBAAMU,IAAI,GAAGD,IAAI,CAACE,MAAL,CAAYL,WAAZ,CAAb;AACA,cAAIJ,MAAM,GAAGxB,eAAe,CAAC8B,YAA7B;AAEA,cAAIE,IAAI,KAAK,GAAV,IAAmBA,IAAI,KAAK,GAA/B,EAAqCR,MAAM,GAAGU,QAAQ,CAACF,IAAD,EAAO,EAAP,CAAjB;AAErCL,UAAAA,SAAS,CAACC,WAAD,CAAT,GAAyBJ,MAAzB;AAEAI,UAAAA,WAAW;AACd;AACJ;;AAEDH,MAAAA,QAAQ;AACX;;AAED,WAAO,IAAP;AACH;;AAEMU,EAAAA,SAAS,CAACC,CAAD,EAAYC,CAAZ,EAChB;AACI,QAAID,CAAC,GAAG,CAAL,IAAYA,CAAC,IAAI,KAAKjC,MAAtB,IAAkCkC,CAAC,GAAG,CAAtC,IAA6CA,CAAC,IAAI,KAAKjC,OAA1D,EAAoE,OAAO,CAAC,GAAR;AAEpE,UAAMsB,GAAG,GAAG,KAAKrB,UAAL,CAAgBgC,CAAhB,CAAZ;AAEA,QAAGX,GAAG,KAAKY,SAAX,EAAsB,OAAO,CAAC,GAAR;AAEtB,UAAMd,MAAM,GAAGE,GAAG,CAACU,CAAD,CAAlB;AAEA,QAAGZ,MAAM,KAAKc,SAAd,EAAyB,OAAO,CAAC,GAAR;AAEzB,WAAOd,MAAP;AACH;;AAEe,MAALT,KAAK,GAChB;AACI,WAAO,KAAKb,MAAZ;AACH;;AAEe,MAALqB,KAAK,GAChB;AACI,WAAO,KAAKpB,MAAZ;AACH;;AAEgB,MAANqB,MAAM,GACjB;AACI,WAAO,KAAKpB,OAAZ;AACH;;AAEmB,MAATuB,SAAS,GACpB;AACI,WAAO,KAAKtB,UAAZ;AACH;;AAEoB,MAAVQ,UAAU,GACrB;AACI,WAAO,KAAKP,WAAZ;AACH;;AAEe,MAALK,KAAK,GAChB;AACI,WAAO,KAAKJ,MAAZ;AACH;;AAhKL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\nimport { RoomPlaneParser } from '../../../../../room/object/RoomPlaneParser';\r\n\r\nexport class FloorHeightMapMessageParser implements IMessageParser\r\n{\r\n    private _model: string;\r\n    private _width: number;\r\n    private _height: number;\r\n    private _heightMap: number[][];\r\n    private _wallHeight: number;\r\n    private _scale: number;\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._model = null;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._wallHeight = -1;\r\n        this._heightMap = [];\r\n        this._scale = 64;\r\n        this._model = null;\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        const scale = wrapper.readBoolean();\r\n        const wallHeight = wrapper.readInt();\r\n        const model = wrapper.readString();\r\n\r\n        return this.parseExplicitly(model, wallHeight, scale);\r\n    }\r\n\r\n    public parseModel(modelString: string, wallHeight: number, scale: boolean = true): boolean\r\n    {\r\n        return this.parseExplicitly(modelString, wallHeight, scale);\r\n    }\r\n\r\n    private parseExplicitly(modelString: string, wallHeight: number, scale: boolean = true): boolean\r\n    {\r\n        this._scale = scale ? 32 : 64;\r\n        this._wallHeight = wallHeight;\r\n        this._model = modelString;\r\n\r\n        const model = this._model.split('\\r');\r\n        const modelRows = model.length;\r\n\r\n        let width = 0;\r\n        const height = 0;\r\n\r\n        let iterator = 0;\r\n\r\n        while(iterator < modelRows)\r\n        {\r\n            const row = model[iterator];\r\n\r\n            if(row.length > width)\r\n            {\r\n                width = row.length;\r\n            }\r\n\r\n            iterator++;\r\n        }\r\n\r\n        this._heightMap = [];\r\n        iterator = 0;\r\n\r\n        while(iterator < modelRows)\r\n        {\r\n            const heightMap: number[] = [];\r\n\r\n            let subIterator = 0;\r\n\r\n            while(subIterator < width)\r\n            {\r\n                heightMap.push(RoomPlaneParser.TILE_BLOCKED);\r\n\r\n                subIterator++;\r\n            }\r\n\r\n            this._heightMap.push(heightMap);\r\n\r\n            iterator++;\r\n        }\r\n\r\n        this._width = width;\r\n        this._height = modelRows;\r\n\r\n        iterator = 0;\r\n\r\n        while(iterator < modelRows)\r\n        {\r\n            const heightMap = this._heightMap[iterator];\r\n            const text = model[iterator];\r\n\r\n            if(text.length > 0)\r\n            {\r\n                let subIterator = 0;\r\n\r\n                while(subIterator < text.length)\r\n                {\r\n                    const char = text.charAt(subIterator);\r\n                    let height = RoomPlaneParser.TILE_BLOCKED;\r\n\r\n                    if((char !== 'x') && (char !== 'X')) height = parseInt(char, 36);\r\n\r\n                    heightMap[subIterator] = height;\r\n\r\n                    subIterator++;\r\n                }\r\n            }\r\n\r\n            iterator++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public getHeight(x: number, y: number): number\r\n    {\r\n        if((x < 0) || (x >= this._width) || (y < 0) || (y >= this._height)) return -110;\r\n\r\n        const row = this._heightMap[y];\r\n\r\n        if(row === undefined) return -110;\r\n\r\n        const height = row[x];\r\n\r\n        if(height === undefined) return -110;\r\n\r\n        return height;\r\n    }\r\n\r\n    public get model(): string\r\n    {\r\n        return this._model;\r\n    }\r\n\r\n    public get width(): number\r\n    {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number\r\n    {\r\n        return this._height;\r\n    }\r\n\r\n    public get heightMap(): number[][]\r\n    {\r\n        return this._heightMap;\r\n    }\r\n\r\n    public get wallHeight(): number\r\n    {\r\n        return this._wallHeight;\r\n    }\r\n\r\n    public get scale(): number\r\n    {\r\n        return this._scale;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}