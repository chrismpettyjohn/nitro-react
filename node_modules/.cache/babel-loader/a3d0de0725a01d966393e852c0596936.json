{"ast":null,"code":"export class UserCurrentBadgesParser {\n  constructor() {\n    this._userId = void 0;\n    this._badges = void 0;\n  }\n\n  flush() {\n    this._userId = null;\n    this._badges = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    this._userId = wrapper.readInt();\n    let totalBadges = wrapper.readInt();\n\n    while (totalBadges > 0) {\n      const slotId = wrapper.readInt();\n      const badgeCode = wrapper.readString();\n\n      this._badges.push(badgeCode);\n\n      totalBadges--;\n    }\n\n    return true;\n  }\n\n  get userId() {\n    return this._userId;\n  }\n\n  get badges() {\n    return this._badges;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/user/data/UserCurrentBadgesParser.ts"],"names":["UserCurrentBadgesParser","_userId","_badges","flush","parse","wrapper","readInt","totalBadges","slotId","badgeCode","readString","push","userId","badges"],"mappings":"AAEA,OAAO,MAAMA,uBAAN,CACP;AAAA;AAAA,SACYC,OADZ;AAAA,SAEYC,OAFZ;AAAA;;AAIWC,EAAAA,KAAK,GACZ;AACI,SAAKF,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,SAAKJ,OAAL,GAAeI,OAAO,CAACC,OAAR,EAAf;AAEA,QAAIC,WAAW,GAAGF,OAAO,CAACC,OAAR,EAAlB;;AAEA,WAAMC,WAAW,GAAG,CAApB,EACA;AACI,YAAMC,MAAM,GAAGH,OAAO,CAACC,OAAR,EAAf;AACA,YAAMG,SAAS,GAAGJ,OAAO,CAACK,UAAR,EAAlB;;AAEA,WAAKR,OAAL,CAAaS,IAAb,CAAkBF,SAAlB;;AAEAF,MAAAA,WAAW;AACd;;AAED,WAAO,IAAP;AACH;;AAEgB,MAANK,MAAM,GACjB;AACI,WAAO,KAAKX,OAAZ;AACH;;AAEgB,MAANY,MAAM,GACjB;AACI,WAAO,KAAKX,OAAZ;AACH;;AAzCL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\n\r\nexport class UserCurrentBadgesParser implements IMessageParser\r\n{\r\n    private _userId: number;\r\n    private _badges: string[];\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._userId = null;\r\n        this._badges = [];\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        this._userId = wrapper.readInt();\r\n\r\n        let totalBadges = wrapper.readInt();\r\n\r\n        while(totalBadges > 0)\r\n        {\r\n            const slotId = wrapper.readInt();\r\n            const badgeCode = wrapper.readString();\r\n\r\n            this._badges.push(badgeCode);\r\n\r\n            totalBadges--;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get userId(): number\r\n    {\r\n        return this._userId;\r\n    }\r\n\r\n    public get badges(): string[]\r\n    {\r\n        return this._badges;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}