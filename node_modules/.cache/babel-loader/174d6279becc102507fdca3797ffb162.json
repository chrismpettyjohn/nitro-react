{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/Text.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { Base } from './Base';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Text = props => {\n  _s();\n\n  const {\n    variant = null,\n    fontWeight = null,\n    fontSize = 0,\n    align = null,\n    bold = false,\n    gfbold = false,\n    underline = false,\n    italics = false,\n    truncate = false,\n    center = false,\n    textEnd = false,\n    small = false,\n    wrap = false,\n    noWrap = false,\n    textBreak = false,\n    ...rest\n  } = props;\n  const getClassNames = useMemo(() => {\n    const newClassNames = [''];\n    if (variant) newClassNames.push('text-' + variant);\n    if (bold) newClassNames.push('font-bold');\n    if (gfbold) newClassNames.push('goldfish-bold');\n    if (fontWeight) newClassNames.push('fw-' + fontWeight);\n    if (fontSize) newClassNames.push('fs-' + fontSize);\n    if (align) newClassNames.push('text-' + align);\n    if (underline) newClassNames.push('text-decoration-underline');\n    if (italics) newClassNames.push('font-italic');\n    if (truncate) newClassNames.push('text-truncate');\n    if (center) newClassNames.push('text-center');\n    if (textEnd) newClassNames.push('text-end');\n    if (small) newClassNames.push('small');\n    if (wrap) newClassNames.push('text-wrap');\n    if (noWrap) newClassNames.push('text-nowrap');\n    if (textBreak) newClassNames.push('text-break');\n    return newClassNames;\n  }, [variant, fontWeight, fontSize, align, bold, gfbold, underline, italics, truncate, center, textEnd, small, wrap, noWrap, textBreak]);\n  return /*#__PURE__*/_jsxDEV(Base, {\n    classNames: getClassNames,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Text, \"dyksOB5DadzwRcuUMLdvWwPn8K8=\");\n\n_c = Text;\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/Text.tsx"],"names":["useMemo","Base","Text","props","variant","fontWeight","fontSize","align","bold","gfbold","underline","italics","truncate","center","textEnd","small","wrap","noWrap","textBreak","rest","getClassNames","newClassNames","push"],"mappings":";;;AAAA,SAAaA,OAAb,QAA4B,OAA5B;AACA,SAASC,IAAT,QAAgC,QAAhC;;AAsBA,OAAO,MAAMC,IAAmB,GAAGC,KAAK,IACxC;AAAA;;AACI,QAAM;AAAEC,IAAAA,OAAO,GAAG,IAAZ;AAAkBC,IAAAA,UAAU,GAAG,IAA/B;AAAqCC,IAAAA,QAAQ,GAAG,CAAhD;AAAmDC,IAAAA,KAAK,GAAG,IAA3D;AAAiEC,IAAAA,IAAI,GAAG,KAAxE;AAA+EC,IAAAA,MAAM,GAAG,KAAxF;AAA+FC,IAAAA,SAAS,GAAG,KAA3G;AAAkHC,IAAAA,OAAO,GAAG,KAA5H;AAAmIC,IAAAA,QAAQ,GAAG,KAA9I;AAAqJC,IAAAA,MAAM,GAAG,KAA9J;AAAqKC,IAAAA,OAAO,GAAG,KAA/K;AAAsLC,IAAAA,KAAK,GAAG,KAA9L;AAAqMC,IAAAA,IAAI,GAAG,KAA5M;AAAmNC,IAAAA,MAAM,GAAG,KAA5N;AAAmOC,IAAAA,SAAS,GAAG,KAA/O;AAAsP,OAAGC;AAAzP,MAAkQhB,KAAxQ;AAEA,QAAMiB,aAAa,GAAGpB,OAAO,CAAC,MAC9B;AACI,UAAMqB,aAAuB,GAAG,CAAE,EAAF,CAAhC;AAEA,QAAGjB,OAAH,EAAYiB,aAAa,CAACC,IAAd,CAAmB,UAAUlB,OAA7B;AAEZ,QAAGI,IAAH,EAASa,aAAa,CAACC,IAAd,CAAmB,WAAnB;AAET,QAAGb,MAAH,EAAWY,aAAa,CAACC,IAAd,CAAmB,eAAnB;AAEX,QAAGjB,UAAH,EAAegB,aAAa,CAACC,IAAd,CAAmB,QAAQjB,UAA3B;AAEf,QAAGC,QAAH,EAAae,aAAa,CAACC,IAAd,CAAmB,QAAQhB,QAA3B;AAEb,QAAGC,KAAH,EAAUc,aAAa,CAACC,IAAd,CAAmB,UAAUf,KAA7B;AAEV,QAAGG,SAAH,EAAcW,aAAa,CAACC,IAAd,CAAmB,2BAAnB;AAEd,QAAGX,OAAH,EAAYU,aAAa,CAACC,IAAd,CAAmB,aAAnB;AAEZ,QAAGV,QAAH,EAAaS,aAAa,CAACC,IAAd,CAAmB,eAAnB;AAEb,QAAGT,MAAH,EAAWQ,aAAa,CAACC,IAAd,CAAmB,aAAnB;AAEX,QAAGR,OAAH,EAAYO,aAAa,CAACC,IAAd,CAAmB,UAAnB;AAEZ,QAAGP,KAAH,EAAUM,aAAa,CAACC,IAAd,CAAmB,OAAnB;AAEV,QAAGN,IAAH,EAASK,aAAa,CAACC,IAAd,CAAmB,WAAnB;AAET,QAAGL,MAAH,EAAWI,aAAa,CAACC,IAAd,CAAmB,aAAnB;AAEX,QAAGJ,SAAH,EAAcG,aAAa,CAACC,IAAd,CAAmB,YAAnB;AAEd,WAAOD,aAAP;AACH,GAnC4B,EAmC1B,CAAEjB,OAAF,EAAWC,UAAX,EAAuBC,QAAvB,EAAiCC,KAAjC,EAAwCC,IAAxC,EAA8CC,MAA9C,EAAsDC,SAAtD,EAAiEC,OAAjE,EAA0EC,QAA1E,EAAoFC,MAApF,EAA4FC,OAA5F,EAAqGC,KAArG,EAA4GC,IAA5G,EAAkHC,MAAlH,EAA0HC,SAA1H,CAnC0B,CAA7B;AAqCA,sBAAO,QAAC,IAAD;AAAM,IAAA,UAAU,EAAGE,aAAnB;AAAA,OAAwCD;AAAxC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA1CM;;GAAMjB,I;;KAAAA,I","sourcesContent":["import { FC, useMemo } from 'react';\nimport { Base, BaseProps } from './Base';\nimport { ColorVariantType, FontSizeType, FontWeightType, TextAlignType } from './types';\n\nexport interface TextProps extends BaseProps<HTMLDivElement>\n{\n    variant?: ColorVariantType;\n    fontWeight?: FontWeightType;\n    fontSize?: FontSizeType;\n    align?: TextAlignType;\n    bold?: boolean;\n    gfbold?: boolean;\n    underline?: boolean;\n    italics?: boolean;\n    truncate?: boolean;\n    center?: boolean;\n    textEnd?: boolean;\n    small?: boolean;\n    wrap?: boolean;\n    noWrap?: boolean;\n    textBreak?: boolean;\n}\n\nexport const Text: FC<TextProps> = props =>\n{\n    const { variant = null, fontWeight = null, fontSize = 0, align = null, bold = false, gfbold = false, underline = false, italics = false, truncate = false, center = false, textEnd = false, small = false, wrap = false, noWrap = false, textBreak = false, ...rest } = props;\n\n    const getClassNames = useMemo(() =>\n    {\n        const newClassNames: string[] = [ '' ];\n\n        if(variant) newClassNames.push('text-' + variant);\n\n        if(bold) newClassNames.push('font-bold');\n\n        if(gfbold) newClassNames.push('goldfish-bold');\n\n        if(fontWeight) newClassNames.push('fw-' + fontWeight);\n\n        if(fontSize) newClassNames.push('fs-' + fontSize);\n\n        if(align) newClassNames.push('text-' + align);\n\n        if(underline) newClassNames.push('text-decoration-underline');\n\n        if(italics) newClassNames.push('font-italic');\n\n        if(truncate) newClassNames.push('text-truncate');\n\n        if(center) newClassNames.push('text-center');\n\n        if(textEnd) newClassNames.push('text-end');\n\n        if(small) newClassNames.push('small');\n\n        if(wrap) newClassNames.push('text-wrap');\n\n        if(noWrap) newClassNames.push('text-nowrap');\n\n        if(textBreak) newClassNames.push('text-break');\n\n        return newClassNames;\n    }, [ variant, fontWeight, fontSize, align, bold, gfbold, underline, italics, truncate, center, textEnd, small, wrap, noWrap, textBreak ]);\n\n    return <Base classNames={ getClassNames } { ...rest } />;\n}\n"]},"metadata":{},"sourceType":"module"}