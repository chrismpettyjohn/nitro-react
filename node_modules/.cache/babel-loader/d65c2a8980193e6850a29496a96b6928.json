{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { AcceptFriendMessageComposer, DeclineFriendMessageComposer, FollowFriendMessageComposer, FriendListFragmentEvent, FriendListUpdateEvent, FriendRequestsEvent, GetFriendRequestsComposer, MessengerInitComposer, MessengerInitEvent, NewFriendRequestEvent, RequestFriendComposer, SetRelationshipStatusComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { CloneObject, MessengerFriend, MessengerRequest, MessengerSettings, SendMessageComposer } from '../../api';\nimport { UseMessageEventHook } from '../messages';\n\nconst useFriendsState = () => {\n  _s();\n\n  const [friends, setFriends] = useState([]);\n  const [requests, setRequests] = useState([]);\n  const [sentRequests, setSentRequests] = useState([]);\n  const [settings, setSettings] = useState(null);\n  const onlineFriends = useMemo(() => {\n    const onlineFriends = friends.filter(friend => friend.online);\n    onlineFriends.sort((a, b) => {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      return 0;\n    });\n    return onlineFriends;\n  }, [friends]);\n  const offlineFriends = useMemo(() => {\n    const offlineFriends = friends.filter(friend => !friend.online);\n    offlineFriends.sort((a, b) => {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      return 0;\n    });\n    return offlineFriends;\n  }, [friends]);\n  const followFriend = useCallback(friend => SendMessageComposer(new FollowFriendMessageComposer(friend.id)), []);\n  const updateRelationship = useCallback((friend, type) => type !== friend.relationshipStatus && SendMessageComposer(new SetRelationshipStatusComposer(friend.id, type)), []);\n  const getFriend = useCallback(userId => {\n    for (const friend of friends) {\n      if (friend.id === userId) return friend;\n    }\n\n    return null;\n  }, [friends]);\n  const canRequestFriend = useCallback(userId => {\n    if (getFriend(userId)) return false;\n    if (requests.find(request => request.requesterUserId === userId)) return false;\n    if (sentRequests.indexOf(userId) >= 0) return false;\n    return true;\n  }, [requests, sentRequests, getFriend]);\n  const requestFriend = useCallback((userId, userName) => {\n    if (!canRequestFriend(userId)) return false;\n    setSentRequests(prevValue => {\n      const newSentRequests = [...prevValue];\n      newSentRequests.push(userId);\n      return newSentRequests;\n    });\n    SendMessageComposer(new RequestFriendComposer(userName));\n  }, [canRequestFriend]);\n  const requestResponse = useCallback((requestId, flag) => {\n    if (requestId === -1 && !flag) {\n      SendMessageComposer(new DeclineFriendMessageComposer(true));\n      setRequests([]);\n    } else {\n      setRequests(prevValue => {\n        const newRequests = [...prevValue];\n        const index = newRequests.findIndex(request => request.id === requestId);\n        if (index === -1) return prevValue;\n\n        if (flag) {\n          SendMessageComposer(new AcceptFriendMessageComposer(newRequests[index].id));\n        } else {\n          SendMessageComposer(new DeclineFriendMessageComposer(false, newRequests[index].id));\n        }\n\n        newRequests.splice(index, 1);\n        return newRequests;\n      });\n    }\n  }, []);\n  const onMessengerInitEvent = useCallback(event => {\n    const parser = event.getParser();\n    setSettings(new MessengerSettings(parser.userFriendLimit, parser.normalFriendLimit, parser.extendedFriendLimit, parser.categories));\n    SendMessageComposer(new GetFriendRequestsComposer());\n  }, []);\n  UseMessageEventHook(MessengerInitEvent, onMessengerInitEvent);\n  const onFriendsFragmentEvent = useCallback(event => {\n    const parser = event.getParser();\n    setFriends(prevValue => {\n      const newValue = [...prevValue];\n\n      for (const friend of parser.fragment) {\n        const index = newValue.findIndex(existingFriend => existingFriend.id === friend.id);\n        const newFriend = new MessengerFriend();\n        newFriend.populate(friend);\n        if (index > -1) newValue[index] = newFriend;else newValue.push(newFriend);\n      }\n\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(FriendListFragmentEvent, onFriendsFragmentEvent);\n  const onFriendsUpdateEvent = useCallback(event => {\n    const parser = event.getParser();\n    setFriends(prevValue => {\n      const newValue = [...prevValue];\n\n      const processUpdate = friend => {\n        const index = newValue.findIndex(existingFriend => existingFriend.id === friend.id);\n\n        if (index === -1) {\n          const newFriend = new MessengerFriend();\n          newFriend.populate(friend);\n          newValue.unshift(newFriend);\n        } else {\n          newValue[index].populate(friend);\n        }\n      };\n\n      for (const friend of parser.addedFriends) processUpdate(friend);\n\n      for (const friend of parser.updatedFriends) processUpdate(friend);\n\n      for (const removedFriendId of parser.removedFriendIds) {\n        const index = newValue.findIndex(existingFriend => existingFriend.id === removedFriendId);\n        if (index > -1) newValue.splice(index, 1);\n      }\n\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(FriendListUpdateEvent, onFriendsUpdateEvent);\n  const onFriendRequestsEvent = useCallback(event => {\n    const parser = event.getParser();\n    setRequests(prevValue => {\n      const newValue = [...prevValue];\n\n      for (const request of parser.requests) {\n        const index = newValue.findIndex(existing => existing.requesterUserId === request.requesterUserId);\n\n        if (index > 0) {\n          newValue[index] = CloneObject(newValue[index]);\n          newValue[index].populate(request);\n        } else {\n          const newRequest = new MessengerRequest();\n          newRequest.populate(request);\n          newValue.push(newRequest);\n        }\n      }\n\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(FriendRequestsEvent, onFriendRequestsEvent);\n  const onNewFriendRequestEvent = useCallback(event => {\n    const parser = event.getParser();\n    const request = parser.request;\n    setRequests(prevValue => {\n      const newRequests = [...prevValue];\n      const index = newRequests.findIndex(existing => existing.requesterUserId === request.requesterUserId);\n\n      if (index === -1) {\n        const newRequest = new MessengerRequest();\n        newRequest.populate(request);\n        newRequests.push(newRequest);\n      }\n\n      return newRequests;\n    });\n  }, []);\n  UseMessageEventHook(NewFriendRequestEvent, onNewFriendRequestEvent);\n  useEffect(() => {\n    SendMessageComposer(new MessengerInitComposer());\n  }, []);\n  return {\n    friends,\n    requests,\n    sentRequests,\n    settings,\n    onlineFriends,\n    offlineFriends,\n    getFriend,\n    canRequestFriend,\n    requestFriend,\n    requestResponse,\n    followFriend,\n    updateRelationship\n  };\n};\n\n_s(useFriendsState, \"TdMYjObtP5hV/jP+Cbgjvejdrwg=\");\n\nexport const useFriends = () => {\n  _s2();\n\n  return useBetween(useFriendsState);\n};\n\n_s2(useFriends, \"diiQ3+ccnY3J9PmIrayiMDIOaiY=\", false, function () {\n  return [useBetween];\n});","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/hooks/friends/useFriends.ts"],"names":["AcceptFriendMessageComposer","DeclineFriendMessageComposer","FollowFriendMessageComposer","FriendListFragmentEvent","FriendListUpdateEvent","FriendRequestsEvent","GetFriendRequestsComposer","MessengerInitComposer","MessengerInitEvent","NewFriendRequestEvent","RequestFriendComposer","SetRelationshipStatusComposer","useCallback","useEffect","useMemo","useState","useBetween","CloneObject","MessengerFriend","MessengerRequest","MessengerSettings","SendMessageComposer","UseMessageEventHook","useFriendsState","friends","setFriends","requests","setRequests","sentRequests","setSentRequests","settings","setSettings","onlineFriends","filter","friend","online","sort","a","b","name","offlineFriends","followFriend","id","updateRelationship","type","relationshipStatus","getFriend","userId","canRequestFriend","find","request","requesterUserId","indexOf","requestFriend","userName","prevValue","newSentRequests","push","requestResponse","requestId","flag","newRequests","index","findIndex","splice","onMessengerInitEvent","event","parser","getParser","userFriendLimit","normalFriendLimit","extendedFriendLimit","categories","onFriendsFragmentEvent","newValue","fragment","existingFriend","newFriend","populate","onFriendsUpdateEvent","processUpdate","unshift","addedFriends","updatedFriends","removedFriendId","removedFriendIds","onFriendRequestsEvent","existing","newRequest","onNewFriendRequestEvent","useFriends"],"mappings":"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","sourcesContent":["import { AcceptFriendMessageComposer, DeclineFriendMessageComposer, FollowFriendMessageComposer, FriendListFragmentEvent, FriendListUpdateEvent, FriendParser, FriendRequestsEvent, GetFriendRequestsComposer, MessengerInitComposer, MessengerInitEvent, NewFriendRequestEvent, RequestFriendComposer, SetRelationshipStatusComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useBetween } from 'use-between';\nimport { CloneObject, MessengerFriend, MessengerRequest, MessengerSettings, SendMessageComposer } from '../../api';\nimport { UseMessageEventHook } from '../messages';\n\nconst useFriendsState = () =>\n{\n    const [ friends, setFriends ] = useState<MessengerFriend[]>([]);\n    const [ requests, setRequests ] = useState<MessengerRequest[]>([]);\n    const [ sentRequests, setSentRequests ] = useState<number[]>([]);\n    const [ settings, setSettings ] = useState<MessengerSettings>(null);\n\n    const onlineFriends = useMemo(() =>\n    {\n        const onlineFriends = friends.filter(friend => friend.online);\n\n        onlineFriends.sort((a, b) =>\n        {\n            if( a.name < b.name ) return -1;\n\n            if( a.name > b.name ) return 1;\n\n            return 0;\n        });\n\n        return onlineFriends;\n    }, [ friends ]);\n\n    const offlineFriends = useMemo(() =>\n    {\n        const offlineFriends = friends.filter(friend => !friend.online);\n\n        offlineFriends.sort((a, b) =>\n        {\n            if( a.name < b.name ) return -1;\n\n            if( a.name > b.name ) return 1;\n\n            return 0;\n        });\n\n        return offlineFriends;\n    }, [ friends ]);\n\n    const followFriend = useCallback((friend: MessengerFriend) => SendMessageComposer(new FollowFriendMessageComposer(friend.id)), []);\n    const updateRelationship = useCallback((friend: MessengerFriend, type: number) => ((type !== friend.relationshipStatus) && SendMessageComposer(new SetRelationshipStatusComposer(friend.id, type))), []);\n\n    const getFriend = useCallback((userId: number) =>\n    {\n        for(const friend of friends)\n        {\n            if(friend.id === userId) return friend;\n        }\n\n        return null;\n    }, [ friends ]);\n\n    const canRequestFriend = useCallback((userId: number) =>\n    {\n        if(getFriend(userId)) return false;\n\n        if(requests.find(request => (request.requesterUserId === userId))) return false;\n\n        if(sentRequests.indexOf(userId) >= 0) return false;\n\n        return true;\n    }, [ requests, sentRequests, getFriend ]);\n\n    const requestFriend = useCallback((userId: number, userName: string) =>\n    {\n        if(!canRequestFriend(userId)) return false;\n\n        setSentRequests(prevValue =>\n        {\n            const newSentRequests = [ ...prevValue ];\n\n            newSentRequests.push(userId);\n\n            return newSentRequests;\n        });\n\n        SendMessageComposer(new RequestFriendComposer(userName));\n    }, [ canRequestFriend ]);\n\n    const requestResponse = useCallback((requestId: number, flag: boolean) =>\n    {\n        if(requestId === -1 && !flag)\n        {\n            SendMessageComposer(new DeclineFriendMessageComposer(true));\n\n            setRequests([]);\n        }\n        else\n        {\n            setRequests(prevValue =>\n            {\n                const newRequests = [ ...prevValue ];\n                const index = newRequests.findIndex(request => (request.id === requestId));\n\n                if(index === -1) return prevValue;\n\n                if(flag)\n                {\n                    SendMessageComposer(new AcceptFriendMessageComposer(newRequests[index].id));\n                }\n                else\n                {\n                    SendMessageComposer(new DeclineFriendMessageComposer(false, newRequests[index].id));\n                }\n\n                newRequests.splice(index, 1);\n\n                return newRequests;\n            });\n        }\n    }, []);\n\n    const onMessengerInitEvent = useCallback((event: MessengerInitEvent) =>\n    {\n        const parser = event.getParser();\n\n        setSettings(new MessengerSettings(\n            parser.userFriendLimit,\n            parser.normalFriendLimit,\n            parser.extendedFriendLimit,\n            parser.categories));\n\n        SendMessageComposer(new GetFriendRequestsComposer());\n    }, []);\n\n    UseMessageEventHook(MessengerInitEvent, onMessengerInitEvent);\n\n    const onFriendsFragmentEvent = useCallback((event: FriendListFragmentEvent) =>\n    {\n        const parser = event.getParser();\n\n        setFriends(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            for(const friend of parser.fragment)\n            {\n                const index = newValue.findIndex(existingFriend => (existingFriend.id === friend.id));\n                const newFriend = new MessengerFriend();\n                newFriend.populate(friend);\n\n                if(index > -1) newValue[index] = newFriend;\n                else newValue.push(newFriend);\n            }\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(FriendListFragmentEvent, onFriendsFragmentEvent);\n\n    const onFriendsUpdateEvent = useCallback((event: FriendListUpdateEvent) =>\n    {\n        const parser = event.getParser();\n\n        setFriends(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            const processUpdate = (friend: FriendParser) =>\n            {\n                const index = newValue.findIndex(existingFriend => (existingFriend.id === friend.id));\n\n                if(index === -1)\n                {\n                    const newFriend = new MessengerFriend();\n                    newFriend.populate(friend);\n\n                    newValue.unshift(newFriend);\n                }\n                else\n                {\n                    newValue[index].populate(friend);\n                }\n            }\n\n            for(const friend of parser.addedFriends) processUpdate(friend);\n\n            for(const friend of parser.updatedFriends) processUpdate(friend);\n\n            for(const removedFriendId of parser.removedFriendIds)\n            {\n                const index = newValue.findIndex(existingFriend => (existingFriend.id === removedFriendId));\n\n                if(index > -1) newValue.splice(index, 1);\n            }\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(FriendListUpdateEvent, onFriendsUpdateEvent);\n\n    const onFriendRequestsEvent = useCallback((event: FriendRequestsEvent) =>\n    {\n        const parser = event.getParser();\n\n        setRequests(prevValue =>\n        {\n            const newValue = [ ...prevValue ];\n\n            for(const request of parser.requests)\n            {\n                const index = newValue.findIndex(existing => (existing.requesterUserId === request.requesterUserId));\n\n                if(index > 0)\n                {\n                    newValue[index] = CloneObject(newValue[index]);\n                    newValue[index].populate(request);\n                }\n                else\n                {\n                    const newRequest = new MessengerRequest();\n                    newRequest.populate(request);\n\n                    newValue.push(newRequest);\n                }\n            }\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(FriendRequestsEvent, onFriendRequestsEvent);\n\n    const onNewFriendRequestEvent = useCallback((event: NewFriendRequestEvent) =>\n    {\n        const parser = event.getParser();\n        const request = parser.request;\n\n        setRequests(prevValue =>\n        {\n            const newRequests = [ ...prevValue ];\n\n            const index = newRequests.findIndex(existing => (existing.requesterUserId === request.requesterUserId));\n\n            if(index === -1)\n            {\n                const newRequest = new MessengerRequest();\n                newRequest.populate(request);\n\n                newRequests.push(newRequest);\n            }\n\n            return newRequests;\n        });\n    }, []);\n\n    UseMessageEventHook(NewFriendRequestEvent, onNewFriendRequestEvent);\n\n    useEffect(() =>\n    {\n        SendMessageComposer(new MessengerInitComposer());\n    }, []);\n\n    return { friends, requests, sentRequests, settings, onlineFriends, offlineFriends, getFriend, canRequestFriend, requestFriend, requestResponse, followFriend, updateRelationship };\n}\n\nexport const useFriends = () => useBetween(useFriendsState);\n"]},"metadata":{},"sourceType":"module"}