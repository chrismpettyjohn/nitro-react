{"ast":null,"code":"import { RenderTexture, Texture } from '@pixi/core';\nimport { AlphaFilter } from '@pixi/filter-alpha';\nimport { Matrix } from '@pixi/math';\nimport { AdvancedMap, NitroPoint, NitroSprite } from '../../../../../core';\nimport { Vector3D } from '../../../../avatar';\nimport { Nitro } from '../../../../Nitro';\nimport { FurnitureParticleSystemEmitter } from './FurnitureParticleSystemEmitter';\nexport class FurnitureParticleSystem {\n  constructor(visualization) {\n    this._emitters = void 0;\n    this._visualization = void 0;\n    this._size = void 0;\n    this._canvasId = -1;\n    this._offsetY = void 0;\n    this._currentEmitter = void 0;\n    this._canvasTexture = void 0;\n    this._roomSprite = void 0;\n    this._hasIgnited = false;\n    this._centerX = 0;\n    this._centerY = 0;\n    this._scaleMultiplier = 1;\n    this._blackOverlay = void 0;\n    this._blackOverlayAlphaTransform = void 0;\n    this._particleColorTransform = void 0;\n    this._identityMatrix = void 0;\n    this._translationMatrix = void 0;\n    this._blend = 1;\n    this._bgColor = 0xFF000000;\n    this._emptySprite = void 0;\n    this._isDone = false;\n    this._emitters = new AdvancedMap();\n    this._visualization = visualization;\n    this._blackOverlayAlphaTransform = new AlphaFilter();\n    this._blackOverlayAlphaTransform.alpha = 1;\n    this._particleColorTransform = new AlphaFilter();\n    this._identityMatrix = new Matrix();\n    this._translationMatrix = new Matrix();\n  }\n\n  dispose() {\n    for (const emitter of this._emitters.getValues()) emitter.dispose();\n\n    this._emitters = null;\n\n    if (this._canvasTexture) {\n      this._canvasTexture.destroy();\n\n      this._canvasTexture = null;\n    }\n\n    if (this._blackOverlay) {\n      this._blackOverlay.destroy();\n\n      this._blackOverlay = null;\n    }\n\n    if (this._emptySprite) {\n      this._emptySprite.destroy();\n\n      this._emptySprite = null;\n    }\n\n    this._blackOverlayAlphaTransform = null;\n    this._particleColorTransform = null;\n    this._identityMatrix = null;\n    this._translationMatrix = null;\n  }\n\n  reset() {\n    if (this._currentEmitter) this._currentEmitter.reset();\n    this._currentEmitter = null;\n    this._hasIgnited = false;\n    this._isDone = false;\n    this.updateCanvas();\n  }\n\n  setAnimation(id) {\n    if (this._currentEmitter) this._currentEmitter.reset();\n    this._currentEmitter = this._emitters.getValue(id);\n    this._hasIgnited = false;\n    this._isDone = false;\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    if (!this._currentEmitter || this._canvasId === -1) return;\n    this._roomSprite = this._visualization.getSprite(this._canvasId);\n\n    if (this._roomSprite && this._roomSprite.texture) {\n      if (this._roomSprite.width <= 1 || this._roomSprite.height <= 1) return;\n      if (this._canvasTexture && (this._canvasTexture.width !== this._roomSprite.width || this._canvasTexture.height !== this._roomSprite.height)) this._canvasTexture = null;\n      this.clearCanvas();\n      this._centerX = -this._roomSprite.offsetX;\n      this._centerY = -this._roomSprite.offsetY;\n      this._roomSprite.texture = this._canvasTexture;\n    }\n  }\n\n  getLayerYOffset(scale, direction, layerId) {\n    if (this._currentEmitter && this._currentEmitter.roomObjectSpriteId === layerId) {\n      return this._currentEmitter.y * this._scaleMultiplier;\n    }\n\n    return 0;\n  }\n\n  controlsSprite(k) {\n    if (this._currentEmitter) return this._currentEmitter.roomObjectSpriteId == k;\n    return false;\n  }\n\n  updateSprites() {\n    if (!this._currentEmitter || !this._roomSprite) return;\n\n    if (this._canvasTexture && this._roomSprite.texture !== this._canvasTexture) {\n      this._roomSprite.texture = this._canvasTexture;\n    }\n\n    if (this._hasIgnited) {\n      if (this._currentEmitter.roomObjectSpriteId >= 0) this._visualization.getSprite(this._currentEmitter.roomObjectSpriteId).visible = false;\n    }\n  }\n\n  updateAnimation() {\n    if (!this._currentEmitter || !this._roomSprite || this._isDone) return;\n    const k = 10;\n    if (!this._hasIgnited && this._currentEmitter.hasIgnited) this._hasIgnited = true;\n    const offsetY = this._offsetY * this._scaleMultiplier;\n\n    this._currentEmitter.update();\n\n    if (this._hasIgnited) {\n      if (this._currentEmitter.roomObjectSpriteId >= 0) {\n        this._visualization.getSprite(this._currentEmitter.roomObjectSpriteId).visible = false;\n      }\n\n      if (!this._canvasTexture) this.updateCanvas();\n      this.clearCanvas();\n\n      for (const particle of this._currentEmitter.particles) {\n        const tx = this._centerX + (particle.x - particle.z) * k / 10 * this._scaleMultiplier;\n        const ty = this._centerY - offsetY + (particle.y + (particle.x + particle.z) / 2) * k / 10 * this._scaleMultiplier;\n        const asset = particle.getAsset();\n\n        if (asset && asset.texture) {\n          if (particle.fade && particle.alphaMultiplier < 1) {\n            this._translationMatrix.identity();\n\n            this._translationMatrix.translate(tx + asset.offsetX, ty + asset.offsetY);\n\n            const sprite = new NitroSprite(asset.texture);\n            this._particleColorTransform.alpha = particle.alphaMultiplier;\n            sprite.filters = [this._particleColorTransform];\n            Nitro.instance.renderer.render(sprite, {\n              renderTexture: this._canvasTexture,\n              transform: this._translationMatrix,\n              clear: false\n            });\n          } else {\n            const point = new NitroPoint(tx + asset.offsetX, ty + asset.offsetY);\n            const sprite = new NitroSprite(asset.texture);\n            sprite.x = point.x;\n            sprite.y = point.y;\n            Nitro.instance.renderer.render(sprite, {\n              renderTexture: this._canvasTexture,\n              clear: false\n            });\n          }\n        } else {\n          const sprite = new NitroSprite(Texture.WHITE);\n          sprite.tint = 0xFFFFFF;\n          sprite.x = tx - 1;\n          sprite.y = ty - 1;\n          sprite.width = 2;\n          sprite.height = 2;\n          Nitro.instance.renderer.render(sprite, {\n            renderTexture: this._canvasTexture,\n            clear: false\n          });\n        }\n      }\n\n      if (!this._currentEmitter.particles.length) {\n        this._isDone = true;\n        return;\n      }\n    }\n  }\n\n  parseData(particleSystem) {\n    this._size = particleSystem.size;\n    this._canvasId = particleSystem.canvasId !== undefined ? particleSystem.canvasId : -1;\n    this._offsetY = particleSystem.offsetY !== undefined ? particleSystem.offsetY : 10;\n    this._scaleMultiplier = this._size / 64;\n    this._blend = particleSystem.blend !== undefined ? particleSystem.blend : 1;\n    this._blend = Math.min(this._blend, 1);\n    this._blackOverlayAlphaTransform.alpha = this._blend;\n    const bgColor = particleSystem.bgColor !== undefined ? particleSystem.bgColor : '0';\n    this._bgColor = parseInt(bgColor, 16) || 0x000000;\n    if (!particleSystem.emitters || !particleSystem.emitters.length) return;\n\n    for (const emitter of particleSystem.emitters) {\n      const emitterId = emitter.id;\n      const emitterName = emitter.name;\n      const emitterSpriteId = emitter.spriteId;\n      const particleEmitter = new FurnitureParticleSystemEmitter(emitterName, emitterSpriteId);\n\n      this._emitters.add(emitterId, particleEmitter);\n\n      const maxNumParticles = emitter.maxNumParticles;\n      const particlesPerFrame = emitter.particlesPerFrame;\n      const burstPulse = emitter.burstPulse !== undefined ? emitter.burstPulse : 1;\n      const fuseTime = emitter.fuseTime;\n      const simulationForce = emitter.simulation.force;\n      const simulationDirection = emitter.simulation.direction;\n      const simulationGravity = emitter.simulation.gravity;\n      const simulationAirFriction = emitter.simulation.airFriction;\n      const simulationShape = emitter.simulation.shape;\n      const simulationEnergy = emitter.simulation.energy;\n\n      for (const particle of emitter.particles) {\n        const lifeTime = particle.lifeTime;\n        const isEmitter = particle.isEmitter || false;\n        const fade = particle.fade || false;\n        const frames = [];\n\n        for (const name of particle.frames) frames.push(this._visualization.asset.getAsset(name));\n\n        particleEmitter.configureParticle(lifeTime, isEmitter, frames, fade);\n      }\n\n      particleEmitter.setup(maxNumParticles, particlesPerFrame, simulationForce, new Vector3D(0, simulationDirection, 0), simulationGravity, simulationAirFriction, simulationShape, simulationEnergy, fuseTime, burstPulse);\n    }\n  }\n\n  _Str_17988(particleSystem) {\n    let emitterId = 0;\n\n    if (particleSystem._emitters && particleSystem._currentEmitter) {\n      emitterId = particleSystem._emitters.getKey(particleSystem._emitters.getValues().indexOf(particleSystem._currentEmitter));\n    }\n\n    this.setAnimation(emitterId);\n    if (this._currentEmitter) this._currentEmitter.copyStateFrom(particleSystem._currentEmitter, particleSystem._size / this._size);\n    this._canvasTexture = null;\n  }\n\n  clearCanvas() {\n    if (!this._emptySprite) {\n      this._emptySprite = new NitroSprite(Texture.EMPTY);\n      this._emptySprite.alpha = 0;\n    }\n\n    if (!this._canvasTexture) {\n      this._canvasTexture = RenderTexture.create({\n        width: this._roomSprite.width,\n        height: this._roomSprite.height\n      });\n    } else {\n      Nitro.instance.renderer.render(this._emptySprite, {\n        renderTexture: this._canvasTexture,\n        clear: true\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurnitureParticleSystem.ts"],"names":["RenderTexture","Texture","AlphaFilter","Matrix","AdvancedMap","NitroPoint","NitroSprite","Vector3D","Nitro","FurnitureParticleSystemEmitter","FurnitureParticleSystem","constructor","visualization","_emitters","_visualization","_size","_canvasId","_offsetY","_currentEmitter","_canvasTexture","_roomSprite","_hasIgnited","_centerX","_centerY","_scaleMultiplier","_blackOverlay","_blackOverlayAlphaTransform","_particleColorTransform","_identityMatrix","_translationMatrix","_blend","_bgColor","_emptySprite","_isDone","alpha","dispose","emitter","getValues","destroy","reset","updateCanvas","setAnimation","id","getValue","getSprite","texture","width","height","clearCanvas","offsetX","offsetY","getLayerYOffset","scale","direction","layerId","roomObjectSpriteId","y","controlsSprite","k","updateSprites","visible","updateAnimation","hasIgnited","update","particle","particles","tx","x","z","ty","asset","getAsset","fade","alphaMultiplier","identity","translate","sprite","filters","instance","renderer","render","renderTexture","transform","clear","point","WHITE","tint","length","parseData","particleSystem","size","canvasId","undefined","blend","Math","min","bgColor","parseInt","emitters","emitterId","emitterName","name","emitterSpriteId","spriteId","particleEmitter","add","maxNumParticles","particlesPerFrame","burstPulse","fuseTime","simulationForce","simulation","force","simulationDirection","simulationGravity","gravity","simulationAirFriction","airFriction","simulationShape","shape","simulationEnergy","energy","lifeTime","isEmitter","frames","push","configureParticle","setup","_Str_17988","getKey","indexOf","copyStateFrom","EMPTY","create"],"mappings":"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","sourcesContent":["import { RenderTexture, Texture } from '@pixi/core';\r\nimport { AlphaFilter } from '@pixi/filter-alpha';\r\nimport { Graphics } from '@pixi/graphics';\r\nimport { Matrix } from '@pixi/math';\r\nimport { AdvancedMap, IParticleSystem, NitroPoint, NitroSprite } from '../../../../../core';\r\nimport { IGraphicAsset, IRoomObjectSprite } from '../../../../../room';\r\nimport { Vector3D } from '../../../../avatar';\r\nimport { Nitro } from '../../../../Nitro';\r\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\r\nimport { FurnitureParticleSystemEmitter } from './FurnitureParticleSystemEmitter';\r\n\r\nexport class FurnitureParticleSystem\r\n{\r\n    private _emitters: AdvancedMap<number, FurnitureParticleSystemEmitter>;\r\n    private _visualization: FurnitureAnimatedVisualization;\r\n    private _size: number;\r\n    private _canvasId: number = -1;\r\n    private _offsetY: number;\r\n    private _currentEmitter: FurnitureParticleSystemEmitter;\r\n    private _canvasTexture: RenderTexture;\r\n    private _roomSprite: IRoomObjectSprite;\r\n    private _hasIgnited: boolean = false;\r\n    private _centerX: number = 0;\r\n    private _centerY: number = 0;\r\n    private _scaleMultiplier: number = 1;\r\n    private _blackOverlay: Graphics;\r\n    private _blackOverlayAlphaTransform: AlphaFilter;\r\n    private _particleColorTransform: AlphaFilter;\r\n    private _identityMatrix: Matrix;\r\n    private _translationMatrix: Matrix;\r\n    private _blend: number = 1;\r\n    private _bgColor: number = 0xFF000000;\r\n    private _emptySprite: NitroSprite;\r\n    private _isDone: boolean = false;\r\n\r\n    constructor(visualization: FurnitureAnimatedVisualization)\r\n    {\r\n        this._emitters = new AdvancedMap();\r\n        this._visualization = visualization;\r\n        this._blackOverlayAlphaTransform = new AlphaFilter();\r\n        this._blackOverlayAlphaTransform.alpha = 1;\r\n        this._particleColorTransform = new AlphaFilter();\r\n        this._identityMatrix = new Matrix();\r\n        this._translationMatrix = new Matrix();\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        for(const emitter of this._emitters.getValues()) emitter.dispose();\r\n\r\n        this._emitters = null;\r\n\r\n        if(this._canvasTexture)\r\n        {\r\n            this._canvasTexture.destroy();\r\n            this._canvasTexture = null;\r\n        }\r\n\r\n        if(this._blackOverlay)\r\n        {\r\n            this._blackOverlay.destroy();\r\n            this._blackOverlay = null;\r\n        }\r\n\r\n        if(this._emptySprite)\r\n        {\r\n            this._emptySprite.destroy();\r\n            this._emptySprite = null;\r\n        }\r\n\r\n        this._blackOverlayAlphaTransform = null;\r\n        this._particleColorTransform = null;\r\n        this._identityMatrix = null;\r\n        this._translationMatrix = null;\r\n    }\r\n\r\n    public reset(): void\r\n    {\r\n        if(this._currentEmitter) this._currentEmitter.reset();\r\n\r\n        this._currentEmitter = null;\r\n        this._hasIgnited = false;\r\n        this._isDone = false;\r\n\r\n        this.updateCanvas();\r\n    }\r\n\r\n    public setAnimation(id: number): void\r\n    {\r\n        if(this._currentEmitter) this._currentEmitter.reset();\r\n\r\n        this._currentEmitter = this._emitters.getValue(id);\r\n        this._hasIgnited = false;\r\n        this._isDone = false;\r\n\r\n        this.updateCanvas();\r\n    }\r\n\r\n    private updateCanvas(): void\r\n    {\r\n        if(!this._currentEmitter || (this._canvasId === -1)) return;\r\n\r\n        this._roomSprite = this._visualization.getSprite(this._canvasId);\r\n\r\n        if(this._roomSprite && this._roomSprite.texture)\r\n        {\r\n            if((this._roomSprite.width <= 1) || (this._roomSprite.height <= 1)) return;\r\n\r\n            if(this._canvasTexture && ((this._canvasTexture.width !== this._roomSprite.width) || (this._canvasTexture.height !== this._roomSprite.height))) this._canvasTexture = null;\r\n\r\n            this.clearCanvas();\r\n\r\n            this._centerX = -(this._roomSprite.offsetX);\r\n            this._centerY = -(this._roomSprite.offsetY);\r\n            this._roomSprite.texture = this._canvasTexture;\r\n        }\r\n    }\r\n\r\n    public getLayerYOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if(this._currentEmitter && (this._currentEmitter.roomObjectSpriteId === layerId))\r\n        {\r\n            return this._currentEmitter.y * this._scaleMultiplier;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public controlsSprite(k: number): boolean\r\n    {\r\n        if(this._currentEmitter) return this._currentEmitter.roomObjectSpriteId == k;\r\n\r\n        return false;\r\n    }\r\n\r\n    public updateSprites(): void\r\n    {\r\n        if(!this._currentEmitter || !this._roomSprite) return;\r\n\r\n        if(this._canvasTexture && (this._roomSprite.texture !== this._canvasTexture))\r\n        {\r\n            this._roomSprite.texture = this._canvasTexture;\r\n        }\r\n\r\n        if(this._hasIgnited)\r\n        {\r\n            if(this._currentEmitter.roomObjectSpriteId >= 0) this._visualization.getSprite(this._currentEmitter.roomObjectSpriteId).visible = false;\r\n        }\r\n    }\r\n\r\n    public updateAnimation(): void\r\n    {\r\n        if(!this._currentEmitter || !this._roomSprite || this._isDone) return;\r\n\r\n        const k = 10;\r\n\r\n        if(!this._hasIgnited && this._currentEmitter.hasIgnited) this._hasIgnited = true;\r\n\r\n        const offsetY = (this._offsetY * this._scaleMultiplier);\r\n\r\n        this._currentEmitter.update();\r\n\r\n        if(this._hasIgnited)\r\n        {\r\n            if(this._currentEmitter.roomObjectSpriteId >= 0)\r\n            {\r\n                this._visualization.getSprite(this._currentEmitter.roomObjectSpriteId).visible = false;\r\n            }\r\n\r\n            if(!this._canvasTexture) this.updateCanvas();\r\n\r\n            this.clearCanvas();\r\n\r\n            for(const particle of this._currentEmitter.particles)\r\n            {\r\n                const tx = (this._centerX + ((((particle.x - particle.z) * k) / 10) * this._scaleMultiplier));\r\n                const ty = ((this._centerY - offsetY) + ((((particle.y + ((particle.x + particle.z) / 2)) * k) / 10) * this._scaleMultiplier));\r\n                const asset = particle.getAsset();\r\n\r\n                if(asset && asset.texture)\r\n                {\r\n                    if(particle.fade && (particle.alphaMultiplier < 1))\r\n                    {\r\n                        this._translationMatrix.identity();\r\n                        this._translationMatrix.translate((tx + asset.offsetX), (ty + asset.offsetY));\r\n\r\n                        const sprite = new NitroSprite(asset.texture);\r\n\r\n                        this._particleColorTransform.alpha = particle.alphaMultiplier;\r\n\r\n                        sprite.filters = [ this._particleColorTransform ];\r\n\r\n                        Nitro.instance.renderer.render(sprite, {\r\n                            renderTexture: this._canvasTexture,\r\n                            transform: this._translationMatrix,\r\n                            clear: false\r\n                        });\r\n                    }\r\n                    else\r\n                    {\r\n                        const point = new NitroPoint((tx + asset.offsetX), (ty + asset.offsetY));\r\n                        const sprite = new NitroSprite(asset.texture);\r\n\r\n                        sprite.x = point.x;\r\n                        sprite.y = point.y;\r\n\r\n                        Nitro.instance.renderer.render(sprite, {\r\n                            renderTexture: this._canvasTexture,\r\n                            clear: false\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    const sprite = new NitroSprite(Texture.WHITE);\r\n\r\n                    sprite.tint = 0xFFFFFF;\r\n                    sprite.x = (tx - 1);\r\n                    sprite.y = (ty - 1);\r\n                    sprite.width = 2;\r\n                    sprite.height = 2;\r\n\r\n                    Nitro.instance.renderer.render(sprite, {\r\n                        renderTexture: this._canvasTexture,\r\n                        clear: false\r\n                    });\r\n                }\r\n            }\r\n\r\n            if(!this._currentEmitter.particles.length)\r\n            {\r\n                this._isDone = true;\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public parseData(particleSystem: IParticleSystem): void\r\n    {\r\n        this._size = particleSystem.size;\r\n        this._canvasId = ((particleSystem.canvasId !== undefined) ? particleSystem.canvasId : -1);\r\n        this._offsetY = ((particleSystem.offsetY !== undefined) ? particleSystem.offsetY : 10);\r\n        this._scaleMultiplier = (this._size / 64);\r\n        this._blend = ((particleSystem.blend !== undefined) ? particleSystem.blend : 1);\r\n        this._blend = Math.min(this._blend, 1);\r\n\r\n        this._blackOverlayAlphaTransform.alpha = this._blend;\r\n\r\n        const bgColor = ((particleSystem.bgColor !== undefined) ? particleSystem.bgColor : '0');\r\n\r\n        this._bgColor = (parseInt(bgColor, 16) || 0x000000);\r\n\r\n        if(!particleSystem.emitters || !particleSystem.emitters.length) return;\r\n\r\n        for(const emitter of particleSystem.emitters)\r\n        {\r\n            const emitterId = emitter.id;\r\n            const emitterName = emitter.name;\r\n            const emitterSpriteId = emitter.spriteId;\r\n\r\n            const particleEmitter = new FurnitureParticleSystemEmitter(emitterName, emitterSpriteId);\r\n\r\n            this._emitters.add(emitterId, particleEmitter);\r\n\r\n            const maxNumParticles = emitter.maxNumParticles;\r\n            const particlesPerFrame = emitter.particlesPerFrame;\r\n            const burstPulse = ((emitter.burstPulse !== undefined) ? emitter.burstPulse : 1);\r\n            const fuseTime = emitter.fuseTime;\r\n            const simulationForce = emitter.simulation.force;\r\n            const simulationDirection = emitter.simulation.direction;\r\n            const simulationGravity = emitter.simulation.gravity;\r\n            const simulationAirFriction = emitter.simulation.airFriction;\r\n            const simulationShape = emitter.simulation.shape;\r\n            const simulationEnergy = emitter.simulation.energy;\r\n\r\n            for(const particle of emitter.particles)\r\n            {\r\n                const lifeTime = particle.lifeTime;\r\n                const isEmitter = (particle.isEmitter || false);\r\n                const fade = (particle.fade || false);\r\n\r\n                const frames: IGraphicAsset[] = [];\r\n\r\n                for(const name of particle.frames) frames.push(this._visualization.asset.getAsset(name));\r\n\r\n                particleEmitter.configureParticle(lifeTime, isEmitter, frames, fade);\r\n            }\r\n\r\n            particleEmitter.setup(maxNumParticles, particlesPerFrame, simulationForce, new Vector3D(0, simulationDirection, 0), simulationGravity, simulationAirFriction, simulationShape, simulationEnergy, fuseTime, burstPulse);\r\n        }\r\n    }\r\n\r\n    public _Str_17988(particleSystem: FurnitureParticleSystem): void\r\n    {\r\n        let emitterId = 0;\r\n\r\n        if(particleSystem._emitters && particleSystem._currentEmitter)\r\n        {\r\n            emitterId = particleSystem._emitters.getKey(particleSystem._emitters.getValues().indexOf(particleSystem._currentEmitter));\r\n        }\r\n\r\n        this.setAnimation(emitterId);\r\n\r\n        if(this._currentEmitter) this._currentEmitter.copyStateFrom(particleSystem._currentEmitter, (particleSystem._size / this._size));\r\n\r\n        this._canvasTexture = null;\r\n    }\r\n\r\n    private clearCanvas(): void\r\n    {\r\n        if(!this._emptySprite)\r\n        {\r\n            this._emptySprite = new NitroSprite(Texture.EMPTY);\r\n\r\n            this._emptySprite.alpha = 0;\r\n        }\r\n\r\n        if(!this._canvasTexture)\r\n        {\r\n            this._canvasTexture = RenderTexture.create({\r\n                width: this._roomSprite.width,\r\n                height: this._roomSprite.height\r\n            });\r\n        }\r\n        else\r\n        {\r\n            Nitro.instance.renderer.render(this._emptySprite, {\r\n                renderTexture: this._canvasTexture,\r\n                clear: true\r\n            });\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}