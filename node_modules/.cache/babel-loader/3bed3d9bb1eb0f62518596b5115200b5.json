{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/layout/LayoutPetImageView.tsx\",\n    _s = $RefreshSig$();\n\nimport { PetFigureData, TextureUtils, Vector3d } from '@nitrots/nitro-renderer';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { GetRoomEngine } from '../../api';\nimport { Base } from '../Base';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LayoutPetImageView = props => {\n  _s();\n\n  const {\n    figure = '',\n    typeId = -1,\n    paletteId = -1,\n    petColor = 0xFFFFFF,\n    customParts = [],\n    posture = 'std',\n    headOnly = false,\n    direction = 0,\n    scale = 1,\n    style = {},\n    ...rest\n  } = props;\n  const [petUrl, setPetUrl] = useState(null);\n  const isDisposed = useRef(false);\n  const getStyle = useMemo(() => {\n    let newStyle = {};\n    if (petUrl && petUrl.length) newStyle.backgroundImage = `url(${petUrl})`;\n\n    if (scale !== 1) {\n      newStyle.transform = `scale(${scale})`;\n      if (!(scale % 1)) newStyle.imageRendering = 'pixelated';\n    }\n\n    if (Object.keys(style).length) newStyle = { ...newStyle,\n      ...style\n    };\n    return newStyle;\n  }, [petUrl, scale, style]);\n  useEffect(() => {\n    let url = null;\n    let petTypeId = typeId;\n    let petPaletteId = paletteId;\n    let petColor1 = petColor;\n    let petCustomParts = customParts;\n    let petHeadOnly = headOnly;\n\n    if (figure && figure.length) {\n      const petFigureData = new PetFigureData(figure);\n      petTypeId = petFigureData.typeId;\n      petPaletteId = petFigureData.paletteId;\n      petColor1 = petFigureData.color;\n      petCustomParts = petFigureData.customParts;\n    }\n\n    if (petTypeId === 16) petHeadOnly = false;\n    const imageResult = GetRoomEngine().getRoomObjectPetImage(petTypeId, petPaletteId, petColor1, new Vector3d(direction * 45), 64, {\n      imageReady: (id, texture, image) => {\n        if (isDisposed.current) return;\n        if (image) setPetUrl(image.src);else if (texture) setPetUrl(TextureUtils.generateImageUrl(texture));\n      },\n      imageFailed: id => {}\n    }, petHeadOnly, 0, petCustomParts, posture);\n\n    if (imageResult) {\n      const image = imageResult.getImage();\n      if (image) setPetUrl(image.src);\n    }\n  }, [figure, typeId, paletteId, petColor, customParts, posture, headOnly, direction]);\n  useEffect(() => {\n    isDisposed.current = false;\n    return () => {\n      isDisposed.current = true;\n    };\n  }, []);\n  const url = `url('${petUrl}')`;\n  return /*#__PURE__*/_jsxDEV(Base, {\n    classNames: ['pet-image'],\n    style: getStyle,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 12\n  }, this);\n};\n\n_s(LayoutPetImageView, \"NlQNQnd+x95ncxzs3ANzdwtrEDU=\");\n\n_c = LayoutPetImageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutPetImageView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/layout/LayoutPetImageView.tsx"],"names":["PetFigureData","TextureUtils","Vector3d","useEffect","useMemo","useRef","useState","GetRoomEngine","Base","LayoutPetImageView","props","figure","typeId","paletteId","petColor","customParts","posture","headOnly","direction","scale","style","rest","petUrl","setPetUrl","isDisposed","getStyle","newStyle","length","backgroundImage","transform","imageRendering","Object","keys","url","petTypeId","petPaletteId","petColor1","petCustomParts","petHeadOnly","petFigureData","color","imageResult","getRoomObjectPetImage","imageReady","id","texture","image","current","src","generateImageUrl","imageFailed","getImage"],"mappings":"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","sourcesContent":["import { PetCustomPart, PetFigureData, TextureUtils, Vector3d } from '@nitrots/nitro-renderer';\nimport { CSSProperties, FC, useEffect, useMemo, useRef, useState } from 'react';\nimport { GetRoomEngine } from '../../api';\nimport { Base, BaseProps } from '../Base';\n\ninterface LayoutPetImageViewProps extends BaseProps<HTMLDivElement>\n{\n    figure?: string;\n    typeId?: number;\n    paletteId?: number;\n    petColor?: number;\n    customParts?: PetCustomPart[];\n    posture?: string;\n    headOnly?: boolean;\n    direction?: number;\n    scale?: number;\n}\n\nexport const LayoutPetImageView: FC<LayoutPetImageViewProps> = props =>\n{\n    const { figure = '', typeId = -1, paletteId = -1, petColor = 0xFFFFFF, customParts = [], posture = 'std', headOnly = false, direction = 0, scale = 1, style = {}, ...rest } = props;\n    const [ petUrl, setPetUrl ] = useState<string>(null);\n    const isDisposed = useRef(false);\n\n    const getStyle = useMemo(() =>\n    {\n        let newStyle: CSSProperties = {};\n\n        if(petUrl && petUrl.length) newStyle.backgroundImage = `url(${ petUrl })`;\n\n        if(scale !== 1)\n        {\n            newStyle.transform = `scale(${ scale })`;\n\n            if(!(scale % 1)) newStyle.imageRendering = 'pixelated';\n        }\n\n        if(Object.keys(style).length) newStyle = { ...newStyle, ...style };\n\n        return newStyle;\n    }, [ petUrl, scale, style ]);\n\n    useEffect(() =>\n    {\n        let url = null;\n\n        let petTypeId = typeId;\n        let petPaletteId = paletteId;\n        let petColor1 = petColor;\n        let petCustomParts = customParts;\n        let petHeadOnly = headOnly;\n\n        if(figure && figure.length)\n        {\n            const petFigureData = new PetFigureData(figure);\n\n            petTypeId = petFigureData.typeId;\n            petPaletteId = petFigureData.paletteId;\n            petColor1 = petFigureData.color;\n            petCustomParts = petFigureData.customParts;\n        }\n\n        if(petTypeId === 16) petHeadOnly = false;\n\n        const imageResult = GetRoomEngine().getRoomObjectPetImage(petTypeId, petPaletteId, petColor1, new Vector3d((direction * 45)), 64, {\n            imageReady: (id, texture, image) =>\n            {\n                if(isDisposed.current) return;\n\n                if(image) setPetUrl(image.src);\n                else if(texture) setPetUrl(TextureUtils.generateImageUrl(texture));\n            },\n            imageFailed: (id) =>\n            {\n\n            }\n        }, petHeadOnly, 0, petCustomParts, posture);\n\n        if(imageResult)\n        {\n            const image = imageResult.getImage();\n\n            if(image) setPetUrl(image.src);\n\n\n        }\n    }, [ figure, typeId, paletteId, petColor, customParts, posture, headOnly, direction ]);\n\n    useEffect(() =>\n    {\n        isDisposed.current = false;\n\n        return () =>\n        {\n            isDisposed.current = true;\n        }\n    }, []);\n\n    const url = `url('${ petUrl }')`;\n\n    return <Base classNames={ [ 'pet-image' ] } style={ getStyle } { ...rest } />;\n}\n"]},"metadata":{},"sourceType":"module"}