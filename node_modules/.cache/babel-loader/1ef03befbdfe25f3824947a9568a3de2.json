{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/inventory/views/bot/InventoryBotView.tsx\",\n    _s = $RefreshSig$();\n\nimport { RoomObjectVariable } from '@nitrots/nitro-renderer';\nimport { useEffect, useState } from 'react';\nimport { attemptBotPlacement, GetRoomEngine, LocalizeText, UnseenItemCategory } from '../../../../api';\nimport { AutoGrid, Button, Column, Grid, LayoutRoomPreviewerView, Text } from '../../../../common';\nimport { useInventoryBots, useInventoryUnseenTracker } from '../../../../hooks';\nimport { InventoryCategoryEmptyView } from '../InventoryCategoryEmptyView';\nimport { InventoryBotItemView } from './InventoryBotItemView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryBotView = props => {\n  _s();\n\n  const {\n    roomSession = null,\n    roomPreviewer = null\n  } = props;\n  const [isVisible, setIsVisible] = useState(false);\n  const {\n    botItems = [],\n    selectedBot = null,\n    activate = null,\n    deactivate = null\n  } = useInventoryBots();\n  const {\n    isUnseen = null,\n    removeUnseen = null\n  } = useInventoryUnseenTracker();\n  useEffect(() => {\n    if (!selectedBot || !roomPreviewer) return;\n    const botData = selectedBot.botData;\n    const roomEngine = GetRoomEngine();\n    let wallType = roomEngine.getRoomInstanceVariable(roomEngine.activeRoomId, RoomObjectVariable.ROOM_WALL_TYPE);\n    let floorType = roomEngine.getRoomInstanceVariable(roomEngine.activeRoomId, RoomObjectVariable.ROOM_FLOOR_TYPE);\n    let landscapeType = roomEngine.getRoomInstanceVariable(roomEngine.activeRoomId, RoomObjectVariable.ROOM_LANDSCAPE_TYPE);\n    wallType = wallType && wallType.length ? wallType : '101';\n    floorType = floorType && floorType.length ? floorType : '101';\n    landscapeType = landscapeType && landscapeType.length ? landscapeType : '1.1';\n    roomPreviewer.reset(false);\n    roomPreviewer.updateRoomWallsAndFloorVisibility(true, true);\n    roomPreviewer.updateObjectRoom(floorType, wallType, landscapeType);\n    roomPreviewer.addAvatarIntoRoom(botData.figure, 0);\n  }, [roomPreviewer, selectedBot]);\n  useEffect(() => {\n    if (!selectedBot || !isUnseen(UnseenItemCategory.BOT, selectedBot.botData.id)) return;\n    removeUnseen(UnseenItemCategory.BOT, selectedBot.botData.id);\n  }, [selectedBot, isUnseen, removeUnseen]);\n  useEffect(() => {\n    if (!isVisible) return;\n    const id = activate();\n    return () => deactivate(id);\n  }, [isVisible, activate, deactivate]);\n  useEffect(() => {\n    setIsVisible(true);\n    return () => setIsVisible(false);\n  }, []);\n  if (!botItems || !botItems.length) return /*#__PURE__*/_jsxDEV(InventoryCategoryEmptyView, {\n    title: LocalizeText('inventory.empty.bots.title'),\n    desc: LocalizeText('inventory.empty.bots.desc')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 46\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(Column, {\n      size: 7,\n      overflow: \"hidden\",\n      children: /*#__PURE__*/_jsxDEV(AutoGrid, {\n        columnCount: 5,\n        children: botItems && botItems.length > 0 && botItems.map(item => /*#__PURE__*/_jsxDEV(InventoryBotItemView, {\n          botItem: item\n        }, item.botData.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 81\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      size: 5,\n      overflow: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        overflow: \"hidden\",\n        position: \"relative\",\n        children: /*#__PURE__*/_jsxDEV(LayoutRoomPreviewerView, {\n          roomPreviewer: roomPreviewer,\n          height: 140\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), selectedBot && /*#__PURE__*/_jsxDEV(Column, {\n        grow: true,\n        justifyContent: \"between\",\n        gap: 2,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          grow: true,\n          truncate: true,\n          children: selectedBot.botData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), !!roomSession && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: event => attemptBotPlacement(selectedBot),\n          children: LocalizeText('inventory.furni.placetoroom')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InventoryBotView, \"E/k4HO4MveeqdSdQ6A9Re8FUYnU=\", false, function () {\n  return [useInventoryBots, useInventoryUnseenTracker];\n});\n\n_c = InventoryBotView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryBotView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/inventory/views/bot/InventoryBotView.tsx"],"names":["RoomObjectVariable","useEffect","useState","attemptBotPlacement","GetRoomEngine","LocalizeText","UnseenItemCategory","AutoGrid","Button","Column","Grid","LayoutRoomPreviewerView","Text","useInventoryBots","useInventoryUnseenTracker","InventoryCategoryEmptyView","InventoryBotItemView","InventoryBotView","props","roomSession","roomPreviewer","isVisible","setIsVisible","botItems","selectedBot","activate","deactivate","isUnseen","removeUnseen","botData","roomEngine","wallType","getRoomInstanceVariable","activeRoomId","ROOM_WALL_TYPE","floorType","ROOM_FLOOR_TYPE","landscapeType","ROOM_LANDSCAPE_TYPE","length","reset","updateRoomWallsAndFloorVisibility","updateObjectRoom","addAvatarIntoRoom","figure","BOT","id","map","item","name","event"],"mappings":"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","sourcesContent":["import { IRoomSession, RoomObjectVariable, RoomPreviewer } from '@nitrots/nitro-renderer';\nimport { FC, useEffect, useState } from 'react';\nimport { attemptBotPlacement, GetRoomEngine, LocalizeText, UnseenItemCategory } from '../../../../api';\nimport { AutoGrid, Button, Column, Grid, LayoutRoomPreviewerView, Text } from '../../../../common';\nimport { useInventoryBots, useInventoryUnseenTracker } from '../../../../hooks';\nimport { InventoryCategoryEmptyView } from '../InventoryCategoryEmptyView';\nimport { InventoryBotItemView } from './InventoryBotItemView';\n\ninterface InventoryBotViewProps\n{\n    roomSession: IRoomSession;\n    roomPreviewer: RoomPreviewer;\n}\n\nexport const InventoryBotView: FC<InventoryBotViewProps> = props =>\n{\n    const { roomSession = null, roomPreviewer = null } = props;\n    const [ isVisible, setIsVisible ] = useState(false);\n    const { botItems = [], selectedBot = null, activate = null, deactivate = null } = useInventoryBots();\n    const { isUnseen = null, removeUnseen = null } = useInventoryUnseenTracker();\n\n    useEffect(() =>\n    {\n        if(!selectedBot || !roomPreviewer) return;\n\n        const botData = selectedBot.botData;\n\n        const roomEngine = GetRoomEngine();\n\n        let wallType = roomEngine.getRoomInstanceVariable<string>(roomEngine.activeRoomId, RoomObjectVariable.ROOM_WALL_TYPE);\n        let floorType = roomEngine.getRoomInstanceVariable<string>(roomEngine.activeRoomId, RoomObjectVariable.ROOM_FLOOR_TYPE);\n        let landscapeType = roomEngine.getRoomInstanceVariable<string>(roomEngine.activeRoomId, RoomObjectVariable.ROOM_LANDSCAPE_TYPE);\n\n        wallType = (wallType && wallType.length) ? wallType : '101';\n        floorType = (floorType && floorType.length) ? floorType : '101';\n        landscapeType = (landscapeType && landscapeType.length) ? landscapeType : '1.1';\n\n        roomPreviewer.reset(false);\n        roomPreviewer.updateRoomWallsAndFloorVisibility(true, true);\n        roomPreviewer.updateObjectRoom(floorType, wallType, landscapeType);\n        roomPreviewer.addAvatarIntoRoom(botData.figure, 0);\n    }, [ roomPreviewer, selectedBot ]);\n\n    useEffect(() =>\n    {\n        if(!selectedBot || !isUnseen(UnseenItemCategory.BOT, selectedBot.botData.id)) return;\n\n        removeUnseen(UnseenItemCategory.BOT, selectedBot.botData.id);\n    }, [ selectedBot, isUnseen, removeUnseen ]);\n\n    useEffect(() =>\n    {\n        if(!isVisible) return;\n\n        const id = activate();\n\n        return () => deactivate(id);\n    }, [ isVisible, activate, deactivate ]);\n\n    useEffect(() =>\n    {\n        setIsVisible(true);\n\n        return () => setIsVisible(false);\n    }, []);\n\n    if(!botItems || !botItems.length) return <InventoryCategoryEmptyView title={ LocalizeText('inventory.empty.bots.title') } desc={ LocalizeText('inventory.empty.bots.desc') } />;\n\n    return (\n        <Grid>\n            <Column size={ 7 } overflow=\"hidden\">\n                <AutoGrid columnCount={ 5 }>\n                    { botItems && (botItems.length > 0) && botItems.map(item => <InventoryBotItemView key={ item.botData.id } botItem={ item } />) }\n                </AutoGrid>\n            </Column>\n            <Column size={ 5 } overflow=\"auto\">\n                <Column overflow=\"hidden\" position=\"relative\">\n                    <LayoutRoomPreviewerView roomPreviewer={ roomPreviewer } height={ 140 } />\n                </Column>\n                { selectedBot &&\n                    <Column grow justifyContent=\"between\" gap={ 2 }>\n                        <Text grow truncate>{ selectedBot.botData.name }</Text>\n                        { !!roomSession &&\n                            <Button onClick={ event => attemptBotPlacement(selectedBot) }>\n                                { LocalizeText('inventory.furni.placetoroom') }\n                            </Button> }\n                    </Column> }\n            </Column>\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}