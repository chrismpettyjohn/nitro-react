{"ast":null,"code":"import { Nitro } from '../../nitro/Nitro';\nexport class RoomEnterEffect {\n  static init(delay, duration) {\n    RoomEnterEffect._currentDelta = 0;\n    RoomEnterEffect._startDelayMs = delay;\n    RoomEnterEffect._effectDurationMs = duration;\n    RoomEnterEffect._initializationTimeMs = Nitro.instance.time;\n    RoomEnterEffect._state = RoomEnterEffect.STATE_START_DELAY;\n  }\n\n  static turnVisualizationOn() {\n    if (RoomEnterEffect._state === RoomEnterEffect.STATE_NOT_INITIALIZED || RoomEnterEffect._state === RoomEnterEffect.STATE_OVER) return;\n    const k = Nitro.instance.time - RoomEnterEffect._initializationTimeMs;\n\n    if (k > RoomEnterEffect._startDelayMs + RoomEnterEffect._effectDurationMs) {\n      RoomEnterEffect._state = RoomEnterEffect.STATE_OVER;\n      return;\n    }\n\n    RoomEnterEffect._visualizationOn = true;\n\n    if (k < RoomEnterEffect._startDelayMs) {\n      RoomEnterEffect._state = RoomEnterEffect.STATE_START_DELAY;\n      return;\n    }\n\n    RoomEnterEffect._state = RoomEnterEffect.STATE_RUNNING;\n    RoomEnterEffect._currentDelta = (k - RoomEnterEffect._startDelayMs) / RoomEnterEffect._effectDurationMs;\n  }\n\n  static turnVisualizationOff() {\n    RoomEnterEffect._visualizationOn = false;\n  }\n\n  static isVisualizationOn() {\n    return RoomEnterEffect._visualizationOn && RoomEnterEffect.isRunning();\n  }\n\n  static isRunning() {\n    if (RoomEnterEffect._state === RoomEnterEffect.STATE_START_DELAY || RoomEnterEffect._state === RoomEnterEffect.STATE_RUNNING) return true;\n    return false;\n  }\n\n  static getDelta() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    let _arg_2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    return Math.min(Math.max(RoomEnterEffect._currentDelta, k), _arg_2);\n  }\n\n  static get totalRunningTime() {\n    return RoomEnterEffect._startDelayMs + RoomEnterEffect._effectDurationMs;\n  }\n\n}\nRoomEnterEffect.STATE_NOT_INITIALIZED = 0;\nRoomEnterEffect.STATE_START_DELAY = 1;\nRoomEnterEffect.STATE_RUNNING = 2;\nRoomEnterEffect.STATE_OVER = 3;\nRoomEnterEffect._state = RoomEnterEffect.STATE_NOT_INITIALIZED;\nRoomEnterEffect._visualizationOn = false;\nRoomEnterEffect._currentDelta = 0;\nRoomEnterEffect._initializationTimeMs = 0;\nRoomEnterEffect._startDelayMs = 20 * 1000;\nRoomEnterEffect._effectDurationMs = 2000;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/utils/RoomEnterEffect.ts"],"names":["Nitro","RoomEnterEffect","init","delay","duration","_currentDelta","_startDelayMs","_effectDurationMs","_initializationTimeMs","instance","time","_state","STATE_START_DELAY","turnVisualizationOn","STATE_NOT_INITIALIZED","STATE_OVER","k","_visualizationOn","STATE_RUNNING","turnVisualizationOff","isVisualizationOn","isRunning","getDelta","_arg_2","Math","min","max","totalRunningTime"],"mappings":"AAAA,SAASA,KAAT,QAAsB,mBAAtB;AAEA,OAAO,MAAMC,eAAN,CACP;AAasB,SAAJC,IAAI,CAACC,KAAD,EAAgBC,QAAhB,EAClB;AACIH,IAAAA,eAAe,CAACI,aAAhB,GAAgC,CAAhC;AACAJ,IAAAA,eAAe,CAACK,aAAhB,GAAgCH,KAAhC;AACAF,IAAAA,eAAe,CAACM,iBAAhB,GAAoCH,QAApC;AACAH,IAAAA,eAAe,CAACO,qBAAhB,GAAwCR,KAAK,CAACS,QAAN,CAAeC,IAAvD;AACAT,IAAAA,eAAe,CAACU,MAAhB,GAAyBV,eAAe,CAACW,iBAAzC;AACH;;AAEgC,SAAnBC,mBAAmB,GACjC;AACI,QAAIZ,eAAe,CAACU,MAAhB,KAA2BV,eAAe,CAACa,qBAA5C,IAAuEb,eAAe,CAACU,MAAhB,KAA2BV,eAAe,CAACc,UAArH,EAAkI;AAElI,UAAMC,CAAC,GAAIhB,KAAK,CAACS,QAAN,CAAeC,IAAf,GAAsBT,eAAe,CAACO,qBAAjD;;AAEA,QAAGQ,CAAC,GAAIf,eAAe,CAACK,aAAhB,GAAgCL,eAAe,CAACM,iBAAxD,EACA;AACIN,MAAAA,eAAe,CAACU,MAAhB,GAAyBV,eAAe,CAACc,UAAzC;AAEA;AACH;;AAEDd,IAAAA,eAAe,CAACgB,gBAAhB,GAAmC,IAAnC;;AAEA,QAAGD,CAAC,GAAGf,eAAe,CAACK,aAAvB,EACA;AACIL,MAAAA,eAAe,CAACU,MAAhB,GAAyBV,eAAe,CAACW,iBAAzC;AAEA;AACH;;AAEDX,IAAAA,eAAe,CAACU,MAAhB,GAAyBV,eAAe,CAACiB,aAAzC;AACAjB,IAAAA,eAAe,CAACI,aAAhB,GAAiC,CAACW,CAAC,GAAGf,eAAe,CAACK,aAArB,IAAsCL,eAAe,CAACM,iBAAvF;AACH;;AAEiC,SAApBY,oBAAoB,GAClC;AACIlB,IAAAA,eAAe,CAACgB,gBAAhB,GAAmC,KAAnC;AACH;;AAE8B,SAAjBG,iBAAiB,GAC/B;AACI,WAAQnB,eAAe,CAACgB,gBAAjB,IAAuChB,eAAe,CAACoB,SAAhB,EAA9C;AACH;;AAEsB,SAATA,SAAS,GACvB;AACI,QAAIpB,eAAe,CAACU,MAAhB,KAA2BV,eAAe,CAACW,iBAA5C,IAAmEX,eAAe,CAACU,MAAhB,KAA2BV,eAAe,CAACiB,aAAjH,EAAiI,OAAO,IAAP;AAEjI,WAAO,KAAP;AACH;;AAEqB,SAARI,QAAQ,GACtB;AAAA,QADuBN,CACvB,uEADmC,CACnC;;AAAA,QADsCO,MACtC,uEADuD,CACvD;;AACI,WAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASzB,eAAe,CAACI,aAAzB,EAAwCW,CAAxC,CAAT,EAAqDO,MAArD,CAAP;AACH;;AAEiC,aAAhBI,gBAAgB,GAClC;AACI,WAAO1B,eAAe,CAACK,aAAhB,GAAgCL,eAAe,CAACM,iBAAvD;AACH;;AAzEL;AADaN,e,CAEKa,qB,GAAgC,C;AAFrCb,e,CAGKW,iB,GAA4B,C;AAHjCX,e,CAIKiB,a,GAAwB,C;AAJ7BjB,e,CAKKc,U,GAAqB,C;AAL1Bd,e,CAOMU,M,GAAiBV,eAAe,CAACa,qB;AAPvCb,e,CAQMgB,gB,GAA4B,K;AARlChB,e,CASMI,a,GAAwB,C;AAT9BJ,e,CAUMO,qB,GAAgC,C;AAVtCP,e,CAWMK,a,GAAyB,KAAK,I;AAXpCL,e,CAYMM,iB,GAA4B,I","sourcesContent":["import { Nitro } from '../../nitro/Nitro';\r\n\r\nexport class RoomEnterEffect\r\n{\r\n    public static STATE_NOT_INITIALIZED: number = 0;\r\n    public static STATE_START_DELAY: number = 1;\r\n    public static STATE_RUNNING: number = 2;\r\n    public static STATE_OVER: number = 3;\r\n\r\n    private static _state: number = RoomEnterEffect.STATE_NOT_INITIALIZED;\r\n    private static _visualizationOn: boolean = false;\r\n    private static _currentDelta: number = 0;\r\n    private static _initializationTimeMs: number = 0;\r\n    private static _startDelayMs: number = (20 * 1000);\r\n    private static _effectDurationMs: number = 2000;\r\n\r\n    public static init(delay: number, duration: number): void\r\n    {\r\n        RoomEnterEffect._currentDelta = 0;\r\n        RoomEnterEffect._startDelayMs = delay;\r\n        RoomEnterEffect._effectDurationMs = duration;\r\n        RoomEnterEffect._initializationTimeMs = Nitro.instance.time;\r\n        RoomEnterEffect._state = RoomEnterEffect.STATE_START_DELAY;\r\n    }\r\n\r\n    public static turnVisualizationOn(): void\r\n    {\r\n        if((RoomEnterEffect._state === RoomEnterEffect.STATE_NOT_INITIALIZED) || (RoomEnterEffect._state === RoomEnterEffect.STATE_OVER)) return;\r\n\r\n        const k = (Nitro.instance.time - RoomEnterEffect._initializationTimeMs);\r\n\r\n        if(k > (RoomEnterEffect._startDelayMs + RoomEnterEffect._effectDurationMs))\r\n        {\r\n            RoomEnterEffect._state = RoomEnterEffect.STATE_OVER;\r\n\r\n            return;\r\n        }\r\n\r\n        RoomEnterEffect._visualizationOn = true;\r\n\r\n        if(k < RoomEnterEffect._startDelayMs)\r\n        {\r\n            RoomEnterEffect._state = RoomEnterEffect.STATE_START_DELAY;\r\n\r\n            return;\r\n        }\r\n\r\n        RoomEnterEffect._state = RoomEnterEffect.STATE_RUNNING;\r\n        RoomEnterEffect._currentDelta = ((k - RoomEnterEffect._startDelayMs) / RoomEnterEffect._effectDurationMs);\r\n    }\r\n\r\n    public static turnVisualizationOff(): void\r\n    {\r\n        RoomEnterEffect._visualizationOn = false;\r\n    }\r\n\r\n    public static isVisualizationOn(): boolean\r\n    {\r\n        return (RoomEnterEffect._visualizationOn) && (RoomEnterEffect.isRunning());\r\n    }\r\n\r\n    public static isRunning(): boolean\r\n    {\r\n        if((RoomEnterEffect._state === RoomEnterEffect.STATE_START_DELAY) || (RoomEnterEffect._state === RoomEnterEffect.STATE_RUNNING)) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public static getDelta(k: number = 0, _arg_2: number = 1): number\r\n    {\r\n        return Math.min(Math.max(RoomEnterEffect._currentDelta, k), _arg_2);\r\n    }\r\n\r\n    public static get totalRunningTime(): number\r\n    {\r\n        return RoomEnterEffect._startDelayMs + RoomEnterEffect._effectDurationMs;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}