{"ast":null,"code":"export class AvatarAction {\n  static getExpressionTimeout(expressionId) {\n    expressionId = parseInt(expressionId);\n\n    switch (expressionId) {\n      case 1:\n        return 5000;\n\n      case 2:\n        return 1400;\n\n      case 3:\n        return 2000;\n\n      case 4:\n        return 2000;\n\n      case 5:\n        return 0;\n\n      case 6:\n        return 700;\n\n      case 7:\n        return 2000;\n\n      case 8:\n        return 1500;\n\n      case 9:\n        return 1500;\n\n      case 10:\n        return 1500;\n\n      default:\n        return 0;\n    }\n  }\n\n  static getExpressionId(expression) {\n    return AvatarAction.EXPRESSION_MAP.indexOf(expression);\n  }\n\n  static getExpression(expressionId) {\n    if (expressionId > AvatarAction.EXPRESSION_MAP.length) return null;\n    return AvatarAction.EXPRESSION_MAP[expressionId];\n  }\n\n  static getGestureId(gesture) {\n    return AvatarAction.GESTURE_MAP.indexOf(gesture);\n  }\n\n  static getGesture(gestureId) {\n    if (gestureId > AvatarAction.GESTURE_MAP.length) return null;\n    return AvatarAction.GESTURE_MAP[gestureId];\n  }\n\n  static idToAvatarActionState(id) {\n    if (id === 'Lay') return 'lay';\n    if (id === 'Float') return 'float';\n    if (id === 'Swim') return 'swim';\n    if (id === 'Sit') return 'sit';\n    if (id === 'Respect') return 'respect';\n    if (id === 'Wave') return 'wave';\n    if (id === 'Idle') return 'idle';\n    if (id === 'Dance') return 'dance';\n    if (id === 'UseItem') return 'usei';\n    if (id === 'CarryItem') return 'cri';\n    if (id === 'Talk') return 'talk';\n    if (id === 'Sleep') return 'Sleep';\n    if (id === 'Move') return 'mv';\n    return 'std';\n  }\n\n}\nAvatarAction.CARRY_OBJECT = 'cri';\nAvatarAction.DANCE = 'dance';\nAvatarAction.EFFECT = 'fx';\nAvatarAction.EXPRESSION = 'expression';\nAvatarAction.EXPRESSION_BLOW_A_KISS = 'blow';\nAvatarAction.EXPRESSION_CRY = 'cry';\nAvatarAction.EXPRESSION_IDLE = 'idle';\nAvatarAction.EXPRESSION_LAUGH = 'laugh';\nAvatarAction.EXPRESSION_RESPECT = 'respect';\nAvatarAction.EXPRESSION_RIDE_JUMP = 'ridejump';\nAvatarAction.EXPRESSION_SNOWBOARD_OLLIE = 'sbollie';\nAvatarAction.EXPRESSION_SNOWBORD_360 = 'sb360';\nAvatarAction.EXPRESSION_WAVE = 'wave';\nAvatarAction.GESTURE = 'gest';\nAvatarAction.GESTURE_AGGRAVATED = 'agr';\nAvatarAction.GESTURE_SAD = 'sad';\nAvatarAction.GESTURE_SMILE = 'sml';\nAvatarAction.GESTURE_SURPRISED = 'srp';\nAvatarAction.GUIDE_STATUS = 'guide';\nAvatarAction.MUTED = 'muted';\nAvatarAction.PET_GESTURE_BLINK = 'eyb';\nAvatarAction.PET_GESTURE_CRAZY = 'crz';\nAvatarAction.PET_GESTURE_JOY = 'joy';\nAvatarAction.PET_GESTURE_MISERABLE = 'mis';\nAvatarAction.PET_GESTURE_PUZZLED = 'puz';\nAvatarAction.PET_GESTURE_TONGUE = 'tng';\nAvatarAction.PLAYING_GAME = 'playing_game';\nAvatarAction.POSTURE = 'posture';\nAvatarAction.POSTURE_FLOAT = 'float';\nAvatarAction.POSTURE_LAY = 'lay';\nAvatarAction.POSTURE_SIT = 'sit';\nAvatarAction.POSTURE_STAND = 'std';\nAvatarAction.POSTURE_SWIM = 'swim';\nAvatarAction.POSTURE_WALK = 'mv';\nAvatarAction.SIGN = 'sign';\nAvatarAction.SLEEP = 'sleep';\nAvatarAction.SNOWWAR_DIE_BACK = 'swdieback';\nAvatarAction.SNOWWAR_DIE_FRONT = 'swdiefront';\nAvatarAction.SNOWWAR_PICK = 'swpick';\nAvatarAction.SNOWWAR_RUN = 'swrun';\nAvatarAction.SNOWWAR_THROW = 'swthrow';\nAvatarAction.TALK = 'talk';\nAvatarAction.BLINK = 'blink';\nAvatarAction.TYPING = 'typing';\nAvatarAction.USE_OBJECT = 'usei';\nAvatarAction.VOTE = 'vote';\nAvatarAction.GESTURE_MAP = ['', AvatarAction.GESTURE_SMILE, AvatarAction.GESTURE_AGGRAVATED, AvatarAction.GESTURE_SURPRISED, AvatarAction.GESTURE_SAD, AvatarAction.PET_GESTURE_JOY, AvatarAction.PET_GESTURE_CRAZY, AvatarAction.PET_GESTURE_TONGUE, AvatarAction.PET_GESTURE_BLINK, AvatarAction.PET_GESTURE_MISERABLE, AvatarAction.PET_GESTURE_PUZZLED];\nAvatarAction.EXPRESSION_MAP = ['', AvatarAction.EXPRESSION_WAVE, AvatarAction.EXPRESSION_BLOW_A_KISS, AvatarAction.EXPRESSION_LAUGH, AvatarAction.EXPRESSION_CRY, AvatarAction.EXPRESSION_IDLE, AvatarAction.DANCE, AvatarAction.EXPRESSION_RESPECT, AvatarAction.EXPRESSION_SNOWBOARD_OLLIE, AvatarAction.EXPRESSION_SNOWBORD_360, AvatarAction.EXPRESSION_RIDE_JUMP];","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/enum/AvatarAction.ts"],"names":["AvatarAction","getExpressionTimeout","expressionId","parseInt","getExpressionId","expression","EXPRESSION_MAP","indexOf","getExpression","length","getGestureId","gesture","GESTURE_MAP","getGesture","gestureId","idToAvatarActionState","id","CARRY_OBJECT","DANCE","EFFECT","EXPRESSION","EXPRESSION_BLOW_A_KISS","EXPRESSION_CRY","EXPRESSION_IDLE","EXPRESSION_LAUGH","EXPRESSION_RESPECT","EXPRESSION_RIDE_JUMP","EXPRESSION_SNOWBOARD_OLLIE","EXPRESSION_SNOWBORD_360","EXPRESSION_WAVE","GESTURE","GESTURE_AGGRAVATED","GESTURE_SAD","GESTURE_SMILE","GESTURE_SURPRISED","GUIDE_STATUS","MUTED","PET_GESTURE_BLINK","PET_GESTURE_CRAZY","PET_GESTURE_JOY","PET_GESTURE_MISERABLE","PET_GESTURE_PUZZLED","PET_GESTURE_TONGUE","PLAYING_GAME","POSTURE","POSTURE_FLOAT","POSTURE_LAY","POSTURE_SIT","POSTURE_STAND","POSTURE_SWIM","POSTURE_WALK","SIGN","SLEEP","SNOWWAR_DIE_BACK","SNOWWAR_DIE_FRONT","SNOWWAR_PICK","SNOWWAR_RUN","SNOWWAR_THROW","TALK","BLINK","TYPING","USE_OBJECT","VOTE"],"mappings":"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","sourcesContent":["export class AvatarAction\r\n{\r\n    public static CARRY_OBJECT = 'cri';\r\n    public static DANCE = 'dance';\r\n    public static EFFECT = 'fx';\r\n    public static EXPRESSION = 'expression';\r\n    public static EXPRESSION_BLOW_A_KISS = 'blow';\r\n    public static EXPRESSION_CRY = 'cry';\r\n    public static EXPRESSION_IDLE = 'idle';\r\n    public static EXPRESSION_LAUGH = 'laugh';\r\n    public static EXPRESSION_RESPECT = 'respect';\r\n    public static EXPRESSION_RIDE_JUMP = 'ridejump';\r\n    public static EXPRESSION_SNOWBOARD_OLLIE = 'sbollie';\r\n    public static EXPRESSION_SNOWBORD_360 = 'sb360';\r\n    public static EXPRESSION_WAVE = 'wave';\r\n    public static GESTURE = 'gest';\r\n    public static GESTURE_AGGRAVATED = 'agr';\r\n    public static GESTURE_SAD = 'sad';\r\n    public static GESTURE_SMILE = 'sml';\r\n    public static GESTURE_SURPRISED = 'srp';\r\n    public static GUIDE_STATUS = 'guide';\r\n    public static MUTED = 'muted';\r\n    public static PET_GESTURE_BLINK = 'eyb';\r\n    public static PET_GESTURE_CRAZY = 'crz';\r\n    public static PET_GESTURE_JOY = 'joy';\r\n    public static PET_GESTURE_MISERABLE = 'mis';\r\n    public static PET_GESTURE_PUZZLED = 'puz';\r\n    public static PET_GESTURE_TONGUE = 'tng';\r\n    public static PLAYING_GAME = 'playing_game';\r\n    public static POSTURE = 'posture';\r\n    public static POSTURE_FLOAT = 'float';\r\n    public static POSTURE_LAY = 'lay';\r\n    public static POSTURE_SIT = 'sit';\r\n    public static POSTURE_STAND = 'std';\r\n    public static POSTURE_SWIM = 'swim';\r\n    public static POSTURE_WALK = 'mv';\r\n    public static SIGN = 'sign';\r\n    public static SLEEP = 'sleep';\r\n    public static SNOWWAR_DIE_BACK = 'swdieback';\r\n    public static SNOWWAR_DIE_FRONT = 'swdiefront';\r\n    public static SNOWWAR_PICK = 'swpick';\r\n    public static SNOWWAR_RUN = 'swrun';\r\n    public static SNOWWAR_THROW = 'swthrow';\r\n    public static TALK = 'talk';\r\n    public static BLINK = 'blink';\r\n    public static TYPING = 'typing';\r\n    public static USE_OBJECT = 'usei';\r\n    public static VOTE = 'vote';\r\n\r\n    public static GESTURE_MAP = [ '', AvatarAction.GESTURE_SMILE, AvatarAction.GESTURE_AGGRAVATED, AvatarAction.GESTURE_SURPRISED, AvatarAction.GESTURE_SAD, AvatarAction.PET_GESTURE_JOY, AvatarAction.PET_GESTURE_CRAZY, AvatarAction.PET_GESTURE_TONGUE, AvatarAction.PET_GESTURE_BLINK, AvatarAction.PET_GESTURE_MISERABLE, AvatarAction.PET_GESTURE_PUZZLED ];\r\n\r\n    public static EXPRESSION_MAP = [ '', AvatarAction.EXPRESSION_WAVE, AvatarAction.EXPRESSION_BLOW_A_KISS, AvatarAction.EXPRESSION_LAUGH, AvatarAction.EXPRESSION_CRY, AvatarAction.EXPRESSION_IDLE, AvatarAction.DANCE, AvatarAction.EXPRESSION_RESPECT, AvatarAction.EXPRESSION_SNOWBOARD_OLLIE, AvatarAction.EXPRESSION_SNOWBORD_360, AvatarAction.EXPRESSION_RIDE_JUMP ];\r\n\r\n    public static getExpressionTimeout(expressionId: number): number\r\n    {\r\n        expressionId = parseInt(expressionId as any);\r\n\r\n        switch(expressionId)\r\n        {\r\n            case 1:\r\n                return 5000;\r\n            case 2:\r\n                return 1400;\r\n            case 3:\r\n                return 2000;\r\n            case 4:\r\n                return 2000;\r\n            case 5:\r\n                return 0;\r\n            case 6:\r\n                return 700;\r\n            case 7:\r\n                return 2000;\r\n            case 8:\r\n                return 1500;\r\n            case 9:\r\n                return 1500;\r\n            case 10:\r\n                return 1500;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public static getExpressionId(expression: string): number\r\n    {\r\n        return AvatarAction.EXPRESSION_MAP.indexOf(expression);\r\n    }\r\n\r\n    public static getExpression(expressionId: number): string\r\n    {\r\n        if(expressionId > AvatarAction.EXPRESSION_MAP.length) return null;\r\n\r\n        return AvatarAction.EXPRESSION_MAP[expressionId];\r\n    }\r\n\r\n    public static getGestureId(gesture: string): number\r\n    {\r\n        return AvatarAction.GESTURE_MAP.indexOf(gesture);\r\n    }\r\n\r\n    public static getGesture(gestureId: number): string\r\n    {\r\n        if(gestureId > AvatarAction.GESTURE_MAP.length) return null;\r\n\r\n        return AvatarAction.GESTURE_MAP[gestureId];\r\n    }\r\n\r\n    public static idToAvatarActionState(id: string): string\r\n    {\r\n        if(id === 'Lay') return 'lay';\r\n        if(id === 'Float') return 'float';\r\n        if(id === 'Swim') return 'swim';\r\n        if(id === 'Sit') return 'sit';\r\n        if(id === 'Respect') return 'respect';\r\n        if(id === 'Wave') return 'wave';\r\n        if(id === 'Idle') return 'idle';\r\n        if(id === 'Dance') return 'dance';\r\n        if(id === 'UseItem') return 'usei';\r\n        if(id === 'CarryItem') return 'cri';\r\n        if(id === 'Talk') return 'talk';\r\n        if(id === 'Sleep') return 'Sleep';\r\n        if(id === 'Move') return 'mv';\r\n\r\n        return 'std';\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}