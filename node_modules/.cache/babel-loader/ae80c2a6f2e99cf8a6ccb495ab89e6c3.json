{"ast":null,"code":"import { Graphics } from '@pixi/graphics';\nimport { Rectangle } from '@pixi/math';\nimport { TextureUtils } from '../../../../../../../room/utils/TextureUtils';\nimport { RoomVisualization } from '../../RoomVisualization';\nexport class PlaneVisualizationLayer {\n  constructor(material, color, align) {\n    let offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this._material = void 0;\n    this._color = void 0;\n    this._offset = void 0;\n    this._align = void 0;\n    this._bitmapData = void 0;\n    this._isDisposed = void 0;\n    this._material = material;\n    this._offset = offset;\n    this._align = align;\n    this._color = color;\n    this._bitmapData = null;\n    this._isDisposed = false;\n  }\n\n  get offset() {\n    return this._offset;\n  }\n\n  get align() {\n    return this._align;\n  }\n\n  get disposed() {\n    return this._isDisposed;\n  }\n\n  dispose() {\n    this._isDisposed = true;\n    this._material = null;\n    this.clearCache();\n  }\n\n  clearCache() {\n    if (this._bitmapData) {\n      this._bitmapData.destroy();\n\n      this._bitmapData = null;\n    }\n  }\n\n  render(canvas, width, height, normal, useTexture, offsetX, offsetY) {\n    if (!canvas || canvas.width !== width || canvas.height !== height) canvas = null;\n    let bitmapData = null;\n\n    if (this._material) {\n      bitmapData = this._material.render(null, width, height, normal, useTexture, offsetX, offsetY + this.offset, this.align === PlaneVisualizationLayer.ALIGN_TOP);\n\n      if (bitmapData && bitmapData !== canvas) {\n        if (this._bitmapData) this._bitmapData.destroy();\n        this._bitmapData = bitmapData.clone();\n        bitmapData = this._bitmapData;\n      }\n    } else {\n      if (!canvas) {\n        if (this._bitmapData && this._bitmapData.width === width && this._bitmapData.height === height) return this._bitmapData;\n        if (this._bitmapData) this._bitmapData.destroy();\n        const graphic = new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, width, height).endFill();\n        this._bitmapData = graphic;\n        bitmapData = this._bitmapData;\n      } else {\n        canvas.beginFill(0xFFFFFF).drawRect(0, 0, width, height).endFill();\n        bitmapData = canvas;\n      }\n    }\n\n    if (bitmapData) {\n      bitmapData.tint = this._color;\n\n      if (canvas && bitmapData !== canvas) {\n        let texture = RoomVisualization.getTextureCache(bitmapData);\n\n        if (!texture) {\n          texture = TextureUtils.generateTexture(bitmapData, new Rectangle(0, 0, width, height));\n          RoomVisualization.addTextureCache(bitmapData, texture);\n        }\n\n        canvas.beginTextureFill({\n          texture\n        }).drawRect(0, 0, width, height).endFill();\n        bitmapData = canvas;\n      }\n    }\n\n    return bitmapData;\n  }\n\n  getMaterial() {\n    return this._material;\n  }\n\n  getColor() {\n    return this._color;\n  }\n\n}\nPlaneVisualizationLayer.DEFAULT_OFFSET = 0;\nPlaneVisualizationLayer.ALIGN_TOP = 1;\nPlaneVisualizationLayer.ALIGN_BOTTOM = 2;\nPlaneVisualizationLayer.ALIGN_DEFAULT = PlaneVisualizationLayer.ALIGN_TOP;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/PlaneVisualizationLayer.ts"],"names":["Graphics","Rectangle","TextureUtils","RoomVisualization","PlaneVisualizationLayer","constructor","material","color","align","offset","_material","_color","_offset","_align","_bitmapData","_isDisposed","disposed","dispose","clearCache","destroy","render","canvas","width","height","normal","useTexture","offsetX","offsetY","bitmapData","ALIGN_TOP","clone","graphic","beginFill","drawRect","endFill","tint","texture","getTextureCache","generateTexture","addTextureCache","beginTextureFill","getMaterial","getColor","DEFAULT_OFFSET","ALIGN_BOTTOM","ALIGN_DEFAULT"],"mappings":"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","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { Rectangle } from '@pixi/math';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { TextureUtils } from '../../../../../../../room/utils/TextureUtils';\r\nimport { RoomVisualization } from '../../RoomVisualization';\r\nimport { PlaneMaterial } from './PlaneMaterial';\r\n\r\nexport class PlaneVisualizationLayer\r\n{\r\n    public static DEFAULT_OFFSET: number = 0;\r\n    public static ALIGN_TOP: number = 1;\r\n    public static ALIGN_BOTTOM: number = 2;\r\n    public static ALIGN_DEFAULT: number = PlaneVisualizationLayer.ALIGN_TOP;\r\n\r\n    private _material: PlaneMaterial;\r\n    private _color: number;\r\n    private _offset: number;\r\n    private _align: number;\r\n    private _bitmapData: Graphics;\r\n    private _isDisposed: boolean;\r\n\r\n    constructor(material: PlaneMaterial, color: number, align: number, offset: number = 0)\r\n    {\r\n        this._material = material;\r\n        this._offset = offset;\r\n        this._align = align;\r\n        this._color = color;\r\n        this._bitmapData = null;\r\n        this._isDisposed = false;\r\n    }\r\n\r\n    public get offset(): number\r\n    {\r\n        return this._offset;\r\n    }\r\n\r\n    public get align(): number\r\n    {\r\n        return this._align;\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._isDisposed = true;\r\n        this._material = null;\r\n\r\n        this.clearCache();\r\n    }\r\n\r\n    public clearCache(): void\r\n    {\r\n        if(this._bitmapData)\r\n        {\r\n            this._bitmapData.destroy();\r\n\r\n            this._bitmapData = null;\r\n        }\r\n    }\r\n\r\n    public render(canvas: Graphics, width: number, height: number, normal: IVector3D, useTexture: boolean, offsetX: number, offsetY: number): Graphics\r\n    {\r\n        if(!canvas || (canvas.width !== width) || (canvas.height !== height)) canvas = null;\r\n\r\n        let bitmapData: Graphics = null;\r\n\r\n        if(this._material)\r\n        {\r\n            bitmapData = this._material.render(null, width, height, normal, useTexture, offsetX, (offsetY + this.offset), (this.align === PlaneVisualizationLayer.ALIGN_TOP));\r\n\r\n            if(bitmapData && (bitmapData !== canvas))\r\n            {\r\n                if(this._bitmapData) this._bitmapData.destroy();\r\n\r\n                this._bitmapData = bitmapData.clone();\r\n\r\n                bitmapData = this._bitmapData;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(!canvas)\r\n            {\r\n                if(this._bitmapData && (this._bitmapData.width === width) && (this._bitmapData.height === height)) return this._bitmapData;\r\n\r\n                if(this._bitmapData) this._bitmapData.destroy();\r\n\r\n                const graphic = new Graphics()\r\n                    .beginFill(0xFFFFFF)\r\n                    .drawRect(0, 0, width, height)\r\n                    .endFill();\r\n\r\n                this._bitmapData = graphic;\r\n\r\n                bitmapData = this._bitmapData;\r\n            }\r\n            else\r\n            {\r\n                canvas\r\n                    .beginFill(0xFFFFFF)\r\n                    .drawRect(0, 0, width, height)\r\n                    .endFill();\r\n\r\n                bitmapData = canvas;\r\n            }\r\n        }\r\n\r\n        if(bitmapData)\r\n        {\r\n            bitmapData.tint = this._color;\r\n\r\n            if(canvas && (bitmapData !== canvas))\r\n            {\r\n                let texture = RoomVisualization.getTextureCache(bitmapData);\r\n\r\n                if(!texture)\r\n                {\r\n                    texture = TextureUtils.generateTexture(bitmapData, new Rectangle(0, 0, width, height));\r\n\r\n                    RoomVisualization.addTextureCache(bitmapData, texture);\r\n                }\r\n\r\n                canvas\r\n                    .beginTextureFill({ texture })\r\n                    .drawRect(0, 0, width, height)\r\n                    .endFill();\r\n\r\n                bitmapData = canvas;\r\n            }\r\n        }\r\n\r\n        return bitmapData;\r\n    }\r\n\r\n    public getMaterial(): PlaneMaterial\r\n    {\r\n        return this._material;\r\n    }\r\n\r\n    public getColor(): number\r\n    {\r\n        return this._color;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}