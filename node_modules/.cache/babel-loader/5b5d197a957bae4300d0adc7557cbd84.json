{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/Base.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Base = props => {\n  _s();\n\n  const {\n    ref = null,\n    innerRef = null,\n    display = null,\n    fit = false,\n    grow = false,\n    shrink = false,\n    fullWidth = false,\n    fullHeight = false,\n    overflow = null,\n    position = null,\n    float = null,\n    pointer = false,\n    visible = null,\n    textColor = null,\n    classNames = [],\n    className = '',\n    style = {},\n    ...rest\n  } = props;\n  const getClassNames = useMemo(() => {\n    const newClassNames = [];\n    if (display && display.length) newClassNames.push('d-' + display);\n    if (fit || fullWidth) newClassNames.push('w-100');\n    if (fit || fullHeight) newClassNames.push('h-100');\n    if (grow) newClassNames.push('flex-grow-1');\n    if (shrink) newClassNames.push('flex-shrink-0');\n    if (overflow) newClassNames.push('overflow-' + overflow);\n    if (position) newClassNames.push('position-' + position);\n    if (float) newClassNames.push('float-' + float);\n    if (pointer) newClassNames.push('cursor-pointer');\n    if (visible !== null) newClassNames.push(visible ? 'visible' : 'invisible');\n    if (textColor) newClassNames.push('text-' + textColor);\n    if (classNames.length) newClassNames.push(...classNames);\n    return newClassNames;\n  }, [display, fit, grow, shrink, fullWidth, fullHeight, overflow, position, float, pointer, visible, textColor, classNames]);\n  const getClassName = useMemo(() => {\n    let newClassName = getClassNames.join(' ');\n    if (className.length) newClassName += ' ' + className;\n    return newClassName.trim();\n  }, [getClassNames, className]);\n  const getStyle = useMemo(() => {\n    let newStyle = {};\n    if (Object.keys(style).length) newStyle = { ...newStyle,\n      ...style\n    };\n    return newStyle;\n  }, [style]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: innerRef,\n    className: getClassName,\n    style: getStyle,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Base, \"FERqIyUTM6aW/UQXI9UUk7G3f2U=\");\n\n_c = Base;\n\nvar _c;\n\n$RefreshReg$(_c, \"Base\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/Base.tsx"],"names":["useMemo","Base","props","ref","innerRef","display","fit","grow","shrink","fullWidth","fullHeight","overflow","position","float","pointer","visible","textColor","classNames","className","style","rest","getClassNames","newClassNames","length","push","getClassName","newClassName","join","trim","getStyle","newStyle","Object","keys"],"mappings":"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","sourcesContent":["import { CSSProperties, DetailedHTMLProps, FC, HTMLAttributes, MutableRefObject, useMemo } from 'react';\nimport { ColorVariantType, DisplayType, FloatType, OverflowType, PositionType } from './types';\n\nexport interface BaseProps<T = HTMLElement> extends DetailedHTMLProps<HTMLAttributes<T>, T>\n{\n    innerRef?: MutableRefObject<T>;\n    display?: DisplayType;\n    fit?: boolean;\n    grow?: boolean;\n    shrink?: boolean;\n    fullWidth?: boolean;\n    fullHeight?: boolean;\n    overflow?: OverflowType;\n    position?: PositionType;\n    float?: FloatType;\n    pointer?: boolean;\n    visible?: boolean;\n    textColor?: ColorVariantType;\n    classNames?: string[];\n}\n\nexport const Base: FC<BaseProps<HTMLDivElement>> = props =>\n{\n    const { ref = null, innerRef = null, display = null, fit = false, grow = false, shrink = false, fullWidth = false, fullHeight = false, overflow = null, position = null, float = null, pointer = false, visible = null, textColor = null, classNames = [], className = '', style = {}, ...rest } = props;\n\n    const getClassNames = useMemo(() =>\n    {\n        const newClassNames: string[] = [];\n\n        if(display && display.length) newClassNames.push('d-' + display);\n\n        if(fit || fullWidth) newClassNames.push('w-100');\n\n        if(fit || fullHeight) newClassNames.push('h-100');\n\n        if(grow) newClassNames.push('flex-grow-1');\n\n        if(shrink) newClassNames.push('flex-shrink-0');\n\n        if(overflow) newClassNames.push('overflow-' + overflow);\n\n        if(position) newClassNames.push('position-' + position);\n\n        if(float) newClassNames.push('float-' + float);\n\n        if(pointer) newClassNames.push('cursor-pointer');\n\n        if(visible !== null) newClassNames.push(visible ? 'visible' : 'invisible');\n\n        if(textColor) newClassNames.push('text-' + textColor);\n\n        if(classNames.length) newClassNames.push(...classNames);\n\n        return newClassNames;\n    }, [ display, fit, grow, shrink, fullWidth, fullHeight, overflow, position, float, pointer, visible, textColor, classNames ]);\n\n    const getClassName = useMemo(() =>\n    {\n        let newClassName = getClassNames.join(' ');\n\n        if(className.length) newClassName += (' ' + className);\n\n        return newClassName.trim();\n    }, [ getClassNames, className ]);\n\n    const getStyle = useMemo(() =>\n    {\n        let newStyle: CSSProperties = {};\n\n        if(Object.keys(style).length) newStyle = { ...newStyle, ...style };\n\n        return newStyle;\n    }, [ style ]);\n    \n    return <div ref={ innerRef } className={ getClassName } style={ getStyle } { ...rest } />;\n}\n"]},"metadata":{},"sourceType":"module"}