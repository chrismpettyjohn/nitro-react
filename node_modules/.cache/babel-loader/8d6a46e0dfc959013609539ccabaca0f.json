{"ast":null,"code":"import { RoomUnitStatusAction } from './RoomUnitStatusAction';\nimport { RoomUnitStatusMessage } from './RoomUnitStatusMessage';\nexport class RoomUnitStatusParser {\n  constructor() {\n    this._statuses = void 0;\n  }\n\n  flush() {\n    this._statuses = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    let totalUnits = wrapper.readInt();\n\n    while (totalUnits > 0) {\n      const status = this.parseStatus(wrapper);\n\n      if (!status) {\n        totalUnits--;\n        continue;\n      }\n\n      this._statuses.push(status);\n\n      totalUnits--;\n    }\n\n    return true;\n  }\n\n  parseStatus(wrapper) {\n    if (!wrapper) return null;\n    const unitId = wrapper.readInt();\n    const x = wrapper.readInt();\n    const y = wrapper.readInt();\n    const z = parseFloat(wrapper.readString());\n    const headDirection = wrapper.readInt() % 8 * 45;\n    const direction = wrapper.readInt() % 8 * 45;\n    const actions = wrapper.readString();\n    let targetX = 0;\n    let targetY = 0;\n    let targetZ = 0;\n    let height = 0;\n    let canStandUp = false;\n    let didMove = false;\n    const isSlide = false;\n\n    if (actions) {\n      const actionParts = actions.split('/');\n      const statusActions = [];\n\n      for (const action of actionParts) {\n        const parts = action.split(' ');\n        if (parts[0] === '') continue;\n\n        if (parts.length >= 2) {\n          switch (parts[0]) {\n            case 'mv':\n              {\n                const values = parts[1].split(',');\n\n                if (values.length >= 3) {\n                  targetX = parseInt(values[0]);\n                  targetY = parseInt(values[1]);\n                  targetZ = parseFloat(values[2]);\n                  didMove = true;\n                }\n\n                break;\n              }\n\n            case 'sit':\n              {\n                const sitHeight = parseFloat(parts[1]);\n                if (parts.length >= 3) canStandUp = parts[2] === '1';\n                height = sitHeight;\n                break;\n              }\n\n            case 'lay':\n              {\n                const layHeight = parseFloat(parts[1]);\n                height = Math.abs(layHeight);\n                break;\n              }\n          }\n\n          statusActions.push(new RoomUnitStatusAction(parts[0], parts[1]));\n        }\n      } // const totalActions = actionParts.length;\n      // if(totalActions)\n      // {\n      //     for(let i = 0; i < totalActions; i++)\n      //     {\n      //         const action = actionParts[i];\n      //         if(!action) continue;\n      //         console.log(action);\n      //         const [ key, value, extra ] = action.split(' ');\n      //         if(!key || !value) continue;\n      //         switch(key)\n      //         {\n      //             case 'mv':\n      //                 [ targetX, targetY, targetZ ] = value.split(',').map(a => parseFloat(a));\n      //                 didMove = true;\n      //                 break;\n      //             case 'sit': {\n      //                 const sitHeight = parseFloat(value);\n      //                 if(extra !== undefined) canStandUp = value === '1';\n      //                 height = sitHeight;\n      //                 break;\n      //             }\n      //             case 'lay': {\n      //                 const layHeight = parseFloat(value);\n      //                 height = layHeight;\n      //                 break;\n      //             }\n      //         }\n      //         statusActions.push(new RoomUnitStatusAction(key, value));\n      //     }\n      // }\n\n\n      this._statuses.push(new RoomUnitStatusMessage(unitId, x, y, z, height, headDirection, direction, targetX, targetY, targetZ, didMove, canStandUp, statusActions));\n    }\n  }\n\n  get statuses() {\n    return this._statuses;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/room/unit/RoomUnitStatusParser.ts"],"names":["RoomUnitStatusAction","RoomUnitStatusMessage","RoomUnitStatusParser","_statuses","flush","parse","wrapper","totalUnits","readInt","status","parseStatus","push","unitId","x","y","z","parseFloat","readString","headDirection","direction","actions","targetX","targetY","targetZ","height","canStandUp","didMove","isSlide","actionParts","split","statusActions","action","parts","length","values","parseInt","sitHeight","layHeight","Math","abs","statuses"],"mappings":"AACA,SAASA,oBAAT,QAAqC,wBAArC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,OAAO,MAAMC,oBAAN,CACP;AAAA;AAAA,SACYC,SADZ;AAAA;;AAGWC,EAAAA,KAAK,GACZ;AACI,SAAKD,SAAL,GAAiB,EAAjB;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,QAAIC,UAAU,GAAGD,OAAO,CAACE,OAAR,EAAjB;;AAEA,WAAMD,UAAU,GAAG,CAAnB,EACA;AACI,YAAME,MAAM,GAAG,KAAKC,WAAL,CAAiBJ,OAAjB,CAAf;;AAEA,UAAG,CAACG,MAAJ,EACA;AACIF,QAAAA,UAAU;AAEV;AACH;;AAED,WAAKJ,SAAL,CAAeQ,IAAf,CAAoBF,MAApB;;AAEAF,MAAAA,UAAU;AACb;;AAED,WAAO,IAAP;AACH;;AAEMG,EAAAA,WAAW,CAACJ,OAAD,EAClB;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,IAAP;AAEb,UAAMM,MAAM,GAAGN,OAAO,CAACE,OAAR,EAAf;AACA,UAAMK,CAAC,GAAGP,OAAO,CAACE,OAAR,EAAV;AACA,UAAMM,CAAC,GAAGR,OAAO,CAACE,OAAR,EAAV;AACA,UAAMO,CAAC,GAAGC,UAAU,CAACV,OAAO,CAACW,UAAR,EAAD,CAApB;AACA,UAAMC,aAAa,GAAKZ,OAAO,CAACE,OAAR,KAAoB,CAArB,GAA0B,EAAjD;AACA,UAAMW,SAAS,GAAKb,OAAO,CAACE,OAAR,KAAoB,CAArB,GAA0B,EAA7C;AACA,UAAMY,OAAO,GAAGd,OAAO,CAACW,UAAR,EAAhB;AAEA,QAAII,OAAO,GAAG,CAAd;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,UAAMC,OAAO,GAAG,KAAhB;;AAEA,QAAGP,OAAH,EACA;AACI,YAAMQ,WAAW,GAAGR,OAAO,CAACS,KAAR,CAAc,GAAd,CAApB;AACA,YAAMC,aAAqC,GAAG,EAA9C;;AAEA,WAAI,MAAMC,MAAV,IAAoBH,WAApB,EACA;AACI,cAAMI,KAAK,GAAGD,MAAM,CAACF,KAAP,CAAa,GAAb,CAAd;AAEA,YAAGG,KAAK,CAAC,CAAD,CAAL,KAAa,EAAhB,EAAoB;;AAEpB,YAAGA,KAAK,CAACC,MAAN,IAAgB,CAAnB,EACA;AACI,kBAAOD,KAAK,CAAC,CAAD,CAAZ;AAEI,iBAAK,IAAL;AAAW;AACP,sBAAME,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASH,KAAT,CAAe,GAAf,CAAf;;AAEA,oBAAGK,MAAM,CAACD,MAAP,IAAiB,CAApB,EACA;AACIZ,kBAAAA,OAAO,GAAGc,QAAQ,CAACD,MAAM,CAAC,CAAD,CAAP,CAAlB;AACAZ,kBAAAA,OAAO,GAAGa,QAAQ,CAACD,MAAM,CAAC,CAAD,CAAP,CAAlB;AACAX,kBAAAA,OAAO,GAAGP,UAAU,CAACkB,MAAM,CAAC,CAAD,CAAP,CAApB;AACAR,kBAAAA,OAAO,GAAG,IAAV;AACH;;AAED;AACH;;AACD,iBAAK,KAAL;AAAY;AACR,sBAAMU,SAAS,GAAGpB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAN,CAA5B;AAEA,oBAAGA,KAAK,CAACC,MAAN,IAAgB,CAAnB,EAAsBR,UAAU,GAAIO,KAAK,CAAC,CAAD,CAAL,KAAa,GAA3B;AAEtBR,gBAAAA,MAAM,GAAGY,SAAT;AAEA;AACH;;AACD,iBAAK,KAAL;AAAY;AACR,sBAAMC,SAAS,GAAGrB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAN,CAA5B;AAEAR,gBAAAA,MAAM,GAAGc,IAAI,CAACC,GAAL,CAASF,SAAT,CAAT;AAEA;AACH;AA9BL;;AAiCAP,UAAAA,aAAa,CAACnB,IAAd,CAAmB,IAAIX,oBAAJ,CAAyBgC,KAAK,CAAC,CAAD,CAA9B,EAAmCA,KAAK,CAAC,CAAD,CAAxC,CAAnB;AACH;AACJ,OA/CL,CAiDI;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,WAAK7B,SAAL,CAAeQ,IAAf,CAAoB,IAAIV,qBAAJ,CAA0BW,MAA1B,EAAkCC,CAAlC,EAAqCC,CAArC,EAAwCC,CAAxC,EAA2CS,MAA3C,EAAmDN,aAAnD,EAAkEC,SAAlE,EAA6EE,OAA7E,EAAsFC,OAAtF,EAA+FC,OAA/F,EAAwGG,OAAxG,EAAiHD,UAAjH,EAA6HK,aAA7H,CAApB;AACH;AACJ;;AAEkB,MAARU,QAAQ,GACnB;AACI,WAAO,KAAKrC,SAAZ;AACH;;AA9JL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\nimport { RoomUnitStatusAction } from './RoomUnitStatusAction';\r\nimport { RoomUnitStatusMessage } from './RoomUnitStatusMessage';\r\n\r\nexport class RoomUnitStatusParser implements IMessageParser\r\n{\r\n    private _statuses: RoomUnitStatusMessage[];\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._statuses = [];\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        let totalUnits = wrapper.readInt();\r\n\r\n        while(totalUnits > 0)\r\n        {\r\n            const status = this.parseStatus(wrapper);\r\n\r\n            if(!status)\r\n            {\r\n                totalUnits--;\r\n\r\n                continue;\r\n            }\r\n\r\n            this._statuses.push(status);\r\n\r\n            totalUnits--;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public parseStatus(wrapper: IMessageDataWrapper): RoomUnitStatusMessage\r\n    {\r\n        if(!wrapper) return null;\r\n\r\n        const unitId = wrapper.readInt();\r\n        const x = wrapper.readInt();\r\n        const y = wrapper.readInt();\r\n        const z = parseFloat(wrapper.readString());\r\n        const headDirection = ((wrapper.readInt() % 8) * 45);\r\n        const direction = ((wrapper.readInt() % 8) * 45);\r\n        const actions = wrapper.readString();\r\n\r\n        let targetX = 0;\r\n        let targetY = 0;\r\n        let targetZ = 0;\r\n        let height = 0;\r\n        let canStandUp = false;\r\n        let didMove = false;\r\n        const isSlide = false;\r\n\r\n        if(actions)\r\n        {\r\n            const actionParts = actions.split('/');\r\n            const statusActions: RoomUnitStatusAction[] = [];\r\n\r\n            for(const action of actionParts)\r\n            {\r\n                const parts = action.split(' ');\r\n\r\n                if(parts[0] === '') continue;\r\n\r\n                if(parts.length >= 2)\r\n                {\r\n                    switch(parts[0])\r\n                    {\r\n                        case 'mv': {\r\n                            const values = parts[1].split(',');\r\n\r\n                            if(values.length >= 3)\r\n                            {\r\n                                targetX = parseInt(values[0]);\r\n                                targetY = parseInt(values[1]);\r\n                                targetZ = parseFloat(values[2]);\r\n                                didMove = true;\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                        case 'sit': {\r\n                            const sitHeight = parseFloat(parts[1]);\r\n\r\n                            if(parts.length >= 3) canStandUp = (parts[2] === '1');\r\n\r\n                            height = sitHeight;\r\n\r\n                            break;\r\n                        }\r\n                        case 'lay': {\r\n                            const layHeight = parseFloat(parts[1]);\r\n\r\n                            height = Math.abs(layHeight);\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    statusActions.push(new RoomUnitStatusAction(parts[0], parts[1]));\r\n                }\r\n            }\r\n\r\n            // const totalActions = actionParts.length;\r\n\r\n            // if(totalActions)\r\n            // {\r\n            //     for(let i = 0; i < totalActions; i++)\r\n            //     {\r\n            //         const action = actionParts[i];\r\n\r\n            //         if(!action) continue;\r\n\r\n            //         console.log(action);\r\n\r\n            //         const [ key, value, extra ] = action.split(' ');\r\n\r\n            //         if(!key || !value) continue;\r\n\r\n            //         switch(key)\r\n            //         {\r\n            //             case 'mv':\r\n            //                 [ targetX, targetY, targetZ ] = value.split(',').map(a => parseFloat(a));\r\n\r\n            //                 didMove = true;\r\n\r\n            //                 break;\r\n            //             case 'sit': {\r\n            //                 const sitHeight = parseFloat(value);\r\n\r\n            //                 if(extra !== undefined) canStandUp = value === '1';\r\n\r\n            //                 height = sitHeight;\r\n\r\n            //                 break;\r\n            //             }\r\n            //             case 'lay': {\r\n            //                 const layHeight = parseFloat(value);\r\n\r\n            //                 height = layHeight;\r\n\r\n            //                 break;\r\n            //             }\r\n            //         }\r\n\r\n            //         statusActions.push(new RoomUnitStatusAction(key, value));\r\n            //     }\r\n            // }\r\n\r\n            this._statuses.push(new RoomUnitStatusMessage(unitId, x, y, z, height, headDirection, direction, targetX, targetY, targetZ, didMove, canStandUp, statusActions));\r\n        }\r\n    }\r\n\r\n    public get statuses(): RoomUnitStatusMessage[]\r\n    {\r\n        return this._statuses;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}