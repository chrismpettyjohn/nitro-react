{"ast":null,"code":"import { Graphics } from '@pixi/graphics';\nimport { Matrix } from '@pixi/math';\nimport { AnimationItem } from './AnimationItem';\nexport class PlaneVisualizationAnimationLayer {\n  constructor(k, _arg_2) {\n    this._color = 0;\n    this._bitmapData = null;\n    this._isDisposed = false;\n    this._items = void 0;\n    this._color = 0;\n    this._bitmapData = null;\n    this._isDisposed = false;\n    this._items = [];\n\n    if (k && _arg_2) {\n      for (const item of k) {\n        if (!item) continue;\n        const assetName = item.asset;\n\n        if (assetName) {\n          const asset = _arg_2.getAsset(assetName);\n\n          if (asset) this._items.push(new AnimationItem(item.x, item.y, item.speedX, item.speedY, asset));\n        }\n      }\n    }\n  }\n\n  get disposed() {\n    return this._isDisposed;\n  }\n\n  dispose() {\n    this._isDisposed = true;\n\n    if (this._bitmapData) {\n      this._bitmapData.destroy();\n\n      this._bitmapData = null;\n    }\n\n    if (this._items) {\n      for (const item of this._items) item && item.dispose();\n\n      this._items = [];\n    }\n  }\n\n  clearCache() {\n    if (this._bitmapData) {\n      this._bitmapData.destroy();\n\n      this._bitmapData = null;\n    }\n  }\n\n  render(canvas, width, height, normal, offsetX, offsetY, maxX, maxY, dimensionX, dimensionY, timeSinceStartMs) {\n    if (canvas == null || !(canvas.width == width) || !(canvas.height == height)) {\n      if (this._bitmapData == null || !(this._bitmapData.width == width) || !(this._bitmapData.height == height)) {\n        if (this._bitmapData != null) {\n          this._bitmapData.destroy();\n        }\n\n        this._bitmapData = new Graphics().drawRect(0, 0, width, height);\n      } else {\n        this._bitmapData.beginFill(0xFFFFFF).drawRect(0, 0, this._bitmapData.width, this._bitmapData.height).endFill(); //this._bitmapData.fillRect(this._bitmapData.rect, 0xFFFFFF);\n\n      }\n\n      canvas = this._bitmapData;\n    }\n\n    if (maxX > 0 && maxY > 0) {\n      let _local_12 = 0;\n\n      while (_local_12 < this._items.length) {\n        const _local_13 = this._items[_local_12];\n\n        if (_local_13 != null) {\n          const _local_14 = _local_13.getPosition(maxX, maxY, dimensionX, dimensionY, timeSinceStartMs);\n\n          _local_14.x = _local_14.x - offsetX;\n          _local_14.y = _local_14.y - offsetY;\n\n          if (_local_13.bitmapData) {\n            if (_local_14.x > 0 && _local_14.x + _local_13.bitmapData.width < canvas.width) {\n              canvas.beginFill(0x00FF00).beginTextureFill({\n                texture: _local_13.bitmapData.texture,\n                matrix: new Matrix(1, 0, 0, 1, _local_14.x, _local_14.y)\n              }).drawRect(_local_14.x, _local_14.y, _local_13.bitmapData.width, _local_13.bitmapData.height).endFill();\n            } else if (_local_14.x > 0) {\n              const difference = canvas.width - _local_14.x;\n              canvas.beginFill(0x00FF00).beginTextureFill({\n                texture: _local_13.bitmapData.texture,\n                matrix: new Matrix(1, 0, 0, 1, _local_14.x, _local_14.y)\n              }).drawRect(_local_14.x, _local_14.y, difference, _local_13.bitmapData.height).endFill();\n            } else {\n              //if(_local_14.x > -_local_13.bitmapData.width) \n              const difference = _local_13.bitmapData.width + _local_14.x;\n              canvas.beginFill(0x00FF00).beginTextureFill({\n                texture: _local_13.bitmapData.texture,\n                matrix: new Matrix(1, 0, 0, 1, _local_14.x, _local_14.y)\n              }).drawRect(0, _local_14.y, difference, _local_13.bitmapData.height).endFill();\n            }\n          }\n        }\n\n        _local_12++;\n      }\n    }\n\n    return canvas;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/animated/PlaneVisualizationAnimationLayer.ts"],"names":["Graphics","Matrix","AnimationItem","PlaneVisualizationAnimationLayer","constructor","k","_arg_2","_color","_bitmapData","_isDisposed","_items","item","assetName","asset","getAsset","push","x","y","speedX","speedY","disposed","dispose","destroy","clearCache","render","canvas","width","height","normal","offsetX","offsetY","maxX","maxY","dimensionX","dimensionY","timeSinceStartMs","drawRect","beginFill","endFill","_local_12","length","_local_13","_local_14","getPosition","bitmapData","beginTextureFill","texture","matrix","difference"],"mappings":"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","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { Matrix } from '@pixi/math';\r\nimport { IDisposable } from '../../../../../../../core/common/disposable/IDisposable';\r\nimport { IGraphicAssetCollection } from '../../../../../../../room/object/visualization/utils/IGraphicAssetCollection';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { AnimationItem } from './AnimationItem';\r\n\r\nexport class PlaneVisualizationAnimationLayer implements IDisposable\r\n{\r\n    private _color: number = 0;\r\n    private _bitmapData: Graphics = null;\r\n    private _isDisposed: boolean = false;\r\n    private _items: AnimationItem[];\r\n\r\n    constructor(k: any, _arg_2: IGraphicAssetCollection)\r\n    {\r\n        this._color = 0;\r\n        this._bitmapData = null;\r\n        this._isDisposed = false;\r\n        this._items = [];\r\n\r\n        if(k && _arg_2)\r\n        {\r\n            for(const item of k)\r\n            {\r\n                if(!item) continue;\r\n\r\n                const assetName = item.asset;\r\n\r\n                if(assetName)\r\n                {\r\n                    const asset = _arg_2.getAsset(assetName);\r\n\r\n                    if(asset) this._items.push(new AnimationItem(item.x, item.y, item.speedX, item.speedY, asset));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._isDisposed = true;\r\n\r\n        if(this._bitmapData)\r\n        {\r\n            this._bitmapData.destroy();\r\n\r\n            this._bitmapData = null;\r\n        }\r\n\r\n        if(this._items)\r\n        {\r\n            for(const item of this._items) item && item.dispose();\r\n\r\n            this._items = [];\r\n        }\r\n    }\r\n\r\n    public clearCache(): void\r\n    {\r\n        if(this._bitmapData)\r\n        {\r\n            this._bitmapData.destroy();\r\n\r\n            this._bitmapData = null;\r\n        }\r\n    }\r\n\r\n    public render(canvas: Graphics, width: number, height: number, normal: IVector3D, offsetX: number, offsetY: number, maxX: number, maxY: number, dimensionX: number, dimensionY: number, timeSinceStartMs: number): Graphics\r\n    {\r\n        if((((canvas == null) || (!(canvas.width == width))) || (!(canvas.height == height))))\r\n        {\r\n            if((((this._bitmapData == null) || (!(this._bitmapData.width == width))) || (!(this._bitmapData.height == height))))\r\n            {\r\n                if(this._bitmapData != null)\r\n                {\r\n                    this._bitmapData.destroy();\r\n                }\r\n\r\n                this._bitmapData = new Graphics()\r\n                    .drawRect(0, 0, width, height);\r\n            }\r\n            else\r\n            {\r\n                this._bitmapData\r\n                    .beginFill(0xFFFFFF)\r\n                    .drawRect(0, 0, this._bitmapData.width, this._bitmapData.height)\r\n                    .endFill();\r\n                //this._bitmapData.fillRect(this._bitmapData.rect, 0xFFFFFF);\r\n            }\r\n\r\n            canvas = this._bitmapData;\r\n        }\r\n\r\n        if(((maxX > 0) && (maxY > 0)))\r\n        {\r\n            let _local_12 = 0;\r\n\r\n            while(_local_12 < this._items.length)\r\n            {\r\n                const _local_13 = (this._items[_local_12] as AnimationItem);\r\n                if(_local_13 != null)\r\n                {\r\n                    const _local_14 = _local_13.getPosition(maxX, maxY, dimensionX, dimensionY, timeSinceStartMs);\r\n\r\n                    _local_14.x = (_local_14.x - offsetX);\r\n                    _local_14.y = (_local_14.y - offsetY);\r\n\r\n                    if(_local_13.bitmapData)\r\n                    {\r\n                        if(_local_14.x > 0 && (_local_14.x + _local_13.bitmapData.width < canvas.width))\r\n                        {\r\n                            canvas\r\n                                .beginFill(0x00FF00)\r\n                                .beginTextureFill({ texture: _local_13.bitmapData.texture, matrix: new Matrix(1, 0, 0, 1, _local_14.x, _local_14.y) })\r\n                                .drawRect(_local_14.x, _local_14.y, _local_13.bitmapData.width, _local_13.bitmapData.height)\r\n                                .endFill();\r\n                        }\r\n                        else if(_local_14.x > 0)\r\n                        {\r\n                            const difference = canvas.width - _local_14.x;\r\n                            canvas\r\n                                .beginFill(0x00FF00)\r\n                                .beginTextureFill({ texture: _local_13.bitmapData.texture, matrix: new Matrix(1, 0, 0, 1, _local_14.x, _local_14.y) })\r\n                                .drawRect(_local_14.x, _local_14.y, difference, _local_13.bitmapData.height)\r\n                                .endFill();\r\n                        }\r\n                        else\r\n                        {\r\n                            //if(_local_14.x > -_local_13.bitmapData.width) \r\n                            const difference = _local_13.bitmapData.width + _local_14.x;\r\n                            canvas\r\n                                .beginFill(0x00FF00)\r\n                                .beginTextureFill({ texture: _local_13.bitmapData.texture, matrix: new Matrix(1, 0, 0, 1, _local_14.x, _local_14.y) })\r\n                                .drawRect(0, _local_14.y, difference, _local_13.bitmapData.height)\r\n                                .endFill();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                _local_12++;\r\n            }\r\n        }\r\n\r\n        return canvas;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}