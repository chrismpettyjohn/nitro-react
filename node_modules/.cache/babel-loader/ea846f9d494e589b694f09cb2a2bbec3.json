{"ast":null,"code":"import { NitroLogger } from '../../../core/common/logger/NitroLogger';\nimport { NitroManager } from '../../../core/common/NitroManager';\nimport { SocketConnectionEvent } from '../../../core/communication/events/SocketConnectionEvent';\nimport { Nitro } from '../../Nitro';\nimport { ClientPingEvent } from '../messages/incoming/client/ClientPingEvent';\nimport { AuthenticatedEvent } from '../messages/incoming/security/AuthenticatedEvent';\nimport { ClientHelloMessageComposer } from '../messages/outgoing/handshake/ClientHelloMessageComposer';\nimport { InfoRetrieveMessageComposer } from '../messages/outgoing/handshake/InfoRetrieveMessageComposer';\nimport { PongMessageComposer } from '../messages/outgoing/handshake/PongMessageComposer';\nimport { SSOTicketMessageComposer } from '../messages/outgoing/handshake/SSOTicketMessageComposer';\nimport { NitroCommunicationDemoEvent } from './NitroCommunicationDemoEvent';\nexport class NitroCommunicationDemo extends NitroManager {\n  constructor(communication) {\n    super();\n    this._communication = void 0;\n    this._handShaking = void 0;\n    this._didConnect = void 0;\n    this._pongInterval = void 0;\n    this._communication = communication;\n    this._handShaking = false;\n    this._didConnect = false;\n    this._pongInterval = null;\n    this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this);\n    this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this);\n    this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this);\n    this.sendPong = this.sendPong.bind(this);\n  }\n\n  onInit() {\n    const connection = this._communication.connection;\n\n    if (connection) {\n      connection.addEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\n      connection.addEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\n      connection.addEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\n    }\n\n    this._communication.registerMessageEvent(new ClientPingEvent(this.onClientPingEvent.bind(this)));\n\n    this._communication.registerMessageEvent(new AuthenticatedEvent(this.onAuthenticatedEvent.bind(this)));\n  }\n\n  onDispose() {\n    const connection = this._communication.connection;\n\n    if (connection) {\n      connection.removeEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\n      connection.removeEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\n      connection.removeEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\n    }\n\n    this._handShaking = false;\n    this.stopPonging();\n    super.onDispose();\n  }\n\n  onConnectionOpenedEvent(event) {\n    const connection = this._communication.connection;\n    if (!connection) return;\n    this._didConnect = true;\n    this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_ESTABLISHED, connection);\n    if (Nitro.instance.getConfiguration('system.pong.manually', false)) this.startPonging();\n    this.startHandshake(connection);\n    connection.send(new ClientHelloMessageComposer(null, null, null, null));\n    this.tryAuthentication(connection);\n  }\n\n  onConnectionClosedEvent(event) {\n    const connection = this._communication.connection;\n    if (!connection) return;\n    this.stopPonging();\n    if (this._didConnect) this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_CLOSED, connection);\n  }\n\n  onConnectionErrorEvent(event) {\n    const connection = this._communication.connection;\n    if (!connection) return;\n    this.stopPonging();\n    this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_ERROR, connection);\n  }\n\n  tryAuthentication(connection) {\n    if (!connection || !this.getSSO()) {\n      if (!this.getSSO()) {\n        NitroLogger.log('Login without an SSO ticket is not supported');\n      }\n\n      this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKE_FAILED, connection);\n      return;\n    }\n\n    connection.send(new SSOTicketMessageComposer(this.getSSO(), Nitro.instance.time));\n  }\n\n  onClientPingEvent(event) {\n    if (!event || !event.connection) return;\n    this.sendPong(event.connection);\n  }\n\n  onAuthenticatedEvent(event) {\n    if (!event || !event.connection) return;\n    this.completeHandshake(event.connection);\n    this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, event.connection);\n    event.connection.send(new InfoRetrieveMessageComposer());\n  }\n\n  startHandshake(connection) {\n    this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKING, connection);\n    this._handShaking = true;\n  }\n\n  completeHandshake(connection) {\n    this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKED, connection);\n    this._handShaking = false;\n  }\n\n  startPonging() {\n    this.stopPonging();\n    this._pongInterval = setInterval(this.sendPong, Nitro.instance.getConfiguration('system.pong.interval.ms', 20000));\n  }\n\n  stopPonging() {\n    if (!this._pongInterval) return;\n    clearInterval(this._pongInterval);\n    this._pongInterval = null;\n  }\n\n  sendPong() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    connection = connection || this._communication.connection || null;\n    if (!connection) return;\n    connection.send(new PongMessageComposer());\n  }\n\n  dispatchCommunicationDemoEvent(type, connection) {\n    Nitro.instance.events.dispatchEvent(new NitroCommunicationDemoEvent(type, connection));\n  }\n\n  getSSO() {\n    return Nitro.instance.getConfiguration('sso.ticket', null);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/demo/NitroCommunicationDemo.ts"],"names":["NitroLogger","NitroManager","SocketConnectionEvent","Nitro","ClientPingEvent","AuthenticatedEvent","ClientHelloMessageComposer","InfoRetrieveMessageComposer","PongMessageComposer","SSOTicketMessageComposer","NitroCommunicationDemoEvent","NitroCommunicationDemo","constructor","communication","_communication","_handShaking","_didConnect","_pongInterval","onConnectionOpenedEvent","bind","onConnectionClosedEvent","onConnectionErrorEvent","sendPong","onInit","connection","addEventListener","CONNECTION_OPENED","CONNECTION_CLOSED","CONNECTION_ERROR","registerMessageEvent","onClientPingEvent","onAuthenticatedEvent","onDispose","removeEventListener","stopPonging","event","dispatchCommunicationDemoEvent","CONNECTION_ESTABLISHED","instance","getConfiguration","startPonging","startHandshake","send","tryAuthentication","getSSO","log","CONNECTION_HANDSHAKE_FAILED","time","completeHandshake","CONNECTION_AUTHENTICATED","CONNECTION_HANDSHAKING","CONNECTION_HANDSHAKED","setInterval","clearInterval","type","events","dispatchEvent"],"mappings":"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","sourcesContent":["import { NitroLogger } from '../../../core/common/logger/NitroLogger';\r\nimport { NitroManager } from '../../../core/common/NitroManager';\r\nimport { IConnection } from '../../../core/communication/connections/IConnection';\r\nimport { SocketConnectionEvent } from '../../../core/communication/events/SocketConnectionEvent';\r\nimport { Nitro } from '../../Nitro';\r\nimport { INitroCommunicationManager } from '../INitroCommunicationManager';\r\nimport { ClientPingEvent } from '../messages/incoming/client/ClientPingEvent';\r\nimport { AuthenticatedEvent } from '../messages/incoming/security/AuthenticatedEvent';\r\nimport { ClientHelloMessageComposer } from '../messages/outgoing/handshake/ClientHelloMessageComposer';\r\nimport { InfoRetrieveMessageComposer } from '../messages/outgoing/handshake/InfoRetrieveMessageComposer';\r\nimport { PongMessageComposer } from '../messages/outgoing/handshake/PongMessageComposer';\r\nimport { SSOTicketMessageComposer } from '../messages/outgoing/handshake/SSOTicketMessageComposer';\r\nimport { NitroCommunicationDemoEvent } from './NitroCommunicationDemoEvent';\r\n\r\nexport class NitroCommunicationDemo extends NitroManager\r\n{\r\n    private _communication: INitroCommunicationManager;\r\n\r\n    private _handShaking: boolean;\r\n    private _didConnect: boolean;\r\n\r\n    private _pongInterval: any;\r\n\r\n    constructor(communication: INitroCommunicationManager)\r\n    {\r\n        super();\r\n\r\n        this._communication = communication;\r\n\r\n        this._handShaking = false;\r\n        this._didConnect = false;\r\n\r\n        this._pongInterval = null;\r\n\r\n        this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this);\r\n        this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this);\r\n        this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this);\r\n        this.sendPong = this.sendPong.bind(this);\r\n    }\r\n\r\n    protected onInit(): void\r\n    {\r\n        const connection = this._communication.connection;\r\n\r\n        if(connection)\r\n        {\r\n            connection.addEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\r\n            connection.addEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\r\n            connection.addEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\r\n        }\r\n\r\n        this._communication.registerMessageEvent(new ClientPingEvent(this.onClientPingEvent.bind(this)));\r\n        this._communication.registerMessageEvent(new AuthenticatedEvent(this.onAuthenticatedEvent.bind(this)));\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        const connection = this._communication.connection;\r\n\r\n        if(connection)\r\n        {\r\n            connection.removeEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\r\n            connection.removeEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\r\n            connection.removeEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\r\n        }\r\n\r\n        this._handShaking = false;\r\n\r\n        this.stopPonging();\r\n\r\n        super.onDispose();\r\n    }\r\n\r\n    private onConnectionOpenedEvent(event: Event): void\r\n    {\r\n        const connection = this._communication.connection;\r\n\r\n        if(!connection) return;\r\n\r\n        this._didConnect = true;\r\n\r\n        this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_ESTABLISHED, connection);\r\n\r\n        if(Nitro.instance.getConfiguration<boolean>('system.pong.manually', false)) this.startPonging();\r\n\r\n        this.startHandshake(connection);\r\n\r\n        connection.send(new ClientHelloMessageComposer(null, null, null, null));\r\n\r\n        this.tryAuthentication(connection);\r\n    }\r\n\r\n    private onConnectionClosedEvent(event: CloseEvent): void\r\n    {\r\n        const connection = this._communication.connection;\r\n\r\n        if(!connection) return;\r\n\r\n        this.stopPonging();\r\n\r\n        if(this._didConnect) this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_CLOSED, connection);\r\n    }\r\n\r\n    private onConnectionErrorEvent(event: CloseEvent): void\r\n    {\r\n        const connection = this._communication.connection;\r\n\r\n        if(!connection) return;\r\n\r\n        this.stopPonging();\r\n\r\n        this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_ERROR, connection);\r\n    }\r\n\r\n    private tryAuthentication(connection: IConnection): void\r\n    {\r\n        if(!connection || !this.getSSO())\r\n        {\r\n            if(!this.getSSO())\r\n            {\r\n                NitroLogger.log('Login without an SSO ticket is not supported');\r\n            }\r\n\r\n            this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKE_FAILED, connection);\r\n\r\n            return;\r\n        }\r\n\r\n        connection.send(new SSOTicketMessageComposer(this.getSSO(), Nitro.instance.time));\r\n    }\r\n\r\n    private onClientPingEvent(event: ClientPingEvent): void\r\n    {\r\n        if(!event || !event.connection) return;\r\n\r\n        this.sendPong(event.connection);\r\n    }\r\n\r\n    private onAuthenticatedEvent(event: AuthenticatedEvent): void\r\n    {\r\n        if(!event || !event.connection) return;\r\n\r\n        this.completeHandshake(event.connection);\r\n\r\n        this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, event.connection);\r\n\r\n        event.connection.send(new InfoRetrieveMessageComposer());\r\n    }\r\n\r\n    private startHandshake(connection: IConnection): void\r\n    {\r\n        this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKING, connection);\r\n\r\n        this._handShaking = true;\r\n    }\r\n\r\n    private completeHandshake(connection: IConnection): void\r\n    {\r\n        this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKED, connection);\r\n\r\n        this._handShaking = false;\r\n    }\r\n\r\n    private startPonging(): void\r\n    {\r\n        this.stopPonging();\r\n\r\n        this._pongInterval = setInterval(this.sendPong, Nitro.instance.getConfiguration<number>('system.pong.interval.ms', 20000));\r\n    }\r\n\r\n    private stopPonging(): void\r\n    {\r\n        if(!this._pongInterval) return;\r\n\r\n        clearInterval(this._pongInterval);\r\n\r\n        this._pongInterval = null;\r\n    }\r\n\r\n    private sendPong(connection: IConnection = null): void\r\n    {\r\n        connection = ((connection || this._communication.connection) || null);\r\n\r\n        if(!connection) return;\r\n\r\n        connection.send(new PongMessageComposer());\r\n    }\r\n\r\n    private dispatchCommunicationDemoEvent(type: string, connection: IConnection): void\r\n    {\r\n        Nitro.instance.events.dispatchEvent(new NitroCommunicationDemoEvent(type, connection));\r\n    }\r\n\r\n    private getSSO(): string\r\n    {\r\n        return Nitro.instance.getConfiguration('sso.ticket', null);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}