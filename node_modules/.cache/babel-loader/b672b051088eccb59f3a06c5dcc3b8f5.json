{"ast":null,"code":"import { NitroPoint } from '../../../../../core';\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\nexport class FurniturePartyBeamerVisualization extends FurnitureAnimatedVisualization {\n  constructor() {\n    super();\n    this._animPhaseIndex = void 0;\n    this._animDirectionIndex = void 0;\n    this._animSpeedIndex = void 0;\n    this._animFactorIndex = void 0;\n    this._animOffsetIndex = void 0;\n    this._animOffsetIndex = [];\n  }\n\n  updateAnimation(scale) {\n    if (!this._animSpeedIndex) this.initItems(scale);\n    let sprite = this.getSprite(2);\n    if (sprite) this._animOffsetIndex[0] = this.getNewPoint(scale, 0);\n    sprite = this.getSprite(3);\n    if (sprite) this._animOffsetIndex[1] = this.getNewPoint(scale, 1);\n    return super.updateAnimation(scale);\n  }\n\n  getNewPoint(scale, layerId) {\n    let diameter = 0;\n    let animationPhase = this._animPhaseIndex[layerId];\n    let animationDirection = this._animDirectionIndex[layerId];\n    const animationSpeed = this._animSpeedIndex[layerId];\n    const animationFactor = this._animFactorIndex[layerId];\n    let _local_7 = 1;\n\n    if (scale == 32) {\n      diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_SMALL;\n      _local_7 = 0.5;\n    } else {\n      diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_LARGE;\n    }\n\n    const _local_9 = animationPhase + animationDirection * animationSpeed;\n\n    if (Math.abs(_local_9) >= diameter) {\n      if (animationDirection > 0) {\n        animationPhase = animationPhase - (_local_9 - diameter);\n      } else {\n        animationPhase = animationPhase + (-diameter - _local_9);\n      }\n\n      animationDirection = -animationDirection;\n      this._animDirectionIndex[layerId] = animationDirection;\n    }\n\n    const _local_10 = (diameter - Math.abs(animationPhase)) * animationFactor;\n\n    let _local_11 = animationDirection * Math.sin(Math.abs(animationPhase / 4)) * _local_10;\n\n    if (animationDirection > 0) {\n      _local_11 = _local_11 - _local_10;\n    } else {\n      _local_11 = _local_11 + _local_10;\n    }\n\n    animationPhase = animationPhase + animationDirection * animationSpeed * _local_7;\n    this._animPhaseIndex[layerId] = animationPhase;\n    if (Math.trunc(_local_11) == 0) this._animFactorIndex[layerId] = this.getRandomAmplitudeFactor();\n    return new NitroPoint(animationPhase, _local_11);\n  }\n\n  initItems(scale) {\n    let diameter;\n\n    if (scale === 32) {\n      diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_SMALL;\n    } else {\n      diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_LARGE;\n    }\n\n    this._animPhaseIndex = [];\n\n    this._animPhaseIndex.push(Math.random() * diameter * 1.5);\n\n    this._animPhaseIndex.push(Math.random() * diameter * 1.5);\n\n    this._animDirectionIndex = [];\n\n    this._animDirectionIndex.push(1);\n\n    this._animDirectionIndex.push(-1);\n\n    this._animSpeedIndex = [];\n\n    this._animSpeedIndex.push(FurniturePartyBeamerVisualization.ANIM_SPEED_FAST);\n\n    this._animSpeedIndex.push(FurniturePartyBeamerVisualization.ANIM_SPEED_SLOW);\n\n    this._animFactorIndex = [];\n\n    this._animFactorIndex.push(this.getRandomAmplitudeFactor());\n\n    this._animFactorIndex.push(this.getRandomAmplitudeFactor());\n  }\n\n  getLayerXOffset(scale, direction, layerId) {\n    if (layerId === 2 || layerId === 3) {\n      if (this._animOffsetIndex.length == 2) {\n        return this._animOffsetIndex[layerId - 2].x;\n      }\n    }\n\n    return super.getLayerXOffset(scale, direction, layerId);\n  }\n\n  getLayerYOffset(scale, direction, layerId) {\n    if (layerId === 2 || layerId === 3) {\n      if (this._animOffsetIndex.length == 2) {\n        return this._animOffsetIndex[layerId - 2].y;\n      }\n    }\n\n    return super.getLayerYOffset(scale, direction, layerId);\n  }\n\n  getRandomAmplitudeFactor() {\n    return Math.random() * 30 / 100 + 0.15;\n  }\n\n}\nFurniturePartyBeamerVisualization.UPDATE_INTERVAL = 2;\nFurniturePartyBeamerVisualization.AREA_DIAMETER_SMALL = 15;\nFurniturePartyBeamerVisualization.AREA_DIAMETER_LARGE = 31;\nFurniturePartyBeamerVisualization.ANIM_SPEED_FAST = 2;\nFurniturePartyBeamerVisualization.ANIM_SPEED_SLOW = 1;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurniturePartyBeamerVisualization.ts"],"names":["NitroPoint","FurnitureAnimatedVisualization","FurniturePartyBeamerVisualization","constructor","_animPhaseIndex","_animDirectionIndex","_animSpeedIndex","_animFactorIndex","_animOffsetIndex","updateAnimation","scale","initItems","sprite","getSprite","getNewPoint","layerId","diameter","animationPhase","animationDirection","animationSpeed","animationFactor","_local_7","AREA_DIAMETER_SMALL","AREA_DIAMETER_LARGE","_local_9","Math","abs","_local_10","_local_11","sin","trunc","getRandomAmplitudeFactor","push","random","ANIM_SPEED_FAST","ANIM_SPEED_SLOW","getLayerXOffset","direction","length","x","getLayerYOffset","y","UPDATE_INTERVAL"],"mappings":"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","sourcesContent":["import { NitroPoint } from '../../../../../core';\r\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\r\n\r\nexport class FurniturePartyBeamerVisualization extends FurnitureAnimatedVisualization\r\n{\r\n    private static UPDATE_INTERVAL: number = 2;\r\n    private static AREA_DIAMETER_SMALL: number = 15;\r\n    private static AREA_DIAMETER_LARGE: number = 31;\r\n    private static ANIM_SPEED_FAST: number = 2;\r\n    private static ANIM_SPEED_SLOW: number = 1;\r\n\r\n    private _animPhaseIndex: number[];\r\n    private _animDirectionIndex: number[];\r\n    private _animSpeedIndex: number[];\r\n    private _animFactorIndex: number[];\r\n    private _animOffsetIndex: NitroPoint[];\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._animOffsetIndex = [];\r\n    }\r\n\r\n    protected updateAnimation(scale: number): number\r\n    {\r\n        if(!this._animSpeedIndex) this.initItems(scale);\r\n\r\n        let sprite = this.getSprite(2);\r\n\r\n        if(sprite) this._animOffsetIndex[0] = this.getNewPoint(scale, 0);\r\n\r\n        sprite = this.getSprite(3);\r\n\r\n        if(sprite) this._animOffsetIndex[1] = this.getNewPoint(scale, 1);\r\n\r\n        return super.updateAnimation(scale);\r\n    }\r\n\r\n    private getNewPoint(scale: number, layerId: number): NitroPoint\r\n    {\r\n        let diameter = 0;\r\n\r\n        let animationPhase: number = this._animPhaseIndex[layerId];\r\n        let animationDirection: number = this._animDirectionIndex[layerId];\r\n\r\n        const animationSpeed: number = this._animSpeedIndex[layerId];\r\n        const animationFactor: number = this._animFactorIndex[layerId];\r\n\r\n        let _local_7 = 1;\r\n\r\n        if(scale == 32)\r\n        {\r\n            diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_SMALL;\r\n            _local_7 = 0.5;\r\n        }\r\n        else\r\n        {\r\n            diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_LARGE;\r\n        }\r\n\r\n        const _local_9: number = (animationPhase + (animationDirection * animationSpeed));\r\n\r\n        if(Math.abs(_local_9) >= diameter)\r\n        {\r\n            if(animationDirection > 0)\r\n            {\r\n                animationPhase = (animationPhase - (_local_9 - diameter));\r\n            }\r\n            else\r\n            {\r\n                animationPhase = (animationPhase + (-(diameter) - _local_9));\r\n            }\r\n\r\n            animationDirection = -(animationDirection);\r\n\r\n            this._animDirectionIndex[layerId] = animationDirection;\r\n        }\r\n\r\n        const _local_10: number = ((diameter - Math.abs(animationPhase)) * animationFactor);\r\n\r\n        let _local_11: number = ((animationDirection * Math.sin(Math.abs((animationPhase / 4)))) * _local_10);\r\n\r\n        if(animationDirection > 0)\r\n        {\r\n            _local_11 = (_local_11 - _local_10);\r\n        }\r\n        else\r\n        {\r\n            _local_11 = (_local_11 + _local_10);\r\n        }\r\n\r\n        animationPhase = (animationPhase + ((animationDirection * animationSpeed) * _local_7));\r\n\r\n        this._animPhaseIndex[layerId] = animationPhase;\r\n\r\n        if(Math.trunc(_local_11) == 0) this._animFactorIndex[layerId] = this.getRandomAmplitudeFactor();\r\n\r\n        return new NitroPoint(animationPhase, _local_11);\r\n    }\r\n\r\n    private initItems(scale: number):void\r\n    {\r\n        let diameter: number;\r\n\r\n        if(scale === 32)\r\n        {\r\n            diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_SMALL;\r\n        }\r\n        else\r\n        {\r\n            diameter = FurniturePartyBeamerVisualization.AREA_DIAMETER_LARGE;\r\n        }\r\n\r\n        this._animPhaseIndex = [];\r\n        this._animPhaseIndex.push(((Math.random() * diameter) * 1.5));\r\n        this._animPhaseIndex.push(((Math.random() * diameter) * 1.5));\r\n\r\n        this._animDirectionIndex = [];\r\n        this._animDirectionIndex.push(1);\r\n        this._animDirectionIndex.push(-1);\r\n\r\n        this._animSpeedIndex = [];\r\n        this._animSpeedIndex.push(FurniturePartyBeamerVisualization.ANIM_SPEED_FAST);\r\n        this._animSpeedIndex.push(FurniturePartyBeamerVisualization.ANIM_SPEED_SLOW);\r\n\r\n        this._animFactorIndex = [];\r\n        this._animFactorIndex.push(this.getRandomAmplitudeFactor());\r\n        this._animFactorIndex.push(this.getRandomAmplitudeFactor());\r\n    }\r\n\r\n    protected getLayerXOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if((layerId === 2) || (layerId === 3))\r\n        {\r\n            if(this._animOffsetIndex.length == 2)\r\n            {\r\n                return this._animOffsetIndex[(layerId - 2)].x;\r\n            }\r\n        }\r\n        return super.getLayerXOffset(scale, direction, layerId);\r\n    }\r\n\r\n    protected getLayerYOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if((layerId === 2) || (layerId === 3))\r\n        {\r\n            if(this._animOffsetIndex.length == 2)\r\n            {\r\n                return this._animOffsetIndex[(layerId - 2)].y;\r\n            }\r\n        }\r\n        return super.getLayerYOffset(scale, direction, layerId);\r\n    }\r\n\r\n    private getRandomAmplitudeFactor(): number\r\n    {\r\n        return ((Math.random() * 30) / 100) + 0.15;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}