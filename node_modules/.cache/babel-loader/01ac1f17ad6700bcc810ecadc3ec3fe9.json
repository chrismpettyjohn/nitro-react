{"ast":null,"code":"import { Matrix } from '@pixi/math';\nimport { NitroRectangle, NitroSprite } from '../../../../../core';\nimport { TextureUtils } from '../../../../../room/utils/TextureUtils';\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\nexport class IsometricImageFurniVisualization extends FurnitureAnimatedVisualization {\n  constructor() {\n    super();\n    this._thumbnailAssetNameNormal = void 0;\n    this._thumbnailImageNormal = void 0;\n    this._thumbnailDirection = void 0;\n    this._thumbnailChanged = void 0;\n    this._hasOutline = void 0;\n    this._thumbnailAssetNameNormal = null;\n    this._thumbnailImageNormal = null;\n    this._thumbnailDirection = -1;\n    this._thumbnailChanged = false;\n    this._hasOutline = false;\n  }\n\n  get hasThumbnailImage() {\n    return !(this._thumbnailImageNormal == null);\n  }\n\n  setThumbnailImages(k) {\n    this._thumbnailImageNormal = k;\n    this._thumbnailChanged = true;\n  }\n\n  updateModel(scale) {\n    const flag = super.updateModel(scale);\n    if (!this._thumbnailChanged && this._thumbnailDirection === this.direction) return flag;\n    this.refreshThumbnail();\n    return true;\n  }\n\n  refreshThumbnail() {\n    if (this.asset == null) return;\n\n    if (this._thumbnailImageNormal) {\n      this.addThumbnailAsset(this._thumbnailImageNormal, 64);\n    } else {\n      this.asset.disposeAsset(this.getThumbnailAssetName(64));\n    }\n\n    this._thumbnailChanged = false;\n    this._thumbnailDirection = this.direction;\n  }\n\n  addThumbnailAsset(k, scale) {\n    let layerId = 0;\n\n    while (layerId < this.totalSprites) {\n      if (this.getLayerTag(scale, this.direction, layerId) === IsometricImageFurniVisualization.THUMBNAIL) {\n        const assetName = this.cacheSpriteAssetName(scale, layerId, false) + this.getFrameNumber(scale, layerId);\n        const asset = this.getAsset(assetName, layerId);\n\n        if (asset) {\n          const _local_6 = this.generateTransformedThumbnail(k, asset);\n\n          const _local_7 = this.getThumbnailAssetName(scale);\n\n          this.asset.disposeAsset(_local_7);\n          this.asset.addAsset(_local_7, _local_6, true, asset.offsetX, asset.offsetY, false, false);\n        }\n\n        return;\n      }\n\n      layerId++;\n    }\n  }\n\n  generateTransformedThumbnail(texture, asset) {\n    const scale = 1.1;\n    const matrix = new Matrix();\n\n    const _local_5 = asset.width / texture.width;\n\n    switch (this.direction) {\n      case 2:\n        matrix.a = _local_5;\n        matrix.b = -0.5 * _local_5;\n        matrix.c = 0;\n        matrix.d = _local_5 * scale;\n        matrix.tx = 0;\n        matrix.ty = 0.5 * _local_5 * texture.width;\n        break;\n\n      case 0:\n      case 4:\n        matrix.a = _local_5;\n        matrix.b = 0.5 * _local_5;\n        matrix.c = 0;\n        matrix.d = _local_5 * scale;\n        matrix.tx = 0;\n        matrix.ty = 0;\n        break;\n\n      default:\n        matrix.a = _local_5;\n        matrix.b = 0;\n        matrix.c = 0;\n        matrix.d = _local_5;\n        matrix.tx = 0;\n        matrix.ty = 0;\n    }\n\n    const sprite = new NitroSprite(texture);\n\n    if (this._hasOutline) {//\n    }\n\n    sprite.transform.setFromMatrix(matrix);\n    return TextureUtils.generateTexture(sprite, new NitroRectangle(0, 0, asset.width + 2, asset.height + 2));\n  }\n\n  getSpriteAssetName(scale, layerId) {\n    if (this._thumbnailImageNormal && this.getLayerTag(scale, this.direction, layerId) === IsometricImageFurniVisualization.THUMBNAIL) return this.getThumbnailAssetName(scale);\n    return super.getSpriteAssetName(scale, layerId);\n  }\n\n  getThumbnailAssetName(scale) {\n    this._thumbnailAssetNameNormal = this.getFullThumbnailAssetName(this.object.id, 64);\n    return this._thumbnailAssetNameNormal;\n  }\n\n  getFullThumbnailAssetName(k, _arg_2) {\n    return [this._type, k, 'thumb', _arg_2].join('_');\n  }\n\n}\nIsometricImageFurniVisualization.THUMBNAIL = 'THUMBNAIL';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/IsometricImageFurniVisualization.ts"],"names":["Matrix","NitroRectangle","NitroSprite","TextureUtils","FurnitureAnimatedVisualization","IsometricImageFurniVisualization","constructor","_thumbnailAssetNameNormal","_thumbnailImageNormal","_thumbnailDirection","_thumbnailChanged","_hasOutline","hasThumbnailImage","setThumbnailImages","k","updateModel","scale","flag","direction","refreshThumbnail","asset","addThumbnailAsset","disposeAsset","getThumbnailAssetName","layerId","totalSprites","getLayerTag","THUMBNAIL","assetName","cacheSpriteAssetName","getFrameNumber","getAsset","_local_6","generateTransformedThumbnail","_local_7","addAsset","offsetX","offsetY","texture","matrix","_local_5","width","a","b","c","d","tx","ty","sprite","transform","setFromMatrix","generateTexture","height","getSpriteAssetName","getFullThumbnailAssetName","object","id","_arg_2","_type","join"],"mappings":"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","sourcesContent":["import { Resource, Texture } from '@pixi/core';\r\nimport { Matrix } from '@pixi/math';\r\nimport { NitroRectangle, NitroSprite } from '../../../../../core';\r\nimport { IGraphicAsset } from '../../../../../room/object/visualization/utils/IGraphicAsset';\r\nimport { TextureUtils } from '../../../../../room/utils/TextureUtils';\r\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\r\n\r\nexport class IsometricImageFurniVisualization extends FurnitureAnimatedVisualization\r\n{\r\n    protected static THUMBNAIL: string = 'THUMBNAIL';\r\n\r\n    private _thumbnailAssetNameNormal: string;\r\n    private _thumbnailImageNormal: Texture<Resource>;\r\n    private _thumbnailDirection: number;\r\n    private _thumbnailChanged: boolean;\r\n    protected _hasOutline: boolean;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._thumbnailAssetNameNormal = null;\r\n        this._thumbnailImageNormal = null;\r\n        this._thumbnailDirection = -1;\r\n        this._thumbnailChanged = false;\r\n        this._hasOutline = false;\r\n    }\r\n\r\n    public get hasThumbnailImage(): boolean\r\n    {\r\n        return !(this._thumbnailImageNormal == null);\r\n    }\r\n\r\n    public setThumbnailImages(k: Texture<Resource>): void\r\n    {\r\n        this._thumbnailImageNormal = k;\r\n        this._thumbnailChanged = true;\r\n    }\r\n\r\n    protected updateModel(scale: number): boolean\r\n    {\r\n        const flag = super.updateModel(scale);\r\n\r\n        if(!this._thumbnailChanged && (this._thumbnailDirection === this.direction)) return flag;\r\n\r\n        this.refreshThumbnail();\r\n\r\n        return true;\r\n    }\r\n\r\n    private refreshThumbnail(): void\r\n    {\r\n        if(this.asset == null) return;\r\n\r\n        if(this._thumbnailImageNormal)\r\n        {\r\n            this.addThumbnailAsset(this._thumbnailImageNormal, 64);\r\n        }\r\n        else\r\n        {\r\n            this.asset.disposeAsset(this.getThumbnailAssetName(64));\r\n        }\r\n\r\n        this._thumbnailChanged = false;\r\n        this._thumbnailDirection = this.direction;\r\n    }\r\n\r\n    private addThumbnailAsset(k: Texture<Resource>, scale: number): void\r\n    {\r\n        let layerId = 0;\r\n\r\n        while(layerId < this.totalSprites)\r\n        {\r\n            if(this.getLayerTag(scale, this.direction, layerId) === IsometricImageFurniVisualization.THUMBNAIL)\r\n            {\r\n                const assetName = (this.cacheSpriteAssetName(scale, layerId, false) + this.getFrameNumber(scale, layerId));\r\n                const asset = this.getAsset(assetName, layerId);\r\n\r\n                if(asset)\r\n                {\r\n                    const _local_6 = this.generateTransformedThumbnail(k, asset);\r\n                    const _local_7 = this.getThumbnailAssetName(scale);\r\n\r\n                    this.asset.disposeAsset(_local_7);\r\n                    this.asset.addAsset(_local_7, _local_6, true, asset.offsetX, asset.offsetY, false, false);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            layerId++;\r\n        }\r\n    }\r\n\r\n    private generateTransformedThumbnail(texture: Texture<Resource>, asset: IGraphicAsset): Texture<Resource>\r\n    {\r\n        const scale = 1.1;\r\n        const matrix = new Matrix();\r\n        const _local_5 = (asset.width / texture.width);\r\n\r\n        switch(this.direction)\r\n        {\r\n            case 2:\r\n                matrix.a = _local_5;\r\n                matrix.b = (-0.5 * _local_5);\r\n                matrix.c = 0;\r\n                matrix.d = (_local_5 * scale);\r\n                matrix.tx = 0;\r\n                matrix.ty = ((0.5 * _local_5) * texture.width);\r\n                break;\r\n            case 0:\r\n            case 4:\r\n                matrix.a = _local_5;\r\n                matrix.b = (0.5 * _local_5);\r\n                matrix.c = 0;\r\n                matrix.d = (_local_5 * scale);\r\n                matrix.tx = 0;\r\n                matrix.ty = 0;\r\n                break;\r\n            default:\r\n                matrix.a = _local_5;\r\n                matrix.b = 0;\r\n                matrix.c = 0;\r\n                matrix.d = _local_5;\r\n                matrix.tx = 0;\r\n                matrix.ty = 0;\r\n        }\r\n\r\n        const sprite = new NitroSprite(texture);\r\n\r\n        if(this._hasOutline)\r\n        {\r\n            //\r\n        }\r\n\r\n        sprite.transform.setFromMatrix(matrix);\r\n\r\n        return TextureUtils.generateTexture(sprite, new NitroRectangle(0, 0, (asset.width + 2), (asset.height + 2)));\r\n    }\r\n\r\n    protected getSpriteAssetName(scale: number, layerId: number): string\r\n    {\r\n        if(this._thumbnailImageNormal && (this.getLayerTag(scale, this.direction, layerId) === IsometricImageFurniVisualization.THUMBNAIL)) return this.getThumbnailAssetName(scale);\r\n\r\n        return super.getSpriteAssetName(scale, layerId);\r\n    }\r\n\r\n    protected getThumbnailAssetName(scale: number): string\r\n    {\r\n        this._thumbnailAssetNameNormal = this.getFullThumbnailAssetName(this.object.id, 64);\r\n\r\n        return this._thumbnailAssetNameNormal;\r\n    }\r\n\r\n    protected getFullThumbnailAssetName(k: number, _arg_2: number): string\r\n    {\r\n        return [this._type, k, 'thumb', _arg_2].join('_');\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}