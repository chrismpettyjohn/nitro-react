{"ast":null,"code":"import { ChatlineData } from './ChatlineData';\nexport class ChatRecordData {\n  constructor(wrapper) {\n    this._recordType = void 0;\n    this._context = void 0;\n    this._chatlog = void 0;\n    this._context = new Map();\n    this._chatlog = [];\n    this._recordType = wrapper.readByte();\n    const contextCount = wrapper.readShort();\n\n    for (let i = 0; i < contextCount; i++) {\n      const key = wrapper.readString();\n      const type = wrapper.readByte();\n\n      switch (type) {\n        case 0:\n          this._context.set(key, wrapper.readBoolean());\n\n          break;\n\n        case 1:\n          this._context.set(key, wrapper.readInt());\n\n          break;\n\n        case 2:\n          this._context.set(key, wrapper.readString());\n\n          break;\n\n        default:\n          throw new Error('Unknown data type ' + type);\n      }\n    }\n\n    const chatCount = wrapper.readShort();\n\n    for (let i = 0; i < chatCount; i++) {\n      const timestamp = wrapper.readString();\n      const habboId = wrapper.readInt();\n      const username = wrapper.readString();\n      const message = wrapper.readString();\n      const hasHighlighting = wrapper.readBoolean();\n\n      this._chatlog.push(new ChatlineData(timestamp, habboId, username, message, hasHighlighting));\n    }\n  }\n\n  get recordType() {\n    return this._recordType;\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  get chatlog() {\n    return this._chatlog;\n  }\n\n  get roomId() {\n    return this.getInt('roomId');\n  }\n\n  get roomName() {\n    return this._context.get('roomName');\n  }\n\n  get groupId() {\n    return this.getInt('groupId');\n  }\n\n  get threadId() {\n    return this.getInt('threadId');\n  }\n\n  get messageId() {\n    return this.getInt('messageId');\n  }\n\n  getInt(k) {\n    const value = this._context.get(k);\n\n    if (!value) {\n      return 0;\n    }\n\n    return value;\n  }\n\n}\nChatRecordData.TYPE_SIMPLE = 0;\nChatRecordData.TYPE_ROOM_CHAT = 1;\nChatRecordData.TYPE_IM_SESSION = 2;\nChatRecordData.TYPE_DISCUSSION_THREAD = 3;\nChatRecordData.TYPE_DISCUSSION_MESSAGE = 4;\nChatRecordData.TYPE_SELFIE = 5;\nChatRecordData.TYPE_PHOTO = 6;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/incoming/moderation/ChatRecordData.ts"],"names":["ChatlineData","ChatRecordData","constructor","wrapper","_recordType","_context","_chatlog","Map","readByte","contextCount","readShort","i","key","readString","type","set","readBoolean","readInt","Error","chatCount","timestamp","habboId","username","message","hasHighlighting","push","recordType","context","chatlog","roomId","getInt","roomName","get","groupId","threadId","messageId","k","value","TYPE_SIMPLE","TYPE_ROOM_CHAT","TYPE_IM_SESSION","TYPE_DISCUSSION_THREAD","TYPE_DISCUSSION_MESSAGE","TYPE_SELFIE","TYPE_PHOTO"],"mappings":"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","sourcesContent":["import { IMessageDataWrapper } from '../../../../..';\r\nimport { ChatlineData } from './ChatlineData';\r\n\r\nexport class ChatRecordData\r\n{\r\n    public static readonly TYPE_SIMPLE = 0;\r\n    public static readonly TYPE_ROOM_CHAT = 1;\r\n    public static readonly TYPE_IM_SESSION = 2;\r\n    public static readonly TYPE_DISCUSSION_THREAD = 3;\r\n    public static readonly TYPE_DISCUSSION_MESSAGE = 4;\r\n    public static readonly TYPE_SELFIE = 5;\r\n    public static readonly TYPE_PHOTO = 6;\r\n\r\n    private _recordType:number;\r\n    private _context:Map<string, any>;\r\n    private _chatlog:ChatlineData[];\r\n\r\n    constructor(wrapper: IMessageDataWrapper)\r\n    {\r\n        this._context = new Map();\r\n        this._chatlog = [];\r\n\r\n        this._recordType = wrapper.readByte();\r\n        const contextCount = wrapper.readShort();\r\n\r\n        for(let i = 0; i < contextCount; i++)\r\n        {\r\n            const key = wrapper.readString();\r\n            const type = wrapper.readByte();\r\n\r\n            switch(type)\r\n            {\r\n                case 0:\r\n                    this._context.set(key, wrapper.readBoolean());\r\n                    break;\r\n                case 1:\r\n                    this._context.set(key, wrapper.readInt());\r\n                    break;\r\n                case 2:\r\n                    this._context.set(key, wrapper.readString());\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown data type ' + type);\r\n            }\r\n        }\r\n\r\n        const chatCount = wrapper.readShort();\r\n\r\n        for(let i = 0; i < chatCount; i++)\r\n        {\r\n            const timestamp = wrapper.readString();\r\n            const habboId = wrapper.readInt();\r\n            const username = wrapper.readString();\r\n            const message = wrapper.readString();\r\n            const hasHighlighting = wrapper.readBoolean();\r\n\r\n            this._chatlog.push(new ChatlineData(timestamp, habboId, username, message, hasHighlighting));\r\n        }\r\n    }\r\n\r\n    public get recordType():number\r\n    {\r\n        return this._recordType;\r\n    }\r\n\r\n    public get context():Map<string, any>\r\n    {\r\n        return this._context;\r\n    }\r\n\r\n    public get chatlog():ChatlineData[]\r\n    {\r\n        return this._chatlog;\r\n    }\r\n\r\n    public get roomId():number\r\n    {\r\n        return this.getInt('roomId');\r\n    }\r\n\r\n    public get roomName():string\r\n    {\r\n        return this._context.get('roomName') as string;\r\n    }\r\n\r\n    public get groupId():number\r\n    {\r\n        return this.getInt('groupId');\r\n    }\r\n\r\n    public get threadId():number\r\n    {\r\n        return this.getInt('threadId');\r\n    }\r\n\r\n    public get messageId(): number\r\n    {\r\n        return this.getInt('messageId');\r\n    }\r\n\r\n    private getInt(k:string): number\r\n    {\r\n        const value = this._context.get(k);\r\n        if(!value)\r\n        {\r\n            return 0;\r\n        }\r\n        return value as number;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}