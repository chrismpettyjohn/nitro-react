{"ast":null,"code":"import { LayerData } from './LayerData';\nexport class DirectionData {\n  constructor(layerCount) {\n    this._layers = void 0;\n    this._layers = [];\n    this.createLayers(layerCount);\n  }\n\n  createLayers(count) {\n    if (!count) return;\n\n    for (let i = 0; i < count; i++) this._layers.push(new LayerData());\n  }\n\n  dispose() {\n    this._layers = [];\n  }\n\n  setFromDirection(directionData) {\n    if (!directionData) return;\n    const totalLayers = this.layerCount;\n    if (totalLayers !== directionData.layerCount) return;\n\n    for (let i = 0; i < totalLayers; i++) {\n      const localLayer = this.getLayer(i);\n      const directionLayer = directionData.getLayer(i);\n      if (!localLayer) continue;\n      localLayer.setFromLayer(directionLayer);\n    }\n  }\n\n  getLayer(layerId) {\n    const existing = this._layers[layerId];\n    if (!existing) return null;\n    return existing;\n  }\n\n  getLayerTag(layerId) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return LayerData.DEFAULT_TAG;\n    return existing.tag;\n  }\n\n  setLayerTag(layerId, tag) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return;\n    existing.tag = tag;\n  }\n\n  getLayerInk(layerId) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return LayerData.DEFAULT_INK;\n    return existing.ink;\n  }\n\n  setLayerInk(layerId, ink) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return;\n    if (isNaN(ink)) return;\n    existing.ink = ink;\n  }\n\n  getLayerAlpha(layerId) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return LayerData.DEFAULT_ALPHA;\n    return existing.alpha;\n  }\n\n  setLayerAlpha(layerId, alpha) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return;\n    if (isNaN(alpha)) return;\n    existing.alpha = alpha;\n  }\n\n  getLayerIgnoreMouse(layerId) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return LayerData.DEFAULT_IGNORE_MOUSE;\n    return existing.ignoreMouse;\n  }\n\n  setLayerIgnoreMouse(layerId, flag) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return;\n    existing.ignoreMouse = flag || false;\n  }\n\n  getLayerXOffset(layerId) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return LayerData.DEFAULT_XOFFSET;\n    return existing.xOffset;\n  }\n\n  setLayerXOffset(layerId, offset) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return;\n    if (isNaN(offset)) return;\n    existing.xOffset = offset;\n  }\n\n  getLayerYOffset(layerId) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return LayerData.DEFAULT_YOFFSET;\n    return existing.yOffset;\n  }\n\n  setLayerYOffset(layerId, offset) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return;\n    if (isNaN(offset)) return;\n    existing.yOffset = offset;\n  }\n\n  getLayerZOffset(layerId) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return LayerData.DEFAULT_ZOFFSET;\n    return existing.zOffset;\n  }\n\n  setLayerZOffset(layerId, offset) {\n    const existing = this.getLayer(layerId);\n    if (!existing) return;\n    if (isNaN(offset)) return;\n    existing.zOffset = offset;\n  }\n\n  get layerCount() {\n    return this._layers.length;\n  }\n\n}\nDirectionData.USE_DEFAULT_DIRECTION = -1;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/DirectionData.ts"],"names":["LayerData","DirectionData","constructor","layerCount","_layers","createLayers","count","i","push","dispose","setFromDirection","directionData","totalLayers","localLayer","getLayer","directionLayer","setFromLayer","layerId","existing","getLayerTag","DEFAULT_TAG","tag","setLayerTag","getLayerInk","DEFAULT_INK","ink","setLayerInk","isNaN","getLayerAlpha","DEFAULT_ALPHA","alpha","setLayerAlpha","getLayerIgnoreMouse","DEFAULT_IGNORE_MOUSE","ignoreMouse","setLayerIgnoreMouse","flag","getLayerXOffset","DEFAULT_XOFFSET","xOffset","setLayerXOffset","offset","getLayerYOffset","DEFAULT_YOFFSET","yOffset","setLayerYOffset","getLayerZOffset","DEFAULT_ZOFFSET","zOffset","setLayerZOffset","length","USE_DEFAULT_DIRECTION"],"mappings":"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","sourcesContent":["import { LayerData } from './LayerData';\r\n\r\nexport class DirectionData\r\n{\r\n    public static USE_DEFAULT_DIRECTION: number = -1;\r\n\r\n    private _layers: LayerData[];\r\n\r\n    constructor(layerCount: number)\r\n    {\r\n        this._layers = [];\r\n\r\n        this.createLayers(layerCount);\r\n    }\r\n\r\n    private createLayers(count: number): void\r\n    {\r\n        if(!count) return;\r\n\r\n        for(let i = 0; i < count; i++) this._layers.push(new LayerData());\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._layers = [];\r\n    }\r\n\r\n    public setFromDirection(directionData: DirectionData): void\r\n    {\r\n        if(!directionData) return;\r\n\r\n        const totalLayers = this.layerCount;\r\n\r\n        if(totalLayers !== directionData.layerCount) return;\r\n\r\n        for(let i = 0; i < totalLayers; i++)\r\n        {\r\n            const localLayer = this.getLayer(i);\r\n            const directionLayer = directionData.getLayer(i);\r\n\r\n            if(!localLayer) continue;\r\n\r\n            localLayer.setFromLayer(directionLayer);\r\n        }\r\n    }\r\n\r\n    public getLayer(layerId: number): LayerData\r\n    {\r\n        const existing = this._layers[layerId];\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getLayerTag(layerId: number): string\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return LayerData.DEFAULT_TAG;\r\n\r\n        return existing.tag;\r\n    }\r\n\r\n    public setLayerTag(layerId: number, tag: string): void\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return;\r\n\r\n        existing.tag = tag;\r\n    }\r\n\r\n    public getLayerInk(layerId: number): number\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return LayerData.DEFAULT_INK;\r\n\r\n        return existing.ink;\r\n    }\r\n\r\n    public setLayerInk(layerId: number, ink: number): void\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return;\r\n\r\n        if(isNaN(ink)) return;\r\n\r\n        existing.ink = ink;\r\n    }\r\n\r\n    public getLayerAlpha(layerId: number): number\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return LayerData.DEFAULT_ALPHA;\r\n\r\n        return existing.alpha;\r\n    }\r\n\r\n    public setLayerAlpha(layerId: number, alpha: number): void\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return;\r\n\r\n        if(isNaN(alpha)) return;\r\n\r\n        existing.alpha = alpha;\r\n    }\r\n\r\n    public getLayerIgnoreMouse(layerId: number): boolean\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return LayerData.DEFAULT_IGNORE_MOUSE;\r\n\r\n        return existing.ignoreMouse;\r\n    }\r\n\r\n    public setLayerIgnoreMouse(layerId: number, flag: boolean): void\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return;\r\n\r\n        existing.ignoreMouse = flag || false;\r\n    }\r\n\r\n    public getLayerXOffset(layerId: number): number\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return LayerData.DEFAULT_XOFFSET;\r\n\r\n        return existing.xOffset;\r\n    }\r\n\r\n    public setLayerXOffset(layerId: number, offset: number): void\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return;\r\n\r\n        if(isNaN(offset)) return;\r\n\r\n        existing.xOffset = offset;\r\n    }\r\n\r\n    public getLayerYOffset(layerId: number): number\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return LayerData.DEFAULT_YOFFSET;\r\n\r\n        return existing.yOffset;\r\n    }\r\n\r\n    public setLayerYOffset(layerId: number, offset: number): void\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return;\r\n\r\n        if(isNaN(offset)) return;\r\n\r\n        existing.yOffset = offset;\r\n    }\r\n\r\n    public getLayerZOffset(layerId: number): number\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return LayerData.DEFAULT_ZOFFSET;\r\n\r\n        return existing.zOffset;\r\n    }\r\n\r\n    public setLayerZOffset(layerId: number, offset: number): void\r\n    {\r\n        const existing = this.getLayer(layerId);\r\n\r\n        if(!existing) return;\r\n\r\n        if(isNaN(offset)) return;\r\n\r\n        existing.zOffset = offset;\r\n    }\r\n\r\n    public get layerCount(): number\r\n    {\r\n        return this._layers.length;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}