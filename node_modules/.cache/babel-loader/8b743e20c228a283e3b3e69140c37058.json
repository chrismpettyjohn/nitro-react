{"ast":null,"code":"import { RoomMapMaskData } from './RoomMapMaskData';\nimport { RoomPlaneBitmapMaskData } from './RoomPlaneBitmapMaskData';\nexport class RoomPlaneBitmapMaskParser {\n  constructor() {\n    this._masks = void 0;\n    this._masks = new Map();\n  }\n\n  get maskCount() {\n    return this._masks.size;\n  }\n\n  dispose() {\n    if (this._masks) {\n      this.reset();\n      this._masks = null;\n    }\n  }\n\n  initialize(k) {\n    if (!k) return false;\n\n    this._masks.clear();\n\n    if (k.masks.length) {\n      for (const mask of k.masks) {\n        if (!mask) continue;\n        const location = mask.locations.length ? mask.locations[0] : null;\n        if (!location) continue;\n\n        this._masks.set(mask.id, new RoomPlaneBitmapMaskData(mask.type, location, mask.category));\n      }\n    }\n\n    return true;\n  }\n\n  reset() {\n    for (const mask of this._masks.values()) {\n      if (!mask) continue;\n      mask.dispose();\n    }\n\n    this._masks.clear();\n  }\n\n  addMask(k, _arg_2, _arg_3, _arg_4) {\n    const mask = new RoomPlaneBitmapMaskData(_arg_2, _arg_3, _arg_4);\n\n    this._masks.delete(k);\n\n    this._masks.set(k, mask);\n  }\n\n  removeMask(k) {\n    const existing = this._masks.get(k);\n\n    if (existing) {\n      this._masks.delete(k);\n\n      existing.dispose();\n      return true;\n    }\n\n    return false;\n  }\n\n  getXML() {\n    const data = new RoomMapMaskData();\n\n    for (const [key, mask] of this._masks.entries()) {\n      if (!mask) continue;\n      const type = this.getMaskType(mask);\n      const category = this.getMaskCategory(mask);\n      const location = this.getMaskLocation(mask);\n\n      if (type && category && location) {\n        const newMask = {\n          id: key,\n          type: type,\n          category: category,\n          locations: [{\n            x: location.x,\n            y: location.y,\n            z: location.z\n          }]\n        };\n        data.masks.push(newMask);\n      }\n    }\n\n    return data;\n  }\n\n  getMaskLocation(mask) {\n    if (!mask) return null;\n    return mask.loc;\n  }\n\n  getMaskType(mask) {\n    if (!mask) return null;\n    return mask.type;\n  }\n\n  getMaskCategory(mask) {\n    if (!mask) return null;\n    return mask.category;\n  }\n\n  get masks() {\n    return this._masks;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/RoomPlaneBitmapMaskParser.ts"],"names":["RoomMapMaskData","RoomPlaneBitmapMaskData","RoomPlaneBitmapMaskParser","constructor","_masks","Map","maskCount","size","dispose","reset","initialize","k","clear","masks","length","mask","location","locations","set","id","type","category","values","addMask","_arg_2","_arg_3","_arg_4","delete","removeMask","existing","get","getXML","data","key","entries","getMaskType","getMaskCategory","getMaskLocation","newMask","x","y","z","push","loc"],"mappings":"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","sourcesContent":["import { IVector3D } from '../../../room/utils/IVector3D';\r\nimport { RoomMapMaskData } from './RoomMapMaskData';\r\nimport { RoomPlaneBitmapMaskData } from './RoomPlaneBitmapMaskData';\r\n\r\nexport class RoomPlaneBitmapMaskParser\r\n{\r\n    private _masks: Map<string, RoomPlaneBitmapMaskData>;\r\n\r\n    constructor()\r\n    {\r\n        this._masks = new Map();\r\n    }\r\n\r\n    public get maskCount(): number\r\n    {\r\n        return this._masks.size;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._masks)\r\n        {\r\n            this.reset();\r\n\r\n            this._masks = null;\r\n        }\r\n    }\r\n\r\n    public initialize(k: RoomMapMaskData): boolean\r\n    {\r\n        if(!k) return false;\r\n\r\n        this._masks.clear();\r\n\r\n        if(k.masks.length)\r\n        {\r\n            for(const mask of k.masks)\r\n            {\r\n                if(!mask) continue;\r\n\r\n                const location = mask.locations.length ? mask.locations[0] : null;\r\n\r\n                if(!location) continue;\r\n\r\n                this._masks.set(mask.id, new RoomPlaneBitmapMaskData(mask.type, location, mask.category));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public reset(): void\r\n    {\r\n        for(const mask of this._masks.values())\r\n        {\r\n            if(!mask) continue;\r\n\r\n            mask.dispose();\r\n        }\r\n\r\n        this._masks.clear();\r\n    }\r\n\r\n    public addMask(k: string, _arg_2: string, _arg_3: IVector3D, _arg_4: string): void\r\n    {\r\n        const mask = new RoomPlaneBitmapMaskData(_arg_2, _arg_3, _arg_4);\r\n\r\n        this._masks.delete(k);\r\n        this._masks.set(k, mask);\r\n    }\r\n\r\n    public removeMask(k: string): boolean\r\n    {\r\n        const existing = this._masks.get(k);\r\n\r\n        if(existing)\r\n        {\r\n            this._masks.delete(k);\r\n\r\n            existing.dispose();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getXML(): RoomMapMaskData\r\n    {\r\n        const data = new RoomMapMaskData();\r\n\r\n        for(const [ key, mask ] of this._masks.entries())\r\n        {\r\n            if(!mask) continue;\r\n\r\n            const type = this.getMaskType(mask);\r\n            const category = this.getMaskCategory(mask);\r\n            const location = this.getMaskLocation(mask);\r\n\r\n            if(type && category && location)\r\n            {\r\n                const newMask: any = {\r\n                    id: key,\r\n                    type: type,\r\n                    category: category,\r\n                    locations: [\r\n                        {\r\n                            x: location.x,\r\n                            y: location.y,\r\n                            z: location.z\r\n                        }\r\n                    ]\r\n                };\r\n\r\n                data.masks.push(newMask);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    public getMaskLocation(mask: RoomPlaneBitmapMaskData): IVector3D\r\n    {\r\n        if(!mask) return null;\r\n\r\n        return mask.loc;\r\n    }\r\n\r\n    public getMaskType(mask: RoomPlaneBitmapMaskData): string\r\n    {\r\n        if(!mask) return null;\r\n\r\n        return mask.type;\r\n    }\r\n\r\n    public getMaskCategory(mask: RoomPlaneBitmapMaskData): string\r\n    {\r\n        if(!mask) return null;\r\n\r\n        return mask.category;\r\n    }\r\n\r\n    public get masks(): Map<string, RoomPlaneBitmapMaskData>\r\n    {\r\n        return this._masks;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}