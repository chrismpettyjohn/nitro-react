{"ast":null,"code":"import { NitroPoint } from '../../..';\nexport class GroupBadgePart {\n  constructor(type) {\n    let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.type = void 0;\n    this.key = void 0;\n    this.color = void 0;\n    this.position = void 0;\n    this.type = type;\n    this.key = key;\n    this.color = color;\n    this.position = position;\n  }\n\n  get code() {\n    if (this.key === 0) return null;\n    return GroupBadgePart.getCode(this.type, this.key, this.color, this.position);\n  }\n\n  static getCode(type, key, color, position) {\n    return (type === GroupBadgePart.BASE ? type : key >= 100 ? GroupBadgePart.SYMBOL_ALT : GroupBadgePart.SYMBOL) + (key < 10 ? '0' : '') + (type === GroupBadgePart.BASE ? key : key >= 100 ? key - 100 : key) + (color < 10 ? '0' : '') + color + position;\n  }\n\n  calculatePosition(asset) {\n    const gridPos = this.calculateGridPos(this.position);\n    let x = GroupBadgePart.CELL_WIDTH * gridPos.x + GroupBadgePart.CELL_WIDTH / 2 - asset.width / 2;\n    let y = GroupBadgePart.CELL_HEIGHT * gridPos.y + GroupBadgePart.CELL_HEIGHT / 2 - asset.height / 2;\n    if (x < 0) x = 0;\n    if (x + asset.width > GroupBadgePart.IMAGE_WIDTH) x = GroupBadgePart.IMAGE_WIDTH - asset.width;\n    if (y < 0) y = 0;\n    if (y + asset.height > GroupBadgePart.IMAGE_HEIGHT) y = GroupBadgePart.IMAGE_HEIGHT - asset.height;\n    return new NitroPoint(Math.floor(x), Math.floor(y));\n  }\n\n  calculateGridPos(gridVal) {\n    const point = new NitroPoint();\n    point.x = Math.floor(gridVal % 3);\n    point.y = Math.floor(gridVal / 3);\n    return point;\n  }\n\n}\nGroupBadgePart.BASE = 'b';\nGroupBadgePart.SYMBOL = 's';\nGroupBadgePart.SYMBOL_ALT = 't';\nGroupBadgePart.BASE_PART = 0;\nGroupBadgePart.LAYER_PART = 1;\nGroupBadgePart.IMAGE_WIDTH = 39;\nGroupBadgePart.IMAGE_HEIGHT = 39;\nGroupBadgePart.CELL_WIDTH = 13;\nGroupBadgePart.CELL_HEIGHT = 13;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/session/badge/GroupBadgePart.ts"],"names":["NitroPoint","GroupBadgePart","constructor","type","key","color","position","code","getCode","BASE","SYMBOL_ALT","SYMBOL","calculatePosition","asset","gridPos","calculateGridPos","x","CELL_WIDTH","width","y","CELL_HEIGHT","height","IMAGE_WIDTH","IMAGE_HEIGHT","Math","floor","gridVal","point","BASE_PART","LAYER_PART"],"mappings":"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","sourcesContent":["import { NitroPoint, NitroTexture } from '../../..';\r\n\r\nexport class GroupBadgePart\r\n{\r\n    public static BASE: string = 'b';\r\n    public static SYMBOL: string = 's';\r\n    public static SYMBOL_ALT: string = 't';\r\n    public static BASE_PART: number = 0;\r\n    public static LAYER_PART: number = 1;\r\n    public static IMAGE_WIDTH: number = 39;\r\n    public static IMAGE_HEIGHT: number = 39;\r\n    public static CELL_WIDTH: number = 13;\r\n    public static CELL_HEIGHT: number = 13;\r\n\r\n    public type: string;\r\n    public key: number;\r\n    public color: number;\r\n    public position: number;\r\n\r\n    constructor(type: string, key: number = 0, color: number = 0, position: number = 0)\r\n    {\r\n        this.type = type;\r\n        this.key = key;\r\n        this.color = color;\r\n        this.position = position;\r\n    }\r\n\r\n    public get code(): string\r\n    {\r\n        if(this.key === 0) return null;\r\n\r\n        return GroupBadgePart.getCode(this.type, this.key, this.color, this.position);\r\n    }\r\n\r\n    public static getCode(type: string, key: number, color: number, position: number): string\r\n    {\r\n        return (type === GroupBadgePart.BASE ? type : key >= 100 ? GroupBadgePart.SYMBOL_ALT : GroupBadgePart.SYMBOL) + (key < 10 ? '0' : '') + (type === GroupBadgePart.BASE ? key : key >= 100 ? key - 100 : key) + (color < 10 ? '0' : '') + color + position;\r\n    }\r\n\r\n    public calculatePosition(asset: NitroTexture) : NitroPoint\r\n    {\r\n        const gridPos = this.calculateGridPos(this.position);\r\n\r\n        let x: number = (((GroupBadgePart.CELL_WIDTH * gridPos.x) + (GroupBadgePart.CELL_WIDTH / 2)) - (asset.width / 2));\r\n        let y: number = (((GroupBadgePart.CELL_HEIGHT * gridPos.y) + (GroupBadgePart.CELL_HEIGHT / 2)) - (asset.height / 2));\r\n\r\n        if(x < 0) x = 0;\r\n\r\n        if((x + asset.width) > GroupBadgePart.IMAGE_WIDTH) x = (GroupBadgePart.IMAGE_WIDTH - asset.width);\r\n\r\n        if(y < 0) y = 0;\r\n\r\n        if((y + asset.height) > GroupBadgePart.IMAGE_HEIGHT) y = (GroupBadgePart.IMAGE_HEIGHT - asset.height);\r\n\r\n        return new NitroPoint(Math.floor(x), Math.floor(y));\r\n    }\r\n\r\n    private calculateGridPos(gridVal: number): NitroPoint\r\n    {\r\n        const point = new NitroPoint();\r\n        point.x = Math.floor((gridVal % 3));\r\n        point.y = Math.floor((gridVal / 3));\r\n\r\n        return point;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}