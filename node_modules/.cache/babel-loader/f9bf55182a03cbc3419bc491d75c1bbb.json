{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/chat-history/ChatHistoryView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { AutoSizer, CellMeasurer, CellMeasurerCache, List } from 'react-virtualized';\nimport { AddEventLinkTracker, RemoveLinkEventTracker } from '../../api';\nimport { Column, Flex, Text } from '../../common';\nimport { ChatHistoryContextProvider } from './ChatHistoryContext';\nimport { ChatHistoryMessageHandler } from './ChatHistoryMessageHandler';\nimport { ChatEntryType } from './common/ChatEntryType';\nimport { ChatHistoryState } from './common/ChatHistoryState';\nimport { SetChatHistory } from './common/GetChatHistory';\nimport { RoomHistoryState } from './common/RoomHistoryState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ChatHistoryView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [chatHistoryUpdateId, setChatHistoryUpdateId] = useState(-1);\n  const [roomHistoryUpdateId, setRoomHistoryUpdateId] = useState(-1);\n  const [chatHistoryState, setChatHistoryState] = useState(new ChatHistoryState());\n  const [roomHistoryState, setRoomHistoryState] = useState(new RoomHistoryState());\n  const elementRef = useRef(null);\n  const cache = useMemo(() => new CellMeasurerCache({\n    defaultHeight: 25,\n    fixedWidth: true\n  }), []);\n\n  const RowRenderer = props => {\n    const item = chatHistoryState.chats[props.index];\n    const isDark = props.index % 2 === 0;\n    return /*#__PURE__*/_jsxDEV(CellMeasurer, {\n      cache: cache,\n      columnIndex: 0,\n      parent: props.parent,\n      rowIndex: props.index,\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        style: props.style,\n        className: \"p-1\",\n        gap: 1,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          variant: \"muted\",\n          children: item.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), item.type === ChatEntryType.TYPE_CHAT && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            pointer: true,\n            noWrap: true,\n            dangerouslySetInnerHTML: {\n              __html: item.name + ':'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            textBreak: true,\n            wrap: true,\n            grow: true,\n            children: item.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), item.type === ChatEntryType.TYPE_ROOM_INFO && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"icon icon-small-room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            variant: \"danger\",\n            textBreak: true,\n            wrap: true,\n            grow: true,\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, props.key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, props.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  };\n\n  const onResize = info => cache.clearAll();\n\n  const linkReceived = useCallback(url => {\n    const parts = url.split('/');\n    if (parts.length < 2) return;\n\n    switch (parts[1]) {\n      case 'show':\n        setIsVisible(true);\n        return;\n\n      case 'hide':\n        setIsVisible(false);\n        return;\n\n      case 'toggle':\n        setIsVisible(prevValue => !prevValue);\n        return;\n    }\n  }, []);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived,\n      eventUrlPrefix: 'chat-history/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, [linkReceived]);\n  useEffect(() => {\n    const chatState = new ChatHistoryState();\n    const roomState = new RoomHistoryState();\n    SetChatHistory(chatState);\n\n    chatState.notifier = () => setChatHistoryUpdateId(prevValue => prevValue + 1);\n\n    roomState.notifier = () => setRoomHistoryUpdateId(prevValue => prevValue + 1);\n\n    setChatHistoryState(chatState);\n    setRoomHistoryState(roomState);\n    return () => {\n      chatState.notifier = null;\n      roomState.notifier = null;\n    };\n  }, []);\n  useEffect(() => {\n    if (elementRef && elementRef.current && isVisible) elementRef.current.scrollToRow(-1);\n  }, [isVisible]);\n  return /*#__PURE__*/_jsxDEV(ChatHistoryContextProvider, {\n    value: {\n      chatHistoryState,\n      roomHistoryState\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChatHistoryMessageHandler, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), isVisible && /*#__PURE__*/_jsxDEV(Flex, {\n      gap: 2,\n      className: \"nitro-chat-history\",\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        className: \"chat-history-content h-100\",\n        children: /*#__PURE__*/_jsxDEV(Column, {\n          className: \"h-100\",\n          children: /*#__PURE__*/_jsxDEV(AutoSizer, {\n            defaultWidth: 300,\n            defaultHeight: 200,\n            onResize: onResize,\n            children: _ref => {\n              let {\n                height,\n                width\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(List, {\n                ref: elementRef,\n                width: width,\n                height: height,\n                rowCount: chatHistoryState.chats.length,\n                rowHeight: cache.rowHeight,\n                className: 'chat-history-list',\n                rowRenderer: RowRenderer,\n                deferredMeasurementCache: cache\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 41\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        className: \"chat-toggle\",\n        onClick: event => setIsVisible(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatHistoryView, \"NebedcAHTiwID3QTBbDzONGblUU=\");\n\n_c = ChatHistoryView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatHistoryView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/chat-history/ChatHistoryView.tsx"],"names":["useCallback","useEffect","useMemo","useRef","useState","AutoSizer","CellMeasurer","CellMeasurerCache","List","AddEventLinkTracker","RemoveLinkEventTracker","Column","Flex","Text","ChatHistoryContextProvider","ChatHistoryMessageHandler","ChatEntryType","ChatHistoryState","SetChatHistory","RoomHistoryState","ChatHistoryView","props","isVisible","setIsVisible","chatHistoryUpdateId","setChatHistoryUpdateId","roomHistoryUpdateId","setRoomHistoryUpdateId","chatHistoryState","setChatHistoryState","roomHistoryState","setRoomHistoryState","elementRef","cache","defaultHeight","fixedWidth","RowRenderer","item","chats","index","isDark","parent","style","timestamp","type","TYPE_CHAT","__html","name","message","TYPE_ROOM_INFO","key","onResize","info","clearAll","linkReceived","url","parts","split","length","prevValue","linkTracker","eventUrlPrefix","chatState","roomState","notifier","current","scrollToRow","height","width","rowHeight","event"],"mappings":"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","sourcesContent":["import { ILinkEventTracker } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { AutoSizer, CellMeasurer, CellMeasurerCache, List, ListRowProps, ListRowRenderer, Size } from 'react-virtualized';\nimport { AddEventLinkTracker, RemoveLinkEventTracker } from '../../api';\nimport { Column, Flex, NitroCardContentView, Text } from '../../common';\nimport { ChatHistoryContextProvider } from './ChatHistoryContext';\nimport { ChatHistoryMessageHandler } from './ChatHistoryMessageHandler';\nimport { ChatEntryType } from './common/ChatEntryType';\nimport { ChatHistoryState } from './common/ChatHistoryState';\nimport { SetChatHistory } from './common/GetChatHistory';\nimport { RoomHistoryState } from './common/RoomHistoryState';\n\nexport const ChatHistoryView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const [ chatHistoryUpdateId, setChatHistoryUpdateId ] = useState(-1);\n    const [ roomHistoryUpdateId, setRoomHistoryUpdateId ] = useState(-1);\n    const [ chatHistoryState, setChatHistoryState ] = useState(new ChatHistoryState());\n    const [ roomHistoryState, setRoomHistoryState ] = useState(new RoomHistoryState());\n    const elementRef = useRef<List>(null);\n\n    const cache = useMemo(() => new CellMeasurerCache({ defaultHeight: 25, fixedWidth: true }), []);\n\n    const RowRenderer: ListRowRenderer = (props: ListRowProps) =>\n    {\n        const item = chatHistoryState.chats[props.index];\n\n        const isDark = (props.index % 2 === 0);\n\n        return (\n            <CellMeasurer cache={ cache } columnIndex={ 0 } key={ props.key } parent={ props.parent } rowIndex={ props.index }>\n                <Flex key={ props.key } style={ props.style } className=\"p-1\" gap={ 1 }>\n                    <Text variant=\"muted\">{ item.timestamp }</Text>\n                    { (item.type === ChatEntryType.TYPE_CHAT) &&\n                        <>\n                            <Text pointer noWrap dangerouslySetInnerHTML={ { __html: (item.name + ':') } } />\n                            <Text textBreak wrap grow>{ item.message }</Text>\n                        </> }\n                    { (item.type === ChatEntryType.TYPE_ROOM_INFO) &&\n                        <>\n                            <i className=\"icon icon-small-room\" />\n                            <Text variant=\"danger\" textBreak wrap grow>{ item.name }</Text>\n                        </> }\n                </Flex>\n            </CellMeasurer>\n        );\n    };\n\n    const onResize = (info: Size) => cache.clearAll();\n\n    const linkReceived = useCallback((url: string) =>\n    {\n        const parts = url.split('/');\n\n        if(parts.length < 2) return;\n\n        switch(parts[1])\n        {\n            case 'show':\n                setIsVisible(true);\n                return;\n            case 'hide':\n                setIsVisible(false);\n                return;\n            case 'toggle':\n                setIsVisible(prevValue => !prevValue);\n                return;\n        }\n    }, []);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived,\n            eventUrlPrefix: 'chat-history/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, [ linkReceived ]);\n\n    useEffect(() =>\n    {\n        const chatState = new ChatHistoryState();\n        const roomState = new RoomHistoryState();\n\n        SetChatHistory(chatState);\n\n        chatState.notifier = () => setChatHistoryUpdateId(prevValue => (prevValue + 1));\n        roomState.notifier = () => setRoomHistoryUpdateId(prevValue => (prevValue + 1));\n\n        setChatHistoryState(chatState);\n        setRoomHistoryState(roomState);\n\n        return () =>\n        {\n            chatState.notifier = null;\n            roomState.notifier = null;\n        };\n    }, []);\n\n    useEffect(() =>\n    {\n        if(elementRef && elementRef.current && isVisible) elementRef.current.scrollToRow(-1);\n    }, [ isVisible ]);\n\n    return (\n        <ChatHistoryContextProvider value={ { chatHistoryState, roomHistoryState } }>\n            <ChatHistoryMessageHandler />\n            { isVisible &&\n                <Flex gap={ 2 } className=\"nitro-chat-history\">\n                    <Column className=\"chat-history-content h-100\">\n                        <Column className=\"h-100\">\n                            <AutoSizer defaultWidth={ 300 } defaultHeight={ 200 } onResize={ onResize }>\n                                { ({ height, width }) => \n                                {\n                                    return (\n                                        <List\n                                            ref={ elementRef }\n                                            width={ width }\n                                            height={ height }\n                                            rowCount={ chatHistoryState.chats.length }\n                                            rowHeight={ cache.rowHeight }\n                                            className={ 'chat-history-list' }\n                                            rowRenderer={ RowRenderer }\n                                            deferredMeasurementCache={ cache } />\n                                    )\n                                } }\n                            </AutoSizer>\n                        </Column>\n                    </Column>\n                    <Flex className=\"chat-toggle\" onClick={ event => setIsVisible(false) } />\n                </Flex>\n            }\n        </ChatHistoryContextProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}