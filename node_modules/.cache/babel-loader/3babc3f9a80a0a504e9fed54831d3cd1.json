{"ast":null,"code":"export class RoomOccupiedTilesMessageParser {\n  constructor() {\n    this._blockedTilesMap = void 0;\n  }\n\n  flush() {\n    this._blockedTilesMap = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n    let tilesCount = wrapper.readInt();\n\n    while (tilesCount > 0) {\n      const x = wrapper.readInt();\n      const y = wrapper.readInt();\n      if (!this._blockedTilesMap[y]) this._blockedTilesMap[y] = [];\n      this._blockedTilesMap[y][x] = true;\n      tilesCount--;\n    }\n\n    return true;\n  }\n\n  get blockedTilesMap() {\n    return this._blockedTilesMap;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/room/mapping/RoomOccupiedTilesMessageParser.ts"],"names":["RoomOccupiedTilesMessageParser","_blockedTilesMap","flush","parse","wrapper","tilesCount","readInt","x","y","blockedTilesMap"],"mappings":"AAEA,OAAO,MAAMA,8BAAN,CACP;AAAA;AAAA,SACYC,gBADZ;AAAA;;AAGWC,EAAAA,KAAK,GACZ;AACI,SAAKD,gBAAL,GAAwB,EAAxB;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;AAEb,QAAIC,UAAU,GAAGD,OAAO,CAACE,OAAR,EAAjB;;AAEA,WAAMD,UAAU,GAAG,CAAnB,EACA;AACI,YAAME,CAAC,GAAGH,OAAO,CAACE,OAAR,EAAV;AACA,YAAME,CAAC,GAAGJ,OAAO,CAACE,OAAR,EAAV;AAEA,UAAG,CAAC,KAAKL,gBAAL,CAAsBO,CAAtB,CAAJ,EAA8B,KAAKP,gBAAL,CAAsBO,CAAtB,IAA2B,EAA3B;AAE9B,WAAKP,gBAAL,CAAsBO,CAAtB,EAAyBD,CAAzB,IAA8B,IAA9B;AAEAF,MAAAA,UAAU;AACb;;AAED,WAAO,IAAP;AACH;;AAEyB,MAAfI,eAAe,GAC1B;AACI,WAAO,KAAKR,gBAAZ;AACH;;AAlCL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\n\r\nexport class RoomOccupiedTilesMessageParser implements IMessageParser\r\n{\r\n    private _blockedTilesMap: boolean[][];\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._blockedTilesMap = [];\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        let tilesCount = wrapper.readInt();\r\n\r\n        while(tilesCount > 0)\r\n        {\r\n            const x = wrapper.readInt();\r\n            const y = wrapper.readInt();\r\n\r\n            if(!this._blockedTilesMap[y]) this._blockedTilesMap[y] = [];\r\n\r\n            this._blockedTilesMap[y][x] = true;\r\n\r\n            tilesCount--;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get blockedTilesMap(): boolean[][]\r\n    {\r\n        return this._blockedTilesMap;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}