{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/floorplan-editor/FloorplanEditorView.tsx\",\n    _s = $RefreshSig$();\n\nimport { FloorHeightMapEvent, NitroPoint, RoomEngineEvent, RoomVisualizationSettingsEvent, UpdateFloorPropertiesMessageComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, LocalizeText, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { Button, ButtonGroup, Flex, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../common';\nimport { UseMessageEventHook, UseRoomEngineEvent } from '../../hooks';\nimport { FloorplanEditor } from './common/FloorplanEditor';\nimport { convertNumbersForSaving, convertSettingToNumber } from './common/Utils';\nimport { FloorplanEditorContextProvider } from './FloorplanEditorContext';\nimport { FloorplanCanvasView } from './views/FloorplanCanvasView';\nimport { FloorplanImportExportView } from './views/FloorplanImportExportView';\nimport { FloorplanOptionsView } from './views/FloorplanOptionsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FloorplanEditorView = props => {\n  _s();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [importExportVisible, setImportExportVisible] = useState(false);\n  const [originalFloorplanSettings, setOriginalFloorplanSettings] = useState({\n    tilemap: '',\n    reservedTiles: [],\n    entryPoint: [0, 0],\n    entryPointDir: 2,\n    wallHeight: -1,\n    thicknessWall: 1,\n    thicknessFloor: 1\n  });\n  const [visualizationSettings, setVisualizationSettings] = useState({\n    entryPointDir: 2,\n    wallHeight: -1,\n    thicknessWall: 1,\n    thicknessFloor: 1\n  });\n\n  const saveFloorChanges = () => {\n    SendMessageComposer(new UpdateFloorPropertiesMessageComposer(FloorplanEditor.instance.getCurrentTilemapString(), FloorplanEditor.instance.doorLocation.x, FloorplanEditor.instance.doorLocation.y, visualizationSettings.entryPointDir, convertNumbersForSaving(visualizationSettings.thicknessWall), convertNumbersForSaving(visualizationSettings.thicknessFloor), visualizationSettings.wallHeight - 1));\n  };\n\n  const revertChanges = () => {\n    setVisualizationSettings({\n      wallHeight: originalFloorplanSettings.wallHeight,\n      thicknessWall: originalFloorplanSettings.thicknessWall,\n      thicknessFloor: originalFloorplanSettings.thicknessFloor,\n      entryPointDir: originalFloorplanSettings.entryPointDir\n    });\n    FloorplanEditor.instance.doorLocation = new NitroPoint(originalFloorplanSettings.entryPoint[0], originalFloorplanSettings.entryPoint[1]);\n    FloorplanEditor.instance.setTilemap(originalFloorplanSettings.tilemap, originalFloorplanSettings.reservedTiles);\n    FloorplanEditor.instance.renderTiles();\n  };\n\n  const onRoomEngineEvent = useCallback(event => {\n    setIsVisible(false);\n  }, []);\n  UseRoomEngineEvent(RoomEngineEvent.DISPOSED, onRoomEngineEvent);\n  const onFloorHeightMapEvent = useCallback(event => {\n    const parser = event.getParser();\n    setOriginalFloorplanSettings(prevValue => {\n      const newValue = { ...prevValue\n      };\n      newValue.tilemap = parser.model;\n      newValue.wallHeight = parser.wallHeight + 1;\n      return newValue;\n    });\n    setVisualizationSettings(prevValue => {\n      const newValue = { ...prevValue\n      };\n      newValue.wallHeight = parser.wallHeight + 1;\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(FloorHeightMapEvent, onFloorHeightMapEvent);\n  const onRoomVisualizationSettingsEvent = useCallback(event => {\n    const parser = event.getParser();\n    setOriginalFloorplanSettings(prevValue => {\n      const newValue = { ...prevValue\n      };\n      newValue.thicknessFloor = convertSettingToNumber(parser.thicknessFloor);\n      newValue.thicknessWall = convertSettingToNumber(parser.thicknessWall);\n      return newValue;\n    });\n    setVisualizationSettings(prevValue => {\n      const newValue = { ...prevValue\n      };\n      newValue.thicknessFloor = convertSettingToNumber(parser.thicknessFloor);\n      newValue.thicknessWall = convertSettingToNumber(parser.thicknessWall);\n      return newValue;\n    });\n  }, []);\n  UseMessageEventHook(RoomVisualizationSettingsEvent, onRoomVisualizationSettingsEvent);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived: url => {\n        const parts = url.split('/');\n        if (parts.length < 2) return;\n\n        switch (parts[1]) {\n          case 'show':\n            setIsVisible(true);\n            return;\n\n          case 'hide':\n            setIsVisible(false);\n            return;\n\n          case 'toggle':\n            setIsVisible(prevValue => !prevValue);\n            return;\n        }\n      },\n      eventUrlPrefix: 'floor-editor/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, []);\n  useEffect(() => {\n    FloorplanEditor.instance.initialize();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(FloorplanEditorContextProvider, {\n    value: {\n      originalFloorplanSettings: originalFloorplanSettings,\n      setOriginalFloorplanSettings: setOriginalFloorplanSettings,\n      visualizationSettings: visualizationSettings,\n      setVisualizationSettings: setVisualizationSettings\n    },\n    children: [isVisible && /*#__PURE__*/_jsxDEV(NitroCardView, {\n      uniqueKey: \"floorpan-editor\",\n      className: \"nitro-floorplan-editor\",\n      theme: \"primary\",\n      children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n        headerText: LocalizeText('floor.plan.editor.title'),\n        onCloseClick: () => setIsVisible(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n        overflow: \"hidden\",\n        children: [/*#__PURE__*/_jsxDEV(FloorplanOptionsView, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FloorplanCanvasView, {\n          overflow: \"hidden\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"between\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: revertChanges,\n            children: LocalizeText('floor.plan.editor.reload')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              disabled: true,\n              children: LocalizeText('floor.plan.editor.preview')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: event => setImportExportVisible(true),\n              children: LocalizeText('floor.plan.editor.import.export')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: saveFloorChanges,\n              children: LocalizeText('floor.plan.editor.save')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }, this), importExportVisible && /*#__PURE__*/_jsxDEV(FloorplanImportExportView, {\n      onCloseClick: () => setImportExportVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FloorplanEditorView, \"2BvzmBmM2hLJ5ouI3D7i9VYJssU=\");\n\n_c = FloorplanEditorView;\n\nvar _c;\n\n$RefreshReg$(_c, \"FloorplanEditorView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/floorplan-editor/FloorplanEditorView.tsx"],"names":["FloorHeightMapEvent","NitroPoint","RoomEngineEvent","RoomVisualizationSettingsEvent","UpdateFloorPropertiesMessageComposer","useCallback","useEffect","useState","AddEventLinkTracker","LocalizeText","RemoveLinkEventTracker","SendMessageComposer","Button","ButtonGroup","Flex","NitroCardContentView","NitroCardHeaderView","NitroCardView","UseMessageEventHook","UseRoomEngineEvent","FloorplanEditor","convertNumbersForSaving","convertSettingToNumber","FloorplanEditorContextProvider","FloorplanCanvasView","FloorplanImportExportView","FloorplanOptionsView","FloorplanEditorView","props","isVisible","setIsVisible","importExportVisible","setImportExportVisible","originalFloorplanSettings","setOriginalFloorplanSettings","tilemap","reservedTiles","entryPoint","entryPointDir","wallHeight","thicknessWall","thicknessFloor","visualizationSettings","setVisualizationSettings","saveFloorChanges","instance","getCurrentTilemapString","doorLocation","x","y","revertChanges","setTilemap","renderTiles","onRoomEngineEvent","event","DISPOSED","onFloorHeightMapEvent","parser","getParser","prevValue","newValue","model","onRoomVisualizationSettingsEvent","linkTracker","linkReceived","url","parts","split","length","eventUrlPrefix","initialize"],"mappings":"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","sourcesContent":["import { FloorHeightMapEvent, ILinkEventTracker, NitroPoint, RoomEngineEvent, RoomVisualizationSettingsEvent, UpdateFloorPropertiesMessageComposer } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, LocalizeText, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { Button, ButtonGroup, Flex, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../common';\nimport { UseMessageEventHook, UseRoomEngineEvent } from '../../hooks';\nimport { FloorplanEditor } from './common/FloorplanEditor';\nimport { IFloorplanSettings } from './common/IFloorplanSettings';\nimport { IVisualizationSettings } from './common/IVisualizationSettings';\nimport { convertNumbersForSaving, convertSettingToNumber } from './common/Utils';\nimport { FloorplanEditorContextProvider } from './FloorplanEditorContext';\nimport { FloorplanCanvasView } from './views/FloorplanCanvasView';\nimport { FloorplanImportExportView } from './views/FloorplanImportExportView';\nimport { FloorplanOptionsView } from './views/FloorplanOptionsView';\n\nexport const FloorplanEditorView: FC<{}> = props =>\n{\n    const [ isVisible, setIsVisible ] = useState(false);\n    const [ importExportVisible, setImportExportVisible ] = useState(false);\n    const [ originalFloorplanSettings, setOriginalFloorplanSettings ] = useState<IFloorplanSettings>({\n        tilemap: '',\n        reservedTiles: [],\n        entryPoint: [ 0, 0 ],\n        entryPointDir: 2,\n        wallHeight: -1,\n        thicknessWall: 1,\n        thicknessFloor: 1\n    });\n    const [ visualizationSettings, setVisualizationSettings ] = useState<IVisualizationSettings>({\n        entryPointDir: 2,\n        wallHeight: -1,\n        thicknessWall: 1,\n        thicknessFloor: 1\n    });\n\n    const saveFloorChanges = () =>\n    {\n        SendMessageComposer(new UpdateFloorPropertiesMessageComposer(\n            FloorplanEditor.instance.getCurrentTilemapString(),\n            FloorplanEditor.instance.doorLocation.x,\n            FloorplanEditor.instance.doorLocation.y,\n            visualizationSettings.entryPointDir,\n            convertNumbersForSaving(visualizationSettings.thicknessWall),\n            convertNumbersForSaving(visualizationSettings.thicknessFloor),\n            (visualizationSettings.wallHeight - 1)\n        ));\n    }\n\n    const revertChanges = () =>\n    {\n        setVisualizationSettings({ wallHeight: originalFloorplanSettings.wallHeight, thicknessWall: originalFloorplanSettings.thicknessWall, thicknessFloor: originalFloorplanSettings.thicknessFloor, entryPointDir: originalFloorplanSettings.entryPointDir });\n        \n        FloorplanEditor.instance.doorLocation = new NitroPoint(originalFloorplanSettings.entryPoint[0], originalFloorplanSettings.entryPoint[1]);\n        FloorplanEditor.instance.setTilemap(originalFloorplanSettings.tilemap, originalFloorplanSettings.reservedTiles);\n        FloorplanEditor.instance.renderTiles();\n    }\n\n    const onRoomEngineEvent = useCallback((event: RoomEngineEvent) =>\n    {\n        setIsVisible(false);\n    }, []);\n\n    UseRoomEngineEvent(RoomEngineEvent.DISPOSED, onRoomEngineEvent);\n\n    const onFloorHeightMapEvent = useCallback((event: FloorHeightMapEvent) =>\n    {\n        const parser = event.getParser();\n\n        setOriginalFloorplanSettings(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            newValue.tilemap = parser.model;\n            newValue.wallHeight = (parser.wallHeight + 1);\n\n            return newValue;\n        });\n\n        setVisualizationSettings(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            newValue.wallHeight = (parser.wallHeight + 1);\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(FloorHeightMapEvent, onFloorHeightMapEvent);\n\n    const onRoomVisualizationSettingsEvent = useCallback((event: RoomVisualizationSettingsEvent) =>\n    {\n        const parser = event.getParser();\n\n        setOriginalFloorplanSettings(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            newValue.thicknessFloor = convertSettingToNumber(parser.thicknessFloor);\n            newValue.thicknessWall = convertSettingToNumber(parser.thicknessWall);\n\n            return newValue;\n        });\n\n        setVisualizationSettings(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            newValue.thicknessFloor = convertSettingToNumber(parser.thicknessFloor);\n            newValue.thicknessWall = convertSettingToNumber(parser.thicknessWall);\n\n            return newValue;\n        });\n    }, []);\n\n    UseMessageEventHook(RoomVisualizationSettingsEvent, onRoomVisualizationSettingsEvent);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived: (url: string) =>\n            {\n                const parts = url.split('/');\n\n                if(parts.length < 2) return;\n        \n                switch(parts[1])\n                {\n                    case 'show':\n                        setIsVisible(true);\n                        return;\n                    case 'hide':\n                        setIsVisible(false);\n                        return;\n                    case 'toggle':\n                        setIsVisible(prevValue => !prevValue);\n                        return;\n                }\n            },\n            eventUrlPrefix: 'floor-editor/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, []);\n\n    useEffect(() =>\n    {\n        FloorplanEditor.instance.initialize();\n    }, []);\n\n    return (\n        <FloorplanEditorContextProvider value={ { originalFloorplanSettings: originalFloorplanSettings, setOriginalFloorplanSettings: setOriginalFloorplanSettings, visualizationSettings: visualizationSettings, setVisualizationSettings: setVisualizationSettings } }>\n            { isVisible &&\n                <NitroCardView uniqueKey=\"floorpan-editor\" className=\"nitro-floorplan-editor\" theme=\"primary\">\n                    <NitroCardHeaderView headerText={ LocalizeText('floor.plan.editor.title') } onCloseClick={ () => setIsVisible(false) } />\n                    <NitroCardContentView overflow=\"hidden\">\n                        <FloorplanOptionsView />\n                        <FloorplanCanvasView overflow=\"hidden\" />\n                        <Flex justifyContent=\"between\">\n                            <Button onClick={ revertChanges }>{ LocalizeText('floor.plan.editor.reload') }</Button>\n                            <ButtonGroup>\n                                <Button disabled={ true }>{ LocalizeText('floor.plan.editor.preview') }</Button>\n                                <Button onClick={ event => setImportExportVisible(true) }>{ LocalizeText('floor.plan.editor.import.export') }</Button>\n                                <Button onClick={ saveFloorChanges }>{ LocalizeText('floor.plan.editor.save') }</Button>\n                            </ButtonGroup>\n                        </Flex>\n                    </NitroCardContentView>\n                </NitroCardView> }\n            { importExportVisible &&\n                <FloorplanImportExportView onCloseClick={ () => setImportExportVisible(false) } /> }\n        </FloorplanEditorContextProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}