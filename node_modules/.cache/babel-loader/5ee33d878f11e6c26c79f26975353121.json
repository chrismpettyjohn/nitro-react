{"ast":null,"code":"import { NitroManager } from '../../core/common/NitroManager';\nimport { SocketConnectionEvent } from '../../core/communication/events/SocketConnectionEvent';\nimport { Nitro } from '../Nitro';\nimport { NitroCommunicationDemo } from './demo/NitroCommunicationDemo';\nimport { NitroCommunicationDemoEvent } from './demo/NitroCommunicationDemoEvent';\nimport { NitroMessages } from './NitroMessages';\nexport class NitroCommunicationManager extends NitroManager {\n  constructor(communication) {\n    super();\n    this._communication = void 0;\n    this._connection = void 0;\n    this._messages = void 0;\n    this._demo = void 0;\n    this._communication = communication;\n    this._connection = null;\n    this._messages = new NitroMessages();\n    this._demo = new NitroCommunicationDemo(this);\n    this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this);\n    this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this);\n    this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this);\n    this.onConnectionAuthenticatedEvent = this.onConnectionAuthenticatedEvent.bind(this);\n  }\n\n  onInit() {\n    if (this._connection) return;\n    Nitro.instance.events.addEventListener(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent);\n    this._connection = this._communication.createConnection(this);\n\n    this._connection.registerMessages(this._messages);\n\n    this._connection.addEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\n\n    this._connection.addEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\n\n    this._connection.addEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\n\n    if (this._demo) this._demo.init();\n\n    this._connection.init(Nitro.instance.getConfiguration('socket.url'));\n  }\n\n  onDispose() {\n    if (this._demo) this._demo.dispose();\n\n    if (this._connection) {\n      this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\n\n      this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\n\n      this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\n    }\n\n    Nitro.instance.events.removeEventListener(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent);\n    super.onDispose();\n  }\n\n  onConnectionOpenedEvent(event) {\n    this.logger.log('Connection Initialized');\n  }\n\n  onConnectionClosedEvent(event) {\n    this.logger.log('Connection Closed');\n  }\n\n  onConnectionErrorEvent(event) {\n    this.logger.log('Connection Error');\n  }\n\n  onConnectionAuthenticatedEvent(event) {\n    this.logger.log('Connection Authenticated');\n    if (this._connection) this._connection.authenticated();\n  }\n\n  connectionInit(socketUrl) {\n    this.logger.log(`Initializing Connection: ${socketUrl}`);\n  }\n\n  registerMessageEvent(event) {\n    if (this._connection) this._connection.addMessageEvent(event);\n    return event;\n  }\n\n  removeMessageEvent(event) {\n    if (!this._connection) return;\n\n    this._connection.removeMessageEvent(event);\n  }\n\n  get demo() {\n    return this._demo;\n  }\n\n  get connection() {\n    return this._connection;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/NitroCommunicationManager.ts"],"names":["NitroManager","SocketConnectionEvent","Nitro","NitroCommunicationDemo","NitroCommunicationDemoEvent","NitroMessages","NitroCommunicationManager","constructor","communication","_communication","_connection","_messages","_demo","onConnectionOpenedEvent","bind","onConnectionClosedEvent","onConnectionErrorEvent","onConnectionAuthenticatedEvent","onInit","instance","events","addEventListener","CONNECTION_AUTHENTICATED","createConnection","registerMessages","CONNECTION_OPENED","CONNECTION_CLOSED","CONNECTION_ERROR","init","getConfiguration","onDispose","dispose","removeEventListener","event","logger","log","authenticated","connectionInit","socketUrl","registerMessageEvent","addMessageEvent","removeMessageEvent","demo","connection"],"mappings":"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","sourcesContent":["import { IMessageEvent } from '../../core';\r\nimport { NitroManager } from '../../core/common/NitroManager';\r\nimport { IConnection } from '../../core/communication/connections/IConnection';\r\nimport { IConnectionStateListener } from '../../core/communication/connections/IConnectionStateListener';\r\nimport { SocketConnectionEvent } from '../../core/communication/events/SocketConnectionEvent';\r\nimport { ICommunicationManager } from '../../core/communication/ICommunicationManager';\r\nimport { IMessageConfiguration } from '../../core/communication/messages/IMessageConfiguration';\r\nimport { NitroEvent } from '../../core/events/NitroEvent';\r\nimport { Nitro } from '../Nitro';\r\nimport { NitroCommunicationDemo } from './demo/NitroCommunicationDemo';\r\nimport { NitroCommunicationDemoEvent } from './demo/NitroCommunicationDemoEvent';\r\nimport { INitroCommunicationManager } from './INitroCommunicationManager';\r\nimport { NitroMessages } from './NitroMessages';\r\n\r\nexport class NitroCommunicationManager extends NitroManager implements INitroCommunicationManager, IConnectionStateListener\r\n{\r\n    private _communication: ICommunicationManager;\r\n    private _connection: IConnection;\r\n    private _messages: IMessageConfiguration;\r\n\r\n    private _demo: NitroCommunicationDemo;\r\n\r\n    constructor(communication: ICommunicationManager)\r\n    {\r\n        super();\r\n\r\n        this._communication = communication;\r\n        this._connection = null;\r\n        this._messages = new NitroMessages();\r\n\r\n        this._demo = new NitroCommunicationDemo(this);\r\n\r\n        this.onConnectionOpenedEvent = this.onConnectionOpenedEvent.bind(this);\r\n        this.onConnectionClosedEvent = this.onConnectionClosedEvent.bind(this);\r\n        this.onConnectionErrorEvent = this.onConnectionErrorEvent.bind(this);\r\n        this.onConnectionAuthenticatedEvent = this.onConnectionAuthenticatedEvent.bind(this);\r\n    }\r\n\r\n    protected onInit(): void\r\n    {\r\n        if(this._connection) return;\r\n\r\n        Nitro.instance.events.addEventListener(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent);\r\n\r\n        this._connection = this._communication.createConnection(this);\r\n\r\n        this._connection.registerMessages(this._messages);\r\n\r\n        this._connection.addEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\r\n        this._connection.addEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\r\n        this._connection.addEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\r\n\r\n        if(this._demo) this._demo.init();\r\n\r\n        this._connection.init(Nitro.instance.getConfiguration<string>('socket.url'));\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        if(this._demo) this._demo.dispose();\r\n\r\n        if(this._connection)\r\n        {\r\n            this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_OPENED, this.onConnectionOpenedEvent);\r\n            this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_CLOSED, this.onConnectionClosedEvent);\r\n            this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_ERROR, this.onConnectionErrorEvent);\r\n        }\r\n\r\n        Nitro.instance.events.removeEventListener(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, this.onConnectionAuthenticatedEvent);\r\n\r\n        super.onDispose();\r\n    }\r\n\r\n    private onConnectionOpenedEvent(event: Event): void\r\n    {\r\n        this.logger.log('Connection Initialized');\r\n    }\r\n\r\n    private onConnectionClosedEvent(event: CloseEvent): void\r\n    {\r\n        this.logger.log('Connection Closed');\r\n    }\r\n\r\n    private onConnectionErrorEvent(event: Event): void\r\n    {\r\n        this.logger.log('Connection Error');\r\n    }\r\n\r\n    private onConnectionAuthenticatedEvent(event: NitroEvent): void\r\n    {\r\n        this.logger.log('Connection Authenticated');\r\n\r\n        if(this._connection) this._connection.authenticated();\r\n    }\r\n\r\n    public connectionInit(socketUrl: string): void\r\n    {\r\n        this.logger.log(`Initializing Connection: ${ socketUrl }`);\r\n    }\r\n\r\n    public registerMessageEvent(event: IMessageEvent): IMessageEvent\r\n    {\r\n        if(this._connection) this._connection.addMessageEvent(event);\r\n\r\n        return event;\r\n    }\r\n\r\n    public removeMessageEvent(event: IMessageEvent): void\r\n    {\r\n        if(!this._connection) return;\r\n\r\n        this._connection.removeMessageEvent(event);\r\n    }\r\n\r\n    public get demo(): NitroCommunicationDemo\r\n    {\r\n        return this._demo;\r\n    }\r\n\r\n    public get connection(): IConnection\r\n    {\r\n        return this._connection;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}