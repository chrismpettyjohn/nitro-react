{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { Matrix, Point, Rectangle } from '@pixi/math';\nimport { NitroContainer, NitroSprite } from '../../../core';\nimport { RoomObjectSpriteData } from '../../../room/data/RoomObjectSpriteData';\nimport { Nitro } from '../../Nitro';\nimport { AvatarAnimationLayerData } from '../animation/AvatarAnimationLayerData';\nimport { AvatarImageBodyPartContainer } from '../AvatarImageBodyPartContainer';\nimport { AvatarDirectionAngle } from '../enum/AvatarDirectionAngle';\nimport { AvatarFigurePartType } from '../enum/AvatarFigurePartType';\nimport { AvatarScaleType } from '../enum/AvatarScaleType';\nimport { GeometryType } from '../enum/GeometryType';\nimport { AvatarImageActionCache } from './AvatarImageActionCache';\nimport { AvatarImageBodyPartCache } from './AvatarImageBodyPartCache';\nimport { AvatarImageDirectionCache } from './AvatarImageDirectionCache';\nimport { ImageData } from './ImageData';\nexport class AvatarImageCache {\n  constructor(k, _arg_2, _arg_3, _arg_4) {\n    this._structure = void 0;\n    this._avatar = void 0;\n    this._assets = void 0;\n    this._scale = void 0;\n    this._cache = void 0;\n    this._canvas = void 0;\n    this._disposed = void 0;\n    this._geometryType = void 0;\n    this._unionImages = void 0;\n    this._matrix = void 0;\n    this._serverRenderData = void 0;\n    this._structure = k;\n    this._avatar = _arg_2;\n    this._assets = _arg_3;\n    this._scale = _arg_4;\n    this._cache = new Map();\n    this._canvas = null;\n    this._disposed = false;\n    this._unionImages = [];\n    this._matrix = new Matrix();\n    this._serverRenderData = [];\n  }\n\n  dispose() {\n    if (this._disposed) return;\n    this._structure = null;\n    this._avatar = null;\n    this._assets = null;\n    this._canvas = null;\n    this._disposed = true;\n\n    if (this._cache) {\n      for (const cache of this._cache.values()) {\n        if (!cache) continue;\n        cache.dispose();\n      }\n\n      this._cache = null;\n    }\n\n    if (this._unionImages) {\n      for (const image of this._unionImages) {\n        if (!image) continue;\n        image.dispose();\n      }\n\n      this._unionImages = [];\n    }\n  }\n\n  disposeInactiveActions() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60000;\n    const time = Nitro.instance.time;\n\n    if (this._cache) {\n      for (const cache of this._cache.values()) {\n        if (!cache) continue;\n        cache.disposeActions(k, time);\n      }\n    }\n  }\n\n  resetBodyPartCache(k) {\n    if (this._cache) {\n      for (const cache of this._cache.values()) {\n        if (!cache) continue;\n        cache.setAction(k, 0);\n      }\n    }\n  }\n\n  setDirection(k, _arg_2) {\n    const parts = this._structure.getBodyPartsUnordered(k);\n\n    if (parts) {\n      for (const part of parts) {\n        const actionCache = this.getBodyPartCache(part);\n        if (!actionCache) continue;\n        actionCache.setDirection(_arg_2);\n      }\n    }\n  }\n\n  setAction(k, _arg_2) {\n    const _local_3 = this._structure.getActiveBodyPartIds(k, this._avatar);\n\n    for (const _local_4 of _local_3) {\n      const _local_5 = this.getBodyPartCache(_local_4);\n\n      if (_local_5) _local_5.setAction(k, _arg_2);\n    }\n  }\n\n  setGeometryType(k) {\n    if (this._geometryType === k) return;\n\n    if (this._geometryType === GeometryType.SITTING && k === GeometryType.VERTICAL || this._geometryType === GeometryType.VERTICAL && k === GeometryType.SITTING || this._geometryType === GeometryType.SNOWWARS_HORIZONTAL && (k = GeometryType.SNOWWARS_HORIZONTAL)) {\n      this._geometryType = k;\n      this._canvas = null;\n      return;\n    }\n\n    this.disposeInactiveActions(0);\n    this._geometryType = k;\n    this._canvas = null;\n  }\n\n  getImageContainer(k, frameNumber) {\n    let _arg_3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    let _local_4 = this.getBodyPartCache(k);\n\n    if (!_local_4) {\n      _local_4 = new AvatarImageBodyPartCache();\n\n      this._cache.set(k, _local_4);\n    }\n\n    let _local_5 = _local_4.getDirection();\n\n    let _local_7 = _local_4.getAction();\n\n    let frameCount = frameNumber;\n    if (_local_7.definition.startFromFrameZero) frameCount -= _local_7.startFrame;\n    let _local_8 = _local_7;\n    let _local_9 = [];\n\n    let _local_10 = new Map();\n\n    const _local_11 = new Point();\n\n    if (!(!_local_7 || !_local_7.definition)) {\n      if (_local_7.definition.isAnimation) {\n        let _local_15 = _local_5;\n\n        const _local_16 = this._structure.getAnimation(_local_7.definition.state + '.' + _local_7.actionParameter);\n\n        const _local_17 = frameNumber - _local_7.startFrame;\n\n        if (_local_16) {\n          const _local_18 = _local_16.getLayerData(_local_17, k, _local_7.overridingAction);\n\n          if (_local_18) {\n            _local_15 = _local_5 + _local_18.dd;\n\n            if (_local_18.dd < 0) {\n              if (_local_15 < 0) {\n                _local_15 = 8 + _local_15;\n              } else if (_local_15 > 7) _local_15 = 8 - _local_15;\n            } else {\n              if (_local_15 < 0) {\n                _local_15 = _local_15 + 8;\n              } else if (_local_15 > 7) _local_15 = _local_15 - 8;\n            }\n\n            if (this._scale === AvatarScaleType.LARGE) {\n              _local_11.x = _local_18.dx;\n              _local_11.y = _local_18.dy;\n            } else {\n              _local_11.x = _local_18.dx / 2;\n              _local_11.y = _local_18.dy / 2;\n            }\n\n            frameCount = _local_18.animationFrame;\n\n            if (_local_18.action) {\n              _local_7 = _local_18.action;\n            }\n\n            if (_local_18.type === AvatarAnimationLayerData.BODYPART) {\n              if (_local_18.action != null) {\n                _local_8 = _local_18.action;\n              }\n\n              _local_5 = _local_15;\n            } else if (_local_18.type === AvatarAnimationLayerData.FX) _local_5 = _local_15;\n\n            _local_10 = _local_18.items;\n          }\n\n          _local_9 = _local_16.removeData;\n        }\n      }\n    }\n\n    let _local_12 = _local_4.getActionCache(_local_8);\n\n    if (!_local_12 || _arg_3) {\n      _local_12 = new AvatarImageActionCache();\n\n      _local_4.updateActionCache(_local_8, _local_12);\n    }\n\n    let _local_13 = _local_12.getDirectionCache(_local_5);\n\n    if (!_local_13 || _arg_3) {\n      const _local_19 = this._structure.getParts(k, this._avatar.getFigure(), _local_8, this._geometryType, _local_5, _local_9, this._avatar, _local_10);\n\n      _local_13 = new AvatarImageDirectionCache(_local_19);\n\n      _local_12.updateDirectionCache(_local_5, _local_13);\n    }\n\n    let _local_14 = _local_13.getImageContainer(frameCount);\n\n    if (!_local_14 || _arg_3) {\n      const _local_20 = _local_13.getPartList();\n\n      _local_14 = this.renderBodyPart(_local_5, _local_20, frameCount, _local_7, _arg_3);\n\n      if (_local_14 && !_arg_3) {\n        if (_local_14.isCacheable) _local_13.updateImageContainer(_local_14, frameCount);\n      } else {\n        return null;\n      }\n    }\n\n    const offset = this._structure.getFrameBodyPartOffset(_local_8, _local_5, frameCount, k);\n\n    _local_11.x += offset.x;\n    _local_11.y += offset.y;\n    _local_14.offset = _local_11;\n    return _local_14;\n  }\n\n  getServerRenderData() {\n    this._serverRenderData = [];\n    return this._serverRenderData;\n  }\n\n  getBodyPartCache(k) {\n    let existing = this._cache.get(k);\n\n    if (!existing) {\n      existing = new AvatarImageBodyPartCache();\n\n      this._cache.set(k, existing);\n    }\n\n    return existing;\n  }\n\n  renderBodyPart(direction, containers, frameCount, _arg_4) {\n    let renderServerData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (!containers || !containers.length) return null;\n\n    if (!this._canvas) {\n      this._canvas = this._structure.getCanvas(this._scale, this._geometryType);\n      if (!this._canvas) return null;\n    }\n\n    const isFlipped = AvatarDirectionAngle.DIRECTION_IS_FLIPPED[direction] || false;\n    let assetPartDefinition = _arg_4.definition.assetPartDefinition;\n    let isCacheable = true;\n    let containerIndex = containers.length - 1;\n\n    while (containerIndex >= 0) {\n      const container = containers[containerIndex];\n      let color = 16777215;\n\n      if (!(direction == 7 && (container.partType === 'fc' || container.partType === 'ey'))) {\n        if (!(container.partType === 'ri' && !container.partId)) {\n          const partId = container.partId;\n          const animationFrame = container.getFrameDefinition(frameCount);\n          let partType = container.partType;\n          let frameNumber = 0;\n\n          if (animationFrame) {\n            frameNumber = animationFrame.number;\n            if (animationFrame.assetPartDefinition && animationFrame.assetPartDefinition !== '') assetPartDefinition = animationFrame.assetPartDefinition;\n          } else frameNumber = container.getFrameIndex(frameCount);\n\n          let assetDirection = direction;\n          let flipH = false;\n\n          if (isFlipped) {\n            if (assetPartDefinition === 'wav' && (partType === AvatarFigurePartType.LEFT_HAND || partType === AvatarFigurePartType.LEFT_SLEEVE || partType === AvatarFigurePartType.LEFT_COAT_SLEEVE) || assetPartDefinition === 'drk' && (partType === AvatarFigurePartType.RIGHT_HAND || partType === AvatarFigurePartType.RIGHT_SLEEVE || partType === AvatarFigurePartType.RIGHT_COAT_SLEEVE) || assetPartDefinition === 'blw' && partType === AvatarFigurePartType.RIGHT_HAND || assetPartDefinition === 'sig' && partType === AvatarFigurePartType.LEFT_HAND || assetPartDefinition === 'respect' && partType === AvatarFigurePartType.LEFT_HAND || partType === AvatarFigurePartType.RIGHT_HAND_ITEM || partType === AvatarFigurePartType.LEFT_HAND_ITEM || partType === AvatarFigurePartType.CHEST_PRINT) {\n              flipH = true;\n            } else {\n              if (direction === 4) assetDirection = 2;else if (direction === 5) assetDirection = 1;else if (direction === 6) assetDirection = 0;\n              if (container.flippedPartType !== partType) partType = container.flippedPartType;\n            }\n          }\n\n          let assetName = this._scale + '_' + assetPartDefinition + '_' + partType + '_' + partId + '_' + assetDirection + '_' + frameNumber;\n\n          let asset = this._assets.getAsset(assetName);\n\n          if (!asset) {\n            assetName = this._scale + '_std_' + partType + '_' + partId + '_' + assetDirection + '_0';\n            asset = this._assets.getAsset(assetName);\n          }\n\n          if (asset) {\n            const texture = asset.texture;\n\n            if (!texture || !texture.valid || !texture.baseTexture) {\n              isCacheable = false;\n            } else {\n              if (container.isColorable && container.color) color = container.color.rgb;\n              const offset = new Point(-asset.x, -asset.y);\n              if (flipH) offset.x = offset.x + (this._scale === AvatarScaleType.LARGE ? 65 : 31);\n\n              if (renderServerData) {\n                const spriteData = new RoomObjectSpriteData();\n                spriteData.name = this._assets.getAssetName(assetName);\n                spriteData.x = -offset.x - 33;\n                spriteData.y = -offset.y;\n                spriteData.z = this._serverRenderData.length * -0.0001;\n                spriteData.width = asset.rectangle.width;\n                spriteData.height = asset.rectangle.height;\n                spriteData.flipH = flipH;\n                if (assetPartDefinition === 'lay') spriteData.x = spriteData.x + 53;\n\n                if (isFlipped) {\n                  spriteData.flipH = !spriteData.flipH;\n                  if (spriteData.flipH) spriteData.x = -spriteData.x - texture.width;else spriteData.x = spriteData.x + 65;\n                }\n\n                if (container.isColorable) spriteData.color = `${color}`;\n\n                this._serverRenderData.push(spriteData);\n              }\n\n              this._unionImages.push(new ImageData(texture, asset.rectangle, offset, flipH, color));\n            }\n          }\n        }\n      }\n\n      containerIndex--;\n    }\n\n    if (!this._unionImages.length) return null;\n    const imageData = this.createUnionImage(this._unionImages, isFlipped);\n    const canvasOffset = this._scale === AvatarScaleType.LARGE ? this._canvas.height - 16 : this._canvas.height - 8;\n    const offset = new Point(-imageData.regPoint.x, canvasOffset - imageData.regPoint.y);\n    if (isFlipped && assetPartDefinition !== 'lay') offset.x = offset.x + (this._scale === AvatarScaleType.LARGE ? 67 : 31);\n    let imageIndex = this._unionImages.length - 1;\n\n    while (imageIndex >= 0) {\n      const _local_17 = this._unionImages.pop();\n\n      if (_local_17) _local_17.dispose();\n      imageIndex--;\n    }\n\n    return new AvatarImageBodyPartContainer(imageData.container, offset, isCacheable);\n  }\n\n  convertColorToHex(k) {\n    let _local_2 = (k * 0xFF).toString(16);\n\n    if (_local_2.length < 2) {\n      _local_2 = '0' + _local_2;\n    }\n\n    return _local_2;\n  }\n\n  createUnionImage(k, isFlipped) {\n    const bounds = new Rectangle();\n\n    for (const data of k) data && bounds.enlarge(data.offsetRect);\n\n    const point = new Point(-bounds.x, -bounds.y);\n    const container = new NitroContainer();\n    const sprite = new NitroSprite(Texture.EMPTY);\n    sprite.width = bounds.width;\n    sprite.height = bounds.height;\n    container.addChild(sprite);\n\n    for (const data of k) {\n      if (!data) continue;\n      const texture = data.texture;\n      const color = data.colorTransform;\n      const flipH = !(isFlipped && data.flipH) && (isFlipped || data.flipH);\n      const regPoint = point.clone();\n      regPoint.x -= data.regPoint.x;\n      regPoint.y -= data.regPoint.y;\n      if (isFlipped) regPoint.x = container.width - (regPoint.x + data.rect.width);\n\n      if (flipH) {\n        this._matrix.a = -1;\n        this._matrix.tx = data.rect.x + data.rect.width + regPoint.x;\n        this._matrix.ty = regPoint.y - data.rect.y;\n      } else {\n        this._matrix.a = 1;\n        this._matrix.tx = regPoint.x - data.rect.x;\n        this._matrix.ty = regPoint.y - data.rect.y;\n      }\n\n      const sprite = new NitroSprite(texture);\n      sprite.tint = color;\n      sprite.transform.setFromMatrix(this._matrix);\n      container.addChild(sprite);\n    }\n\n    return new ImageData(null, container.getLocalBounds(), point, isFlipped, null, container);\n  }\n\n}\nAvatarImageCache.DEFAULT_MAX_CACHE_STORAGE_TIME_MS = 60000;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/cache/AvatarImageCache.ts"],"names":["Texture","Matrix","Point","Rectangle","NitroContainer","NitroSprite","RoomObjectSpriteData","Nitro","AvatarAnimationLayerData","AvatarImageBodyPartContainer","AvatarDirectionAngle","AvatarFigurePartType","AvatarScaleType","GeometryType","AvatarImageActionCache","AvatarImageBodyPartCache","AvatarImageDirectionCache","ImageData","AvatarImageCache","constructor","k","_arg_2","_arg_3","_arg_4","_structure","_avatar","_assets","_scale","_cache","_canvas","_disposed","_geometryType","_unionImages","_matrix","_serverRenderData","Map","dispose","cache","values","image","disposeInactiveActions","time","instance","disposeActions","resetBodyPartCache","setAction","setDirection","parts","getBodyPartsUnordered","part","actionCache","getBodyPartCache","_local_3","getActiveBodyPartIds","_local_4","_local_5","setGeometryType","SITTING","VERTICAL","SNOWWARS_HORIZONTAL","getImageContainer","frameNumber","set","getDirection","_local_7","getAction","frameCount","definition","startFromFrameZero","startFrame","_local_8","_local_9","_local_10","_local_11","isAnimation","_local_15","_local_16","getAnimation","state","actionParameter","_local_17","_local_18","getLayerData","overridingAction","dd","LARGE","x","dx","y","dy","animationFrame","action","type","BODYPART","FX","items","removeData","_local_12","getActionCache","updateActionCache","_local_13","getDirectionCache","_local_19","getParts","getFigure","updateDirectionCache","_local_14","_local_20","getPartList","renderBodyPart","isCacheable","updateImageContainer","offset","getFrameBodyPartOffset","getServerRenderData","existing","get","direction","containers","renderServerData","length","getCanvas","isFlipped","DIRECTION_IS_FLIPPED","assetPartDefinition","containerIndex","container","color","partType","partId","getFrameDefinition","number","getFrameIndex","assetDirection","flipH","LEFT_HAND","LEFT_SLEEVE","LEFT_COAT_SLEEVE","RIGHT_HAND","RIGHT_SLEEVE","RIGHT_COAT_SLEEVE","RIGHT_HAND_ITEM","LEFT_HAND_ITEM","CHEST_PRINT","flippedPartType","assetName","asset","getAsset","texture","valid","baseTexture","isColorable","rgb","spriteData","name","getAssetName","z","width","rectangle","height","push","imageData","createUnionImage","canvasOffset","regPoint","imageIndex","pop","convertColorToHex","_local_2","toString","bounds","data","enlarge","offsetRect","point","sprite","EMPTY","addChild","colorTransform","clone","rect","a","tx","ty","tint","transform","setFromMatrix","getLocalBounds","DEFAULT_MAX_CACHE_STORAGE_TIME_MS"],"mappings":"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","sourcesContent":["import { Texture } from '@pixi/core';\r\nimport { Matrix, Point, Rectangle } from '@pixi/math';\r\nimport { NitroContainer, NitroSprite } from '../../../core';\r\nimport { RoomObjectSpriteData } from '../../../room/data/RoomObjectSpriteData';\r\nimport { Nitro } from '../../Nitro';\r\nimport { IActiveActionData } from '../actions/IActiveActionData';\r\nimport { AssetAliasCollection } from '../alias/AssetAliasCollection';\r\nimport { AvatarAnimationLayerData } from '../animation/AvatarAnimationLayerData';\r\nimport { AvatarImageBodyPartContainer } from '../AvatarImageBodyPartContainer';\r\nimport { AvatarImagePartContainer } from '../AvatarImagePartContainer';\r\nimport { AvatarStructure } from '../AvatarStructure';\r\nimport { AvatarDirectionAngle } from '../enum/AvatarDirectionAngle';\r\nimport { AvatarFigurePartType } from '../enum/AvatarFigurePartType';\r\nimport { AvatarScaleType } from '../enum/AvatarScaleType';\r\nimport { GeometryType } from '../enum/GeometryType';\r\nimport { IAvatarImage } from '../IAvatarImage';\r\nimport { AvatarCanvas } from '../structure/AvatarCanvas';\r\nimport { AvatarImageActionCache } from './AvatarImageActionCache';\r\nimport { AvatarImageBodyPartCache } from './AvatarImageBodyPartCache';\r\nimport { AvatarImageDirectionCache } from './AvatarImageDirectionCache';\r\nimport { ImageData } from './ImageData';\r\n\r\nexport class AvatarImageCache\r\n{\r\n    private static DEFAULT_MAX_CACHE_STORAGE_TIME_MS: number = 60000;\r\n\r\n    private _structure: AvatarStructure;\r\n    private _avatar: IAvatarImage;\r\n    private _assets: AssetAliasCollection;\r\n    private _scale: string;\r\n    private _cache: Map<string, AvatarImageBodyPartCache>;\r\n    private _canvas: AvatarCanvas;\r\n    private _disposed: boolean;\r\n    private _geometryType: string;\r\n    private _unionImages: ImageData[];\r\n    private _matrix: Matrix;\r\n    private _serverRenderData: RoomObjectSpriteData[];\r\n\r\n    constructor(k: AvatarStructure, _arg_2: IAvatarImage, _arg_3: AssetAliasCollection, _arg_4: string)\r\n    {\r\n        this._structure = k;\r\n        this._avatar = _arg_2;\r\n        this._assets = _arg_3;\r\n        this._scale = _arg_4;\r\n        this._cache = new Map();\r\n        this._canvas = null;\r\n        this._disposed = false;\r\n        this._unionImages = [];\r\n        this._matrix = new Matrix();\r\n        this._serverRenderData = [];\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._disposed) return;\r\n\r\n        this._structure = null;\r\n        this._avatar = null;\r\n        this._assets = null;\r\n        this._canvas = null;\r\n        this._disposed = true;\r\n\r\n        if(this._cache)\r\n        {\r\n            for(const cache of this._cache.values())\r\n            {\r\n                if(!cache) continue;\r\n\r\n                cache.dispose();\r\n            }\r\n\r\n            this._cache = null;\r\n        }\r\n\r\n        if(this._unionImages)\r\n        {\r\n            for(const image of this._unionImages)\r\n            {\r\n                if(!image) continue;\r\n\r\n                image.dispose();\r\n            }\r\n\r\n            this._unionImages = [];\r\n        }\r\n    }\r\n\r\n    public disposeInactiveActions(k: number = 60000): void\r\n    {\r\n        const time = Nitro.instance.time;\r\n\r\n        if(this._cache)\r\n        {\r\n            for(const cache of this._cache.values())\r\n            {\r\n                if(!cache) continue;\r\n\r\n                cache.disposeActions(k, time);\r\n            }\r\n        }\r\n    }\r\n\r\n    public resetBodyPartCache(k: IActiveActionData): void\r\n    {\r\n        if(this._cache)\r\n        {\r\n            for(const cache of this._cache.values())\r\n            {\r\n                if(!cache) continue;\r\n\r\n                cache.setAction(k, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setDirection(k: string, _arg_2: number): void\r\n    {\r\n        const parts = this._structure.getBodyPartsUnordered(k);\r\n\r\n        if(parts)\r\n        {\r\n            for(const part of parts)\r\n            {\r\n                const actionCache = this.getBodyPartCache(part);\r\n\r\n                if(!actionCache) continue;\r\n\r\n                actionCache.setDirection(_arg_2);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setAction(k: IActiveActionData, _arg_2: number): void\r\n    {\r\n        const _local_3 = this._structure.getActiveBodyPartIds(k, this._avatar);\r\n\r\n        for(const _local_4 of _local_3)\r\n        {\r\n            const _local_5 = this.getBodyPartCache(_local_4);\r\n\r\n            if(_local_5) _local_5.setAction(k, _arg_2);\r\n        }\r\n    }\r\n\r\n    public setGeometryType(k: string): void\r\n    {\r\n        if(this._geometryType === k) return;\r\n\r\n        if((((this._geometryType === GeometryType.SITTING) && (k === GeometryType.VERTICAL)) || ((this._geometryType === GeometryType.VERTICAL) && (k === GeometryType.SITTING)) || ((this._geometryType === GeometryType.SNOWWARS_HORIZONTAL) && (k = GeometryType.SNOWWARS_HORIZONTAL))))\r\n        {\r\n            this._geometryType = k;\r\n            this._canvas = null;\r\n\r\n            return;\r\n        }\r\n\r\n        this.disposeInactiveActions(0);\r\n\r\n        this._geometryType = k;\r\n        this._canvas = null;\r\n    }\r\n\r\n    public getImageContainer(k: string, frameNumber: number, _arg_3: boolean = false): AvatarImageBodyPartContainer\r\n    {\r\n        let _local_4 = this.getBodyPartCache(k);\r\n\r\n        if(!_local_4)\r\n        {\r\n            _local_4 = new AvatarImageBodyPartCache();\r\n\r\n            this._cache.set(k, _local_4);\r\n        }\r\n\r\n        let _local_5 = _local_4.getDirection();\r\n        let _local_7 = _local_4.getAction();\r\n        let frameCount = frameNumber;\r\n\r\n        if(_local_7.definition.startFromFrameZero) frameCount -= _local_7.startFrame;\r\n\r\n        let _local_8 = _local_7;\r\n        let _local_9: string[] = [];\r\n        let _local_10: Map<string, string> = new Map();\r\n        const _local_11 = new Point();\r\n\r\n        if(!((!(_local_7)) || (!(_local_7.definition))))\r\n        {\r\n            if(_local_7.definition.isAnimation)\r\n            {\r\n                let _local_15 = _local_5;\r\n\r\n                const _local_16 = this._structure.getAnimation(((_local_7.definition.state + '.') + _local_7.actionParameter));\r\n                const _local_17 = (frameNumber - _local_7.startFrame);\r\n\r\n                if(_local_16)\r\n                {\r\n                    const _local_18 = _local_16.getLayerData(_local_17, k, _local_7.overridingAction);\r\n\r\n                    if(_local_18)\r\n                    {\r\n                        _local_15 = (_local_5 + _local_18.dd);\r\n\r\n                        if(_local_18.dd < 0)\r\n                        {\r\n                            if(_local_15 < 0)\r\n                            {\r\n                                _local_15 = (8 + _local_15);\r\n                            }\r\n                            else if(_local_15 > 7) _local_15 = (8 - _local_15);\r\n                        }\r\n                        else\r\n                        {\r\n                            if(_local_15 < 0)\r\n                            {\r\n                                _local_15 = (_local_15 + 8);\r\n                            }\r\n                            else if(_local_15 > 7) _local_15 = (_local_15 - 8);\r\n                        }\r\n\r\n                        if(this._scale === AvatarScaleType.LARGE)\r\n                        {\r\n                            _local_11.x = _local_18.dx;\r\n                            _local_11.y = _local_18.dy;\r\n                        }\r\n                        else\r\n                        {\r\n                            _local_11.x = (_local_18.dx / 2);\r\n                            _local_11.y = (_local_18.dy / 2);\r\n                        }\r\n\r\n                        frameCount = _local_18.animationFrame;\r\n\r\n                        if(_local_18.action)\r\n                        {\r\n                            _local_7 = _local_18.action;\r\n                        }\r\n\r\n                        if(_local_18.type === AvatarAnimationLayerData.BODYPART)\r\n                        {\r\n                            if(_local_18.action != null)\r\n                            {\r\n                                _local_8 = _local_18.action;\r\n                            }\r\n\r\n                            _local_5 = _local_15;\r\n                        }\r\n                        else if(_local_18.type === AvatarAnimationLayerData.FX) _local_5 = _local_15;\r\n\r\n                        _local_10 = _local_18.items;\r\n                    }\r\n\r\n                    _local_9 = _local_16.removeData;\r\n                }\r\n            }\r\n        }\r\n\r\n        let _local_12 = _local_4.getActionCache(_local_8);\r\n\r\n        if(!_local_12 || _arg_3)\r\n        {\r\n            _local_12 = new AvatarImageActionCache();\r\n            _local_4.updateActionCache(_local_8, _local_12);\r\n        }\r\n\r\n        let _local_13 = _local_12.getDirectionCache(_local_5);\r\n\r\n        if(!_local_13 || _arg_3)\r\n        {\r\n            const _local_19 = this._structure.getParts(k, this._avatar.getFigure(), _local_8, this._geometryType, _local_5, _local_9, this._avatar, _local_10);\r\n\r\n            _local_13 = new AvatarImageDirectionCache(_local_19);\r\n\r\n            _local_12.updateDirectionCache(_local_5, _local_13);\r\n        }\r\n\r\n        let _local_14 = _local_13.getImageContainer(frameCount);\r\n\r\n        if(!_local_14 || _arg_3)\r\n        {\r\n            const _local_20 = _local_13.getPartList();\r\n\r\n            _local_14 = this.renderBodyPart(_local_5, _local_20, frameCount, _local_7, _arg_3);\r\n\r\n            if(_local_14 && !_arg_3)\r\n            {\r\n                if(_local_14.isCacheable) _local_13.updateImageContainer(_local_14, frameCount);\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        const offset = this._structure.getFrameBodyPartOffset(_local_8, _local_5, frameCount, k);\r\n\r\n        _local_11.x += offset.x;\r\n        _local_11.y += offset.y;\r\n\r\n        _local_14.offset = _local_11;\r\n\r\n        return _local_14;\r\n    }\r\n\r\n    public getServerRenderData(): any[]\r\n    {\r\n        this._serverRenderData = [];\r\n\r\n        return this._serverRenderData;\r\n    }\r\n\r\n    public getBodyPartCache(k: string): AvatarImageBodyPartCache\r\n    {\r\n        let existing = this._cache.get(k);\r\n\r\n        if(!existing)\r\n        {\r\n            existing = new AvatarImageBodyPartCache();\r\n\r\n            this._cache.set(k, existing);\r\n        }\r\n\r\n        return existing;\r\n    }\r\n\r\n    private renderBodyPart(direction: number, containers: AvatarImagePartContainer[], frameCount: number, _arg_4: IActiveActionData, renderServerData: boolean = false): AvatarImageBodyPartContainer\r\n    {\r\n        if(!containers || !containers.length) return null;\r\n\r\n        if(!this._canvas)\r\n        {\r\n            this._canvas = this._structure.getCanvas(this._scale, this._geometryType);\r\n\r\n            if(!this._canvas) return null;\r\n        }\r\n\r\n        const isFlipped = AvatarDirectionAngle.DIRECTION_IS_FLIPPED[direction] || false;\r\n        let assetPartDefinition = _arg_4.definition.assetPartDefinition;\r\n        let isCacheable = true;\r\n        let containerIndex = (containers.length - 1);\r\n\r\n        while(containerIndex >= 0)\r\n        {\r\n            const container = containers[containerIndex];\r\n\r\n            let color = 16777215;\r\n\r\n            if(!((direction == 7) && ((container.partType === 'fc') || (container.partType === 'ey'))))\r\n            {\r\n                if(!((container.partType === 'ri') && !container.partId))\r\n                {\r\n                    const partId = container.partId;\r\n                    const animationFrame = container.getFrameDefinition(frameCount);\r\n\r\n                    let partType = container.partType;\r\n                    let frameNumber = 0;\r\n\r\n                    if(animationFrame)\r\n                    {\r\n                        frameNumber = animationFrame.number;\r\n\r\n                        if((animationFrame.assetPartDefinition) && (animationFrame.assetPartDefinition !== '')) assetPartDefinition = animationFrame.assetPartDefinition;\r\n                    }\r\n                    else frameNumber = container.getFrameIndex(frameCount);\r\n\r\n                    let assetDirection = direction;\r\n                    let flipH = false;\r\n\r\n                    if(isFlipped)\r\n                    {\r\n                        if(((assetPartDefinition === 'wav') && (((partType === AvatarFigurePartType.LEFT_HAND) || (partType === AvatarFigurePartType.LEFT_SLEEVE)) || (partType === AvatarFigurePartType.LEFT_COAT_SLEEVE))) || ((assetPartDefinition === 'drk') && (((partType === AvatarFigurePartType.RIGHT_HAND) || (partType === AvatarFigurePartType.RIGHT_SLEEVE)) || (partType === AvatarFigurePartType.RIGHT_COAT_SLEEVE))) || ((assetPartDefinition === 'blw') && (partType === AvatarFigurePartType.RIGHT_HAND)) || ((assetPartDefinition === 'sig') && (partType === AvatarFigurePartType.LEFT_HAND)) || ((assetPartDefinition === 'respect') && (partType === AvatarFigurePartType.LEFT_HAND)) || (partType === AvatarFigurePartType.RIGHT_HAND_ITEM) || (partType === AvatarFigurePartType.LEFT_HAND_ITEM) || (partType === AvatarFigurePartType.CHEST_PRINT))\r\n                        {\r\n                            flipH = true;\r\n                        }\r\n                        else\r\n                        {\r\n                            if(direction === 4) assetDirection = 2;\r\n                            else if(direction === 5) assetDirection = 1;\r\n                            else if(direction === 6) assetDirection = 0;\r\n\r\n                            if(container.flippedPartType !== partType) partType = container.flippedPartType;\r\n                        }\r\n                    }\r\n\r\n                    let assetName = (this._scale + '_' + assetPartDefinition + '_' + partType + '_' + partId + '_' + assetDirection + '_' + frameNumber);\r\n                    let asset = this._assets.getAsset(assetName);\r\n\r\n                    if(!asset)\r\n                    {\r\n                        assetName = (this._scale + '_std_' + partType + '_' + partId + '_' + assetDirection + '_0');\r\n                        asset = this._assets.getAsset(assetName);\r\n                    }\r\n\r\n                    if(asset)\r\n                    {\r\n                        const texture = asset.texture;\r\n\r\n                        if(!texture || !texture.valid || !texture.baseTexture)\r\n                        {\r\n                            isCacheable = false;\r\n                        }\r\n                        else\r\n                        {\r\n                            if(container.isColorable && container.color) color = container.color.rgb;\r\n\r\n                            const offset = new Point(-(asset.x), -(asset.y));\r\n\r\n                            if(flipH) offset.x = (offset.x + ((this._scale === AvatarScaleType.LARGE) ? 65 : 31));\r\n\r\n                            if(renderServerData)\r\n                            {\r\n                                const spriteData = new RoomObjectSpriteData();\r\n\r\n                                spriteData.name = this._assets.getAssetName(assetName);\r\n                                spriteData.x = (-(offset.x) - 33);\r\n                                spriteData.y = -(offset.y);\r\n                                spriteData.z = (this._serverRenderData.length * -0.0001);\r\n                                spriteData.width = asset.rectangle.width;\r\n                                spriteData.height = asset.rectangle.height;\r\n                                spriteData.flipH = flipH;\r\n\r\n                                if(assetPartDefinition === 'lay') spriteData.x = (spriteData.x + 53);\r\n\r\n                                if(isFlipped)\r\n                                {\r\n                                    spriteData.flipH = (!(spriteData.flipH));\r\n\r\n                                    if(spriteData.flipH) spriteData.x = (-(spriteData.x) - texture.width);\r\n                                    else spriteData.x = (spriteData.x + 65);\r\n                                }\r\n\r\n                                if(container.isColorable) spriteData.color = `${ color }`;\r\n\r\n                                this._serverRenderData.push(spriteData);\r\n                            }\r\n\r\n                            this._unionImages.push(new ImageData(texture, asset.rectangle, offset, flipH, color));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            containerIndex--;\r\n        }\r\n\r\n        if(!this._unionImages.length) return null;\r\n\r\n        const imageData = this.createUnionImage(this._unionImages, isFlipped);\r\n        const canvasOffset = ((this._scale === AvatarScaleType.LARGE) ? (this._canvas.height - 16) : (this._canvas.height - 8));\r\n        const offset = new Point(-(imageData.regPoint.x), (canvasOffset - imageData.regPoint.y));\r\n\r\n        if(isFlipped && (assetPartDefinition !== 'lay')) offset.x = (offset.x + ((this._scale === AvatarScaleType.LARGE) ? 67 : 31));\r\n\r\n        let imageIndex = (this._unionImages.length - 1);\r\n\r\n        while(imageIndex >= 0)\r\n        {\r\n            const _local_17 = this._unionImages.pop();\r\n\r\n            if(_local_17) _local_17.dispose();\r\n\r\n            imageIndex--;\r\n        }\r\n\r\n        return new AvatarImageBodyPartContainer(imageData.container, offset, isCacheable);\r\n    }\r\n\r\n    private convertColorToHex(k: number): string\r\n    {\r\n        let _local_2: string = (k * 0xFF).toString(16);\r\n        if(_local_2.length < 2)\r\n        {\r\n            _local_2 = ('0' + _local_2);\r\n        }\r\n        return _local_2;\r\n    }\r\n\r\n    private createUnionImage(k: ImageData[], isFlipped: boolean): ImageData\r\n    {\r\n        const bounds = new Rectangle();\r\n\r\n        for(const data of k) data && bounds.enlarge(data.offsetRect);\r\n\r\n        const point = new Point(-(bounds.x), -(bounds.y));\r\n        const container = new NitroContainer();\r\n\r\n        const sprite = new NitroSprite(Texture.EMPTY);\r\n\r\n        sprite.width = bounds.width;\r\n        sprite.height = bounds.height;\r\n\r\n        container.addChild(sprite);\r\n\r\n        for(const data of k)\r\n        {\r\n            if(!data) continue;\r\n\r\n            const texture = data.texture;\r\n            const color = data.colorTransform;\r\n            const flipH = (!(isFlipped && data.flipH) && (isFlipped || data.flipH));\r\n            const regPoint = point.clone();\r\n\r\n            regPoint.x -= data.regPoint.x;\r\n            regPoint.y -= data.regPoint.y;\r\n\r\n            if(isFlipped) regPoint.x = (container.width - (regPoint.x + data.rect.width));\r\n\r\n            if(flipH)\r\n            {\r\n                this._matrix.a = -1;\r\n                this._matrix.tx = ((data.rect.x + data.rect.width) + regPoint.x);\r\n                this._matrix.ty = (regPoint.y - data.rect.y);\r\n            }\r\n            else\r\n            {\r\n                this._matrix.a = 1;\r\n                this._matrix.tx = (regPoint.x - data.rect.x);\r\n                this._matrix.ty = (regPoint.y - data.rect.y);\r\n            }\r\n\r\n            const sprite = new NitroSprite(texture);\r\n\r\n            sprite.tint = color;\r\n            sprite.transform.setFromMatrix(this._matrix);\r\n\r\n            container.addChild(sprite);\r\n        }\r\n\r\n        return new ImageData(null, container.getLocalBounds(), point, isFlipped, null, container);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}