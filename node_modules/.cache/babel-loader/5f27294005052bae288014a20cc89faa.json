{"ast":null,"code":"import { RoomObjectVariable } from '../../RoomObjectVariable';\nimport { ObjectDataBase } from '../ObjectDataBase';\nimport { ObjectDataKey } from '../ObjectDataKey';\nexport class MapDataType extends ObjectDataBase {\n  constructor() {\n    super();\n    this._data = void 0;\n    this._data = {};\n  }\n\n  parseWrapper(wrapper) {\n    if (!wrapper) return;\n    this._data = {};\n    const totalSets = wrapper.readInt();\n    if (totalSets) for (let i = 0; i < totalSets; i++) this._data[wrapper.readString()] = wrapper.readString();\n    super.parseWrapper(wrapper);\n  }\n\n  initializeFromRoomObjectModel(model) {\n    super.initializeFromRoomObjectModel(model);\n    this._data = model.getValue(RoomObjectVariable.FURNITURE_DATA) || {};\n  }\n\n  writeRoomObjectModel(model) {\n    super.writeRoomObjectModel(model);\n    model.setValue(RoomObjectVariable.FURNITURE_DATA_FORMAT, MapDataType.FORMAT_KEY);\n    model.setValue(RoomObjectVariable.FURNITURE_DATA, this._data);\n  }\n\n  getLegacyString() {\n    if (!this._data) return '';\n    const state = this._data[MapDataType.STATE];\n    if (state === undefined || state === null) return '';\n    return state;\n  }\n\n  compare(data) {\n    return false;\n  }\n\n  getValue(key) {\n    return this._data[key];\n  }\n\n  get rarityLevel() {\n    if (!this._data) return -1;\n    const state = this._data[MapDataType.RARITY];\n    if (state === undefined || state === null) return -1;\n    return parseInt(state);\n  } // TODO: How to get the keys?\n\n\n  get data() {\n    return this._data;\n  }\n\n}\nMapDataType.FORMAT_KEY = ObjectDataKey.MAP_KEY;\nMapDataType.STATE = 'state';\nMapDataType.RARITY = 'rarity';","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/data/type/MapDataType.ts"],"names":["RoomObjectVariable","ObjectDataBase","ObjectDataKey","MapDataType","constructor","_data","parseWrapper","wrapper","totalSets","readInt","i","readString","initializeFromRoomObjectModel","model","getValue","FURNITURE_DATA","writeRoomObjectModel","setValue","FURNITURE_DATA_FORMAT","FORMAT_KEY","getLegacyString","state","STATE","undefined","compare","data","key","rarityLevel","RARITY","parseInt","MAP_KEY"],"mappings":"AAEA,SAASA,kBAAT,QAAmC,0BAAnC;AAEA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAO,MAAMC,WAAN,SAA0BF,cAA1B,CACP;AAQIG,EAAAA,WAAW,GACX;AACI;AADJ,SAHQC,KAGR;AAGI,SAAKA,KAAL,GAAa,EAAb;AACH;;AAEMC,EAAAA,YAAY,CAACC,OAAD,EACnB;AACI,QAAG,CAACA,OAAJ,EAAa;AAEb,SAAKF,KAAL,GAAa,EAAb;AAEA,UAAMG,SAAS,GAAGD,OAAO,CAACE,OAAR,EAAlB;AAEA,QAAGD,SAAH,EAAc,KAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,SAAnB,EAA8BE,CAAC,EAA/B,EAAmC,KAAKL,KAAL,CAAWE,OAAO,CAACI,UAAR,EAAX,IAAmCJ,OAAO,CAACI,UAAR,EAAnC;AAEjD,UAAML,YAAN,CAAmBC,OAAnB;AACH;;AAEMK,EAAAA,6BAA6B,CAACC,KAAD,EACpC;AACI,UAAMD,6BAAN,CAAoCC,KAApC;AAEA,SAAKR,KAAL,GAAaQ,KAAK,CAACC,QAAN,CAA4Cd,kBAAkB,CAACe,cAA/D,KAAkF,EAA/F;AACH;;AAEMC,EAAAA,oBAAoB,CAACH,KAAD,EAC3B;AACI,UAAMG,oBAAN,CAA2BH,KAA3B;AAEAA,IAAAA,KAAK,CAACI,QAAN,CAAejB,kBAAkB,CAACkB,qBAAlC,EAAyDf,WAAW,CAACgB,UAArE;AACAN,IAAAA,KAAK,CAACI,QAAN,CAAejB,kBAAkB,CAACe,cAAlC,EAAkD,KAAKV,KAAvD;AACH;;AAEMe,EAAAA,eAAe,GACtB;AACI,QAAG,CAAC,KAAKf,KAAT,EAAgB,OAAO,EAAP;AAEhB,UAAMgB,KAAK,GAAG,KAAKhB,KAAL,CAAWF,WAAW,CAACmB,KAAvB,CAAd;AAEA,QAAGD,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAApC,EAA0C,OAAO,EAAP;AAE1C,WAAOA,KAAP;AACH;;AAEMG,EAAAA,OAAO,CAACC,IAAD,EACd;AACI,WAAO,KAAP;AACH;;AAEMX,EAAAA,QAAQ,CAACY,GAAD,EACf;AACI,WAAO,KAAKrB,KAAL,CAAWqB,GAAX,CAAP;AACH;;AAEqB,MAAXC,WAAW,GACtB;AACI,QAAG,CAAC,KAAKtB,KAAT,EAAgB,OAAO,CAAC,CAAR;AAEhB,UAAMgB,KAAK,GAAG,KAAKhB,KAAL,CAAWF,WAAW,CAACyB,MAAvB,CAAd;AAEA,QAAGP,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAApC,EAA0C,OAAO,CAAC,CAAR;AAE1C,WAAOQ,QAAQ,CAACR,KAAD,CAAf;AACH,GAzEL,CA2EI;;;AACe,MAAJI,IAAI,GACf;AACI,WAAO,KAAKpB,KAAZ;AACH;;AA/EL;AADaF,W,CAEKgB,U,GAAajB,aAAa,CAAC4B,O;AAFhC3B,W,CAIMmB,K,GAAgB,O;AAJtBnB,W,CAKMyB,M,GAAiB,Q","sourcesContent":["import { IMessageDataWrapper } from '../../../../../core/communication/messages/IMessageDataWrapper';\r\nimport { IRoomObjectModel } from '../../../../../room/object/IRoomObjectModel';\r\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\r\nimport { IObjectData } from '../IObjectData';\r\nimport { ObjectDataBase } from '../ObjectDataBase';\r\nimport { ObjectDataKey } from '../ObjectDataKey';\r\n\r\nexport class MapDataType extends ObjectDataBase\r\n{\r\n    public static FORMAT_KEY = ObjectDataKey.MAP_KEY;\r\n\r\n    private static STATE: string = 'state';\r\n    private static RARITY: string = 'rarity';\r\n\r\n    private _data: { [index: string]: string };\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._data = {};\r\n    }\r\n\r\n    public parseWrapper(wrapper: IMessageDataWrapper): void\r\n    {\r\n        if(!wrapper) return;\r\n\r\n        this._data = {};\r\n\r\n        const totalSets = wrapper.readInt();\r\n\r\n        if(totalSets) for(let i = 0; i < totalSets; i++) this._data[wrapper.readString()] = wrapper.readString();\r\n\r\n        super.parseWrapper(wrapper);\r\n    }\r\n\r\n    public initializeFromRoomObjectModel(model: IRoomObjectModel): void\r\n    {\r\n        super.initializeFromRoomObjectModel(model);\r\n\r\n        this._data = model.getValue<{ [index: string]: string }>(RoomObjectVariable.FURNITURE_DATA) || {};\r\n    }\r\n\r\n    public writeRoomObjectModel(model: IRoomObjectModel): void\r\n    {\r\n        super.writeRoomObjectModel(model);\r\n\r\n        model.setValue(RoomObjectVariable.FURNITURE_DATA_FORMAT, MapDataType.FORMAT_KEY);\r\n        model.setValue(RoomObjectVariable.FURNITURE_DATA, this._data);\r\n    }\r\n\r\n    public getLegacyString(): string\r\n    {\r\n        if(!this._data) return '';\r\n\r\n        const state = this._data[MapDataType.STATE];\r\n\r\n        if(state === undefined || state === null) return '';\r\n\r\n        return state;\r\n    }\r\n\r\n    public compare(data: IObjectData): boolean\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public getValue(key: string): string\r\n    {\r\n        return this._data[key];\r\n    }\r\n\r\n    public get rarityLevel(): number\r\n    {\r\n        if(!this._data) return -1;\r\n\r\n        const state = this._data[MapDataType.RARITY];\r\n\r\n        if(state === undefined || state === null) return -1;\r\n\r\n        return parseInt(state);\r\n    }\r\n\r\n    // TODO: How to get the keys?\r\n    public get data()\r\n    {\r\n        return this._data;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}