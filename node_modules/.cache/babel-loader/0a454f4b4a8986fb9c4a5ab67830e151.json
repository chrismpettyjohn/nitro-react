{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/wired/views/actions/WiredActionGiveRewardView.tsx\",\n    _s = $RefreshSig$();\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useCallback, useEffect, useState } from 'react';\nimport ReactSlider from 'react-slider';\nimport { LocalizeText, WiredFurniType } from '../../../../api';\nimport { Button } from '../../../../common/Button';\nimport { Column } from '../../../../common/Column';\nimport { Flex } from '../../../../common/Flex';\nimport { Text } from '../../../../common/Text';\nimport { useWiredContext } from '../../WiredContext';\nimport { WiredActionBaseView } from './WiredActionBaseView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WiredActionGiveRewardView = props => {\n  _s();\n\n  const [limitEnabled, setLimitEnabled] = useState(false);\n  const [rewardTime, setRewardTime] = useState(1);\n  const [uniqueRewards, setUniqueRewards] = useState(false);\n  const [rewardsLimit, setRewardsLimit] = useState(1);\n  const [limitationInterval, setLimitationInterval] = useState(1);\n  const [rewards, setRewards] = useState([]);\n  const {\n    trigger = null,\n    setIntParams = null,\n    setStringParam = null\n  } = useWiredContext();\n  const addReward = useCallback(() => {\n    setRewards(rewards => [...rewards, {\n      isBadge: false,\n      itemCode: '',\n      probability: null\n    }]);\n  }, [setRewards]);\n  const removeReward = useCallback(index => {\n    setRewards(prevValue => {\n      const newValues = Array.from(prevValue);\n      newValues.splice(index, 1);\n      return newValues;\n    });\n  }, [setRewards]);\n  const updateReward = useCallback((index, isBadge, itemCode, probability) => {\n    const rewardsClone = Array.from(rewards);\n    const reward = rewardsClone[index];\n    if (!reward) return;\n    reward.isBadge = isBadge;\n    reward.itemCode = itemCode;\n    reward.probability = probability;\n    setRewards(rewardsClone);\n  }, [rewards, setRewards]);\n  const save = useCallback(() => {\n    let stringRewards = [];\n\n    for (const reward of rewards) {\n      if (!reward.itemCode) continue;\n      const rewardsString = [reward.isBadge ? '0' : '1', reward.itemCode, reward.probability.toString()];\n      stringRewards.push(rewardsString.join(','));\n    }\n\n    if (stringRewards.length > 0) {\n      setStringParam(stringRewards.join(';'));\n      setIntParams([rewardTime, uniqueRewards ? 1 : 0, rewardsLimit, limitationInterval]);\n    }\n  }, [rewardTime, uniqueRewards, rewardsLimit, limitationInterval, rewards, setIntParams, setStringParam]);\n  useEffect(() => {\n    const readRewards = [];\n\n    if (trigger.stringData.length > 0 && trigger.stringData.includes(';')) {\n      const splittedRewards = trigger.stringData.split(';');\n\n      for (const rawReward of splittedRewards) {\n        const reward = rawReward.split(',');\n        if (reward.length !== 3) continue;\n        readRewards.push({\n          isBadge: reward[0] === '0',\n          itemCode: reward[1],\n          probability: Number(reward[2])\n        });\n      }\n    }\n\n    if (readRewards.length === 0) readRewards.push({\n      isBadge: false,\n      itemCode: '',\n      probability: null\n    });\n    setRewardTime(trigger.intData.length > 0 ? trigger.intData[0] : 0);\n    setUniqueRewards(trigger.intData.length > 1 ? trigger.intData[1] === 1 : false);\n    setRewardsLimit(trigger.intData.length > 2 ? trigger.intData[2] : 0);\n    setLimitationInterval(trigger.intData.length > 3 ? trigger.intData[3] : 0);\n    setLimitEnabled(trigger.intData.length > 3 ? trigger.intData[3] > 0 : false);\n    setRewards(readRewards);\n  }, [trigger]);\n  return /*#__PURE__*/_jsxDEV(WiredActionBaseView, {\n    requiresFurni: WiredFurniType.STUFF_SELECTION_OPTION_NONE,\n    hasSpecialInput: true,\n    save: save,\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      gap: 1,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"limitEnabled\",\n        onChange: event => setLimitEnabled(event.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: LocalizeText('wiredfurni.params.prizelimit', ['amount'], [limitEnabled ? rewardsLimit.toString() : ''])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), !limitEnabled && /*#__PURE__*/_jsxDEV(Text, {\n      center: true,\n      className: \"bg-muted rounded p-1\",\n      children: \"Reward limit not set. Make sure rewards are badges or non-tradeable items.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), limitEnabled && /*#__PURE__*/_jsxDEV(ReactSlider, {\n      className: 'wired-slider',\n      min: 1,\n      max: 1000,\n      value: rewardsLimit,\n      onChange: event => setRewardsLimit(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"m-0 bg-dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      gap: 1,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        gfbold: true,\n        children: \"How often can a user be rewarded?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        gap: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-select form-select-sm w-100\",\n          value: rewardTime,\n          onChange: e => setRewardTime(Number(e.target.value)),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"0\",\n            children: \"Once\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: [\"Once every \", limitationInterval, \" minutes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: [\"Once every \", limitationInterval, \" hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: [\"Once every \", limitationInterval, \" days\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), rewardTime > 0 && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          className: \"form-control form-control-sm\",\n          value: limitationInterval,\n          onChange: event => setLimitationInterval(Number(event.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"m-0 bg-dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      gap: 1,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"uniqueRewards\",\n        checked: uniqueRewards,\n        onChange: e => setUniqueRewards(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: \"Unique rewards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      center: true,\n      className: \"bg-muted rounded p-1\",\n      children: \"If checked each reward will be given once to each user. This will disable the probabilities option.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"m-0 bg-dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        gfbold: true,\n        children: \"Rewards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        onClick: addReward,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: \"plus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      gap: 1,\n      children: rewards && rewards.map((reward, index) => {\n        return /*#__PURE__*/_jsxDEV(Flex, {\n          gap: 1,\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            gap: 1,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"checkbox\",\n              checked: reward.isBadge,\n              onChange: e => updateReward(index, e.target.checked, reward.itemCode, reward.probability)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: \"Badge?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control form-control-sm\",\n            value: reward.itemCode,\n            onChange: e => updateReward(index, reward.isBadge, e.target.value, reward.probability),\n            placeholder: \"Item Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control form-control-sm\",\n            value: reward.probability,\n            onChange: e => updateReward(index, reward.isBadge, reward.itemCode, Number(e.target.value)),\n            placeholder: \"Probability\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this), index > 0 && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            onClick: event => removeReward(index),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: \"trash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WiredActionGiveRewardView, \"c/HwgLR99tBcTqm/WLb/DLfOMYE=\", false, function () {\n  return [useWiredContext];\n});\n\n_c = WiredActionGiveRewardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"WiredActionGiveRewardView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/wired/views/actions/WiredActionGiveRewardView.tsx"],"names":["FontAwesomeIcon","useCallback","useEffect","useState","ReactSlider","LocalizeText","WiredFurniType","Button","Column","Flex","Text","useWiredContext","WiredActionBaseView","WiredActionGiveRewardView","props","limitEnabled","setLimitEnabled","rewardTime","setRewardTime","uniqueRewards","setUniqueRewards","rewardsLimit","setRewardsLimit","limitationInterval","setLimitationInterval","rewards","setRewards","trigger","setIntParams","setStringParam","addReward","isBadge","itemCode","probability","removeReward","index","prevValue","newValues","Array","from","splice","updateReward","rewardsClone","reward","save","stringRewards","rewardsString","toString","push","join","length","readRewards","stringData","includes","splittedRewards","split","rawReward","Number","intData","STUFF_SELECTION_OPTION_NONE","event","target","checked","e","value","map"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport ReactSlider from 'react-slider';\nimport { LocalizeText, WiredFurniType } from '../../../../api';\nimport { Button } from '../../../../common/Button';\nimport { Column } from '../../../../common/Column';\nimport { Flex } from '../../../../common/Flex';\nimport { Text } from '../../../../common/Text';\nimport { useWiredContext } from '../../WiredContext';\nimport { WiredActionBaseView } from './WiredActionBaseView';\n\nexport const WiredActionGiveRewardView: FC<{}> = props =>\n{\n    const [ limitEnabled, setLimitEnabled ] = useState(false);\n    const [ rewardTime, setRewardTime ] = useState(1);\n    const [ uniqueRewards, setUniqueRewards ] = useState(false);\n    const [ rewardsLimit, setRewardsLimit ] = useState(1);\n    const [ limitationInterval, setLimitationInterval ] = useState(1);\n    const [ rewards, setRewards ] = useState<{ isBadge: boolean, itemCode: string, probability: number }[]>([]);\n    const { trigger = null, setIntParams = null, setStringParam = null } = useWiredContext();\n\n    const addReward = useCallback(() =>\n    {\n        setRewards(rewards => [ ...rewards, { isBadge: false, itemCode: '', probability: null } ]);\n    }, [ setRewards ]);\n\n    const removeReward = useCallback((index: number) =>\n    {\n        setRewards(prevValue =>\n        {\n            const newValues = Array.from(prevValue);\n\n            newValues.splice(index, 1);\n\n            return newValues;\n        });\n    }, [ setRewards ]);\n\n    const updateReward = useCallback((index: number, isBadge: boolean, itemCode: string, probability: number) =>\n    {\n        const rewardsClone = Array.from(rewards);\n        const reward = rewardsClone[index];\n\n        if(!reward) return;\n\n        reward.isBadge = isBadge;\n        reward.itemCode = itemCode;\n        reward.probability = probability;\n\n        setRewards(rewardsClone);\n    }, [ rewards, setRewards ]);\n\n    const save = useCallback(() =>\n    {       \n        let stringRewards = [];\n\n        for(const reward of rewards)\n        {\n            if(!reward.itemCode) continue;\n\n            const rewardsString = [ reward.isBadge ? '0' : '1', reward.itemCode, reward.probability.toString() ];\n            stringRewards.push(rewardsString.join(','));\n        }\n\n        if(stringRewards.length > 0)\n        {\n            setStringParam(stringRewards.join(';'));\n            setIntParams([ rewardTime, uniqueRewards ? 1 : 0, rewardsLimit, limitationInterval ]);\n        }\n    }, [ rewardTime, uniqueRewards, rewardsLimit, limitationInterval, rewards, setIntParams, setStringParam ]);\n\n    useEffect(() =>\n    {\n        const readRewards: { isBadge: boolean, itemCode: string, probability: number }[] = [];\n\n        if(trigger.stringData.length > 0 && trigger.stringData.includes(';'))\n        {\n            const splittedRewards = trigger.stringData.split(';');\n\n            for(const rawReward of splittedRewards)\n            {\n                const reward = rawReward.split(',');\n\n                if(reward.length !== 3) continue;\n\n                readRewards.push({ isBadge: reward[0] === '0', itemCode: reward[1], probability: Number(reward[2]) });\n            }\n        }\n\n        if(readRewards.length === 0) readRewards.push({ isBadge: false, itemCode: '', probability: null });\n\n        setRewardTime((trigger.intData.length > 0) ? trigger.intData[0] : 0);\n        setUniqueRewards((trigger.intData.length > 1) ? (trigger.intData[1] === 1) : false);\n        setRewardsLimit((trigger.intData.length > 2) ? trigger.intData[2] : 0);\n        setLimitationInterval((trigger.intData.length > 3) ? trigger.intData[3] : 0);\n        setLimitEnabled((trigger.intData.length > 3) ? trigger.intData[3] > 0 : false);\n        setRewards(readRewards);\n    }, [ trigger ]);\n\n    return (\n        <WiredActionBaseView requiresFurni={ WiredFurniType.STUFF_SELECTION_OPTION_NONE } hasSpecialInput={ true } save={ save }>\n            <Flex alignItems=\"center\" gap={ 1 }>\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"limitEnabled\" onChange={ event => setLimitEnabled(event.target.checked) } />\n                <Text>{ LocalizeText('wiredfurni.params.prizelimit', [ 'amount' ], [ limitEnabled ? rewardsLimit.toString() : '' ]) }</Text>\n            </Flex>\n            { !limitEnabled &&\n                <Text center  className=\"bg-muted rounded p-1\">\n                    Reward limit not set. Make sure rewards are badges or non-tradeable items.\n                </Text> }\n            { limitEnabled &&\n                <ReactSlider\n                    className={ 'wired-slider' }\n                    min={ 1 }\n                    max={ 1000 }\n                    value={ rewardsLimit }\n                    onChange={ event => setRewardsLimit(event) } /> }\n            <hr className=\"m-0 bg-dark\" />\n            <Column gap={ 1 }>\n                <Text gfbold>How often can a user be rewarded?</Text>\n                <Flex gap={ 1 }>\n                    <select className=\"form-select form-select-sm w-100\" value={ rewardTime } onChange={ (e) => setRewardTime(Number(e.target.value)) }>\n                        <option value=\"0\">Once</option>\n                        <option value=\"3\">Once every { limitationInterval } minutes</option>\n                        <option value=\"2\">Once every { limitationInterval } hours</option>\n                        <option value=\"1\">Once every { limitationInterval } days</option>\n                    </select>\n                    { (rewardTime > 0) && <input type=\"number\" className=\"form-control form-control-sm\" value={ limitationInterval } onChange={ event => setLimitationInterval(Number(event.target.value)) } /> }\n                </Flex>\n            </Column>\n            <hr className=\"m-0 bg-dark\" />\n            <Flex alignItems=\"center\" gap={ 1 }>\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"uniqueRewards\" checked={ uniqueRewards } onChange={ (e) => setUniqueRewards(e.target.checked) } />\n                <Text>Unique rewards</Text>\n            </Flex>\n            <Text center  className=\"bg-muted rounded p-1\">\n                If checked each reward will be given once to each user. This will disable the probabilities option.\n            </Text>\n            <hr className=\"m-0 bg-dark\" />\n            <Flex justifyContent=\"between\" alignItems=\"center\">\n                <Text gfbold>Rewards</Text>\n                <Button variant=\"success\" onClick={ addReward }>\n                    <FontAwesomeIcon icon=\"plus\" />\n                </Button>\n            </Flex>\n            <Column gap={ 1 }>\n                { rewards && rewards.map((reward, index) =>\n                {\n                    return (\n                        <Flex key={ index } gap={ 1 }>\n                            <Flex alignItems=\"center\" gap={ 1 }>\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={ reward.isBadge } onChange={ (e) => updateReward(index, e.target.checked, reward.itemCode, reward.probability) } />\n                                <Text >Badge?</Text>\n                            </Flex>\n                            <input type=\"text\" className=\"form-control form-control-sm\" value={ reward.itemCode } onChange={ e => updateReward(index, reward.isBadge, e.target.value, reward.probability) } placeholder=\"Item Code\" />\n                            <input type=\"number\" className=\"form-control form-control-sm\" value={ reward.probability } onChange={ e => updateReward(index, reward.isBadge, reward.itemCode, Number(e.target.value)) } placeholder=\"Probability\" />\n                            { (index > 0) &&\n                            <Button variant=\"danger\" onClick={ event => removeReward(index) }>\n                                <FontAwesomeIcon icon=\"trash\" />\n                            </Button> }\n                        </Flex>\n                    )\n                }) }\n            </Column>\n        </WiredActionBaseView>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}