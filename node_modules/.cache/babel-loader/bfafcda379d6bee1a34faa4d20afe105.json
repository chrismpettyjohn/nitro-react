{"ast":null,"code":"import { PlaneTextureBitmap } from './PlaneTextureBitmap';\nexport class PlaneTexture {\n  constructor() {\n    this._bitmaps = void 0;\n    this._bitmaps = [];\n  }\n\n  dispose() {\n    if (this._bitmaps) {\n      for (const bitmap of this._bitmaps) {\n        if (!bitmap) continue;\n        bitmap.dispose();\n      }\n\n      this._bitmaps = null;\n    }\n  }\n\n  addBitmap(texture) {\n    let normalMinX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let normalMaxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let normalMinY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let normalMaxY = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let assetName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    this._bitmaps.push(new PlaneTextureBitmap(texture, normalMinX, normalMaxX, normalMinY, normalMaxY, assetName));\n  }\n\n  getBitmap(k) {\n    const _local_2 = this.getPlaneTextureBitmap(k);\n\n    if (!_local_2) return null;\n    return _local_2.bitmap;\n  }\n\n  getPlaneTextureBitmap(k) {\n    if (!k) return null;\n\n    for (const bitmap of this._bitmaps) {\n      if (!bitmap) continue;\n      if (k.x >= bitmap.normalMinX && k.x <= bitmap.normalMaxX && k.y >= bitmap.normalMinY && k.y <= bitmap.normalMaxY) return bitmap;\n    }\n\n    return null;\n  }\n\n  getAssetName(k) {\n    const _local_2 = this.getPlaneTextureBitmap(k);\n\n    return !_local_2 ? null : _local_2.assetName;\n  }\n\n}\nPlaneTexture.MIN_NORMAL_COORDINATE_VALUE = -1;\nPlaneTexture.MAX_NORMAL_COORDINATE_VALUE = 1;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/PlaneTexture.ts"],"names":["PlaneTextureBitmap","PlaneTexture","constructor","_bitmaps","dispose","bitmap","addBitmap","texture","normalMinX","normalMaxX","normalMinY","normalMaxY","assetName","push","getBitmap","k","_local_2","getPlaneTextureBitmap","x","y","getAssetName","MIN_NORMAL_COORDINATE_VALUE","MAX_NORMAL_COORDINATE_VALUE"],"mappings":"AAEA,SAASA,kBAAT,QAAmC,sBAAnC;AAEA,OAAO,MAAMC,YAAN,CACP;AAMIC,EAAAA,WAAW,GACX;AAAA,SAHQC,QAGR;AACI,SAAKA,QAAL,GAAgB,EAAhB;AACH;;AAEMC,EAAAA,OAAO,GACd;AACI,QAAG,KAAKD,QAAR,EACA;AACI,WAAI,MAAME,MAAV,IAAoB,KAAKF,QAAzB,EACA;AACI,YAAG,CAACE,MAAJ,EAAY;AAEZA,QAAAA,MAAM,CAACD,OAAP;AACH;;AAED,WAAKD,QAAL,GAAgB,IAAhB;AACH;AACJ;;AAEMG,EAAAA,SAAS,CAACC,OAAD,EAChB;AAAA,QAD6CC,UAC7C,uEADkE,CAAC,CACnE;AAAA,QADsEC,UACtE,uEAD2F,CAC3F;AAAA,QAD8FC,UAC9F,uEADmH,CAAC,CACpH;AAAA,QADuHC,UACvH,uEAD4I,CAC5I;AAAA,QAD+IC,SAC/I,uEADmK,IACnK;;AACI,SAAKT,QAAL,CAAcU,IAAd,CAAmB,IAAIb,kBAAJ,CAAuBO,OAAvB,EAAgCC,UAAhC,EAA4CC,UAA5C,EAAwDC,UAAxD,EAAoEC,UAApE,EAAgFC,SAAhF,CAAnB;AACH;;AAEME,EAAAA,SAAS,CAACC,CAAD,EAChB;AACI,UAAMC,QAAQ,GAAG,KAAKC,qBAAL,CAA2BF,CAA3B,CAAjB;;AAEA,QAAG,CAACC,QAAJ,EAAc,OAAO,IAAP;AAEd,WAAOA,QAAQ,CAACX,MAAhB;AACH;;AAEMY,EAAAA,qBAAqB,CAACF,CAAD,EAC5B;AACI,QAAG,CAACA,CAAJ,EAAO,OAAO,IAAP;;AAEP,SAAI,MAAMV,MAAV,IAAoB,KAAKF,QAAzB,EACA;AACI,UAAG,CAACE,MAAJ,EAAY;AAEZ,UAAMU,CAAC,CAACG,CAAF,IAAOb,MAAM,CAACG,UAAf,IAA+BO,CAAC,CAACG,CAAF,IAAOb,MAAM,CAACI,UAA9C,IAA+DM,CAAC,CAACI,CAAF,IAAOd,MAAM,CAACK,UAA9E,IAA+FK,CAAC,CAACI,CAAF,IAAOd,MAAM,CAACM,UAAhH,EAA6H,OAAON,MAAP;AAChI;;AAED,WAAO,IAAP;AACH;;AAEMe,EAAAA,YAAY,CAACL,CAAD,EACnB;AACI,UAAMC,QAAQ,GAAG,KAAKC,qBAAL,CAA2BF,CAA3B,CAAjB;;AAEA,WAAQ,CAACC,QAAF,GAAc,IAAd,GAAqBA,QAAQ,CAACJ,SAArC;AACH;;AA3DL;AADaX,Y,CAEKoB,2B,GAAsC,CAAC,C;AAF5CpB,Y,CAGKqB,2B,GAAsC,C","sourcesContent":["import { Resource, Texture } from '@pixi/core';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { PlaneTextureBitmap } from './PlaneTextureBitmap';\r\n\r\nexport class PlaneTexture\r\n{\r\n    public static MIN_NORMAL_COORDINATE_VALUE: number = -1;\r\n    public static MAX_NORMAL_COORDINATE_VALUE: number = 1;\r\n\r\n    private _bitmaps: PlaneTextureBitmap[];\r\n\r\n    constructor()\r\n    {\r\n        this._bitmaps = [];\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._bitmaps)\r\n        {\r\n            for(const bitmap of this._bitmaps)\r\n            {\r\n                if(!bitmap) continue;\r\n\r\n                bitmap.dispose();\r\n            }\r\n\r\n            this._bitmaps = null;\r\n        }\r\n    }\r\n\r\n    public addBitmap(texture: Texture<Resource>, normalMinX: number = -1, normalMaxX: number = 1, normalMinY: number = -1, normalMaxY: number = 1, assetName: string = null): void\r\n    {\r\n        this._bitmaps.push(new PlaneTextureBitmap(texture, normalMinX, normalMaxX, normalMinY, normalMaxY, assetName));\r\n    }\r\n\r\n    public getBitmap(k: IVector3D): Texture<Resource>\r\n    {\r\n        const _local_2 = this.getPlaneTextureBitmap(k);\r\n\r\n        if(!_local_2) return null;\r\n\r\n        return _local_2.bitmap;\r\n    }\r\n\r\n    public getPlaneTextureBitmap(k: IVector3D): PlaneTextureBitmap\r\n    {\r\n        if(!k) return null;\r\n\r\n        for(const bitmap of this._bitmaps)\r\n        {\r\n            if(!bitmap) continue;\r\n\r\n            if((((k.x >= bitmap.normalMinX) && (k.x <= bitmap.normalMaxX)) && (k.y >= bitmap.normalMinY)) && (k.y <= bitmap.normalMaxY)) return bitmap;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getAssetName(k: IVector3D): string\r\n    {\r\n        const _local_2 = this.getPlaneTextureBitmap(k);\r\n\r\n        return (!_local_2) ? null : _local_2.assetName;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}