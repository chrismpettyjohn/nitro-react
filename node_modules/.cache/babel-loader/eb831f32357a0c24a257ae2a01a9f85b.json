{"ast":null,"code":"import { Point } from '@pixi/math';\nimport { Vector3d } from '../../../room/utils/Vector3d';\nimport { RoomFloorHole } from './RoomFloorHole';\nimport { RoomMapData } from './RoomMapData';\nimport { RoomPlaneData } from './RoomPlaneData';\nimport { RoomWallData } from './RoomWallData';\nexport class RoomPlaneParser {\n  constructor() {\n    this._tileMatrix = void 0;\n    this._tileMatrixOriginal = void 0;\n    this._width = 0;\n    this._height = 0;\n    this._minX = 0;\n    this._maxX = 0;\n    this._minY = 0;\n    this._maxY = 0;\n    this._planes = void 0;\n    this._wallHeight = void 0;\n    this._wallThicknessMultiplier = void 0;\n    this._floorThicknessMultiplier = void 0;\n    this._fixedWallHeight = -1;\n    this._floorHeight = 0;\n    this._floorHoles = void 0;\n    this._floorHoleMatrix = void 0;\n    this._restrictsDragging = void 0;\n    this._restrictsScaling = false;\n    this._restrictedScale = 1;\n    this._tileMatrix = [];\n    this._tileMatrixOriginal = [];\n    this._planes = [];\n    this._floorHoleMatrix = [];\n    this._wallHeight = 3.6;\n    this._wallThicknessMultiplier = 1;\n    this._floorThicknessMultiplier = 1;\n    this._floorHoles = new Map();\n  }\n\n  static getFloorHeight(matricies) {\n    const length = matricies.length;\n    if (!length) return 0;\n    let tileHeight = 0;\n    let i = 0;\n\n    while (i < length) {\n      const matrix = matricies[i];\n      let j = 0;\n\n      while (j < matrix.length) {\n        const height = matrix[j];\n        if (height > tileHeight) tileHeight = height;\n        j++;\n      }\n\n      i++;\n    }\n\n    return tileHeight;\n  }\n\n  static findEntranceTile(matricies) {\n    if (!matricies) return null;\n    const length = matricies.length;\n    if (!length) return null;\n    const _local_6 = [];\n    let i = 0;\n\n    while (i < length) {\n      const matrix = matricies[i];\n      if (!matrix || !matrix.length) return null;\n      let j = 0;\n\n      while (j < matrix.length) {\n        if (matrix[j] >= 0) {\n          _local_6.push(j);\n\n          break;\n        }\n\n        j++;\n      }\n\n      if (_local_6.length < i + 1) _local_6.push(matrix.length + 1);\n      i++;\n    }\n\n    i = 1;\n\n    while (i < _local_6.length - 1) {\n      if (Math.trunc(_local_6[i]) <= Math.trunc(_local_6[i - 1]) - 1 && Math.trunc(_local_6[i]) <= Math.trunc(_local_6[i + 1]) - 1) return new Point(Math.trunc(_local_6[i] | 0), i);\n      i++;\n    }\n\n    return null;\n  }\n\n  static expandFloorTiles(k) {\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    let _local_10;\n\n    let _local_11;\n\n    let _local_12;\n\n    let _local_13;\n\n    let _local_14;\n\n    let _local_15;\n\n    let _local_16;\n\n    let _local_17;\n\n    const _local_2 = k.length;\n    const _local_3 = k[0].length;\n    const _local_4 = [];\n    _local_6 = 0;\n\n    while (_local_6 < _local_2 * 4) {\n      _local_4[_local_6] = [];\n      _local_6++;\n    }\n\n    let _local_9 = 0;\n    _local_6 = 0;\n\n    while (_local_6 < _local_2) {\n      _local_10 = 0;\n      _local_5 = 0;\n\n      while (_local_5 < _local_3) {\n        _local_11 = k[_local_6][_local_5];\n\n        if (_local_11 < 0 || _local_11 <= 0xFF) {\n          _local_8 = 0;\n\n          while (_local_8 < 4) {\n            _local_7 = 0;\n\n            while (_local_7 < 4) {\n              if (_local_4[_local_9 + _local_8] === undefined) _local_4[_local_9 + _local_8] = [];\n              _local_4[_local_9 + _local_8][_local_10 + _local_7] = _local_11 < 0 ? _local_11 : _local_11 * 4;\n              _local_7++;\n            }\n\n            _local_8++;\n          }\n        } else {\n          _local_12 = (_local_11 & 0xFF) * 4;\n          _local_13 = _local_12 + (_local_11 >> 11 & 0x01) * 3;\n          _local_14 = _local_12 + (_local_11 >> 10 & 0x01) * 3;\n          _local_15 = _local_12 + (_local_11 >> 9 & 0x01) * 3;\n          _local_16 = _local_12 + (_local_11 >> 8 & 0x01) * 3;\n          _local_7 = 0;\n\n          while (_local_7 < 3) {\n            _local_17 = _local_7 + 1;\n            _local_4[_local_9][_local_10 + _local_7] = (_local_13 * (3 - _local_7) + _local_14 * _local_7) / 3;\n            _local_4[_local_9 + 3][_local_10 + _local_17] = (_local_15 * (3 - _local_17) + _local_16 * _local_17) / 3;\n            _local_4[_local_9 + _local_17][_local_10] = (_local_13 * (3 - _local_17) + _local_15 * _local_17) / 3;\n            _local_4[_local_9 + _local_7][_local_10 + 3] = (_local_14 * (3 - _local_7) + _local_16 * _local_7) / 3;\n            _local_7++;\n          }\n\n          _local_4[_local_9 + 1][_local_10 + 1] = _local_13 > _local_12 ? _local_12 + 2 : _local_12 + 1;\n          _local_4[_local_9 + 1][_local_10 + 2] = _local_14 > _local_12 ? _local_12 + 2 : _local_12 + 1;\n          _local_4[_local_9 + 2][_local_10 + 1] = _local_15 > _local_12 ? _local_12 + 2 : _local_12 + 1;\n          _local_4[_local_9 + 2][_local_10 + 2] = _local_16 > _local_12 ? _local_12 + 2 : _local_12 + 1;\n        }\n\n        _local_10 = _local_10 + 4;\n        _local_5++;\n      }\n\n      _local_9 = _local_9 + 4;\n      _local_6++;\n    }\n\n    return _local_4;\n  }\n\n  static addTileTypes(k) {\n    let _local_4;\n\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    let _local_9;\n\n    let _local_10;\n\n    let _local_11;\n\n    let _local_12;\n\n    let _local_13;\n\n    let _local_14;\n\n    let _local_15;\n\n    let _local_16;\n\n    let _local_17;\n\n    const _local_2 = k.length - 1;\n\n    const _local_3 = k[0].length - 1;\n\n    _local_5 = 1;\n\n    while (_local_5 < _local_2) {\n      _local_4 = 1;\n\n      while (_local_4 < _local_3) {\n        _local_6 = k[_local_5][_local_4];\n\n        if (_local_6 < 0) {//\n        } else {\n          _local_7 = k[_local_5 - 1][_local_4 - 1] & 0xFF;\n          _local_8 = k[_local_5 - 1][_local_4] & 0xFF;\n          _local_9 = k[_local_5 - 1][_local_4 + 1] & 0xFF;\n          _local_10 = k[_local_5][_local_4 - 1] & 0xFF;\n          _local_11 = k[_local_5][_local_4 + 1] & 0xFF;\n          _local_12 = k[_local_5 + 1][_local_4 - 1] & 0xFF;\n          _local_13 = k[_local_5 + 1][_local_4] & 0xFF;\n          _local_14 = k[_local_5 + 1][_local_4 + 1] & 0xFF;\n          _local_15 = _local_6 + 1;\n          _local_16 = _local_6 - 1;\n          _local_17 = (_local_7 == _local_15 || _local_8 == _local_15 || _local_10 == _local_15 ? 8 : 0) | (_local_9 == _local_15 || _local_8 == _local_15 || _local_11 == _local_15 ? 4 : 0) | (_local_12 == _local_15 || _local_13 == _local_15 || _local_10 == _local_15 ? 2 : 0) | (_local_14 == _local_15 || _local_13 == _local_15 || _local_11 == _local_15 ? 1 : 0);\n\n          if (_local_17 == 15) {\n            _local_17 = 0;\n          }\n\n          k[_local_5][_local_4] = _local_6 | _local_17 << 8;\n        }\n\n        _local_4++;\n      }\n\n      _local_5++;\n    }\n  }\n\n  static unpadHeightMap(k) {\n    k.shift();\n    k.pop();\n\n    for (const _local_2 of k) {\n      _local_2.shift();\n\n      _local_2.pop();\n    }\n  }\n\n  static padHeightMap(k) {\n    const _local_2 = [];\n    const _local_3 = [];\n\n    for (const _local_4 of k) {\n      _local_4.push(RoomPlaneParser.TILE_BLOCKED);\n\n      _local_4.unshift(RoomPlaneParser.TILE_BLOCKED);\n    }\n\n    for (const _local_5 of k[0]) {\n      _local_2.push(RoomPlaneParser.TILE_BLOCKED);\n\n      _local_3.push(RoomPlaneParser.TILE_BLOCKED);\n    }\n\n    k.push(_local_3);\n    k.unshift(_local_2);\n  }\n\n  get minX() {\n    return this._minX;\n  }\n\n  get maxX() {\n    return this._maxX;\n  }\n\n  get minY() {\n    return this._minY;\n  }\n\n  get maxY() {\n    return this._maxY;\n  }\n\n  get tileMapWidth() {\n    return this._width;\n  }\n\n  get tileMapHeight() {\n    return this._height;\n  }\n\n  get planeCount() {\n    return this._planes.length;\n  }\n\n  get floorHeight() {\n    if (this._fixedWallHeight != -1) {\n      return this._fixedWallHeight;\n    }\n\n    return this._floorHeight;\n  }\n\n  get wallHeight() {\n    if (this._fixedWallHeight != -1) {\n      return this._fixedWallHeight + 3.6;\n    }\n\n    return this._wallHeight;\n  }\n\n  set wallHeight(k) {\n    if (k < 0) {\n      k = 0;\n    }\n\n    this._wallHeight = k;\n  }\n\n  get wallThicknessMultiplier() {\n    return this._wallThicknessMultiplier;\n  }\n\n  set wallThicknessMultiplier(k) {\n    if (k < 0) {\n      k = 0;\n    }\n\n    this._wallThicknessMultiplier = k;\n  }\n\n  get floorThicknessMultiplier() {\n    return this._floorThicknessMultiplier;\n  }\n\n  set floorThicknessMultiplier(k) {\n    if (k < 0) {\n      k = 0;\n    }\n\n    this._floorThicknessMultiplier = k;\n  }\n\n  dispose() {\n    this._planes = null;\n    this._tileMatrix = null;\n    this._tileMatrixOriginal = null;\n    this._floorHoleMatrix = null;\n\n    if (this._floorHoles != null) {\n      this._floorHoles.clear();\n\n      this._floorHoles = null;\n    }\n  }\n\n  reset() {\n    this._planes = [];\n    this._tileMatrix = [];\n    this._tileMatrixOriginal = [];\n    this._width = 0;\n    this._height = 0;\n    this._minX = 0;\n    this._maxX = 0;\n    this._minY = 0;\n    this._maxY = 0;\n    this._floorHeight = 0;\n    this._floorHoleMatrix = [];\n  }\n\n  initializeTileMap(width, height) {\n    if (width < 0) width = 0;\n    if (height < 0) height = 0;\n    this._tileMatrix = [];\n    this._tileMatrixOriginal = [];\n    this._floorHoleMatrix = [];\n    let y = 0;\n\n    while (y < height) {\n      const tileMatrix = [];\n      const tileMatrixOriginal = [];\n      const floorHoleMatrix = [];\n      let x = 0;\n\n      while (x < width) {\n        tileMatrix[x] = RoomPlaneParser.TILE_BLOCKED;\n        tileMatrixOriginal[x] = RoomPlaneParser.TILE_BLOCKED;\n        floorHoleMatrix[x] = false;\n        x++;\n      }\n\n      this._tileMatrix.push(tileMatrix);\n\n      this._tileMatrixOriginal.push(tileMatrixOriginal);\n\n      this._floorHoleMatrix.push(floorHoleMatrix);\n\n      y++;\n    }\n\n    this._width = width;\n    this._height = height;\n    this._minX = this._width;\n    this._maxX = -1;\n    this._minY = this._height;\n    this._maxY = -1;\n    return true;\n  }\n\n  setTileHeight(k, _arg_2, _arg_3) {\n    let _local_4;\n\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    if (k >= 0 && k < this._width && _arg_2 >= 0 && _arg_2 < this._height) {\n      _local_4 = this._tileMatrix[_arg_2];\n      _local_4[k] = _arg_3;\n\n      if (_arg_3 >= 0) {\n        if (k < this._minX) {\n          this._minX = k;\n        }\n\n        if (k > this._maxX) {\n          this._maxX = k;\n        }\n\n        if (_arg_2 < this._minY) {\n          this._minY = _arg_2;\n        }\n\n        if (_arg_2 > this._maxY) {\n          this._maxY = _arg_2;\n        }\n      } else {\n        if (k == this._minX || k == this._maxX) {\n          _local_5 = false;\n          _local_6 = this._minY;\n\n          while (_local_6 < this._maxY) {\n            if (this.getTileHeightInternal(k, _local_6) >= 0) {\n              _local_5 = true;\n              break;\n            }\n\n            _local_6++;\n          }\n\n          if (!_local_5) {\n            if (k == this._minX) {\n              this._minX++;\n            }\n\n            if (k == this._maxX) {\n              this._maxX--;\n            }\n          }\n        }\n\n        if (_arg_2 == this._minY || _arg_2 == this._maxY) {\n          _local_7 = false;\n          _local_8 = this._minX;\n\n          while (_local_8 < this._maxX) {\n            if (this.getTileHeight(_local_8, _arg_2) >= 0) {\n              _local_7 = true;\n              break;\n            }\n\n            _local_8++;\n          }\n\n          if (!_local_7) {\n            if (_arg_2 == this._minY) {\n              this._minY++;\n            }\n\n            if (_arg_2 == this._maxY) {\n              this._maxY--;\n            }\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  getTileHeight(k, _arg_2) {\n    if (k < 0 || k >= this._width || _arg_2 < 0 || _arg_2 >= this._height) {\n      return RoomPlaneParser.TILE_BLOCKED;\n    }\n\n    const _local_3 = this._tileMatrix[_arg_2];\n    if (_local_3[k] === undefined) return 0;\n    return Math.abs(_local_3[k]);\n  }\n\n  getTileHeightOriginal(k, _arg_2) {\n    if (k < 0 || k >= this._width || _arg_2 < 0 || _arg_2 >= this._height) {\n      return RoomPlaneParser.TILE_BLOCKED;\n    }\n\n    if (this._floorHoleMatrix[_arg_2][k]) {\n      return RoomPlaneParser.TILE_HOLE;\n    }\n\n    const _local_3 = this._tileMatrixOriginal[_arg_2];\n    return _local_3[k];\n  }\n\n  getTileHeightInternal(k, _arg_2) {\n    if (k < 0 || k >= this._width || _arg_2 < 0 || _arg_2 >= this._height) {\n      return RoomPlaneParser.TILE_BLOCKED;\n    }\n\n    const _local_3 = this._tileMatrix[_arg_2];\n    return _local_3[k];\n  }\n\n  initializeFromTileData() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n\n    let _local_2;\n\n    let _local_3;\n\n    this._fixedWallHeight = k;\n    _local_3 = 0;\n\n    while (_local_3 < this._height) {\n      _local_2 = 0;\n\n      while (_local_2 < this._width) {\n        if (this._tileMatrixOriginal[_local_3] === undefined) this._tileMatrixOriginal[_local_3] = [];\n        this._tileMatrixOriginal[_local_3][_local_2] = this._tileMatrix[_local_3][_local_2];\n        _local_2++;\n      }\n\n      _local_3++;\n    }\n\n    const _local_4 = RoomPlaneParser.findEntranceTile(this._tileMatrix);\n\n    _local_3 = 0;\n\n    while (_local_3 < this._height) {\n      _local_2 = 0;\n\n      while (_local_2 < this._width) {\n        if (this._floorHoleMatrix[_local_3] === undefined) this._floorHoleMatrix[_local_3] = [];\n\n        if (this._floorHoleMatrix[_local_3][_local_2]) {\n          this.setTileHeight(_local_2, _local_3, RoomPlaneParser.TILE_HOLE);\n        }\n\n        _local_2++;\n      }\n\n      _local_3++;\n    }\n\n    return this.initialize(_local_4);\n  }\n\n  initialize(k) {\n    let _local_2 = 0;\n\n    if (k != null) {\n      _local_2 = this.getTileHeight(k.x, k.y);\n      this.setTileHeight(k.x, k.y, RoomPlaneParser.TILE_BLOCKED);\n    }\n\n    this._floorHeight = RoomPlaneParser.getFloorHeight(this._tileMatrix);\n    this.createWallPlanes();\n    const _local_3 = [];\n\n    for (const _local_4 of this._tileMatrix) _local_3.push(_local_4.concat());\n\n    RoomPlaneParser.padHeightMap(_local_3);\n    RoomPlaneParser.addTileTypes(_local_3);\n    RoomPlaneParser.unpadHeightMap(_local_3);\n\n    const _local_5 = RoomPlaneParser.expandFloorTiles(_local_3);\n\n    this.extractPlanes(_local_5);\n\n    if (k != null) {\n      this.setTileHeight(k.x, k.y, _local_2);\n      this.addFloor(new Vector3d(k.x + 0.5, k.y + 0.5, _local_2), new Vector3d(-1, 0, 0), new Vector3d(0, -1, 0), false, false, false, false);\n    }\n\n    return true;\n  }\n\n  generateWallData(k, _arg_2) {\n    let _local_8;\n\n    let _local_9;\n\n    let _local_10;\n\n    let _local_11;\n\n    let _local_12;\n\n    const _local_3 = new RoomWallData();\n\n    const _local_4 = [this.extractTopWall.bind(this), this.extractRightWall.bind(this), this.extractBottomWall.bind(this), this.extractLeftWall.bind(this)];\n    let _local_5 = 0;\n\n    let _local_6 = new Point(k.x, k.y);\n\n    let _local_7 = 0;\n\n    while (_local_7++ < 1000) {\n      _local_8 = false;\n      _local_9 = false;\n      _local_10 = _local_5;\n\n      if (_local_6.x < this.minX || _local_6.x > this.maxX || _local_6.y < this.minY || _local_6.y > this.maxY) {\n        _local_8 = true;\n      }\n\n      _local_11 = _local_4[_local_5](_local_6, _arg_2);\n\n      if (_local_11 == null) {\n        return null;\n      }\n\n      _local_12 = Math.abs(_local_11.x - _local_6.x) + Math.abs(_local_11.y - _local_6.y);\n\n      if (_local_6.x == _local_11.x || _local_6.y == _local_11.y) {\n        _local_5 = (_local_5 - 1 + _local_4.length) % _local_4.length;\n        _local_12 = _local_12 + 1;\n        _local_9 = true;\n      } else {\n        _local_5 = (_local_5 + 1) % _local_4.length;\n        _local_12--;\n      }\n\n      _local_3.addWall(_local_6, _local_10, _local_12, _local_8, _local_9);\n\n      if (_local_11.x == k.x && _local_11.y == k.y && (!(_local_11.x == _local_6.x) || !(_local_11.y == _local_6.y))) {\n        break;\n      }\n\n      _local_6 = _local_11;\n    }\n\n    if (_local_3.count == 0) {\n      return null;\n    }\n\n    return _local_3;\n  }\n\n  hidePeninsulaWallChains(k) {\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    let _local_2 = 0;\n    const _local_3 = k.count;\n\n    while (_local_2 < _local_3) {\n      const _local_4 = _local_2;\n      _local_5 = _local_2;\n      _local_6 = 0;\n      _local_7 = false;\n\n      while (!k.getBorder(_local_2) && _local_2 < _local_3) {\n        if (k.getLeftTurn(_local_2)) {\n          _local_6++;\n        } else {\n          if (_local_6 > 0) {\n            _local_6--;\n          }\n        }\n\n        if (_local_6 > 1) {\n          _local_7 = true;\n        }\n\n        _local_5 = _local_2;\n        _local_2++;\n      }\n\n      if (_local_7) {\n        _local_8 = _local_4;\n\n        while (_local_8 <= _local_5) {\n          k.setHideWall(_local_8, true);\n          _local_8++;\n        }\n      }\n\n      _local_2++;\n    }\n  }\n\n  updateWallsNextToHoles(k) {\n    let _local_4;\n\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    let _local_9;\n\n    let _local_10;\n\n    const _local_2 = k.count;\n    let _local_3 = 0;\n\n    while (_local_3 < _local_2) {\n      if (!k.getHideWall(_local_3)) {\n        _local_4 = k.getCorner(_local_3);\n        _local_5 = k.getDirection(_local_3);\n        _local_6 = k.getLength(_local_3);\n        _local_7 = RoomWallData.WALL_DIRECTION_VECTORS[_local_5];\n        _local_8 = RoomWallData.WALL_NORMAL_VECTORS[_local_5];\n        _local_9 = 0;\n        _local_10 = 0;\n\n        while (_local_10 < _local_6) {\n          if (this.getTileHeightInternal(_local_4.x + _local_10 * _local_7.x - _local_8.x, _local_4.y + _local_10 * _local_7.y - _local_8.y) == RoomPlaneParser.TILE_HOLE) {\n            if (_local_10 > 0 && _local_9 == 0) {\n              k.setLength(_local_3, _local_10);\n              break;\n            }\n\n            _local_9++;\n          } else {\n            if (_local_9 > 0) {\n              k.moveCorner(_local_3, _local_9);\n              break;\n            }\n          }\n\n          _local_10++;\n        }\n\n        if (_local_9 == _local_6) {\n          k.setHideWall(_local_3, true);\n        }\n      }\n\n      _local_3++;\n    }\n  }\n\n  resolveOriginalWallIndex(k, _arg_2, _arg_3) {\n    let _local_10;\n\n    let _local_11;\n\n    let _local_12;\n\n    let _local_13;\n\n    let _local_14;\n\n    let _local_15;\n\n    const _local_4 = Math.min(k.y, _arg_2.y);\n\n    const _local_5 = Math.max(k.y, _arg_2.y);\n\n    const _local_6 = Math.min(k.x, _arg_2.x);\n\n    const _local_7 = Math.max(k.x, _arg_2.x);\n\n    const _local_8 = _arg_3.count;\n    let _local_9 = 0;\n\n    while (_local_9 < _local_8) {\n      _local_10 = _arg_3.getCorner(_local_9);\n      _local_11 = _arg_3.getEndPoint(_local_9);\n\n      if (k.x == _arg_2.x) {\n        if (_local_10.x == k.x && _local_11.x == k.x) {\n          _local_12 = Math.min(_local_10.y, _local_11.y);\n          _local_13 = Math.max(_local_10.y, _local_11.y);\n\n          if (_local_12 <= _local_4 && _local_5 <= _local_13) {\n            return _local_9;\n          }\n        }\n      } else {\n        if (k.y == _arg_2.y) {\n          if (_local_10.y == k.y && _local_11.y == k.y) {\n            _local_14 = Math.min(_local_10.x, _local_11.x);\n            _local_15 = Math.max(_local_10.x, _local_11.x);\n\n            if (_local_14 <= _local_6 && _local_7 <= _local_15) {\n              return _local_9;\n            }\n          }\n        }\n      }\n\n      _local_9++;\n    }\n\n    return -1;\n  }\n\n  hideOriginallyHiddenWalls(k, _arg_2) {\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    let _local_9;\n\n    const _local_3 = k.count;\n    let _local_4 = 0;\n\n    while (_local_4 < _local_3) {\n      if (!k.getHideWall(_local_4)) {\n        _local_5 = k.getCorner(_local_4);\n        _local_6 = new Point(_local_5.x, _local_5.y);\n        _local_7 = RoomWallData.WALL_DIRECTION_VECTORS[k.getDirection(_local_4)];\n        _local_8 = k.getLength(_local_4);\n        _local_6.x = _local_6.x + _local_7.x * _local_8;\n        _local_6.y = _local_6.y + _local_7.y * _local_8;\n        _local_9 = this.resolveOriginalWallIndex(_local_5, _local_6, _arg_2);\n\n        if (_local_9 >= 0) {\n          if (_arg_2.getHideWall(_local_9)) {\n            k.setHideWall(_local_4, true);\n          }\n        } else {\n          k.setHideWall(_local_4, true);\n        }\n      }\n\n      _local_4++;\n    }\n  }\n\n  checkWallHiding(k, _arg_2) {\n    this.hidePeninsulaWallChains(_arg_2);\n    this.updateWallsNextToHoles(k);\n    this.hideOriginallyHiddenWalls(k, _arg_2);\n  }\n\n  addWalls(k, _arg_2) {\n    const _local_3 = k.count;\n    const _local_4 = _arg_2.count;\n    let _local_7 = 0;\n\n    while (_local_7 < _local_3) {\n      if (!k.getHideWall(_local_7)) {\n        const _local_8 = k.getCorner(_local_7);\n\n        const _local_9 = k.getDirection(_local_7);\n\n        const _local_10 = k.getLength(_local_7);\n\n        const _local_11 = RoomWallData.WALL_DIRECTION_VECTORS[_local_9];\n        const _local_12 = RoomWallData.WALL_NORMAL_VECTORS[_local_9];\n\n        let _local_13 = -1;\n\n        let _local_14 = 0;\n\n        while (_local_14 < _local_10) {\n          const _local_27 = this.getTileHeightInternal(_local_8.x + _local_14 * _local_11.x + _local_12.x, _local_8.y + _local_14 * _local_11.y + _local_12.y);\n\n          if (_local_27 >= 0 && (_local_27 < _local_13 || _local_13 < 0)) {\n            _local_13 = _local_27;\n          }\n\n          _local_14++;\n        }\n\n        const _local_15 = _local_13;\n\n        let _local_16 = new Vector3d(_local_8.x, _local_8.y, _local_15);\n\n        _local_16 = Vector3d.sum(_local_16, Vector3d.product(_local_12, 0.5));\n        _local_16 = Vector3d.sum(_local_16, Vector3d.product(_local_11, -0.5));\n\n        const _local_17 = this.wallHeight + Math.min(RoomPlaneParser.MAX_WALL_ADDITIONAL_HEIGHT, this.floorHeight) - _local_13;\n\n        const _local_18 = Vector3d.product(_local_11, -_local_10);\n\n        const _local_19 = new Vector3d(0, 0, _local_17);\n\n        _local_16 = Vector3d.dif(_local_16, _local_18);\n\n        const _local_20 = this.resolveOriginalWallIndex(_local_8, k.getEndPoint(_local_7), _arg_2);\n\n        let _local_5 = 0;\n        let _local_6 = 0;\n\n        if (_local_20 >= 0) {\n          _local_5 = _arg_2.getDirection((_local_20 + 1) % _local_4);\n          _local_6 = _arg_2.getDirection((_local_20 - 1 + _local_4) % _local_4);\n        } else {\n          _local_5 = k.getDirection((_local_7 + 1) % _local_3);\n          _local_6 = k.getDirection((_local_7 - 1 + _local_3) % _local_3);\n        }\n\n        let _local_21 = null;\n\n        if ((_local_5 - _local_9 + 4) % 4 == 3) {\n          _local_21 = RoomWallData.WALL_NORMAL_VECTORS[_local_5];\n        } else {\n          if ((_local_9 - _local_6 + 4) % 4 == 3) {\n            _local_21 = RoomWallData.WALL_NORMAL_VECTORS[_local_6];\n          }\n        }\n\n        const _local_22 = k.getLeftTurn(_local_7);\n\n        const _local_23 = k.getLeftTurn((_local_7 - 1 + _local_3) % _local_3);\n\n        const _local_24 = k.getHideWall((_local_7 + 1) % _local_3);\n\n        const _local_25 = k.getManuallyLeftCut(_local_7);\n\n        const _local_26 = k.getManuallyRightCut(_local_7);\n\n        this.addWall(_local_16, _local_18, _local_19, _local_21, !_local_23 || _local_25, !_local_22 || _local_26, !_local_24);\n      }\n\n      _local_7++;\n    }\n  }\n\n  createWallPlanes() {\n    let _local_13;\n\n    let _local_14;\n\n    const k = this._tileMatrix;\n\n    if (k == null) {\n      return false;\n    }\n\n    let _local_2;\n\n    let _local_3;\n\n    let _local_4;\n\n    const _local_5 = k.length;\n    let _local_6 = 0;\n\n    if (_local_5 == 0) {\n      return false;\n    }\n\n    _local_2 = 0;\n\n    while (_local_2 < _local_5) {\n      _local_4 = k[_local_2];\n\n      if (_local_4 == null || _local_4.length == 0) {\n        return false;\n      }\n\n      if (_local_6 > 0) {\n        _local_6 = Math.min(_local_6, _local_4.length);\n      } else {\n        _local_6 = _local_4.length;\n      }\n\n      _local_2++;\n    }\n\n    const _local_7 = Math.min(RoomPlaneParser.MAX_WALL_ADDITIONAL_HEIGHT, this._fixedWallHeight != -1 ? this._fixedWallHeight : RoomPlaneParser.getFloorHeight(k));\n\n    const _local_8 = this.minX;\n    let _local_9 = this.minY;\n    _local_9 = this.minY;\n\n    while (_local_9 <= this.maxY) {\n      if (this.getTileHeightInternal(_local_8, _local_9) > RoomPlaneParser.TILE_HOLE) {\n        _local_9--;\n        break;\n      }\n\n      _local_9++;\n    }\n\n    if (_local_9 > this.maxY) {\n      return false;\n    }\n\n    const _local_10 = new Point(_local_8, _local_9);\n\n    const _local_11 = this.generateWallData(_local_10, true);\n\n    const _local_12 = this.generateWallData(_local_10, false);\n\n    if (_local_11 != null) {\n      _local_13 = _local_11.count;\n      _local_14 = _local_12.count;\n      this.checkWallHiding(_local_11, _local_12);\n      this.addWalls(_local_11, _local_12);\n    }\n\n    _local_3 = 0;\n\n    while (_local_3 < this.tileMapHeight) {\n      _local_2 = 0;\n\n      while (_local_2 < this.tileMapWidth) {\n        if (this.getTileHeightInternal(_local_2, _local_3) < 0) {\n          this.setTileHeight(_local_2, _local_3, -(_local_7 + this.wallHeight));\n        }\n\n        _local_2++;\n      }\n\n      _local_3++;\n    }\n\n    return true;\n  }\n\n  extractTopWall(k, _arg_2) {\n    if (k == null) {\n      return null;\n    }\n\n    let _local_3 = 1;\n    let _local_4 = RoomPlaneParser.TILE_HOLE;\n\n    if (!_arg_2) {\n      _local_4 = RoomPlaneParser.TILE_BLOCKED;\n    }\n\n    while (_local_3 < 1000) {\n      if (this.getTileHeightInternal(k.x + _local_3, k.y) > _local_4) {\n        return new Point(k.x + _local_3 - 1, k.y);\n      }\n\n      if (this.getTileHeightInternal(k.x + _local_3, k.y + 1) <= _local_4) {\n        return new Point(k.x + _local_3, k.y + 1);\n      }\n\n      _local_3++;\n    }\n\n    return null;\n  }\n\n  extractRightWall(k, _arg_2) {\n    if (k == null) {\n      return null;\n    }\n\n    let _local_3 = 1;\n    let _local_4 = RoomPlaneParser.TILE_HOLE;\n\n    if (!_arg_2) {\n      _local_4 = RoomPlaneParser.TILE_BLOCKED;\n    }\n\n    while (_local_3 < 1000) {\n      if (this.getTileHeightInternal(k.x, k.y + _local_3) > _local_4) {\n        return new Point(k.x, k.y + (_local_3 - 1));\n      }\n\n      if (this.getTileHeightInternal(k.x - 1, k.y + _local_3) <= _local_4) {\n        return new Point(k.x - 1, k.y + _local_3);\n      }\n\n      _local_3++;\n    }\n\n    return null;\n  }\n\n  extractBottomWall(k, _arg_2) {\n    if (k == null) {\n      return null;\n    }\n\n    let _local_3 = 1;\n    let _local_4 = RoomPlaneParser.TILE_HOLE;\n\n    if (!_arg_2) {\n      _local_4 = RoomPlaneParser.TILE_BLOCKED;\n    }\n\n    while (_local_3 < 1000) {\n      if (this.getTileHeightInternal(k.x - _local_3, k.y) > _local_4) {\n        return new Point(k.x - (_local_3 - 1), k.y);\n      }\n\n      if (this.getTileHeightInternal(k.x - _local_3, k.y - 1) <= _local_4) {\n        return new Point(k.x - _local_3, k.y - 1);\n      }\n\n      _local_3++;\n    }\n\n    return null;\n  }\n\n  extractLeftWall(k, _arg_2) {\n    if (k == null) {\n      return null;\n    }\n\n    let _local_3 = 1;\n    let _local_4 = RoomPlaneParser.TILE_HOLE;\n\n    if (!_arg_2) {\n      _local_4 = RoomPlaneParser.TILE_BLOCKED;\n    }\n\n    while (_local_3 < 1000) {\n      if (this.getTileHeightInternal(k.x, k.y - _local_3) > _local_4) {\n        return new Point(k.x, k.y - (_local_3 - 1));\n      }\n\n      if (this.getTileHeightInternal(k.x + 1, k.y - _local_3) <= _local_4) {\n        return new Point(k.x + 1, k.y - _local_3);\n      }\n\n      _local_3++;\n    }\n\n    return null;\n  }\n\n  addWall(k, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7) {\n    this.addPlane(RoomPlaneData.PLANE_WALL, k, _arg_2, _arg_3, [_arg_4]); //this.addPlane(RoomPlaneData.PLANE_LANDSCAPE, k, _arg_2, _arg_3, [_arg_4]);\n\n    const _local_8 = RoomPlaneParser.WALL_THICKNESS * this._wallThicknessMultiplier;\n\n    const _local_9 = RoomPlaneParser.FLOOR_THICKNESS * this._floorThicknessMultiplier;\n\n    const _local_10 = Vector3d.crossProduct(_arg_2, _arg_3);\n\n    const _local_11 = Vector3d.product(_local_10, 1 / _local_10.length * -_local_8);\n\n    this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(k, _arg_3), _arg_2, _local_11, [_local_10, _arg_4]);\n\n    if (_arg_5) {\n      this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(Vector3d.sum(k, _arg_2), _arg_3), Vector3d.product(_arg_3, -(_arg_3.length + _local_9) / _arg_3.length), _local_11, [_local_10, _arg_4]);\n    }\n\n    if (_arg_6) {\n      this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(k, Vector3d.product(_arg_3, -_local_9 / _arg_3.length)), Vector3d.product(_arg_3, (_arg_3.length + _local_9) / _arg_3.length), _local_11, [_local_10, _arg_4]);\n\n      if (_arg_7) {\n        const _local_12 = Vector3d.product(_arg_2, _local_8 / _arg_2.length);\n\n        this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(Vector3d.sum(k, _arg_3), Vector3d.product(_local_12, -1)), _local_12, _local_11, [_local_10, _arg_2, _arg_4]);\n      }\n    }\n  }\n\n  addFloor(k, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7) {\n    let _local_9;\n\n    let _local_10;\n\n    let _local_11;\n\n    const _local_8 = this.addPlane(RoomPlaneData.PLANE_FLOOR, k, _arg_2, _arg_3);\n\n    if (_local_8 != null) {\n      _local_9 = RoomPlaneParser.FLOOR_THICKNESS * this._floorThicknessMultiplier;\n      _local_10 = new Vector3d(0, 0, _local_9);\n      _local_11 = Vector3d.dif(k, _local_10);\n\n      if (_arg_6) {\n        this.addPlane(RoomPlaneData.PLANE_FLOOR, _local_11, _arg_2, _local_10);\n      }\n\n      if (_arg_7) {\n        this.addPlane(RoomPlaneData.PLANE_FLOOR, Vector3d.sum(_local_11, Vector3d.sum(_arg_2, _arg_3)), Vector3d.product(_arg_2, -1), _local_10);\n      }\n\n      if (_arg_4) {\n        this.addPlane(RoomPlaneData.PLANE_FLOOR, Vector3d.sum(_local_11, _arg_3), Vector3d.product(_arg_3, -1), _local_10);\n      }\n\n      if (_arg_5) {\n        this.addPlane(RoomPlaneData.PLANE_FLOOR, Vector3d.sum(_local_11, _arg_2), _arg_3, _local_10);\n      }\n    }\n  }\n\n  initializeFromMapData(data) {\n    if (!data) return false;\n    this.reset();\n    this.resetFloorHoles();\n    const width = data.width;\n    const height = data.height;\n    const wallHeight = data.wallHeight;\n    const fixedWallsHeight = data.fixedWallsHeight;\n    this.initializeTileMap(width, height);\n\n    if (data.tileMap) {\n      let y = 0;\n\n      while (y < data.tileMap.length) {\n        const row = data.tileMap[y];\n\n        if (row) {\n          let x = 0;\n\n          while (x < row.length) {\n            const column = row[x];\n            if (column) this.setTileHeight(x, y, column.height);\n            x++;\n          }\n        }\n\n        y++;\n      }\n    }\n\n    if (data.holeMap && data.holeMap.length) {\n      let index = 0;\n\n      while (index < data.holeMap.length) {\n        const hole = data.holeMap[index];\n        if (!hole) continue;\n        this.addFloorHole(hole.id, hole.x, hole.y, hole.width, hole.height);\n        index++;\n      }\n\n      this.initializeHoleMap();\n    }\n\n    this.wallHeight = wallHeight;\n    this.restrictsDragging = data.restrictsDragging;\n    this.restrictsScaling = data.restrictsScaling;\n    this.restrictedScale = data.restrictedScale;\n    this.initializeFromTileData(fixedWallsHeight);\n    return true;\n  }\n\n  addPlane(k, _arg_2, _arg_3, _arg_4) {\n    let _arg_5 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n    if (_arg_3.length == 0 || _arg_4.length == 0) {\n      return null;\n    }\n\n    const _local_6 = new RoomPlaneData(k, _arg_2, _arg_3, _arg_4, _arg_5);\n\n    this._planes.push(_local_6);\n\n    return _local_6;\n  }\n\n  getMapData() {\n    const data = new RoomMapData();\n    data.width = this._width;\n    data.height = this._height;\n    data.wallHeight = this._wallHeight;\n    data.fixedWallsHeight = this._fixedWallHeight;\n    data.dimensions.minX = this.minX;\n    data.dimensions.maxX = this.maxX;\n    data.dimensions.minY = this.minY;\n    data.dimensions.maxY = this.maxY;\n    data.restrictsDragging = this.restrictsDragging;\n    data.restrictsScaling = this.restrictsScaling;\n    data.restrictedScale = this.restrictedScale;\n    let y = 0;\n\n    while (y < this._height) {\n      const tileRow = [];\n      const tileMatrix = this._tileMatrixOriginal[y];\n      let x = 0;\n\n      while (x < this._width) {\n        const tileHeight = tileMatrix[x];\n        tileRow.push({\n          height: tileHeight\n        });\n        x++;\n      }\n\n      data.tileMap.push(tileRow);\n      y++;\n    }\n\n    for (const [holeId, holeData] of this._floorHoles.entries()) {\n      if (!holeData) continue;\n      data.holeMap.push({\n        id: holeId,\n        x: holeData.x,\n        y: holeData.y,\n        width: holeData.width,\n        height: holeData.height\n      });\n    }\n\n    return data;\n  }\n\n  getPlaneLocation(k) {\n    if (k < 0 || k >= this.planeCount) return null;\n    const planeData = this._planes[k];\n    if (!planeData) return null;\n    return planeData.loc;\n  }\n\n  getPlaneNormal(k) {\n    if (k < 0 || k >= this.planeCount) return null;\n    const planeData = this._planes[k];\n    if (!planeData) return null;\n    return planeData.normal;\n  }\n\n  getPlaneLeftSide(k) {\n    if (k < 0 || k >= this.planeCount) return null;\n    const planeData = this._planes[k];\n    if (!planeData) return null;\n    return planeData.leftSide;\n  }\n\n  getPlaneRightSide(k) {\n    if (k < 0 || k >= this.planeCount) return null;\n    const planeData = this._planes[k];\n    if (!planeData) return null;\n    return planeData.rightSide;\n  }\n\n  getPlaneNormalDirection(k) {\n    if (k < 0 || k >= this.planeCount) return null;\n    const planeData = this._planes[k];\n    if (!planeData) return null;\n    return planeData.normalDirection;\n  }\n\n  getPlaneSecondaryNormals(k) {\n    let _local_3;\n\n    let _local_4;\n\n    if (k < 0 || k >= this.planeCount) {\n      return null;\n    }\n\n    const _local_2 = this._planes[k];\n\n    if (_local_2 != null) {\n      _local_3 = [];\n      _local_4 = 0;\n\n      while (_local_4 < _local_2.secondaryNormalCount) {\n        _local_3.push(_local_2.getSecondaryNormal(_local_4));\n\n        _local_4++;\n      }\n\n      return _local_3;\n    }\n\n    return null;\n  }\n\n  getPlaneType(k) {\n    if (k < 0 || k >= this.planeCount) return RoomPlaneData.PLANE_UNDEFINED;\n    const planeData = this._planes[k];\n    if (!planeData) return RoomPlaneData.PLANE_UNDEFINED;\n    return planeData.type;\n  }\n\n  getPlaneMaskCount(k) {\n    if (k < 0 || k >= this.planeCount) return 0;\n    const planeData = this._planes[k];\n    if (!planeData) return 0;\n    return planeData.maskCount;\n  }\n\n  getPlaneMaskLeftSideLoc(k, _arg_2) {\n    if (k < 0 || k >= this.planeCount) return -1;\n    const planeData = this._planes[k];\n    if (!planeData) return -1;\n    return planeData.getMaskLeftSideLoc(_arg_2);\n  }\n\n  getPlaneMaskRightSideLoc(k, _arg_2) {\n    if (k < 0 || k >= this.planeCount) return -1;\n    const planeData = this._planes[k];\n    if (!planeData) return -1;\n    return planeData.getMaskRightSideLoc(_arg_2);\n  }\n\n  getPlaneMaskLeftSideLength(k, _arg_2) {\n    if (k < 0 || k >= this.planeCount) return -1;\n    const planeData = this._planes[k];\n    if (!planeData) return -1;\n    return planeData.getMaskLeftSideLength(_arg_2);\n  }\n\n  getPlaneMaskRightSideLength(k, _arg_2) {\n    if (k < 0 || k >= this.planeCount) return -1;\n    const planeData = this._planes[k];\n    if (!planeData) return -1;\n    return planeData.getMaskRightSideLength(_arg_2);\n  }\n\n  addFloorHole(k, _arg_2, _arg_3, _arg_4, _arg_5) {\n    this.removeFloorHole(k);\n\n    this._floorHoles.set(k, new RoomFloorHole(_arg_2, _arg_3, _arg_4, _arg_5));\n  }\n\n  removeFloorHole(k) {\n    this._floorHoles.delete(k);\n  }\n\n  resetFloorHoles() {\n    this._floorHoles.clear();\n  }\n\n  initializeHoleMap() {\n    let k;\n\n    let _local_2;\n\n    let _local_3;\n\n    let _local_5;\n\n    let _local_6;\n\n    let _local_7;\n\n    let _local_8;\n\n    let _local_9;\n\n    _local_2 = 0;\n\n    while (_local_2 < this._height) {\n      _local_3 = this._floorHoleMatrix[_local_2];\n      k = 0;\n\n      while (k < this._width) {\n        _local_3[k] = false;\n        k++;\n      }\n\n      _local_2++;\n    }\n\n    for (const _local_4 of this._floorHoles.values()) {\n      _local_5 = _local_4;\n\n      if (_local_5 != null) {\n        _local_6 = _local_5.x;\n        _local_7 = _local_5.x + _local_5.width - 1;\n        _local_8 = _local_5.y;\n        _local_9 = _local_5.y + _local_5.height - 1;\n        _local_6 = _local_6 < 0 ? 0 : _local_6;\n        _local_7 = _local_7 >= this._width ? this._width - 1 : _local_7;\n        _local_8 = _local_8 < 0 ? 0 : _local_8;\n        _local_9 = _local_9 >= this._height ? this._height - 1 : _local_9;\n        _local_2 = _local_8;\n\n        while (_local_2 <= _local_9) {\n          _local_3 = this._floorHoleMatrix[_local_2];\n          k = _local_6;\n\n          while (k <= _local_7) {\n            _local_3[k] = true;\n            k++;\n          }\n\n          _local_2++;\n        }\n      }\n    }\n  }\n\n  extractPlanes(k) {\n    let _local_7;\n\n    let _local_8;\n\n    let _local_9;\n\n    let _local_10;\n\n    let _local_11;\n\n    let _local_12;\n\n    let _local_13;\n\n    let _local_14;\n\n    let _local_15;\n\n    let _local_16;\n\n    let _local_17;\n\n    let _local_18;\n\n    let _local_19;\n\n    let _local_20;\n\n    let _local_21;\n\n    const _local_2 = k.length;\n    const _local_3 = k[0].length;\n    const _local_4 = [];\n    let _local_5 = 0;\n\n    while (_local_5 < _local_2) {\n      _local_4[_local_5] = [];\n      _local_5++;\n    }\n\n    let _local_6 = 0;\n\n    while (_local_6 < _local_2) {\n      _local_7 = 0;\n\n      while (_local_7 < _local_3) {\n        _local_8 = k[_local_6][_local_7];\n\n        if (_local_8 < 0 || _local_4[_local_6][_local_7]) {//\n        } else {\n          _local_11 = _local_7 == 0 || !(k[_local_6][_local_7 - 1] == _local_8);\n          _local_12 = _local_6 == 0 || !(k[_local_6 - 1][_local_7] == _local_8);\n          _local_9 = _local_7 + 1;\n\n          while (_local_9 < _local_3) {\n            if (!(k[_local_6][_local_9] == _local_8) || _local_4[_local_6][_local_9] || _local_6 > 0 && k[_local_6 - 1][_local_9] == _local_8 == _local_12) {\n              break;\n            }\n\n            _local_9++;\n          }\n\n          _local_13 = _local_9 == _local_3 || !(k[_local_6][_local_9] == _local_8);\n          _local_17 = false;\n          _local_10 = _local_6 + 1;\n\n          while (_local_10 < _local_2 && !_local_17) {\n            _local_14 = !(k[_local_10][_local_7] == _local_8);\n            _local_17 = _local_14 || _local_7 > 0 && k[_local_10][_local_7 - 1] == _local_8 == _local_11 || _local_9 < _local_3 && k[_local_10][_local_9] == _local_8 == _local_13;\n            _local_15 = _local_7;\n\n            while (_local_15 < _local_9) {\n              if (k[_local_10][_local_15] == _local_8 == _local_14) {\n                _local_17 = true;\n                _local_9 = _local_15;\n                break;\n              }\n\n              _local_15++;\n            }\n\n            if (_local_17) {\n              break;\n            }\n\n            _local_10++;\n          }\n\n          _local_14 = _local_14 || _local_10 == _local_2;\n          _local_13 = _local_9 == _local_3 || !(k[_local_6][_local_9] == _local_8);\n          _local_16 = _local_6;\n\n          while (_local_16 < _local_10) {\n            _local_15 = _local_7;\n\n            while (_local_15 < _local_9) {\n              _local_4[_local_16][_local_15] = true;\n              _local_15++;\n            }\n\n            _local_16++;\n          }\n\n          _local_18 = _local_7 / 4 - 0.5;\n          _local_19 = _local_6 / 4 - 0.5;\n          _local_20 = (_local_9 - _local_7) / 4;\n          _local_21 = (_local_10 - _local_6) / 4;\n          this.addFloor(new Vector3d(_local_18 + _local_20, _local_19 + _local_21, _local_8 / 4), new Vector3d(-_local_20, 0, 0), new Vector3d(0, -_local_21, 0), _local_13, _local_11, _local_14, _local_12);\n        }\n\n        _local_7++;\n      }\n\n      _local_6++;\n    }\n  }\n\n  get restrictsDragging() {\n    return this._restrictsDragging;\n  }\n\n  set restrictsDragging(flag) {\n    this._restrictsDragging = flag;\n  }\n\n  get restrictsScaling() {\n    return this._restrictsScaling;\n  }\n\n  set restrictsScaling(flag) {\n    this._restrictsScaling = flag;\n  }\n\n  get restrictedScale() {\n    return this._restrictedScale;\n  }\n\n  set restrictedScale(scale) {\n    this._restrictedScale = scale;\n  }\n\n}\nRoomPlaneParser.FLOOR_THICKNESS = 0.25;\nRoomPlaneParser.WALL_THICKNESS = 0.25;\nRoomPlaneParser.MAX_WALL_ADDITIONAL_HEIGHT = 20;\nRoomPlaneParser.TILE_BLOCKED = -110;\nRoomPlaneParser.TILE_HOLE = -100;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/RoomPlaneParser.ts"],"names":["Point","Vector3d","RoomFloorHole","RoomMapData","RoomPlaneData","RoomWallData","RoomPlaneParser","constructor","_tileMatrix","_tileMatrixOriginal","_width","_height","_minX","_maxX","_minY","_maxY","_planes","_wallHeight","_wallThicknessMultiplier","_floorThicknessMultiplier","_fixedWallHeight","_floorHeight","_floorHoles","_floorHoleMatrix","_restrictsDragging","_restrictsScaling","_restrictedScale","Map","getFloorHeight","matricies","length","tileHeight","i","matrix","j","height","findEntranceTile","_local_6","push","Math","trunc","expandFloorTiles","k","_local_5","_local_7","_local_8","_local_10","_local_11","_local_12","_local_13","_local_14","_local_15","_local_16","_local_17","_local_2","_local_3","_local_4","_local_9","undefined","addTileTypes","unpadHeightMap","shift","pop","padHeightMap","TILE_BLOCKED","unshift","minX","maxX","minY","maxY","tileMapWidth","tileMapHeight","planeCount","floorHeight","wallHeight","wallThicknessMultiplier","floorThicknessMultiplier","dispose","clear","reset","initializeTileMap","width","y","tileMatrix","tileMatrixOriginal","floorHoleMatrix","x","setTileHeight","_arg_2","_arg_3","getTileHeightInternal","getTileHeight","abs","getTileHeightOriginal","TILE_HOLE","initializeFromTileData","initialize","createWallPlanes","concat","extractPlanes","addFloor","generateWallData","extractTopWall","bind","extractRightWall","extractBottomWall","extractLeftWall","addWall","count","hidePeninsulaWallChains","getBorder","getLeftTurn","setHideWall","updateWallsNextToHoles","getHideWall","getCorner","getDirection","getLength","WALL_DIRECTION_VECTORS","WALL_NORMAL_VECTORS","setLength","moveCorner","resolveOriginalWallIndex","min","max","getEndPoint","hideOriginallyHiddenWalls","checkWallHiding","addWalls","_local_27","sum","product","MAX_WALL_ADDITIONAL_HEIGHT","_local_18","_local_19","dif","_local_20","_local_21","_local_22","_local_23","_local_24","_local_25","getManuallyLeftCut","_local_26","getManuallyRightCut","_arg_4","_arg_5","_arg_6","_arg_7","addPlane","PLANE_WALL","WALL_THICKNESS","FLOOR_THICKNESS","crossProduct","PLANE_FLOOR","initializeFromMapData","data","resetFloorHoles","fixedWallsHeight","tileMap","row","column","holeMap","index","hole","addFloorHole","id","initializeHoleMap","restrictsDragging","restrictsScaling","restrictedScale","getMapData","dimensions","tileRow","holeId","holeData","entries","getPlaneLocation","planeData","loc","getPlaneNormal","normal","getPlaneLeftSide","leftSide","getPlaneRightSide","rightSide","getPlaneNormalDirection","normalDirection","getPlaneSecondaryNormals","secondaryNormalCount","getSecondaryNormal","getPlaneType","PLANE_UNDEFINED","type","getPlaneMaskCount","maskCount","getPlaneMaskLeftSideLoc","getMaskLeftSideLoc","getPlaneMaskRightSideLoc","getMaskRightSideLoc","getPlaneMaskLeftSideLength","getMaskLeftSideLength","getPlaneMaskRightSideLength","getMaskRightSideLength","removeFloorHole","set","delete","values","flag","scale"],"mappings":"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","sourcesContent":["import { Point } from '@pixi/math';\r\nimport { IVector3D } from '../../../room/utils/IVector3D';\r\nimport { Vector3d } from '../../../room/utils/Vector3d';\r\nimport { RoomFloorHole } from './RoomFloorHole';\r\nimport { RoomMapData } from './RoomMapData';\r\nimport { RoomPlaneData } from './RoomPlaneData';\r\nimport { RoomWallData } from './RoomWallData';\r\n\r\nexport class RoomPlaneParser\r\n{\r\n    private static FLOOR_THICKNESS: number = 0.25;\r\n    private static WALL_THICKNESS: number = 0.25;\r\n    private static MAX_WALL_ADDITIONAL_HEIGHT: number = 20;\r\n\r\n    public static TILE_BLOCKED: number = -110;\r\n    public static TILE_HOLE: number = -100;\r\n\r\n    private _tileMatrix: number[][];\r\n    private _tileMatrixOriginal: number[][];\r\n    private _width: number = 0;\r\n    private _height: number = 0;\r\n    private _minX: number = 0;\r\n    private _maxX: number = 0;\r\n    private _minY: number = 0;\r\n    private _maxY: number = 0;\r\n    private _planes: RoomPlaneData[];\r\n    private _wallHeight: number;\r\n    private _wallThicknessMultiplier: number;\r\n    private _floorThicknessMultiplier: number;\r\n    private _fixedWallHeight: number = -1;\r\n    private _floorHeight: number = 0;\r\n    private _floorHoles: Map<number, RoomFloorHole>;\r\n    private _floorHoleMatrix: boolean[][];\r\n    private _restrictsDragging: boolean;\r\n    private _restrictsScaling: boolean = false;\r\n    private _restrictedScale: number = 1;\r\n\r\n    constructor()\r\n    {\r\n        this._tileMatrix = [];\r\n        this._tileMatrixOriginal = [];\r\n        this._planes = [];\r\n        this._floorHoleMatrix = [];\r\n        this._wallHeight = 3.6;\r\n        this._wallThicknessMultiplier = 1;\r\n        this._floorThicknessMultiplier = 1;\r\n        this._floorHoles = new Map();\r\n    }\r\n\r\n    private static getFloorHeight(matricies: number[][]): number\r\n    {\r\n        const length = matricies.length;\r\n\r\n        if(!length) return 0;\r\n\r\n        let tileHeight = 0;\r\n\r\n        let i = 0;\r\n\r\n        while(i < length)\r\n        {\r\n            const matrix = matricies[i];\r\n\r\n            let j = 0;\r\n\r\n            while(j < matrix.length)\r\n            {\r\n                const height = matrix[j];\r\n\r\n                if(height > tileHeight) tileHeight = height;\r\n\r\n                j++;\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        return tileHeight;\r\n    }\r\n\r\n    private static findEntranceTile(matricies: number[][]): Point\r\n    {\r\n        if(!matricies) return null;\r\n\r\n        const length = matricies.length;\r\n\r\n        if(!length) return null;\r\n\r\n        const _local_6: number[] = [];\r\n\r\n        let i = 0;\r\n\r\n        while(i < length)\r\n        {\r\n            const matrix = matricies[i];\r\n\r\n            if(!matrix || !matrix.length) return null;\r\n\r\n            let j = 0;\r\n\r\n            while(j < matrix.length)\r\n            {\r\n                if(matrix[j] >= 0)\r\n                {\r\n                    _local_6.push(j);\r\n\r\n                    break;\r\n                }\r\n\r\n                j++;\r\n            }\r\n\r\n            if(_local_6.length < (i + 1)) _local_6.push((matrix.length + 1));\r\n\r\n            i++;\r\n        }\r\n\r\n        i = 1;\r\n\r\n        while(i < (_local_6.length - 1))\r\n        {\r\n            if(((Math.trunc(_local_6[i]) <= (Math.trunc(_local_6[(i - 1)]) - 1)) && (Math.trunc(_local_6[i]) <= (Math.trunc(_local_6[(i + 1)]) - 1)))) return new Point(Math.trunc((_local_6[i]) | 0), i);\r\n\r\n            i++;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static expandFloorTiles(k: number[][]): number[][]\r\n    {\r\n        let _local_5: number;\r\n        let _local_6: number;\r\n        let _local_7: number;\r\n        let _local_8: number;\r\n        let _local_10: number;\r\n        let _local_11: number;\r\n        let _local_12: number;\r\n        let _local_13: number;\r\n        let _local_14: number;\r\n        let _local_15: number;\r\n        let _local_16: number;\r\n        let _local_17: number;\r\n        const _local_2 = k.length;\r\n        const _local_3: number = k[0].length;\r\n        const _local_4: number[][] = [];\r\n        _local_6 = 0;\r\n        while(_local_6 < (_local_2 * 4))\r\n        {\r\n            _local_4[_local_6] = [];\r\n            _local_6++;\r\n        }\r\n        let _local_9 = 0;\r\n        _local_6 = 0;\r\n        while(_local_6 < _local_2)\r\n        {\r\n            _local_10 = 0;\r\n            _local_5 = 0;\r\n            while(_local_5 < _local_3)\r\n            {\r\n                _local_11 = k[_local_6][_local_5];\r\n                if(((_local_11 < 0) || (_local_11 <= 0xFF)))\r\n                {\r\n                    _local_8 = 0;\r\n                    while(_local_8 < 4)\r\n                    {\r\n                        _local_7 = 0;\r\n                        while(_local_7 < 4)\r\n                        {\r\n                            if(_local_4[(_local_9 + _local_8)] === undefined) _local_4[(_local_9 + _local_8)] = [];\r\n\r\n                            _local_4[(_local_9 + _local_8)][(_local_10 + _local_7)] = ((_local_11 < 0) ? _local_11 : (_local_11 * 4));\r\n                            _local_7++;\r\n                        }\r\n                        _local_8++;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    _local_12 = ((_local_11 & 0xFF) * 4);\r\n                    _local_13 = (_local_12 + (((_local_11 >> 11) & 0x01) * 3));\r\n                    _local_14 = (_local_12 + (((_local_11 >> 10) & 0x01) * 3));\r\n                    _local_15 = (_local_12 + (((_local_11 >> 9) & 0x01) * 3));\r\n                    _local_16 = (_local_12 + (((_local_11 >> 8) & 0x01) * 3));\r\n                    _local_7 = 0;\r\n                    while(_local_7 < 3)\r\n                    {\r\n                        _local_17 = (_local_7 + 1);\r\n                        _local_4[_local_9][(_local_10 + _local_7)] = (((_local_13 * (3 - _local_7)) + (_local_14 * _local_7)) / 3);\r\n                        _local_4[(_local_9 + 3)][(_local_10 + _local_17)] = (((_local_15 * (3 - _local_17)) + (_local_16 * _local_17)) / 3);\r\n                        _local_4[(_local_9 + _local_17)][_local_10] = (((_local_13 * (3 - _local_17)) + (_local_15 * _local_17)) / 3);\r\n                        _local_4[(_local_9 + _local_7)][(_local_10 + 3)] = (((_local_14 * (3 - _local_7)) + (_local_16 * _local_7)) / 3);\r\n                        _local_7++;\r\n                    }\r\n                    _local_4[(_local_9 + 1)][(_local_10 + 1)] = ((_local_13 > _local_12) ? (_local_12 + 2) : (_local_12 + 1));\r\n                    _local_4[(_local_9 + 1)][(_local_10 + 2)] = ((_local_14 > _local_12) ? (_local_12 + 2) : (_local_12 + 1));\r\n                    _local_4[(_local_9 + 2)][(_local_10 + 1)] = ((_local_15 > _local_12) ? (_local_12 + 2) : (_local_12 + 1));\r\n                    _local_4[(_local_9 + 2)][(_local_10 + 2)] = ((_local_16 > _local_12) ? (_local_12 + 2) : (_local_12 + 1));\r\n                }\r\n                _local_10 = (_local_10 + 4);\r\n                _local_5++;\r\n            }\r\n            _local_9 = (_local_9 + 4);\r\n            _local_6++;\r\n        }\r\n        return _local_4;\r\n    }\r\n\r\n    private static addTileTypes(k: number[][]): void\r\n    {\r\n        let _local_4: number;\r\n        let _local_5: number;\r\n        let _local_6: number;\r\n        let _local_7: number;\r\n        let _local_8: number;\r\n        let _local_9: number;\r\n        let _local_10: number;\r\n        let _local_11: number;\r\n        let _local_12: number;\r\n        let _local_13: number;\r\n        let _local_14: number;\r\n        let _local_15: number;\r\n        let _local_16: number;\r\n        let _local_17: number;\r\n        const _local_2: number = (k.length - 1);\r\n        const _local_3: number = (k[0].length - 1);\r\n        _local_5 = 1;\r\n        while(_local_5 < _local_2)\r\n        {\r\n            _local_4 = 1;\r\n            while(_local_4 < _local_3)\r\n            {\r\n                _local_6 = k[_local_5][_local_4];\r\n                if(_local_6 < 0)\r\n                {\r\n                    //\r\n                }\r\n                else\r\n                {\r\n                    _local_7 = (k[(_local_5 - 1)][(_local_4 - 1)] & 0xFF);\r\n                    _local_8 = (k[(_local_5 - 1)][_local_4] & 0xFF);\r\n                    _local_9 = (k[(_local_5 - 1)][(_local_4 + 1)] & 0xFF);\r\n                    _local_10 = (k[_local_5][(_local_4 - 1)] & 0xFF);\r\n                    _local_11 = (k[_local_5][(_local_4 + 1)] & 0xFF);\r\n                    _local_12 = (k[(_local_5 + 1)][(_local_4 - 1)] & 0xFF);\r\n                    _local_13 = (k[(_local_5 + 1)][_local_4] & 0xFF);\r\n                    _local_14 = (k[(_local_5 + 1)][(_local_4 + 1)] & 0xFF);\r\n                    _local_15 = (_local_6 + 1);\r\n                    _local_16 = (_local_6 - 1);\r\n                    _local_17 = (((((((_local_7 == _local_15) || (_local_8 == _local_15)) || (_local_10 == _local_15)) ? 8 : 0) | ((((_local_9 == _local_15) || (_local_8 == _local_15)) || (_local_11 == _local_15)) ? 4 : 0)) | ((((_local_12 == _local_15) || (_local_13 == _local_15)) || (_local_10 == _local_15)) ? 2 : 0)) | ((((_local_14 == _local_15) || (_local_13 == _local_15)) || (_local_11 == _local_15)) ? 1 : 0));\r\n                    if(_local_17 == 15)\r\n                    {\r\n                        _local_17 = 0;\r\n                    }\r\n                    k[_local_5][_local_4] = (_local_6 | (_local_17 << 8));\r\n                }\r\n                _local_4++;\r\n            }\r\n            _local_5++;\r\n        }\r\n    }\r\n\r\n    private static unpadHeightMap(k: number[][]): void\r\n    {\r\n        k.shift();\r\n        k.pop();\r\n\r\n        for(const _local_2 of k)\r\n        {\r\n            _local_2.shift();\r\n            _local_2.pop();\r\n        }\r\n    }\r\n\r\n    private static padHeightMap(k: number[][]): void\r\n    {\r\n        const _local_2: number[] = [];\r\n        const _local_3: number[] = [];\r\n        for(const _local_4 of k)\r\n        {\r\n            _local_4.push(RoomPlaneParser.TILE_BLOCKED);\r\n            _local_4.unshift(RoomPlaneParser.TILE_BLOCKED);\r\n        }\r\n        for(const _local_5 of k[0])\r\n        {\r\n            _local_2.push(RoomPlaneParser.TILE_BLOCKED);\r\n            _local_3.push(RoomPlaneParser.TILE_BLOCKED);\r\n        }\r\n        k.push(_local_3);\r\n        k.unshift(_local_2);\r\n    }\r\n\r\n\r\n    public get minX(): number\r\n    {\r\n        return this._minX;\r\n    }\r\n\r\n    public get maxX(): number\r\n    {\r\n        return this._maxX;\r\n    }\r\n\r\n    public get minY(): number\r\n    {\r\n        return this._minY;\r\n    }\r\n\r\n    public get maxY(): number\r\n    {\r\n        return this._maxY;\r\n    }\r\n\r\n    public get tileMapWidth(): number\r\n    {\r\n        return this._width;\r\n    }\r\n\r\n    public get tileMapHeight(): number\r\n    {\r\n        return this._height;\r\n    }\r\n\r\n    public get planeCount(): number\r\n    {\r\n        return this._planes.length;\r\n    }\r\n\r\n    public get floorHeight(): number\r\n    {\r\n        if(this._fixedWallHeight != -1)\r\n        {\r\n            return this._fixedWallHeight;\r\n        }\r\n        return this._floorHeight;\r\n    }\r\n\r\n    public get wallHeight(): number\r\n    {\r\n        if(this._fixedWallHeight != -1)\r\n        {\r\n            return this._fixedWallHeight + 3.6;\r\n        }\r\n        return this._wallHeight;\r\n    }\r\n\r\n    public set wallHeight(k: number)\r\n    {\r\n        if(k < 0)\r\n        {\r\n            k = 0;\r\n        }\r\n        this._wallHeight = k;\r\n    }\r\n\r\n    public get wallThicknessMultiplier(): number\r\n    {\r\n        return this._wallThicknessMultiplier;\r\n    }\r\n\r\n    public set wallThicknessMultiplier(k: number)\r\n    {\r\n        if(k < 0)\r\n        {\r\n            k = 0;\r\n        }\r\n        this._wallThicknessMultiplier = k;\r\n    }\r\n\r\n    public get floorThicknessMultiplier(): number\r\n    {\r\n        return this._floorThicknessMultiplier;\r\n    }\r\n\r\n    public set floorThicknessMultiplier(k: number)\r\n    {\r\n        if(k < 0)\r\n        {\r\n            k = 0;\r\n        }\r\n        this._floorThicknessMultiplier = k;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._planes = null;\r\n        this._tileMatrix = null;\r\n        this._tileMatrixOriginal = null;\r\n        this._floorHoleMatrix = null;\r\n        if(this._floorHoles != null)\r\n        {\r\n            this._floorHoles.clear();\r\n            this._floorHoles = null;\r\n        }\r\n    }\r\n\r\n    public reset(): void\r\n    {\r\n        this._planes = [];\r\n        this._tileMatrix = [];\r\n        this._tileMatrixOriginal = [];\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._minX = 0;\r\n        this._maxX = 0;\r\n        this._minY = 0;\r\n        this._maxY = 0;\r\n        this._floorHeight = 0;\r\n        this._floorHoleMatrix = [];\r\n    }\r\n\r\n    public initializeTileMap(width: number, height: number): boolean\r\n    {\r\n        if(width < 0) width = 0;\r\n\r\n        if(height < 0) height = 0;\r\n\r\n        this._tileMatrix = [];\r\n        this._tileMatrixOriginal = [];\r\n        this._floorHoleMatrix = [];\r\n\r\n        let y = 0;\r\n\r\n        while(y < height)\r\n        {\r\n            const tileMatrix = [];\r\n            const tileMatrixOriginal = [];\r\n            const floorHoleMatrix = [];\r\n\r\n            let x = 0;\r\n\r\n            while(x < width)\r\n            {\r\n                tileMatrix[x] = RoomPlaneParser.TILE_BLOCKED;\r\n                tileMatrixOriginal[x] = RoomPlaneParser.TILE_BLOCKED;\r\n                floorHoleMatrix[x] = false;\r\n\r\n                x++;\r\n            }\r\n\r\n            this._tileMatrix.push(tileMatrix);\r\n            this._tileMatrixOriginal.push(tileMatrixOriginal);\r\n            this._floorHoleMatrix.push(floorHoleMatrix);\r\n\r\n            y++;\r\n        }\r\n\r\n        this._width = width;\r\n        this._height = height;\r\n        this._minX = this._width;\r\n        this._maxX = -1;\r\n        this._minY = this._height;\r\n        this._maxY = -1;\r\n\r\n        return true;\r\n    }\r\n\r\n    public setTileHeight(k: number, _arg_2: number, _arg_3: number): boolean\r\n    {\r\n        let _local_4: number[];\r\n        let _local_5: boolean;\r\n        let _local_6: number;\r\n        let _local_7: boolean;\r\n        let _local_8: number;\r\n        if(((((k >= 0) && (k < this._width)) && (_arg_2 >= 0)) && (_arg_2 < this._height)))\r\n        {\r\n            _local_4 = this._tileMatrix[_arg_2];\r\n\r\n            _local_4[k] = _arg_3;\r\n            if(_arg_3 >= 0)\r\n            {\r\n                if(k < this._minX)\r\n                {\r\n                    this._minX = k;\r\n                }\r\n                if(k > this._maxX)\r\n                {\r\n                    this._maxX = k;\r\n                }\r\n                if(_arg_2 < this._minY)\r\n                {\r\n                    this._minY = _arg_2;\r\n                }\r\n                if(_arg_2 > this._maxY)\r\n                {\r\n                    this._maxY = _arg_2;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(((k == this._minX) || (k == this._maxX)))\r\n                {\r\n                    _local_5 = false;\r\n                    _local_6 = this._minY;\r\n                    while(_local_6 < this._maxY)\r\n                    {\r\n                        if(this.getTileHeightInternal(k, _local_6) >= 0)\r\n                        {\r\n                            _local_5 = true;\r\n                            break;\r\n                        }\r\n                        _local_6++;\r\n                    }\r\n                    if(!_local_5)\r\n                    {\r\n                        if(k == this._minX)\r\n                        {\r\n                            this._minX++;\r\n                        }\r\n                        if(k == this._maxX)\r\n                        {\r\n                            this._maxX--;\r\n                        }\r\n                    }\r\n                }\r\n                if(((_arg_2 == this._minY) || (_arg_2 == this._maxY)))\r\n                {\r\n                    _local_7 = false;\r\n                    _local_8 = this._minX;\r\n                    while(_local_8 < this._maxX)\r\n                    {\r\n                        if(this.getTileHeight(_local_8, _arg_2) >= 0)\r\n                        {\r\n                            _local_7 = true;\r\n                            break;\r\n                        }\r\n                        _local_8++;\r\n                    }\r\n                    if(!_local_7)\r\n                    {\r\n                        if(_arg_2 == this._minY)\r\n                        {\r\n                            this._minY++;\r\n                        }\r\n                        if(_arg_2 == this._maxY)\r\n                        {\r\n                            this._maxY--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public getTileHeight(k: number, _arg_2: number): number\r\n    {\r\n        if(((((k < 0) || (k >= this._width)) || (_arg_2 < 0)) || (_arg_2 >= this._height)))\r\n        {\r\n            return RoomPlaneParser.TILE_BLOCKED;\r\n        }\r\n\r\n        const _local_3 = this._tileMatrix[_arg_2];\r\n\r\n        if(_local_3[k] === undefined) return 0;\r\n\r\n        return Math.abs(_local_3[k]);\r\n    }\r\n\r\n    private getTileHeightOriginal(k: number, _arg_2: number): number\r\n    {\r\n        if(((((k < 0) || (k >= this._width)) || (_arg_2 < 0)) || (_arg_2 >= this._height)))\r\n        {\r\n            return RoomPlaneParser.TILE_BLOCKED;\r\n        }\r\n        if(this._floorHoleMatrix[_arg_2][k])\r\n        {\r\n            return RoomPlaneParser.TILE_HOLE;\r\n        }\r\n        const _local_3 = this._tileMatrixOriginal[_arg_2];\r\n        return _local_3[k];\r\n    }\r\n\r\n    private getTileHeightInternal(k: number, _arg_2: number): number\r\n    {\r\n        if(((((k < 0) || (k >= this._width)) || (_arg_2 < 0)) || (_arg_2 >= this._height)))\r\n        {\r\n            return RoomPlaneParser.TILE_BLOCKED;\r\n        }\r\n        const _local_3 = this._tileMatrix[_arg_2];\r\n        return _local_3[k];\r\n    }\r\n\r\n    public initializeFromTileData(k: number=-1): boolean\r\n    {\r\n        let _local_2: number;\r\n        let _local_3: number;\r\n        this._fixedWallHeight = k;\r\n        _local_3 = 0;\r\n        while(_local_3 < this._height)\r\n        {\r\n            _local_2 = 0;\r\n            while(_local_2 < this._width)\r\n            {\r\n                if(this._tileMatrixOriginal[_local_3] === undefined) this._tileMatrixOriginal[_local_3] = [];\r\n                this._tileMatrixOriginal[_local_3][_local_2] = this._tileMatrix[_local_3][_local_2];\r\n                _local_2++;\r\n            }\r\n            _local_3++;\r\n        }\r\n        const _local_4: Point = RoomPlaneParser.findEntranceTile(this._tileMatrix);\r\n\r\n        _local_3 = 0;\r\n        while(_local_3 < this._height)\r\n        {\r\n            _local_2 = 0;\r\n            while(_local_2 < this._width)\r\n            {\r\n                if(this._floorHoleMatrix[_local_3] === undefined) this._floorHoleMatrix[_local_3] = [];\r\n                if(this._floorHoleMatrix[_local_3][_local_2])\r\n                {\r\n                    this.setTileHeight(_local_2, _local_3, RoomPlaneParser.TILE_HOLE);\r\n                }\r\n                _local_2++;\r\n            }\r\n            _local_3++;\r\n        }\r\n\r\n        return this.initialize(_local_4);\r\n    }\r\n\r\n    private initialize(k: Point): boolean\r\n    {\r\n        let _local_2 = 0;\r\n        if(k != null)\r\n        {\r\n            _local_2 = this.getTileHeight(k.x, k.y);\r\n            this.setTileHeight(k.x, k.y, RoomPlaneParser.TILE_BLOCKED);\r\n        }\r\n        this._floorHeight = RoomPlaneParser.getFloorHeight(this._tileMatrix);\r\n        this.createWallPlanes();\r\n        const _local_3: number[][] = [];\r\n\r\n        for(const _local_4 of this._tileMatrix) _local_3.push(_local_4.concat());\r\n\r\n        RoomPlaneParser.padHeightMap(_local_3);\r\n        RoomPlaneParser.addTileTypes(_local_3);\r\n        RoomPlaneParser.unpadHeightMap(_local_3);\r\n        const _local_5 = RoomPlaneParser.expandFloorTiles(_local_3);\r\n        this.extractPlanes(_local_5);\r\n        if(k != null)\r\n        {\r\n            this.setTileHeight(k.x, k.y, _local_2);\r\n            this.addFloor(new Vector3d((k.x + 0.5), (k.y + 0.5), _local_2), new Vector3d(-1, 0, 0), new Vector3d(0, -1, 0), false, false, false, false);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private generateWallData(k: Point, _arg_2: boolean): RoomWallData\r\n    {\r\n        let _local_8: boolean;\r\n        let _local_9: boolean;\r\n        let _local_10: number;\r\n        let _local_11: Point;\r\n        let _local_12: number;\r\n        const _local_3: RoomWallData = new RoomWallData();\r\n        const _local_4: Function[] = [this.extractTopWall.bind(this), this.extractRightWall.bind(this), this.extractBottomWall.bind(this), this.extractLeftWall.bind(this)];\r\n        let _local_5 = 0;\r\n        let _local_6: Point = new Point(k.x, k.y);\r\n        let _local_7 = 0;\r\n        while(_local_7++ < 1000)\r\n        {\r\n            _local_8 = false;\r\n            _local_9 = false;\r\n            _local_10 = _local_5;\r\n            if(((((_local_6.x < this.minX) || (_local_6.x > this.maxX)) || (_local_6.y < this.minY)) || (_local_6.y > this.maxY)))\r\n            {\r\n                _local_8 = true;\r\n            }\r\n            _local_11 = _local_4[_local_5](_local_6, _arg_2);\r\n            if(_local_11 == null)\r\n            {\r\n                return null;\r\n            }\r\n            _local_12 = (Math.abs((_local_11.x - _local_6.x)) + Math.abs((_local_11.y - _local_6.y)));\r\n            if(((_local_6.x == _local_11.x) || (_local_6.y == _local_11.y)))\r\n            {\r\n                _local_5 = (((_local_5 - 1) + _local_4.length) % _local_4.length);\r\n                _local_12 = (_local_12 + 1);\r\n                _local_9 = true;\r\n            }\r\n            else\r\n            {\r\n                _local_5 = ((_local_5 + 1) % _local_4.length);\r\n                _local_12--;\r\n            }\r\n            _local_3.addWall(_local_6, _local_10, _local_12, _local_8, _local_9);\r\n            if((((_local_11.x == k.x) && (_local_11.y == k.y)) && ((!(_local_11.x == _local_6.x)) || (!(_local_11.y == _local_6.y)))))\r\n            {\r\n                break;\r\n            }\r\n            _local_6 = _local_11;\r\n        }\r\n        if(_local_3.count == 0)\r\n        {\r\n            return null;\r\n        }\r\n        return _local_3;\r\n    }\r\n\r\n    private hidePeninsulaWallChains(k: RoomWallData): void\r\n    {\r\n        let _local_5: number;\r\n        let _local_6: number;\r\n        let _local_7: boolean;\r\n        let _local_8: number;\r\n        let _local_2 = 0;\r\n        const _local_3: number = k.count;\r\n        while(_local_2 < _local_3)\r\n        {\r\n            const _local_4 = _local_2;\r\n\r\n            _local_5 = _local_2;\r\n            _local_6 = 0;\r\n            _local_7 = false;\r\n            while(((!(k.getBorder(_local_2))) && (_local_2 < _local_3)))\r\n            {\r\n                if(k.getLeftTurn(_local_2))\r\n                {\r\n                    _local_6++;\r\n                }\r\n                else\r\n                {\r\n                    if(_local_6 > 0)\r\n                    {\r\n                        _local_6--;\r\n                    }\r\n                }\r\n                if(_local_6 > 1)\r\n                {\r\n                    _local_7 = true;\r\n                }\r\n                _local_5 = _local_2;\r\n                _local_2++;\r\n            }\r\n            if(_local_7)\r\n            {\r\n                _local_8 = _local_4;\r\n                while(_local_8 <= _local_5)\r\n                {\r\n                    k.setHideWall(_local_8, true);\r\n                    _local_8++;\r\n                }\r\n            }\r\n            _local_2++;\r\n        }\r\n    }\r\n\r\n    private updateWallsNextToHoles(k: RoomWallData): void\r\n    {\r\n        let _local_4: Point;\r\n        let _local_5: number;\r\n        let _local_6: number;\r\n        let _local_7: IVector3D;\r\n        let _local_8: IVector3D;\r\n        let _local_9: number;\r\n        let _local_10: number;\r\n        const _local_2: number = k.count;\r\n        let _local_3 = 0;\r\n        while(_local_3 < _local_2)\r\n        {\r\n            if(!k.getHideWall(_local_3))\r\n            {\r\n                _local_4 = k.getCorner(_local_3);\r\n                _local_5 = k.getDirection(_local_3);\r\n                _local_6 = k.getLength(_local_3);\r\n                _local_7 = RoomWallData.WALL_DIRECTION_VECTORS[_local_5];\r\n                _local_8 = RoomWallData.WALL_NORMAL_VECTORS[_local_5];\r\n                _local_9 = 0;\r\n                _local_10 = 0;\r\n                while(_local_10 < _local_6)\r\n                {\r\n                    if(this.getTileHeightInternal(((_local_4.x + (_local_10 * _local_7.x)) - _local_8.x), ((_local_4.y + (_local_10 * _local_7.y)) - _local_8.y)) == RoomPlaneParser.TILE_HOLE)\r\n                    {\r\n                        if(((_local_10 > 0) && (_local_9 == 0)))\r\n                        {\r\n                            k.setLength(_local_3, _local_10);\r\n                            break;\r\n                        }\r\n                        _local_9++;\r\n                    }\r\n                    else\r\n                    {\r\n                        if(_local_9 > 0)\r\n                        {\r\n                            k.moveCorner(_local_3, _local_9);\r\n                            break;\r\n                        }\r\n                    }\r\n                    _local_10++;\r\n                }\r\n                if(_local_9 == _local_6)\r\n                {\r\n                    k.setHideWall(_local_3, true);\r\n                }\r\n            }\r\n            _local_3++;\r\n        }\r\n    }\r\n\r\n    private resolveOriginalWallIndex(k: Point, _arg_2: Point, _arg_3: RoomWallData): number\r\n    {\r\n        let _local_10: Point;\r\n        let _local_11: Point;\r\n        let _local_12: number;\r\n        let _local_13: number;\r\n        let _local_14: number;\r\n        let _local_15: number;\r\n        const _local_4: number = Math.min(k.y, _arg_2.y);\r\n        const _local_5: number = Math.max(k.y, _arg_2.y);\r\n        const _local_6: number = Math.min(k.x, _arg_2.x);\r\n        const _local_7: number = Math.max(k.x, _arg_2.x);\r\n        const _local_8: number = _arg_3.count;\r\n        let _local_9 = 0;\r\n        while(_local_9 < _local_8)\r\n        {\r\n            _local_10 = _arg_3.getCorner(_local_9);\r\n            _local_11 = _arg_3.getEndPoint(_local_9);\r\n            if(k.x == _arg_2.x)\r\n            {\r\n                if(((_local_10.x == k.x) && (_local_11.x == k.x)))\r\n                {\r\n                    _local_12 = Math.min(_local_10.y, _local_11.y);\r\n                    _local_13 = Math.max(_local_10.y, _local_11.y);\r\n                    if(((_local_12 <= _local_4) && (_local_5 <= _local_13)))\r\n                    {\r\n                        return _local_9;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(k.y == _arg_2.y)\r\n                {\r\n                    if(((_local_10.y == k.y) && (_local_11.y == k.y)))\r\n                    {\r\n                        _local_14 = Math.min(_local_10.x, _local_11.x);\r\n                        _local_15 = Math.max(_local_10.x, _local_11.x);\r\n                        if(((_local_14 <= _local_6) && (_local_7 <= _local_15)))\r\n                        {\r\n                            return _local_9;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _local_9++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    private hideOriginallyHiddenWalls(k: RoomWallData, _arg_2: RoomWallData): void\r\n    {\r\n        let _local_5: Point;\r\n        let _local_6: Point;\r\n        let _local_7: IVector3D;\r\n        let _local_8: number;\r\n        let _local_9: number;\r\n        const _local_3: number = k.count;\r\n        let _local_4 = 0;\r\n        while(_local_4 < _local_3)\r\n        {\r\n            if(!k.getHideWall(_local_4))\r\n            {\r\n                _local_5 = k.getCorner(_local_4);\r\n                _local_6 = new Point(_local_5.x, _local_5.y);\r\n                _local_7 = RoomWallData.WALL_DIRECTION_VECTORS[k.getDirection(_local_4)];\r\n                _local_8 = k.getLength(_local_4);\r\n                _local_6.x = (_local_6.x + (_local_7.x * _local_8));\r\n                _local_6.y = (_local_6.y + (_local_7.y * _local_8));\r\n                _local_9 = this.resolveOriginalWallIndex(_local_5, _local_6, _arg_2);\r\n                if(_local_9 >= 0)\r\n                {\r\n                    if(_arg_2.getHideWall(_local_9))\r\n                    {\r\n                        k.setHideWall(_local_4, true);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    k.setHideWall(_local_4, true);\r\n                }\r\n            }\r\n            _local_4++;\r\n        }\r\n    }\r\n\r\n    private checkWallHiding(k: RoomWallData, _arg_2: RoomWallData): void\r\n    {\r\n        this.hidePeninsulaWallChains(_arg_2);\r\n        this.updateWallsNextToHoles(k);\r\n        this.hideOriginallyHiddenWalls(k, _arg_2);\r\n    }\r\n\r\n    private addWalls(k: RoomWallData, _arg_2: RoomWallData): void\r\n    {\r\n        const _local_3 = k.count;\r\n        const _local_4 = _arg_2.count;\r\n        let _local_7 = 0;\r\n\r\n        while(_local_7 < _local_3)\r\n        {\r\n            if(!k.getHideWall(_local_7))\r\n            {\r\n                const _local_8 = k.getCorner(_local_7);\r\n                const _local_9 = k.getDirection(_local_7);\r\n                const _local_10 = k.getLength(_local_7);\r\n                const _local_11 = RoomWallData.WALL_DIRECTION_VECTORS[_local_9];\r\n                const _local_12 = RoomWallData.WALL_NORMAL_VECTORS[_local_9];\r\n                let _local_13 = -1;\r\n                let _local_14 = 0;\r\n\r\n                while(_local_14 < _local_10)\r\n                {\r\n                    const _local_27 = this.getTileHeightInternal(((_local_8.x + (_local_14 * _local_11.x)) + _local_12.x), ((_local_8.y + (_local_14 * _local_11.y)) + _local_12.y));\r\n\r\n                    if(((_local_27 >= 0) && ((_local_27 < _local_13) || (_local_13 < 0))))\r\n                    {\r\n                        _local_13 = _local_27;\r\n                    }\r\n\r\n                    _local_14++;\r\n                }\r\n\r\n                const _local_15 = _local_13;\r\n\r\n                let _local_16 = new Vector3d(_local_8.x, _local_8.y, _local_15);\r\n                _local_16 = Vector3d.sum(_local_16, Vector3d.product(_local_12, 0.5));\r\n                _local_16 = Vector3d.sum(_local_16, Vector3d.product(_local_11, -0.5));\r\n\r\n                const _local_17 = ((this.wallHeight + Math.min(RoomPlaneParser.MAX_WALL_ADDITIONAL_HEIGHT, this.floorHeight)) - _local_13);\r\n                const _local_18 = Vector3d.product(_local_11, -(_local_10));\r\n                const _local_19 = new Vector3d(0, 0, _local_17);\r\n\r\n                _local_16 = Vector3d.dif(_local_16, _local_18);\r\n\r\n                const _local_20 = this.resolveOriginalWallIndex(_local_8, k.getEndPoint(_local_7), _arg_2);\r\n\r\n                let _local_5 = 0;\r\n                let _local_6 = 0;\r\n\r\n                if(_local_20 >= 0)\r\n                {\r\n                    _local_5 = _arg_2.getDirection(((_local_20 + 1) % _local_4));\r\n                    _local_6 = _arg_2.getDirection((((_local_20 - 1) + _local_4) % _local_4));\r\n                }\r\n                else\r\n                {\r\n                    _local_5 = k.getDirection(((_local_7 + 1) % _local_3));\r\n                    _local_6 = k.getDirection((((_local_7 - 1) + _local_3) % _local_3));\r\n                }\r\n\r\n                let _local_21 = null;\r\n\r\n                if((((_local_5 - _local_9) + 4) % 4) == 3)\r\n                {\r\n                    _local_21 = RoomWallData.WALL_NORMAL_VECTORS[_local_5];\r\n                }\r\n                else\r\n                {\r\n                    if((((_local_9 - _local_6) + 4) % 4) == 3)\r\n                    {\r\n                        _local_21 = RoomWallData.WALL_NORMAL_VECTORS[_local_6];\r\n                    }\r\n                }\r\n\r\n                const _local_22 = k.getLeftTurn(_local_7);\r\n                const _local_23 = k.getLeftTurn((((_local_7 - 1) + _local_3) % _local_3));\r\n                const _local_24 = k.getHideWall(((_local_7 + 1) % _local_3));\r\n                const _local_25 = k.getManuallyLeftCut(_local_7);\r\n                const _local_26 = k.getManuallyRightCut(_local_7);\r\n\r\n                this.addWall(_local_16, _local_18, _local_19, _local_21, ((!(_local_23)) || (_local_25)), ((!(_local_22)) || (_local_26)), (!(_local_24)));\r\n            }\r\n\r\n            _local_7++;\r\n        }\r\n    }\r\n\r\n    private createWallPlanes(): boolean\r\n    {\r\n        let _local_13: number;\r\n        let _local_14: number;\r\n        const k = this._tileMatrix;\r\n        if(k == null)\r\n        {\r\n            return false;\r\n        }\r\n        let _local_2: number;\r\n        let _local_3: number;\r\n        let _local_4: number[];\r\n        const _local_5: number = k.length;\r\n        let _local_6 = 0;\r\n        if(_local_5 == 0)\r\n        {\r\n            return false;\r\n        }\r\n        _local_2 = 0;\r\n        while(_local_2 < _local_5)\r\n        {\r\n            _local_4 = k[_local_2];\r\n            if(((_local_4 == null) || (_local_4.length == 0)))\r\n            {\r\n                return false;\r\n            }\r\n            if(_local_6 > 0)\r\n            {\r\n                _local_6 = Math.min(_local_6, _local_4.length);\r\n            }\r\n            else\r\n            {\r\n                _local_6 = _local_4.length;\r\n            }\r\n            _local_2++;\r\n        }\r\n        const _local_7: number = Math.min(RoomPlaneParser.MAX_WALL_ADDITIONAL_HEIGHT, ((this._fixedWallHeight != -1) ? this._fixedWallHeight : RoomPlaneParser.getFloorHeight(k)));\r\n        const _local_8: number = this.minX;\r\n        let _local_9: number = this.minY;\r\n        _local_9 = this.minY;\r\n        while(_local_9 <= this.maxY)\r\n        {\r\n            if(this.getTileHeightInternal(_local_8, _local_9) > RoomPlaneParser.TILE_HOLE)\r\n            {\r\n                _local_9--;\r\n                break;\r\n            }\r\n            _local_9++;\r\n        }\r\n        if(_local_9 > this.maxY)\r\n        {\r\n            return false;\r\n        }\r\n        const _local_10: Point = new Point(_local_8, _local_9);\r\n        const _local_11: RoomWallData = this.generateWallData(_local_10, true);\r\n        const _local_12: RoomWallData = this.generateWallData(_local_10, false);\r\n        if(_local_11 != null)\r\n        {\r\n            _local_13 = _local_11.count;\r\n            _local_14 = _local_12.count;\r\n            this.checkWallHiding(_local_11, _local_12);\r\n            this.addWalls(_local_11, _local_12);\r\n        }\r\n        _local_3 = 0;\r\n        while(_local_3 < this.tileMapHeight)\r\n        {\r\n            _local_2 = 0;\r\n            while(_local_2 < this.tileMapWidth)\r\n            {\r\n                if(this.getTileHeightInternal(_local_2, _local_3) < 0)\r\n                {\r\n                    this.setTileHeight(_local_2, _local_3, -(_local_7 + this.wallHeight));\r\n                }\r\n                _local_2++;\r\n            }\r\n            _local_3++;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private extractTopWall(k: Point, _arg_2: boolean): Point\r\n    {\r\n        if(k == null)\r\n        {\r\n            return null;\r\n        }\r\n        let _local_3 = 1;\r\n        let _local_4: number = RoomPlaneParser.TILE_HOLE;\r\n        if(!_arg_2)\r\n        {\r\n            _local_4 = RoomPlaneParser.TILE_BLOCKED;\r\n        }\r\n        while(_local_3 < 1000)\r\n        {\r\n            if(this.getTileHeightInternal((k.x + _local_3), k.y) > _local_4)\r\n            {\r\n                return new Point(((k.x + _local_3) - 1), k.y);\r\n            }\r\n            if(this.getTileHeightInternal((k.x + _local_3), (k.y + 1)) <= _local_4)\r\n            {\r\n                return new Point((k.x + _local_3), (k.y + 1));\r\n            }\r\n            _local_3++;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private extractRightWall(k: Point, _arg_2: boolean): Point\r\n    {\r\n        if(k == null)\r\n        {\r\n            return null;\r\n        }\r\n        let _local_3 = 1;\r\n        let _local_4: number = RoomPlaneParser.TILE_HOLE;\r\n        if(!_arg_2)\r\n        {\r\n            _local_4 = RoomPlaneParser.TILE_BLOCKED;\r\n        }\r\n        while(_local_3 < 1000)\r\n        {\r\n            if(this.getTileHeightInternal(k.x, (k.y + _local_3)) > _local_4)\r\n            {\r\n                return new Point(k.x, (k.y + (_local_3 - 1)));\r\n            }\r\n            if(this.getTileHeightInternal((k.x - 1), (k.y + _local_3)) <= _local_4)\r\n            {\r\n                return new Point((k.x - 1), (k.y + _local_3));\r\n            }\r\n            _local_3++;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private extractBottomWall(k: Point, _arg_2: boolean): Point\r\n    {\r\n        if(k == null)\r\n        {\r\n            return null;\r\n        }\r\n        let _local_3 = 1;\r\n        let _local_4: number = RoomPlaneParser.TILE_HOLE;\r\n        if(!_arg_2)\r\n        {\r\n            _local_4 = RoomPlaneParser.TILE_BLOCKED;\r\n        }\r\n        while(_local_3 < 1000)\r\n        {\r\n            if(this.getTileHeightInternal((k.x - _local_3), k.y) > _local_4)\r\n            {\r\n                return new Point((k.x - (_local_3 - 1)), k.y);\r\n            }\r\n            if(this.getTileHeightInternal((k.x - _local_3), (k.y - 1)) <= _local_4)\r\n            {\r\n                return new Point((k.x - _local_3), (k.y - 1));\r\n            }\r\n            _local_3++;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private extractLeftWall(k: Point, _arg_2: boolean): Point\r\n    {\r\n        if(k == null)\r\n        {\r\n            return null;\r\n        }\r\n        let _local_3 = 1;\r\n        let _local_4: number = RoomPlaneParser.TILE_HOLE;\r\n        if(!_arg_2)\r\n        {\r\n            _local_4 = RoomPlaneParser.TILE_BLOCKED;\r\n        }\r\n        while(_local_3 < 1000)\r\n        {\r\n            if(this.getTileHeightInternal(k.x, (k.y - _local_3)) > _local_4)\r\n            {\r\n                return new Point(k.x, (k.y - (_local_3 - 1)));\r\n            }\r\n            if(this.getTileHeightInternal((k.x + 1), (k.y - _local_3)) <= _local_4)\r\n            {\r\n                return new Point((k.x + 1), (k.y - _local_3));\r\n            }\r\n            _local_3++;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private addWall(k: IVector3D, _arg_2: IVector3D, _arg_3: IVector3D, _arg_4: IVector3D, _arg_5: boolean, _arg_6: boolean, _arg_7: boolean): void\r\n    {\r\n        this.addPlane(RoomPlaneData.PLANE_WALL, k, _arg_2, _arg_3, [_arg_4]);\r\n        //this.addPlane(RoomPlaneData.PLANE_LANDSCAPE, k, _arg_2, _arg_3, [_arg_4]);\r\n        const _local_8: number = (RoomPlaneParser.WALL_THICKNESS * this._wallThicknessMultiplier);\r\n        const _local_9: number = (RoomPlaneParser.FLOOR_THICKNESS * this._floorThicknessMultiplier);\r\n        const _local_10:Vector3d = Vector3d.crossProduct(_arg_2, _arg_3);\r\n        const _local_11:Vector3d = Vector3d.product(_local_10, ((1 / _local_10.length) * -(_local_8)));\r\n        this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(k, _arg_3), _arg_2, _local_11, [_local_10, _arg_4]);\r\n        if(_arg_5)\r\n        {\r\n            this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(Vector3d.sum(k, _arg_2), _arg_3), Vector3d.product(_arg_3, (-(_arg_3.length + _local_9) / _arg_3.length)), _local_11, [_local_10, _arg_4]);\r\n        }\r\n        if(_arg_6)\r\n        {\r\n            this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(k, Vector3d.product(_arg_3, (-(_local_9) / _arg_3.length))), Vector3d.product(_arg_3, ((_arg_3.length + _local_9) / _arg_3.length)), _local_11, [_local_10, _arg_4]);\r\n            if(_arg_7)\r\n            {\r\n                const _local_12 = Vector3d.product(_arg_2, (_local_8 / _arg_2.length));\r\n                this.addPlane(RoomPlaneData.PLANE_WALL, Vector3d.sum(Vector3d.sum(k, _arg_3), Vector3d.product(_local_12, -1)), _local_12, _local_11, [_local_10, _arg_2, _arg_4]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addFloor(k: IVector3D, _arg_2: IVector3D, _arg_3: IVector3D, _arg_4: boolean, _arg_5: boolean, _arg_6: boolean, _arg_7: boolean): void\r\n    {\r\n        let _local_9: number;\r\n        let _local_10:Vector3d;\r\n        let _local_11:Vector3d;\r\n        const _local_8: RoomPlaneData = this.addPlane(RoomPlaneData.PLANE_FLOOR, k, _arg_2, _arg_3);\r\n        if(_local_8 != null)\r\n        {\r\n            _local_9 = (RoomPlaneParser.FLOOR_THICKNESS * this._floorThicknessMultiplier);\r\n            _local_10 = new Vector3d(0, 0, _local_9);\r\n            _local_11 = Vector3d.dif(k, _local_10);\r\n            if(_arg_6)\r\n            {\r\n                this.addPlane(RoomPlaneData.PLANE_FLOOR, _local_11, _arg_2, _local_10);\r\n            }\r\n            if(_arg_7)\r\n            {\r\n                this.addPlane(RoomPlaneData.PLANE_FLOOR, Vector3d.sum(_local_11, Vector3d.sum(_arg_2, _arg_3)), Vector3d.product(_arg_2, -1), _local_10);\r\n            }\r\n            if(_arg_4)\r\n            {\r\n                this.addPlane(RoomPlaneData.PLANE_FLOOR, Vector3d.sum(_local_11, _arg_3), Vector3d.product(_arg_3, -1), _local_10);\r\n            }\r\n            if(_arg_5)\r\n            {\r\n                this.addPlane(RoomPlaneData.PLANE_FLOOR, Vector3d.sum(_local_11, _arg_2), _arg_3, _local_10);\r\n            }\r\n        }\r\n    }\r\n\r\n    public initializeFromMapData(data: RoomMapData): boolean\r\n    {\r\n        if(!data) return false;\r\n\r\n        this.reset();\r\n\r\n        this.resetFloorHoles();\r\n\r\n        const width = data.width;\r\n        const height = data.height;\r\n        const wallHeight = data.wallHeight;\r\n        const fixedWallsHeight = data.fixedWallsHeight;\r\n\r\n        this.initializeTileMap(width, height);\r\n\r\n        if(data.tileMap)\r\n        {\r\n            let y = 0;\r\n\r\n            while(y < data.tileMap.length)\r\n            {\r\n                const row = data.tileMap[y];\r\n\r\n                if(row)\r\n                {\r\n                    let x = 0;\r\n\r\n                    while(x < row.length)\r\n                    {\r\n                        const column = row[x];\r\n\r\n                        if(column) this.setTileHeight(x, y, column.height);\r\n\r\n                        x++;\r\n                    }\r\n                }\r\n\r\n                y++;\r\n            }\r\n        }\r\n\r\n        if(data.holeMap && data.holeMap.length)\r\n        {\r\n            let index = 0;\r\n\r\n            while(index < data.holeMap.length)\r\n            {\r\n                const hole = data.holeMap[index];\r\n\r\n                if(!hole) continue;\r\n\r\n                this.addFloorHole(hole.id, hole.x, hole.y, hole.width, hole.height);\r\n\r\n                index++;\r\n            }\r\n\r\n            this.initializeHoleMap();\r\n        }\r\n\r\n        this.wallHeight = wallHeight;\r\n        this.restrictsDragging = data.restrictsDragging;\r\n        this.restrictsScaling = data.restrictsScaling;\r\n        this.restrictedScale = data.restrictedScale;\r\n\r\n        this.initializeFromTileData(fixedWallsHeight);\r\n\r\n        return true;\r\n    }\r\n\r\n    private addPlane(k: number, _arg_2: IVector3D, _arg_3: IVector3D, _arg_4: IVector3D, _arg_5: IVector3D[] = null): RoomPlaneData\r\n    {\r\n        if(((_arg_3.length == 0) || (_arg_4.length == 0)))\r\n        {\r\n            return null;\r\n        }\r\n        const _local_6: RoomPlaneData = new RoomPlaneData(k, _arg_2, _arg_3, _arg_4, _arg_5);\r\n        this._planes.push(_local_6);\r\n        return _local_6;\r\n    }\r\n\r\n    public getMapData(): RoomMapData\r\n    {\r\n        const data = new RoomMapData();\r\n\r\n        data.width = this._width;\r\n        data.height = this._height;\r\n        data.wallHeight = this._wallHeight;\r\n        data.fixedWallsHeight = this._fixedWallHeight;\r\n        data.dimensions.minX = this.minX;\r\n        data.dimensions.maxX = this.maxX;\r\n        data.dimensions.minY = this.minY;\r\n        data.dimensions.maxY = this.maxY;\r\n        data.restrictsDragging = this.restrictsDragging;\r\n        data.restrictsScaling = this.restrictsScaling;\r\n        data.restrictedScale = this.restrictedScale;\r\n\r\n        let y = 0;\r\n\r\n        while(y < this._height)\r\n        {\r\n            const tileRow: { height: number }[] = [];\r\n            const tileMatrix = this._tileMatrixOriginal[y];\r\n\r\n            let x = 0;\r\n\r\n            while(x < this._width)\r\n            {\r\n                const tileHeight = tileMatrix[x];\r\n\r\n                tileRow.push({ height: tileHeight });\r\n\r\n                x++;\r\n            }\r\n\r\n            data.tileMap.push(tileRow);\r\n\r\n            y++;\r\n        }\r\n\r\n        for(const [ holeId, holeData ] of this._floorHoles.entries())\r\n        {\r\n            if(!holeData) continue;\r\n\r\n            data.holeMap.push({\r\n                id: holeId,\r\n                x: holeData.x,\r\n                y: holeData.y,\r\n                width: holeData.width,\r\n                height: holeData.height\r\n            });\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    public getPlaneLocation(k: number): IVector3D\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return null;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return null;\r\n\r\n        return planeData.loc;\r\n    }\r\n\r\n    public getPlaneNormal(k: number): IVector3D\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return null;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return null;\r\n\r\n        return planeData.normal;\r\n    }\r\n\r\n    public getPlaneLeftSide(k: number): IVector3D\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return null;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return null;\r\n\r\n        return planeData.leftSide;\r\n    }\r\n\r\n    public getPlaneRightSide(k: number): IVector3D\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return null;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return null;\r\n\r\n        return planeData.rightSide;\r\n    }\r\n\r\n    public getPlaneNormalDirection(k: number): IVector3D\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return null;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return null;\r\n\r\n        return planeData.normalDirection;\r\n    }\r\n\r\n    public getPlaneSecondaryNormals(k: number): IVector3D[]\r\n    {\r\n        let _local_3: IVector3D[];\r\n        let _local_4: number;\r\n        if(((k < 0) || (k >= this.planeCount)))\r\n        {\r\n            return null;\r\n        }\r\n        const _local_2: RoomPlaneData = (this._planes[k] as RoomPlaneData);\r\n        if(_local_2 != null)\r\n        {\r\n            _local_3 = [];\r\n            _local_4 = 0;\r\n            while(_local_4 < _local_2.secondaryNormalCount)\r\n            {\r\n                _local_3.push(_local_2.getSecondaryNormal(_local_4));\r\n                _local_4++;\r\n            }\r\n            return _local_3;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getPlaneType(k: number): number\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return RoomPlaneData.PLANE_UNDEFINED;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return RoomPlaneData.PLANE_UNDEFINED;\r\n\r\n        return planeData.type;\r\n    }\r\n\r\n    public getPlaneMaskCount(k: number): number\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return 0;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return 0;\r\n\r\n        return planeData.maskCount;\r\n    }\r\n\r\n    public getPlaneMaskLeftSideLoc(k: number, _arg_2: number): number\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return -1;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return -1;\r\n\r\n        return planeData.getMaskLeftSideLoc(_arg_2);\r\n    }\r\n\r\n    public getPlaneMaskRightSideLoc(k: number, _arg_2: number): number\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return -1;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return -1;\r\n\r\n        return planeData.getMaskRightSideLoc(_arg_2);\r\n    }\r\n\r\n    public getPlaneMaskLeftSideLength(k: number, _arg_2: number): number\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return -1;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return -1;\r\n\r\n        return planeData.getMaskLeftSideLength(_arg_2);\r\n    }\r\n\r\n    public getPlaneMaskRightSideLength(k: number, _arg_2: number): number\r\n    {\r\n        if(((k < 0) || (k >= this.planeCount))) return -1;\r\n\r\n        const planeData = this._planes[k];\r\n\r\n        if(!planeData) return -1;\r\n\r\n        return planeData.getMaskRightSideLength(_arg_2);\r\n    }\r\n\r\n    public addFloorHole(k: number, _arg_2: number, _arg_3: number, _arg_4: number, _arg_5: number): void\r\n    {\r\n        this.removeFloorHole(k);\r\n\r\n        this._floorHoles.set(k, new RoomFloorHole(_arg_2, _arg_3, _arg_4, _arg_5));\r\n    }\r\n\r\n    public removeFloorHole(k: number): void\r\n    {\r\n        this._floorHoles.delete(k);\r\n    }\r\n\r\n    public resetFloorHoles(): void\r\n    {\r\n        this._floorHoles.clear();\r\n    }\r\n\r\n    private initializeHoleMap(): void\r\n    {\r\n        let k: number;\r\n        let _local_2: number;\r\n        let _local_3: boolean[];\r\n        let _local_5:RoomFloorHole;\r\n        let _local_6: number;\r\n        let _local_7: number;\r\n        let _local_8: number;\r\n        let _local_9: number;\r\n        _local_2 = 0;\r\n        while(_local_2 < this._height)\r\n        {\r\n            _local_3 = this._floorHoleMatrix[_local_2];\r\n            k = 0;\r\n            while(k < this._width)\r\n            {\r\n                _local_3[k] = false;\r\n                k++;\r\n            }\r\n            _local_2++;\r\n        }\r\n        for(const _local_4 of this._floorHoles.values())\r\n        {\r\n            _local_5 = _local_4;\r\n            if(_local_5 != null)\r\n            {\r\n                _local_6 = _local_5.x;\r\n                _local_7 = ((_local_5.x + _local_5.width) - 1);\r\n                _local_8 = _local_5.y;\r\n                _local_9 = ((_local_5.y + _local_5.height) - 1);\r\n                _local_6 = ((_local_6 < 0) ? 0 : _local_6);\r\n                _local_7 = ((_local_7 >= this._width) ? (this._width - 1) : _local_7);\r\n                _local_8 = ((_local_8 < 0) ? 0 : _local_8);\r\n                _local_9 = ((_local_9 >= this._height) ? (this._height - 1) : _local_9);\r\n                _local_2 = _local_8;\r\n                while(_local_2 <= _local_9)\r\n                {\r\n                    _local_3 = this._floorHoleMatrix[_local_2];\r\n                    k = _local_6;\r\n                    while(k <= _local_7)\r\n                    {\r\n                        _local_3[k] = true;\r\n                        k++;\r\n                    }\r\n                    _local_2++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private extractPlanes(k: number[][]): void\r\n    {\r\n        let _local_7: number;\r\n        let _local_8: number;\r\n        let _local_9: number;\r\n        let _local_10: number;\r\n        let _local_11: boolean;\r\n        let _local_12: boolean;\r\n        let _local_13: boolean;\r\n        let _local_14: boolean;\r\n        let _local_15: number;\r\n        let _local_16: number;\r\n        let _local_17: boolean;\r\n        let _local_18: number;\r\n        let _local_19: number;\r\n        let _local_20: number;\r\n        let _local_21: number;\r\n\r\n        const _local_2 = k.length;\r\n\r\n        const _local_3: number = k[0].length;\r\n        const _local_4: boolean[][] = [];\r\n        let _local_5 = 0;\r\n        while(_local_5 < _local_2)\r\n        {\r\n            _local_4[_local_5] = [];\r\n            _local_5++;\r\n        }\r\n        let _local_6 = 0;\r\n        while(_local_6 < _local_2)\r\n        {\r\n            _local_7 = 0;\r\n            while(_local_7 < _local_3)\r\n            {\r\n                _local_8 = k[_local_6][_local_7];\r\n                if(((_local_8 < 0) || (_local_4[_local_6][_local_7])))\r\n                {\r\n                    //\r\n                }\r\n                else\r\n                {\r\n                    _local_11 = ((_local_7 == 0) || (!(k[_local_6][(_local_7 - 1)] == _local_8)));\r\n                    _local_12 = ((_local_6 == 0) || (!(k[(_local_6 - 1)][_local_7] == _local_8)));\r\n                    _local_9 = (_local_7 + 1);\r\n                    while(_local_9 < _local_3)\r\n                    {\r\n                        if((((!(k[_local_6][_local_9] == _local_8)) || (_local_4[_local_6][_local_9])) || ((_local_6 > 0) && ((k[(_local_6 - 1)][_local_9] == _local_8) == _local_12))))\r\n                        {\r\n                            break;\r\n                        }\r\n                        _local_9++;\r\n                    }\r\n                    _local_13 = ((_local_9 == _local_3) || (!(k[_local_6][_local_9] == _local_8)));\r\n                    _local_17 = false;\r\n                    _local_10 = (_local_6 + 1);\r\n                    while(((_local_10 < _local_2) && (!(_local_17))))\r\n                    {\r\n                        _local_14 = (!(k[_local_10][_local_7] == _local_8));\r\n                        _local_17 = (((_local_14) || ((_local_7 > 0) && ((k[_local_10][(_local_7 - 1)] == _local_8) == _local_11))) || ((_local_9 < _local_3) && ((k[_local_10][_local_9] == _local_8) == _local_13)));\r\n                        _local_15 = _local_7;\r\n                        while(_local_15 < _local_9)\r\n                        {\r\n                            if((k[_local_10][_local_15] == _local_8) == _local_14)\r\n                            {\r\n                                _local_17 = true;\r\n                                _local_9 = _local_15;\r\n                                break;\r\n                            }\r\n                            _local_15++;\r\n                        }\r\n                        if(_local_17)\r\n                        {\r\n                            break;\r\n                        }\r\n                        _local_10++;\r\n                    }\r\n                    _local_14 = ((_local_14) || (_local_10 == _local_2));\r\n                    _local_13 = ((_local_9 == _local_3) || (!(k[_local_6][_local_9] == _local_8)));\r\n                    _local_16 = _local_6;\r\n                    while(_local_16 < _local_10)\r\n                    {\r\n                        _local_15 = _local_7;\r\n                        while(_local_15 < _local_9)\r\n                        {\r\n                            _local_4[_local_16][_local_15] = true;\r\n                            _local_15++;\r\n                        }\r\n                        _local_16++;\r\n                    }\r\n                    _local_18 = ((_local_7 / 4) - 0.5);\r\n                    _local_19 = ((_local_6 / 4) - 0.5);\r\n                    _local_20 = ((_local_9 - _local_7) / 4);\r\n                    _local_21 = ((_local_10 - _local_6) / 4);\r\n                    this.addFloor(new Vector3d((_local_18 + _local_20), (_local_19 + _local_21), (_local_8 / 4)), new Vector3d(-(_local_20), 0, 0), new Vector3d(0, -(_local_21), 0), _local_13, _local_11, _local_14, _local_12);\r\n                }\r\n                _local_7++;\r\n            }\r\n            _local_6++;\r\n        }\r\n    }\r\n\r\n    public get restrictsDragging(): boolean\r\n    {\r\n        return this._restrictsDragging;\r\n    }\r\n\r\n    public set restrictsDragging(flag: boolean)\r\n    {\r\n        this._restrictsDragging = flag;\r\n    }\r\n\r\n    public get restrictsScaling(): boolean\r\n    {\r\n        return this._restrictsScaling;\r\n    }\r\n\r\n    public set restrictsScaling(flag: boolean)\r\n    {\r\n        this._restrictsScaling = flag;\r\n    }\r\n\r\n    public get restrictedScale(): number\r\n    {\r\n        return this._restrictedScale;\r\n    }\r\n\r\n    public set restrictedScale(scale: number)\r\n    {\r\n        this._restrictedScale = scale;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}