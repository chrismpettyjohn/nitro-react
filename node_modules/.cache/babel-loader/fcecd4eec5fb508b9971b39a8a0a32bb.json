{"ast":null,"code":"export class AchievementData {\n  constructor(wrapper) {\n    this._achievementId = void 0;\n    this._level = void 0;\n    this._badgeId = void 0;\n    this._scoreAtStartOfLevel = void 0;\n    this._scoreLimit = void 0;\n    this._levelRewardPoints = void 0;\n    this._levelRewardPointType = void 0;\n    this._currentPoints = void 0;\n    this._finalLevel = void 0;\n    this._category = void 0;\n    this._subCategory = void 0;\n    this._levelCount = void 0;\n    this._displayMethod = void 0;\n    this._unseen = 0;\n    if (!wrapper) throw new Error('invalid_parser');\n    this._achievementId = wrapper.readInt();\n    this._level = wrapper.readInt();\n    this._badgeId = wrapper.readString();\n    this._scoreAtStartOfLevel = wrapper.readInt();\n    this._scoreLimit = Math.max(1, wrapper.readInt());\n    this._levelRewardPoints = wrapper.readInt();\n    this._levelRewardPointType = wrapper.readInt();\n    this._currentPoints = wrapper.readInt();\n    this._finalLevel = wrapper.readBoolean();\n    this._category = wrapper.readString();\n    this._subCategory = wrapper.readString();\n    this._levelCount = wrapper.readInt();\n    this._displayMethod = wrapper.readInt();\n  }\n\n  get achievementId() {\n    return this._achievementId;\n  }\n\n  get badgeId() {\n    return this._badgeId;\n  }\n\n  get level() {\n    return this._level;\n  }\n\n  get scoreAtStartOfLevel() {\n    return this._scoreAtStartOfLevel;\n  }\n\n  get scoreLimit() {\n    return this._scoreLimit - this._scoreAtStartOfLevel;\n  }\n\n  get levelRewardPoints() {\n    return this._levelRewardPoints;\n  }\n\n  get levelRewardPointType() {\n    return this._levelRewardPointType;\n  }\n\n  get currentPoints() {\n    return this._currentPoints - this._scoreAtStartOfLevel;\n  }\n\n  get finalLevel() {\n    return this._finalLevel;\n  }\n\n  get category() {\n    return this._category;\n  }\n\n  get subCategory() {\n    return this._subCategory;\n  }\n\n  get levelCount() {\n    return this._levelCount;\n  }\n\n  get firstLevelAchieved() {\n    return this._level > 1 || this._finalLevel;\n  }\n\n  setMaxProgress() {\n    this._currentPoints = this._scoreLimit;\n  }\n\n  get displayMethod() {\n    return this._displayMethod;\n  }\n\n  get progress() {\n    return this._currentPoints;\n  }\n\n  get toNextProgress() {\n    return this._scoreLimit;\n  }\n\n  set unseen(unseen) {\n    this._unseen = unseen;\n  }\n\n  get unseen() {\n    return this._unseen;\n  }\n\n  reset(badge) {\n    this._achievementId = badge._achievementId;\n    this._level = badge._level;\n    this._badgeId = badge._badgeId;\n    this._scoreAtStartOfLevel = badge._scoreAtStartOfLevel;\n    this._scoreLimit = badge._scoreLimit;\n    this._levelRewardPoints = badge._levelRewardPoints;\n    this._levelRewardPointType = badge._levelRewardPointType;\n    this._currentPoints = badge._currentPoints;\n    this._finalLevel = badge._finalLevel;\n    this._category = badge.category;\n    this._subCategory = badge._subCategory;\n    this._levelCount = badge._levelCount;\n    this._displayMethod = badge._displayMethod;\n  }\n\n}\nAchievementData.DISPLAY_METHOD_OBSOLETE = -1;\nAchievementData.DISPLAY_METHOD_SHOW_LEVEL_PROGRESS = 0;\nAchievementData.DISPLAY_METHOD_NEVER_SHOW_PROGRESS = 1;\nAchievementData.DISPLAY_METHOD_SHOW_TOTAL_PROGRESS = 2;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/incoming/inventory/achievements/AchievementData.ts"],"names":["AchievementData","constructor","wrapper","_achievementId","_level","_badgeId","_scoreAtStartOfLevel","_scoreLimit","_levelRewardPoints","_levelRewardPointType","_currentPoints","_finalLevel","_category","_subCategory","_levelCount","_displayMethod","_unseen","Error","readInt","readString","Math","max","readBoolean","achievementId","badgeId","level","scoreAtStartOfLevel","scoreLimit","levelRewardPoints","levelRewardPointType","currentPoints","finalLevel","category","subCategory","levelCount","firstLevelAchieved","setMaxProgress","displayMethod","progress","toNextProgress","unseen","reset","badge","DISPLAY_METHOD_OBSOLETE","DISPLAY_METHOD_SHOW_LEVEL_PROGRESS","DISPLAY_METHOD_NEVER_SHOW_PROGRESS","DISPLAY_METHOD_SHOW_TOTAL_PROGRESS"],"mappings":"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","sourcesContent":["import { IMessageDataWrapper } from '../../../../../../core';\r\n\r\nexport class AchievementData\r\n{\r\n    public static DISPLAY_METHOD_OBSOLETE: number = -1;\r\n    public static DISPLAY_METHOD_SHOW_LEVEL_PROGRESS: number = 0;\r\n    public static DISPLAY_METHOD_NEVER_SHOW_PROGRESS: number = 1;\r\n    public static DISPLAY_METHOD_SHOW_TOTAL_PROGRESS: number = 2;\r\n\r\n    private _achievementId: number;\r\n    private _level: number;\r\n    private _badgeId: string;\r\n    private _scoreAtStartOfLevel: number;\r\n    private _scoreLimit: number;\r\n    private _levelRewardPoints: number;\r\n    private _levelRewardPointType: number;\r\n    private _currentPoints: number;\r\n    private _finalLevel: boolean;\r\n    private _category: string;\r\n    private _subCategory: string;\r\n    private _levelCount: number;\r\n    private _displayMethod: number;\r\n\r\n    private _unseen: number = 0;\r\n\r\n    constructor(wrapper: IMessageDataWrapper)\r\n    {\r\n        if(!wrapper) throw new Error('invalid_parser');\r\n\r\n        this._achievementId = wrapper.readInt();\r\n        this._level = wrapper.readInt();\r\n        this._badgeId = wrapper.readString();\r\n        this._scoreAtStartOfLevel = wrapper.readInt();\r\n        this._scoreLimit = Math.max(1, wrapper.readInt());\r\n        this._levelRewardPoints = wrapper.readInt();\r\n        this._levelRewardPointType = wrapper.readInt();\r\n        this._currentPoints = wrapper.readInt();\r\n        this._finalLevel = wrapper.readBoolean();\r\n        this._category = wrapper.readString();\r\n        this._subCategory = wrapper.readString();\r\n        this._levelCount = wrapper.readInt();\r\n        this._displayMethod = wrapper.readInt();\r\n    }\r\n\r\n    public get achievementId(): number\r\n    {\r\n        return this._achievementId;\r\n    }\r\n\r\n    public get badgeId(): string\r\n    {\r\n        return this._badgeId;\r\n    }\r\n\r\n    public get level(): number\r\n    {\r\n        return this._level;\r\n    }\r\n\r\n    public get scoreAtStartOfLevel(): number\r\n    {\r\n        return this._scoreAtStartOfLevel;\r\n    }\r\n\r\n    public get scoreLimit(): number\r\n    {\r\n        return (this._scoreLimit - this._scoreAtStartOfLevel);\r\n    }\r\n\r\n    public get levelRewardPoints(): number\r\n    {\r\n        return this._levelRewardPoints;\r\n    }\r\n\r\n    public get levelRewardPointType(): number\r\n    {\r\n        return this._levelRewardPointType;\r\n    }\r\n\r\n    public get currentPoints(): number\r\n    {\r\n        return (this._currentPoints - this._scoreAtStartOfLevel);\r\n    }\r\n\r\n    public get finalLevel(): boolean\r\n    {\r\n        return this._finalLevel;\r\n    }\r\n\r\n    public get category(): string\r\n    {\r\n        return this._category;\r\n    }\r\n\r\n    public get subCategory(): string\r\n    {\r\n        return this._subCategory;\r\n    }\r\n\r\n    public get levelCount(): number\r\n    {\r\n        return this._levelCount;\r\n    }\r\n\r\n    public get firstLevelAchieved(): boolean\r\n    {\r\n        return (this._level > 1) || (this._finalLevel);\r\n    }\r\n\r\n    public setMaxProgress(): void\r\n    {\r\n        this._currentPoints = this._scoreLimit;\r\n    }\r\n\r\n    public get displayMethod(): number\r\n    {\r\n        return this._displayMethod;\r\n    }\r\n\r\n    public get progress(): number\r\n    {\r\n        return this._currentPoints;\r\n    }\r\n\r\n    public get toNextProgress(): number\r\n    {\r\n        return this._scoreLimit;\r\n    }\r\n\r\n    public set unseen(unseen: number)\r\n    {\r\n        this._unseen = unseen;\r\n    }\r\n\r\n    public get unseen(): number\r\n    {\r\n        return this._unseen;\r\n    }\r\n\r\n    public reset(badge: AchievementData)\r\n    {\r\n        this._achievementId = badge._achievementId;\r\n        this._level = badge._level;\r\n        this._badgeId = badge._badgeId;\r\n        this._scoreAtStartOfLevel = badge._scoreAtStartOfLevel;\r\n        this._scoreLimit = badge._scoreLimit;\r\n        this._levelRewardPoints = badge._levelRewardPoints;\r\n        this._levelRewardPointType = badge._levelRewardPointType;\r\n        this._currentPoints = badge._currentPoints;\r\n        this._finalLevel = badge._finalLevel;\r\n        this._category = badge.category;\r\n        this._subCategory = badge._subCategory;\r\n        this._levelCount = badge._levelCount;\r\n        this._displayMethod = badge._displayMethod;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}