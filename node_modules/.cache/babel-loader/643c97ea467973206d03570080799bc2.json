{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { CanCreateRoomEventEvent, CantConnectMessageParser, FollowFriendMessageComposer, GenericErrorEvent, GetGuestRoomResultEvent, HabboWebTools, LegacyExternalInterface, NavigatorCategoriesComposer, NavigatorCategoriesEvent, NavigatorHomeRoomEvent, NavigatorMetadataEvent, NavigatorOpenRoomCreatorEvent, NavigatorSearchEvent, NavigatorSettingsComposer, RoomCreatedEvent, RoomDataParser, RoomDoorbellAcceptedEvent, RoomDoorbellEvent, RoomDoorbellRejectedEvent, RoomEnterErrorEvent, RoomEntryInfoMessageEvent, RoomForwardEvent, RoomInfoComposer, RoomScoreEvent, RoomSettingsUpdatedEvent, SecurityLevel, UserInfoEvent, UserPermissionsEvent } from '@nitrots/nitro-renderer';\nimport { useCallback } from 'react';\nimport { CreateLinkEvent, CreateRoomSession, DoorStateType, GetConfiguration, GetSessionDataManager, LocalizeText, NotificationAlertType, NotificationUtilities, SendMessageComposer, TryVisitRoom, VisitDesktop } from '../../api';\nimport { UseMessageEventHook } from '../../hooks';\nimport { useNavigatorContext } from './NavigatorContext';\nexport const NavigatorMessageHandler = props => {\n  _s();\n\n  const {\n    setCategories = null,\n    setTopLevelContext = null,\n    topLevelContexts = null,\n    setTopLevelContexts = null,\n    setNavigatorData = null,\n    setDoorData = null,\n    setSearchResult = null\n  } = useNavigatorContext();\n  const onRoomSettingsUpdatedEvent = useCallback(event => {\n    const parser = event.getParser();\n    SendMessageComposer(new RoomInfoComposer(parser.roomId, false, false));\n  }, []);\n  UseMessageEventHook(RoomSettingsUpdatedEvent, onRoomSettingsUpdatedEvent);\n  const onCanCreateRoomEventEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    if (parser.canCreate) {\n      // show room event cvreate\n      return;\n    }\n\n    NotificationUtilities.simpleAlert(LocalizeText(`navigator.cannotcreateevent.error.${parser.errorCode}`), null, null, null, LocalizeText('navigator.cannotcreateevent.title'));\n  }, []);\n  UseMessageEventHook(CanCreateRoomEventEvent, onCanCreateRoomEventEvent);\n  const onUserInfoEvent = useCallback(event => {\n    SendMessageComposer(new NavigatorCategoriesComposer());\n    SendMessageComposer(new NavigatorSettingsComposer());\n  }, []);\n  const onUserPermissionsEvent = useCallback(event => {\n    const parser = event.getParser();\n    setNavigatorData(prevValue => {\n      const newValue = { ...prevValue\n      };\n      newValue.eventMod = parser.securityLevel >= SecurityLevel.MODERATOR;\n      newValue.roomPicker = parser.securityLevel >= SecurityLevel.COMMUNITY;\n      return newValue;\n    });\n  }, [setNavigatorData]);\n  const onRoomForwardEvent = useCallback(event => {\n    const parser = event.getParser();\n    TryVisitRoom(parser.roomId);\n  }, []);\n  const onRoomEntryInfoMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    setNavigatorData(prevValue => {\n      const newValue = { ...prevValue\n      };\n      newValue.enteredGuestRoom = null;\n      newValue.currentRoomOwner = parser.isOwner;\n      newValue.currentRoomId = parser.roomId;\n      return newValue;\n    }); // close room info\n    // close room settings\n    // close room filter\n\n    SendMessageComposer(new RoomInfoComposer(parser.roomId, true, false));\n    if (LegacyExternalInterface.available) LegacyExternalInterface.call('legacyTrack', 'navigator', 'private', [parser.roomId]);\n  }, [setNavigatorData]);\n  const onGetGuestRoomResultEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    if (parser.roomEnter) {\n      setDoorData({\n        roomInfo: null,\n        state: DoorStateType.NONE\n      });\n      setNavigatorData(prevValue => {\n        const newValue = { ...prevValue\n        };\n        newValue.enteredGuestRoom = parser.data;\n        newValue.currentRoomIsStaffPick = parser.staffPick;\n        const isCreated = newValue.createdFlatId === parser.data.roomId;\n\n        if (!isCreated && parser.data.displayRoomEntryAd) {\n          if (GetConfiguration('roomenterad.habblet.enabled', false)) HabboWebTools.openRoomEnterAd();\n        }\n\n        newValue.createdFlatId = 0;\n\n        if (newValue.enteredGuestRoom && newValue.enteredGuestRoom.habboGroupId > 0) {// close event info\n        }\n\n        return newValue;\n      });\n    } else if (parser.roomForward) {\n      if (parser.data.ownerName !== GetSessionDataManager().userName && !parser.isGroupMember) {\n        switch (parser.data.doorMode) {\n          case RoomDataParser.DOORBELL_STATE:\n            setDoorData(prevValue => {\n              const newValue = { ...prevValue\n              };\n              newValue.roomInfo = parser.data;\n              newValue.state = DoorStateType.START_DOORBELL;\n              return newValue;\n            });\n            return;\n\n          case RoomDataParser.PASSWORD_STATE:\n            setDoorData(prevValue => {\n              const newValue = { ...prevValue\n              };\n              newValue.roomInfo = parser.data;\n              newValue.state = DoorStateType.START_PASSWORD;\n              return newValue;\n            });\n            return;\n        }\n      }\n\n      if (parser.data.doorMode === RoomDataParser.NOOB_STATE && !GetSessionDataManager().isAmbassador && !GetSessionDataManager().isRealNoob && !GetSessionDataManager().isModerator) return;\n      CreateRoomSession(parser.data.roomId);\n    } else {\n      setNavigatorData(prevValue => {\n        const newValue = { ...prevValue\n        };\n        newValue.enteredGuestRoom = parser.data;\n        newValue.currentRoomIsStaffPick = parser.staffPick;\n        return newValue;\n      });\n    }\n  }, [setNavigatorData, setDoorData]);\n  const onRoomScoreEvent = useCallback(event => {\n    const parser = event.getParser();\n    setNavigatorData(prevValue => {\n      const newValue = { ...prevValue\n      };\n      newValue.currentRoomRating = parser.totalLikes;\n      newValue.canRate = parser.canLike;\n      return newValue;\n    });\n  }, [setNavigatorData]);\n  const onRoomDoorbellEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    if (!parser.userName || parser.userName.length === 0) {\n      setDoorData(prevValue => {\n        const newValue = { ...prevValue\n        };\n        newValue.state = DoorStateType.STATE_WAITING;\n        return newValue;\n      });\n    }\n  }, [setDoorData]);\n  const onRoomDoorbellAcceptedEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    if (!parser.userName || parser.userName.length === 0) {\n      setDoorData(prevValue => {\n        const newValue = { ...prevValue\n        };\n        newValue.state = DoorStateType.STATE_ACCEPTED;\n        return newValue;\n      });\n    }\n  }, [setDoorData]);\n  const onRoomDoorbellRejectedEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    if (!parser.userName || parser.userName.length === 0) {\n      setDoorData(prevValue => {\n        const newValue = { ...prevValue\n        };\n        newValue.state = DoorStateType.STATE_NO_ANSWER;\n        return newValue;\n      });\n    }\n  }, [setDoorData]);\n  const onGenericErrorEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    switch (parser.errorCode) {\n      case -100002:\n        setDoorData(prevValue => {\n          const newValue = { ...prevValue\n          };\n          newValue.state = DoorStateType.STATE_WRONG_PASSWORD;\n          return newValue;\n        });\n        return;\n\n      case 4009:\n        NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.need.to.be.vip'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n        return;\n\n      case 4010:\n        NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.invalid_room_name'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n        return;\n\n      case 4011:\n        NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.cannot_perm_ban'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n        return;\n\n      case 4013:\n        NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.room_in_maintenance'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n        return;\n    }\n  }, [setDoorData]);\n  const onNavigatorMetadataEvent = useCallback(event => {\n    const parser = event.getParser();\n    setTopLevelContexts(parser.topLevelContexts);\n    setTopLevelContext(parser.topLevelContexts.length ? parser.topLevelContexts[0] : null);\n  }, [setTopLevelContexts, setTopLevelContext]);\n  const onNavigatorSearchEvent = useCallback(event => {\n    const parser = event.getParser();\n    setTopLevelContext(prevValue => {\n      let newValue = prevValue;\n      if (!newValue) newValue = topLevelContexts && topLevelContexts.length && topLevelContexts[0] || null;\n      if (!newValue) return null;\n\n      if (parser.result.code !== newValue.code && topLevelContexts && topLevelContexts.length) {\n        for (const context of topLevelContexts) {\n          if (context.code !== parser.result.code) continue;\n          newValue = context;\n        }\n      }\n\n      for (const context of topLevelContexts) {\n        if (context.code !== parser.result.code) continue;\n        newValue = context;\n      }\n\n      return newValue;\n    });\n    setSearchResult(parser.result);\n  }, [topLevelContexts, setTopLevelContext, setSearchResult]);\n  const onNavigatorCategoriesEvent = useCallback(event => {\n    const parser = event.getParser();\n    setCategories(parser.categories);\n  }, [setCategories]);\n  const onRoomCreatedEvent = useCallback(event => {\n    const parser = event.getParser();\n    CreateRoomSession(parser.roomId);\n  }, []);\n  const onNavigatorHomeRoomEvent = useCallback(event => {\n    const parser = event.getParser();\n    let prevSettingsReceived = false;\n    setNavigatorData(prevValue => {\n      prevSettingsReceived = prevValue.settingsReceived;\n      const newValue = { ...prevValue\n      };\n      newValue.homeRoomId = parser.homeRoomId;\n      newValue.settingsReceived = true;\n      return newValue;\n    });\n\n    if (prevSettingsReceived) {\n      // refresh room info window\n      return;\n    }\n\n    let forwardType = -1;\n    let forwardId = -1;\n\n    if (GetConfiguration('friend.id') !== undefined && parseInt(GetConfiguration('friend.id')) > 0) {\n      forwardType = 0;\n      SendMessageComposer(new FollowFriendMessageComposer(parseInt(GetConfiguration('friend.id'))));\n    }\n\n    if (GetConfiguration('forward.type') !== undefined && GetConfiguration('forward.id') !== undefined) {\n      forwardType = parseInt(GetConfiguration('forward.type'));\n      forwardId = parseInt(GetConfiguration('forward.id'));\n    }\n\n    if (forwardType === 2) {\n      TryVisitRoom(forwardId);\n    } else if (forwardType === -1 && parser.roomIdToEnter > 0) {\n      CreateLinkEvent('navigator/close');\n\n      if (parser.roomIdToEnter !== parser.homeRoomId) {\n        CreateRoomSession(parser.roomIdToEnter);\n      } else {\n        CreateRoomSession(parser.homeRoomId);\n      }\n    }\n  }, [setNavigatorData]);\n  const onRoomEnterErrorEvent = useCallback(event => {\n    const parser = event.getParser();\n\n    switch (parser.reason) {\n      case CantConnectMessageParser.REASON_FULL:\n        NotificationUtilities.simpleAlert(LocalizeText('navigator.guestroomfull.text'), NotificationAlertType.DEFAULT, null, null, LocalizeText('navigator.guestroomfull.title'));\n        break;\n\n      case CantConnectMessageParser.REASON_QUEUE_ERROR:\n        NotificationUtilities.simpleAlert(LocalizeText(`room.queue.error.${parser.parameter}`), NotificationAlertType.DEFAULT, null, null, LocalizeText('room.queue.error.title'));\n        break;\n\n      case CantConnectMessageParser.REASON_BANNED:\n        NotificationUtilities.simpleAlert(LocalizeText('navigator.banned.text'), NotificationAlertType.DEFAULT, null, null, LocalizeText('navigator.banned.title'));\n        break;\n\n      default:\n        NotificationUtilities.simpleAlert(LocalizeText('room.queue.error.title'), NotificationAlertType.DEFAULT, null, null, LocalizeText('room.queue.error.title'));\n        break;\n    }\n\n    VisitDesktop();\n  }, []);\n  const onRoomCreatorEvent = useCallback(event => {\n    CreateLinkEvent('navigator/show');\n  }, []);\n  UseMessageEventHook(UserInfoEvent, onUserInfoEvent);\n  UseMessageEventHook(UserPermissionsEvent, onUserPermissionsEvent);\n  UseMessageEventHook(RoomForwardEvent, onRoomForwardEvent);\n  UseMessageEventHook(RoomEntryInfoMessageEvent, onRoomEntryInfoMessageEvent);\n  UseMessageEventHook(GetGuestRoomResultEvent, onGetGuestRoomResultEvent);\n  UseMessageEventHook(RoomScoreEvent, onRoomScoreEvent);\n  UseMessageEventHook(RoomDoorbellEvent, onRoomDoorbellEvent);\n  UseMessageEventHook(RoomDoorbellAcceptedEvent, onRoomDoorbellAcceptedEvent);\n  UseMessageEventHook(RoomDoorbellRejectedEvent, onRoomDoorbellRejectedEvent);\n  UseMessageEventHook(GenericErrorEvent, onGenericErrorEvent);\n  UseMessageEventHook(NavigatorMetadataEvent, onNavigatorMetadataEvent);\n  UseMessageEventHook(NavigatorSearchEvent, onNavigatorSearchEvent);\n  UseMessageEventHook(NavigatorCategoriesEvent, onNavigatorCategoriesEvent);\n  UseMessageEventHook(RoomCreatedEvent, onRoomCreatedEvent);\n  UseMessageEventHook(NavigatorHomeRoomEvent, onNavigatorHomeRoomEvent);\n  UseMessageEventHook(RoomEnterErrorEvent, onRoomEnterErrorEvent);\n  UseMessageEventHook(NavigatorOpenRoomCreatorEvent, onRoomCreatorEvent);\n  return null;\n};\n\n_s(NavigatorMessageHandler, \"f8AZABi1JD72Jd6S3s4+XP0lSgE=\", false, function () {\n  return [useNavigatorContext];\n});\n\n_c = NavigatorMessageHandler;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavigatorMessageHandler\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/navigator/NavigatorMessageHandler.tsx"],"names":["CanCreateRoomEventEvent","CantConnectMessageParser","FollowFriendMessageComposer","GenericErrorEvent","GetGuestRoomResultEvent","HabboWebTools","LegacyExternalInterface","NavigatorCategoriesComposer","NavigatorCategoriesEvent","NavigatorHomeRoomEvent","NavigatorMetadataEvent","NavigatorOpenRoomCreatorEvent","NavigatorSearchEvent","NavigatorSettingsComposer","RoomCreatedEvent","RoomDataParser","RoomDoorbellAcceptedEvent","RoomDoorbellEvent","RoomDoorbellRejectedEvent","RoomEnterErrorEvent","RoomEntryInfoMessageEvent","RoomForwardEvent","RoomInfoComposer","RoomScoreEvent","RoomSettingsUpdatedEvent","SecurityLevel","UserInfoEvent","UserPermissionsEvent","useCallback","CreateLinkEvent","CreateRoomSession","DoorStateType","GetConfiguration","GetSessionDataManager","LocalizeText","NotificationAlertType","NotificationUtilities","SendMessageComposer","TryVisitRoom","VisitDesktop","UseMessageEventHook","useNavigatorContext","NavigatorMessageHandler","props","setCategories","setTopLevelContext","topLevelContexts","setTopLevelContexts","setNavigatorData","setDoorData","setSearchResult","onRoomSettingsUpdatedEvent","event","parser","getParser","roomId","onCanCreateRoomEventEvent","canCreate","simpleAlert","errorCode","onUserInfoEvent","onUserPermissionsEvent","prevValue","newValue","eventMod","securityLevel","MODERATOR","roomPicker","COMMUNITY","onRoomForwardEvent","onRoomEntryInfoMessageEvent","enteredGuestRoom","currentRoomOwner","isOwner","currentRoomId","available","call","onGetGuestRoomResultEvent","roomEnter","roomInfo","state","NONE","data","currentRoomIsStaffPick","staffPick","isCreated","createdFlatId","displayRoomEntryAd","openRoomEnterAd","habboGroupId","roomForward","ownerName","userName","isGroupMember","doorMode","DOORBELL_STATE","START_DOORBELL","PASSWORD_STATE","START_PASSWORD","NOOB_STATE","isAmbassador","isRealNoob","isModerator","onRoomScoreEvent","currentRoomRating","totalLikes","canRate","canLike","onRoomDoorbellEvent","length","STATE_WAITING","onRoomDoorbellAcceptedEvent","STATE_ACCEPTED","onRoomDoorbellRejectedEvent","STATE_NO_ANSWER","onGenericErrorEvent","STATE_WRONG_PASSWORD","DEFAULT","onNavigatorMetadataEvent","onNavigatorSearchEvent","result","code","context","onNavigatorCategoriesEvent","categories","onRoomCreatedEvent","onNavigatorHomeRoomEvent","prevSettingsReceived","settingsReceived","homeRoomId","forwardType","forwardId","undefined","parseInt","roomIdToEnter","onRoomEnterErrorEvent","reason","REASON_FULL","REASON_QUEUE_ERROR","parameter","REASON_BANNED","onRoomCreatorEvent"],"mappings":";;AAAA,SAASA,uBAAT,EAAkCC,wBAAlC,EAA4DC,2BAA5D,EAAyFC,iBAAzF,EAA4GC,uBAA5G,EAAqIC,aAArI,EAAoJC,uBAApJ,EAA6KC,2BAA7K,EAA0MC,wBAA1M,EAAoOC,sBAApO,EAA4PC,sBAA5P,EAAoRC,6BAApR,EAAmTC,oBAAnT,EAAyUC,yBAAzU,EAAoWC,gBAApW,EAAsXC,cAAtX,EAAsYC,yBAAtY,EAAiaC,iBAAja,EAAobC,yBAApb,EAA+cC,mBAA/c,EAAoeC,yBAApe,EAA+fC,gBAA/f,EAAihBC,gBAAjhB,EAAmiBC,cAAniB,EAAmjBC,wBAAnjB,EAA6kBC,aAA7kB,EAA4lBC,aAA5lB,EAA2mBC,oBAA3mB,QAAuoB,yBAAvoB;AACA,SAAaC,WAAb,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,aAA7C,EAA4DC,gBAA5D,EAA8EC,qBAA9E,EAAqGC,YAArG,EAAmHC,qBAAnH,EAA0IC,qBAA1I,EAAiKC,mBAAjK,EAAsLC,YAAtL,EAAoMC,YAApM,QAAwN,WAAxN;AACA,SAASC,mBAAT,QAAoC,aAApC;AACA,SAASC,mBAAT,QAAoC,oBAApC;AAEA,OAAO,MAAMC,uBAA+B,GAAGC,KAAK,IACpD;AAAA;;AACI,QAAM;AAAEC,IAAAA,aAAa,GAAG,IAAlB;AAAwBC,IAAAA,kBAAkB,GAAG,IAA7C;AAAmDC,IAAAA,gBAAgB,GAAG,IAAtE;AAA4EC,IAAAA,mBAAmB,GAAG,IAAlG;AAAwGC,IAAAA,gBAAgB,GAAG,IAA3H;AAAiIC,IAAAA,WAAW,GAAG,IAA/I;AAAqJC,IAAAA,eAAe,GAAG;AAAvK,MAAgLT,mBAAmB,EAAzM;AAEA,QAAMU,0BAA0B,GAAGvB,WAAW,CAAEwB,KAAD,IAC/C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAjB,IAAAA,mBAAmB,CAAC,IAAIf,gBAAJ,CAAqB+B,MAAM,CAACE,MAA5B,EAAoC,KAApC,EAA2C,KAA3C,CAAD,CAAnB;AACH,GAL6C,EAK3C,EAL2C,CAA9C;AAOAf,EAAAA,mBAAmB,CAAChB,wBAAD,EAA2B2B,0BAA3B,CAAnB;AAEA,QAAMK,yBAAyB,GAAG5B,WAAW,CAAEwB,KAAD,IAC9C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;;AAEA,QAAGD,MAAM,CAACI,SAAV,EACA;AACI;AAEA;AACH;;AAEDrB,IAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAE,qCAAqCmB,MAAM,CAACM,SAAW,EAAzD,CAA9C,EAA2G,IAA3G,EAAiH,IAAjH,EAAuH,IAAvH,EAA6HzB,YAAY,CAAC,mCAAD,CAAzI;AACH,GAZ4C,EAY1C,EAZ0C,CAA7C;AAcAM,EAAAA,mBAAmB,CAACxC,uBAAD,EAA0BwD,yBAA1B,CAAnB;AAEA,QAAMI,eAAe,GAAGhC,WAAW,CAAEwB,KAAD,IACpC;AACIf,IAAAA,mBAAmB,CAAC,IAAI9B,2BAAJ,EAAD,CAAnB;AACA8B,IAAAA,mBAAmB,CAAC,IAAIxB,yBAAJ,EAAD,CAAnB;AACH,GAJkC,EAIhC,EAJgC,CAAnC;AAMA,QAAMgD,sBAAsB,GAAGjC,WAAW,CAAEwB,KAAD,IAC3C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAN,IAAAA,gBAAgB,CAACc,SAAS,IAC1B;AACI,YAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,OAAjB;AAEAC,MAAAA,QAAQ,CAACC,QAAT,GAAqBX,MAAM,CAACY,aAAP,IAAwBxC,aAAa,CAACyC,SAA3D;AACAH,MAAAA,QAAQ,CAACI,UAAT,GAAuBd,MAAM,CAACY,aAAP,IAAwBxC,aAAa,CAAC2C,SAA7D;AAEA,aAAOL,QAAP;AACH,KARe,CAAhB;AASH,GAbyC,EAavC,CAAEf,gBAAF,CAbuC,CAA1C;AAeA,QAAMqB,kBAAkB,GAAGzC,WAAW,CAAEwB,KAAD,IACvC;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAhB,IAAAA,YAAY,CAACe,MAAM,CAACE,MAAR,CAAZ;AACH,GALqC,EAKnC,EALmC,CAAtC;AAOA,QAAMe,2BAA2B,GAAG1C,WAAW,CAAEwB,KAAD,IAChD;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAN,IAAAA,gBAAgB,CAACc,SAAS,IAC1B;AACI,YAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,OAAjB;AAEAC,MAAAA,QAAQ,CAACQ,gBAAT,GAA4B,IAA5B;AACAR,MAAAA,QAAQ,CAACS,gBAAT,GAA4BnB,MAAM,CAACoB,OAAnC;AACAV,MAAAA,QAAQ,CAACW,aAAT,GAAyBrB,MAAM,CAACE,MAAhC;AAEA,aAAOQ,QAAP;AACH,KATe,CAAhB,CAHJ,CAcI;AACA;AACA;;AAEA1B,IAAAA,mBAAmB,CAAC,IAAIf,gBAAJ,CAAqB+B,MAAM,CAACE,MAA5B,EAAoC,IAApC,EAA0C,KAA1C,CAAD,CAAnB;AAEA,QAAGjD,uBAAuB,CAACqE,SAA3B,EAAsCrE,uBAAuB,CAACsE,IAAxB,CAA6B,aAA7B,EAA4C,WAA5C,EAAyD,SAAzD,EAAoE,CAAEvB,MAAM,CAACE,MAAT,CAApE;AACzC,GAtB8C,EAsB5C,CAAEP,gBAAF,CAtB4C,CAA/C;AAwBA,QAAM6B,yBAAyB,GAAGjD,WAAW,CAAEwB,KAAD,IAC9C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;;AAEA,QAAGD,MAAM,CAACyB,SAAV,EACA;AACI7B,MAAAA,WAAW,CAAC;AAAE8B,QAAAA,QAAQ,EAAE,IAAZ;AAAkBC,QAAAA,KAAK,EAAEjD,aAAa,CAACkD;AAAvC,OAAD,CAAX;AAEAjC,MAAAA,gBAAgB,CAACc,SAAS,IAC1B;AACI,cAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,SAAjB;AAEAC,QAAAA,QAAQ,CAACQ,gBAAT,GAA4BlB,MAAM,CAAC6B,IAAnC;AACAnB,QAAAA,QAAQ,CAACoB,sBAAT,GAAkC9B,MAAM,CAAC+B,SAAzC;AAEA,cAAMC,SAAS,GAAItB,QAAQ,CAACuB,aAAT,KAA2BjC,MAAM,CAAC6B,IAAP,CAAY3B,MAA1D;;AAEA,YAAG,CAAC8B,SAAD,IAAchC,MAAM,CAAC6B,IAAP,CAAYK,kBAA7B,EACA;AACI,cAAGvD,gBAAgB,CAAU,6BAAV,EAAyC,KAAzC,CAAnB,EAAoE3B,aAAa,CAACmF,eAAd;AACvE;;AAEDzB,QAAAA,QAAQ,CAACuB,aAAT,GAAyB,CAAzB;;AAEA,YAAGvB,QAAQ,CAACQ,gBAAT,IAA8BR,QAAQ,CAACQ,gBAAT,CAA0BkB,YAA1B,GAAyC,CAA1E,EACA,CACI;AACH;;AAED,eAAO1B,QAAP;AACH,OAtBe,CAAhB;AAuBH,KA3BD,MA4BK,IAAGV,MAAM,CAACqC,WAAV,EACL;AACI,UAAIrC,MAAM,CAAC6B,IAAP,CAAYS,SAAZ,KAA0B1D,qBAAqB,GAAG2D,QAAnD,IAAgE,CAACvC,MAAM,CAACwC,aAA3E,EACA;AACI,gBAAOxC,MAAM,CAAC6B,IAAP,CAAYY,QAAnB;AAEI,eAAK/E,cAAc,CAACgF,cAApB;AACI9C,YAAAA,WAAW,CAACa,SAAS,IACrB;AACI,oBAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,eAAjB;AAEAC,cAAAA,QAAQ,CAACgB,QAAT,GAAoB1B,MAAM,CAAC6B,IAA3B;AACAnB,cAAAA,QAAQ,CAACiB,KAAT,GAAiBjD,aAAa,CAACiE,cAA/B;AAEA,qBAAOjC,QAAP;AACH,aARU,CAAX;AASA;;AACJ,eAAKhD,cAAc,CAACkF,cAApB;AACIhD,YAAAA,WAAW,CAACa,SAAS,IACrB;AACI,oBAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,eAAjB;AAEAC,cAAAA,QAAQ,CAACgB,QAAT,GAAoB1B,MAAM,CAAC6B,IAA3B;AACAnB,cAAAA,QAAQ,CAACiB,KAAT,GAAiBjD,aAAa,CAACmE,cAA/B;AAEA,qBAAOnC,QAAP;AACH,aARU,CAAX;AASA;AAvBR;AAyBH;;AAED,UAAIV,MAAM,CAAC6B,IAAP,CAAYY,QAAZ,KAAyB/E,cAAc,CAACoF,UAAzC,IAAwD,CAAClE,qBAAqB,GAAGmE,YAAjF,IAAiG,CAACnE,qBAAqB,GAAGoE,UAA1H,IAAwI,CAACpE,qBAAqB,GAAGqE,WAApK,EAAiL;AAEjLxE,MAAAA,iBAAiB,CAACuB,MAAM,CAAC6B,IAAP,CAAY3B,MAAb,CAAjB;AACH,KAlCI,MAoCL;AACIP,MAAAA,gBAAgB,CAACc,SAAS,IAC1B;AACI,cAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,SAAjB;AAEAC,QAAAA,QAAQ,CAACQ,gBAAT,GAA4BlB,MAAM,CAAC6B,IAAnC;AACAnB,QAAAA,QAAQ,CAACoB,sBAAT,GAAkC9B,MAAM,CAAC+B,SAAzC;AAEA,eAAOrB,QAAP;AACH,OARe,CAAhB;AASH;AACJ,GA/E4C,EA+E1C,CAAEf,gBAAF,EAAoBC,WAApB,CA/E0C,CAA7C;AAiFA,QAAMsD,gBAAgB,GAAG3E,WAAW,CAAEwB,KAAD,IACrC;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAN,IAAAA,gBAAgB,CAACc,SAAS,IAC1B;AACI,YAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,OAAjB;AAEAC,MAAAA,QAAQ,CAACyC,iBAAT,GAA6BnD,MAAM,CAACoD,UAApC;AACA1C,MAAAA,QAAQ,CAAC2C,OAAT,GAAmBrD,MAAM,CAACsD,OAA1B;AAEA,aAAO5C,QAAP;AACH,KARe,CAAhB;AASH,GAbmC,EAajC,CAAEf,gBAAF,CAbiC,CAApC;AAeA,QAAM4D,mBAAmB,GAAGhF,WAAW,CAAEwB,KAAD,IACxC;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;;AAEA,QAAG,CAACD,MAAM,CAACuC,QAAR,IAAqBvC,MAAM,CAACuC,QAAP,CAAgBiB,MAAhB,KAA2B,CAAnD,EACA;AACI5D,MAAAA,WAAW,CAACa,SAAS,IACrB;AACI,cAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,SAAjB;AAEAC,QAAAA,QAAQ,CAACiB,KAAT,GAAiBjD,aAAa,CAAC+E,aAA/B;AAEA,eAAO/C,QAAP;AACH,OAPU,CAAX;AAQH;AACJ,GAfsC,EAepC,CAAEd,WAAF,CAfoC,CAAvC;AAiBA,QAAM8D,2BAA2B,GAAGnF,WAAW,CAAEwB,KAAD,IAChD;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;;AAEA,QAAG,CAACD,MAAM,CAACuC,QAAR,IAAqBvC,MAAM,CAACuC,QAAP,CAAgBiB,MAAhB,KAA2B,CAAnD,EACA;AACI5D,MAAAA,WAAW,CAACa,SAAS,IACrB;AACI,cAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,SAAjB;AAEAC,QAAAA,QAAQ,CAACiB,KAAT,GAAiBjD,aAAa,CAACiF,cAA/B;AAEA,eAAOjD,QAAP;AACH,OAPU,CAAX;AAQH;AACJ,GAf8C,EAe5C,CAAEd,WAAF,CAf4C,CAA/C;AAiBA,QAAMgE,2BAA2B,GAAGrF,WAAW,CAAEwB,KAAD,IAChD;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;;AAEA,QAAG,CAACD,MAAM,CAACuC,QAAR,IAAqBvC,MAAM,CAACuC,QAAP,CAAgBiB,MAAhB,KAA2B,CAAnD,EACA;AACI5D,MAAAA,WAAW,CAACa,SAAS,IACrB;AACI,cAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,SAAjB;AAEAC,QAAAA,QAAQ,CAACiB,KAAT,GAAiBjD,aAAa,CAACmF,eAA/B;AAEA,eAAOnD,QAAP;AACH,OAPU,CAAX;AAQH;AACJ,GAf8C,EAe5C,CAAEd,WAAF,CAf4C,CAA/C;AAiBA,QAAMkE,mBAAmB,GAAGvF,WAAW,CAAEwB,KAAD,IACxC;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;;AAEA,YAAOD,MAAM,CAACM,SAAd;AAEI,WAAK,CAAC,MAAN;AACIV,QAAAA,WAAW,CAACa,SAAS,IACrB;AACI,gBAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,WAAjB;AAEAC,UAAAA,QAAQ,CAACiB,KAAT,GAAiBjD,aAAa,CAACqF,oBAA/B;AAEA,iBAAOrD,QAAP;AACH,SAPU,CAAX;AAQA;;AACJ,WAAK,IAAL;AACI3B,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAC,gCAAD,CAA9C,EAAkFC,qBAAqB,CAACkF,OAAxG,EAAiH,IAAjH,EAAuH,IAAvH,EAA6HnF,YAAY,CAAC,qBAAD,CAAzI;AAEA;;AACJ,WAAK,IAAL;AACIE,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAC,mCAAD,CAA9C,EAAqFC,qBAAqB,CAACkF,OAA3G,EAAoH,IAApH,EAA0H,IAA1H,EAAgInF,YAAY,CAAC,qBAAD,CAA5I;AAEA;;AACJ,WAAK,IAAL;AACIE,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAC,iCAAD,CAA9C,EAAmFC,qBAAqB,CAACkF,OAAzG,EAAkH,IAAlH,EAAwH,IAAxH,EAA8HnF,YAAY,CAAC,qBAAD,CAA1I;AAEA;;AACJ,WAAK,IAAL;AACIE,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAC,qCAAD,CAA9C,EAAuFC,qBAAqB,CAACkF,OAA7G,EAAsH,IAAtH,EAA4H,IAA5H,EAAkInF,YAAY,CAAC,qBAAD,CAA9I;AAEA;AA3BR;AA6BH,GAjCsC,EAiCpC,CAAEe,WAAF,CAjCoC,CAAvC;AAmCA,QAAMqE,wBAAwB,GAAG1F,WAAW,CAAEwB,KAAD,IAC7C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAP,IAAAA,mBAAmB,CAACM,MAAM,CAACP,gBAAR,CAAnB;AACAD,IAAAA,kBAAkB,CAACQ,MAAM,CAACP,gBAAP,CAAwB+D,MAAxB,GAAiCxD,MAAM,CAACP,gBAAP,CAAwB,CAAxB,CAAjC,GAA8D,IAA/D,CAAlB;AACH,GAN2C,EAMzC,CAAEC,mBAAF,EAAuBF,kBAAvB,CANyC,CAA5C;AAQA,QAAM0E,sBAAsB,GAAG3F,WAAW,CAAEwB,KAAD,IAC3C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAT,IAAAA,kBAAkB,CAACiB,SAAS,IAC5B;AACI,UAAIC,QAAQ,GAAGD,SAAf;AAEA,UAAG,CAACC,QAAJ,EAAcA,QAAQ,GAAKjB,gBAAgB,IAAIA,gBAAgB,CAAC+D,MAArC,IAA+C/D,gBAAgB,CAAC,CAAD,CAAhE,IAAwE,IAApF;AAEd,UAAG,CAACiB,QAAJ,EAAc,OAAO,IAAP;;AAEd,UAAIV,MAAM,CAACmE,MAAP,CAAcC,IAAd,KAAuB1D,QAAQ,CAAC0D,IAAjC,IAA0C3E,gBAA1C,IAA8DA,gBAAgB,CAAC+D,MAAlF,EACA;AACI,aAAI,MAAMa,OAAV,IAAqB5E,gBAArB,EACA;AACI,cAAG4E,OAAO,CAACD,IAAR,KAAiBpE,MAAM,CAACmE,MAAP,CAAcC,IAAlC,EAAwC;AAExC1D,UAAAA,QAAQ,GAAG2D,OAAX;AACH;AACJ;;AAED,WAAI,MAAMA,OAAV,IAAqB5E,gBAArB,EACA;AACI,YAAG4E,OAAO,CAACD,IAAR,KAAiBpE,MAAM,CAACmE,MAAP,CAAcC,IAAlC,EAAwC;AAExC1D,QAAAA,QAAQ,GAAG2D,OAAX;AACH;;AAED,aAAO3D,QAAP;AACH,KA1BiB,CAAlB;AA4BAb,IAAAA,eAAe,CAACG,MAAM,CAACmE,MAAR,CAAf;AACH,GAjCyC,EAiCvC,CAAE1E,gBAAF,EAAoBD,kBAApB,EAAwCK,eAAxC,CAjCuC,CAA1C;AAmCA,QAAMyE,0BAA0B,GAAG/F,WAAW,CAAEwB,KAAD,IAC/C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAV,IAAAA,aAAa,CAACS,MAAM,CAACuE,UAAR,CAAb;AACH,GAL6C,EAK3C,CAAEhF,aAAF,CAL2C,CAA9C;AAOA,QAAMiF,kBAAkB,GAAGjG,WAAW,CAAEwB,KAAD,IACvC;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEAxB,IAAAA,iBAAiB,CAACuB,MAAM,CAACE,MAAR,CAAjB;AACH,GALqC,EAKnC,EALmC,CAAtC;AAOA,QAAMuE,wBAAwB,GAAGlG,WAAW,CAAEwB,KAAD,IAC7C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;AAEA,QAAIyE,oBAAoB,GAAG,KAA3B;AAEA/E,IAAAA,gBAAgB,CAACc,SAAS,IAC1B;AACIiE,MAAAA,oBAAoB,GAAGjE,SAAS,CAACkE,gBAAjC;AAEA,YAAMjE,QAAQ,GAAG,EAAE,GAAGD;AAAL,OAAjB;AAEAC,MAAAA,QAAQ,CAACkE,UAAT,GAAsB5E,MAAM,CAAC4E,UAA7B;AACAlE,MAAAA,QAAQ,CAACiE,gBAAT,GAA4B,IAA5B;AAEA,aAAOjE,QAAP;AACH,KAVe,CAAhB;;AAYA,QAAGgE,oBAAH,EACA;AACI;AACA;AACH;;AAED,QAAIG,WAAW,GAAG,CAAC,CAAnB;AACA,QAAIC,SAAS,GAAG,CAAC,CAAjB;;AAEA,QAAInG,gBAAgB,CAAS,WAAT,CAAhB,KAA0CoG,SAA3C,IAA0DC,QAAQ,CAACrG,gBAAgB,CAAS,WAAT,CAAjB,CAAR,GAAkD,CAA/G,EACA;AACIkG,MAAAA,WAAW,GAAG,CAAd;AACA7F,MAAAA,mBAAmB,CAAC,IAAInC,2BAAJ,CAAgCmI,QAAQ,CAACrG,gBAAgB,CAAS,WAAT,CAAjB,CAAxC,CAAD,CAAnB;AACH;;AAED,QAAIA,gBAAgB,CAAS,cAAT,CAAhB,KAA6CoG,SAA9C,IAA6DpG,gBAAgB,CAAS,YAAT,CAAhB,KAA2CoG,SAA3G,EACA;AACIF,MAAAA,WAAW,GAAGG,QAAQ,CAACrG,gBAAgB,CAAS,cAAT,CAAjB,CAAtB;AACAmG,MAAAA,SAAS,GAAGE,QAAQ,CAACrG,gBAAgB,CAAS,YAAT,CAAjB,CAApB;AACH;;AAED,QAAGkG,WAAW,KAAK,CAAnB,EACA;AACI5F,MAAAA,YAAY,CAAC6F,SAAD,CAAZ;AACH,KAHD,MAKK,IAAID,WAAW,KAAK,CAAC,CAAlB,IAAyB7E,MAAM,CAACiF,aAAP,GAAuB,CAAnD,EACL;AACIzG,MAAAA,eAAe,CAAC,iBAAD,CAAf;;AAEA,UAAGwB,MAAM,CAACiF,aAAP,KAAyBjF,MAAM,CAAC4E,UAAnC,EACA;AACInG,QAAAA,iBAAiB,CAACuB,MAAM,CAACiF,aAAR,CAAjB;AACH,OAHD,MAKA;AACIxG,QAAAA,iBAAiB,CAACuB,MAAM,CAAC4E,UAAR,CAAjB;AACH;AACJ;AACJ,GAzD2C,EAyDzC,CAAEjF,gBAAF,CAzDyC,CAA5C;AA2DA,QAAMuF,qBAAqB,GAAG3G,WAAW,CAAEwB,KAAD,IAC1C;AACI,UAAMC,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAf;;AAEA,YAAOD,MAAM,CAACmF,MAAd;AAEI,WAAKvI,wBAAwB,CAACwI,WAA9B;AACIrG,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAC,8BAAD,CAA9C,EAAgFC,qBAAqB,CAACkF,OAAtG,EAA+G,IAA/G,EAAqH,IAArH,EAA2HnF,YAAY,CAAC,+BAAD,CAAvI;AAEA;;AACJ,WAAKjC,wBAAwB,CAACyI,kBAA9B;AACItG,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAE,oBAAoBmB,MAAM,CAACsF,SAAW,EAAxC,CAA9C,EAA0FxG,qBAAqB,CAACkF,OAAhH,EAAyH,IAAzH,EAA+H,IAA/H,EAAqInF,YAAY,CAAC,wBAAD,CAAjJ;AAEA;;AACJ,WAAKjC,wBAAwB,CAAC2I,aAA9B;AACIxG,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAC,uBAAD,CAA9C,EAAyEC,qBAAqB,CAACkF,OAA/F,EAAwG,IAAxG,EAA8G,IAA9G,EAAoHnF,YAAY,CAAC,wBAAD,CAAhI;AAEA;;AACJ;AACIE,QAAAA,qBAAqB,CAACsB,WAAtB,CAAkCxB,YAAY,CAAC,wBAAD,CAA9C,EAA0EC,qBAAqB,CAACkF,OAAhG,EAAyG,IAAzG,EAA+G,IAA/G,EAAqHnF,YAAY,CAAC,wBAAD,CAAjI;AAEA;AAjBR;;AAoBAK,IAAAA,YAAY;AACf,GAzBwC,EAyBtC,EAzBsC,CAAzC;AA2BA,QAAMsG,kBAAkB,GAAGjH,WAAW,CAAEwB,KAAD,IACvC;AACIvB,IAAAA,eAAe,CAAC,gBAAD,CAAf;AACH,GAHqC,EAGnC,EAHmC,CAAtC;AAKAW,EAAAA,mBAAmB,CAACd,aAAD,EAAgBkC,eAAhB,CAAnB;AACApB,EAAAA,mBAAmB,CAACb,oBAAD,EAAuBkC,sBAAvB,CAAnB;AACArB,EAAAA,mBAAmB,CAACnB,gBAAD,EAAmBgD,kBAAnB,CAAnB;AACA7B,EAAAA,mBAAmB,CAACpB,yBAAD,EAA4BkD,2BAA5B,CAAnB;AACA9B,EAAAA,mBAAmB,CAACpC,uBAAD,EAA0ByE,yBAA1B,CAAnB;AACArC,EAAAA,mBAAmB,CAACjB,cAAD,EAAiBgF,gBAAjB,CAAnB;AACA/D,EAAAA,mBAAmB,CAACvB,iBAAD,EAAoB2F,mBAApB,CAAnB;AACApE,EAAAA,mBAAmB,CAACxB,yBAAD,EAA4B+F,2BAA5B,CAAnB;AACAvE,EAAAA,mBAAmB,CAACtB,yBAAD,EAA4B+F,2BAA5B,CAAnB;AACAzE,EAAAA,mBAAmB,CAACrC,iBAAD,EAAoBgH,mBAApB,CAAnB;AACA3E,EAAAA,mBAAmB,CAAC9B,sBAAD,EAAyB4G,wBAAzB,CAAnB;AACA9E,EAAAA,mBAAmB,CAAC5B,oBAAD,EAAuB2G,sBAAvB,CAAnB;AACA/E,EAAAA,mBAAmB,CAAChC,wBAAD,EAA2BmH,0BAA3B,CAAnB;AACAnF,EAAAA,mBAAmB,CAAC1B,gBAAD,EAAmB+G,kBAAnB,CAAnB;AACArF,EAAAA,mBAAmB,CAAC/B,sBAAD,EAAyBqH,wBAAzB,CAAnB;AACAtF,EAAAA,mBAAmB,CAACrB,mBAAD,EAAsBoH,qBAAtB,CAAnB;AACA/F,EAAAA,mBAAmB,CAAC7B,6BAAD,EAAgCkI,kBAAhC,CAAnB;AAEA,SAAO,IAAP;AACH,CA9aM;;GAAMnG,uB;UAE6KD,mB;;;KAF7KC,uB","sourcesContent":["import { CanCreateRoomEventEvent, CantConnectMessageParser, FollowFriendMessageComposer, GenericErrorEvent, GetGuestRoomResultEvent, HabboWebTools, LegacyExternalInterface, NavigatorCategoriesComposer, NavigatorCategoriesEvent, NavigatorHomeRoomEvent, NavigatorMetadataEvent, NavigatorOpenRoomCreatorEvent, NavigatorSearchEvent, NavigatorSettingsComposer, RoomCreatedEvent, RoomDataParser, RoomDoorbellAcceptedEvent, RoomDoorbellEvent, RoomDoorbellRejectedEvent, RoomEnterErrorEvent, RoomEntryInfoMessageEvent, RoomForwardEvent, RoomInfoComposer, RoomScoreEvent, RoomSettingsUpdatedEvent, SecurityLevel, UserInfoEvent, UserPermissionsEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback } from 'react';\nimport { CreateLinkEvent, CreateRoomSession, DoorStateType, GetConfiguration, GetSessionDataManager, LocalizeText, NotificationAlertType, NotificationUtilities, SendMessageComposer, TryVisitRoom, VisitDesktop } from '../../api';\nimport { UseMessageEventHook } from '../../hooks';\nimport { useNavigatorContext } from './NavigatorContext';\n\nexport const NavigatorMessageHandler: FC<{}> = props =>\n{\n    const { setCategories = null, setTopLevelContext = null, topLevelContexts = null, setTopLevelContexts = null, setNavigatorData = null, setDoorData = null, setSearchResult = null } = useNavigatorContext();\n\n    const onRoomSettingsUpdatedEvent = useCallback((event: RoomSettingsUpdatedEvent) =>\n    {\n        const parser = event.getParser();\n\n        SendMessageComposer(new RoomInfoComposer(parser.roomId, false, false));\n    }, []);\n\n    UseMessageEventHook(RoomSettingsUpdatedEvent, onRoomSettingsUpdatedEvent);\n\n    const onCanCreateRoomEventEvent = useCallback((event: CanCreateRoomEventEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(parser.canCreate)\n        {\n            // show room event cvreate\n\n            return;\n        }\n\n        NotificationUtilities.simpleAlert(LocalizeText(`navigator.cannotcreateevent.error.${ parser.errorCode }`), null, null, null, LocalizeText('navigator.cannotcreateevent.title'));\n    }, []);\n    \n    UseMessageEventHook(CanCreateRoomEventEvent, onCanCreateRoomEventEvent);\n\n    const onUserInfoEvent = useCallback((event: UserInfoEvent) =>\n    {\n        SendMessageComposer(new NavigatorCategoriesComposer());\n        SendMessageComposer(new NavigatorSettingsComposer());\n    }, []);\n\n    const onUserPermissionsEvent = useCallback((event: UserPermissionsEvent) =>\n    {\n        const parser = event.getParser();\n\n        setNavigatorData(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            newValue.eventMod = (parser.securityLevel >= SecurityLevel.MODERATOR);\n            newValue.roomPicker = (parser.securityLevel >= SecurityLevel.COMMUNITY);\n\n            return newValue;\n        });\n    }, [ setNavigatorData ]);\n\n    const onRoomForwardEvent = useCallback((event: RoomForwardEvent) =>\n    {\n        const parser = event.getParser();\n\n        TryVisitRoom(parser.roomId);\n    }, []);\n\n    const onRoomEntryInfoMessageEvent = useCallback((event: RoomEntryInfoMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        setNavigatorData(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            newValue.enteredGuestRoom = null;\n            newValue.currentRoomOwner = parser.isOwner;\n            newValue.currentRoomId = parser.roomId;\n\n            return newValue;\n        });\n\n        // close room info\n        // close room settings\n        // close room filter\n\n        SendMessageComposer(new RoomInfoComposer(parser.roomId, true, false));\n\n        if(LegacyExternalInterface.available) LegacyExternalInterface.call('legacyTrack', 'navigator', 'private', [ parser.roomId ]);\n    }, [ setNavigatorData ]);\n\n    const onGetGuestRoomResultEvent = useCallback((event: GetGuestRoomResultEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(parser.roomEnter)\n        {\n            setDoorData({ roomInfo: null, state: DoorStateType.NONE });\n            \n            setNavigatorData(prevValue =>\n            {\n                const newValue = { ...prevValue };\n\n                newValue.enteredGuestRoom = parser.data;\n                newValue.currentRoomIsStaffPick = parser.staffPick;\n\n                const isCreated = (newValue.createdFlatId === parser.data.roomId);\n\n                if(!isCreated && parser.data.displayRoomEntryAd)\n                {\n                    if(GetConfiguration<boolean>('roomenterad.habblet.enabled', false)) HabboWebTools.openRoomEnterAd();\n                }\n\n                newValue.createdFlatId = 0;\n\n                if(newValue.enteredGuestRoom && (newValue.enteredGuestRoom.habboGroupId > 0))\n                {\n                    // close event info\n                }\n\n                return newValue;\n            });\n        }\n        else if(parser.roomForward)\n        {\n            if((parser.data.ownerName !== GetSessionDataManager().userName) && !parser.isGroupMember)\n            {\n                switch(parser.data.doorMode)\n                {\n                    case RoomDataParser.DOORBELL_STATE:\n                        setDoorData(prevValue =>\n                        {\n                            const newValue = { ...prevValue };\n\n                            newValue.roomInfo = parser.data;\n                            newValue.state = DoorStateType.START_DOORBELL;\n\n                            return newValue;\n                        });\n                        return;\n                    case RoomDataParser.PASSWORD_STATE:\n                        setDoorData(prevValue =>\n                        {\n                            const newValue = { ...prevValue };\n\n                            newValue.roomInfo = parser.data;\n                            newValue.state = DoorStateType.START_PASSWORD;\n\n                            return newValue;\n                        });\n                        return;\n                }\n            }\n\n            if((parser.data.doorMode === RoomDataParser.NOOB_STATE) && !GetSessionDataManager().isAmbassador && !GetSessionDataManager().isRealNoob && !GetSessionDataManager().isModerator) return;\n\n            CreateRoomSession(parser.data.roomId);\n        }\n        else\n        {\n            setNavigatorData(prevValue =>\n            {\n                const newValue = { ...prevValue };\n\n                newValue.enteredGuestRoom = parser.data;\n                newValue.currentRoomIsStaffPick = parser.staffPick;\n\n                return newValue;\n            });\n        }\n    }, [ setNavigatorData, setDoorData ]);\n\n    const onRoomScoreEvent = useCallback((event: RoomScoreEvent) =>\n    {\n        const parser = event.getParser();\n\n        setNavigatorData(prevValue =>\n        {\n            const newValue = { ...prevValue };\n\n            newValue.currentRoomRating = parser.totalLikes;\n            newValue.canRate = parser.canLike;\n\n            return newValue;\n        });\n    }, [ setNavigatorData ]);\n\n    const onRoomDoorbellEvent = useCallback((event: RoomDoorbellEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser.userName || (parser.userName.length === 0))\n        {\n            setDoorData(prevValue =>\n            {\n                const newValue = { ...prevValue };\n\n                newValue.state = DoorStateType.STATE_WAITING;\n\n                return newValue;\n            });\n        }\n    }, [ setDoorData ]);\n\n    const onRoomDoorbellAcceptedEvent = useCallback((event: RoomDoorbellAcceptedEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser.userName || (parser.userName.length === 0))\n        {\n            setDoorData(prevValue =>\n            {\n                const newValue = { ...prevValue };\n\n                newValue.state = DoorStateType.STATE_ACCEPTED;\n\n                return newValue;\n            });\n        }\n    }, [ setDoorData ]);\n\n    const onRoomDoorbellRejectedEvent = useCallback((event: RoomDoorbellRejectedEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser.userName || (parser.userName.length === 0))\n        {\n            setDoorData(prevValue =>\n            {\n                const newValue = { ...prevValue };\n\n                newValue.state = DoorStateType.STATE_NO_ANSWER;\n\n                return newValue;\n            });\n        }\n    }, [ setDoorData ]);\n\n    const onGenericErrorEvent = useCallback((event: GenericErrorEvent) =>\n    {\n        const parser = event.getParser();\n\n        switch(parser.errorCode)\n        {\n            case -100002:\n                setDoorData(prevValue =>\n                {\n                    const newValue = { ...prevValue };\n    \n                    newValue.state = DoorStateType.STATE_WRONG_PASSWORD;\n    \n                    return newValue;\n                });\n                return;\n            case 4009:\n                NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.need.to.be.vip'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n\n                return;\n            case 4010:\n                NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.invalid_room_name'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n\n                return;\n            case 4011:\n                NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.cannot_perm_ban'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n\n                return;\n            case 4013:\n                NotificationUtilities.simpleAlert(LocalizeText('navigator.alert.room_in_maintenance'), NotificationAlertType.DEFAULT, null, null, LocalizeText('generic.alert.title'));\n\n                return;\n        }\n    }, [ setDoorData ]);\n\n    const onNavigatorMetadataEvent = useCallback((event: NavigatorMetadataEvent) =>\n    {\n        const parser = event.getParser();\n\n        setTopLevelContexts(parser.topLevelContexts);\n        setTopLevelContext(parser.topLevelContexts.length ? parser.topLevelContexts[0] : null);\n    }, [ setTopLevelContexts, setTopLevelContext ]);\n\n    const onNavigatorSearchEvent = useCallback((event: NavigatorSearchEvent) =>\n    {\n        const parser = event.getParser();\n\n        setTopLevelContext(prevValue =>\n        {\n            let newValue = prevValue;\n\n            if(!newValue) newValue = ((topLevelContexts && topLevelContexts.length && topLevelContexts[0]) || null);\n\n            if(!newValue) return null;\n\n            if((parser.result.code !== newValue.code) && topLevelContexts && topLevelContexts.length)\n            {\n                for(const context of topLevelContexts)\n                {\n                    if(context.code !== parser.result.code) continue;\n\n                    newValue = context;\n                }\n            }\n\n            for(const context of topLevelContexts)\n            {\n                if(context.code !== parser.result.code) continue;\n\n                newValue = context;\n            }\n\n            return newValue;\n        });\n\n        setSearchResult(parser.result);\n    }, [ topLevelContexts, setTopLevelContext, setSearchResult ]);\n\n    const onNavigatorCategoriesEvent = useCallback((event: NavigatorCategoriesEvent) =>\n    {\n        const parser = event.getParser();\n\n        setCategories(parser.categories);\n    }, [ setCategories ]);\n\n    const onRoomCreatedEvent = useCallback((event: RoomCreatedEvent) =>\n    {\n        const parser = event.getParser();\n\n        CreateRoomSession(parser.roomId);\n    }, []);\n\n    const onNavigatorHomeRoomEvent = useCallback((event: NavigatorHomeRoomEvent) =>\n    {\n        const parser = event.getParser();\n\n        let prevSettingsReceived = false;\n\n        setNavigatorData(prevValue =>\n        {\n            prevSettingsReceived = prevValue.settingsReceived;\n\n            const newValue = { ...prevValue };\n\n            newValue.homeRoomId = parser.homeRoomId;\n            newValue.settingsReceived = true;\n\n            return newValue;\n        });\n\n        if(prevSettingsReceived)\n        {\n            // refresh room info window\n            return;\n        }\n\n        let forwardType = -1;\n        let forwardId = -1;\n\n        if((GetConfiguration<string>('friend.id') !== undefined) && (parseInt(GetConfiguration<string>('friend.id')) > 0))\n        {\n            forwardType = 0;\n            SendMessageComposer(new FollowFriendMessageComposer(parseInt(GetConfiguration<string>('friend.id'))));\n        }\n\n        if((GetConfiguration<number>('forward.type') !== undefined) && (GetConfiguration<number>('forward.id') !== undefined))\n        {\n            forwardType = parseInt(GetConfiguration<string>('forward.type'));\n            forwardId = parseInt(GetConfiguration<string>('forward.id'))\n        }\n\n        if(forwardType === 2)\n        {\n            TryVisitRoom(forwardId);\n        }\n\n        else if((forwardType === -1) && (parser.roomIdToEnter > 0))\n        {\n            CreateLinkEvent('navigator/close');\n\n            if(parser.roomIdToEnter !== parser.homeRoomId)\n            {\n                CreateRoomSession(parser.roomIdToEnter);\n            }\n            else\n            {\n                CreateRoomSession(parser.homeRoomId);\n            }\n        }\n    }, [ setNavigatorData ]);\n\n    const onRoomEnterErrorEvent = useCallback((event: RoomEnterErrorEvent) =>\n    {\n        const parser = event.getParser();\n\n        switch(parser.reason)\n        {\n            case CantConnectMessageParser.REASON_FULL:\n                NotificationUtilities.simpleAlert(LocalizeText('navigator.guestroomfull.text'), NotificationAlertType.DEFAULT, null, null, LocalizeText('navigator.guestroomfull.title'));\n\n                break;\n            case CantConnectMessageParser.REASON_QUEUE_ERROR:\n                NotificationUtilities.simpleAlert(LocalizeText(`room.queue.error.${ parser.parameter }`), NotificationAlertType.DEFAULT, null, null, LocalizeText('room.queue.error.title'));\n\n                break;\n            case CantConnectMessageParser.REASON_BANNED:\n                NotificationUtilities.simpleAlert(LocalizeText('navigator.banned.text'), NotificationAlertType.DEFAULT, null, null, LocalizeText('navigator.banned.title'));\n\n                break;\n            default:\n                NotificationUtilities.simpleAlert(LocalizeText('room.queue.error.title'), NotificationAlertType.DEFAULT, null, null, LocalizeText('room.queue.error.title'));\n\n                break;\n        }\n\n        VisitDesktop();\n    }, []);\n\n    const onRoomCreatorEvent = useCallback((event: NavigatorOpenRoomCreatorEvent) =>\n    {\n        CreateLinkEvent('navigator/show');\n    }, []);\n\n    UseMessageEventHook(UserInfoEvent, onUserInfoEvent);\n    UseMessageEventHook(UserPermissionsEvent, onUserPermissionsEvent);\n    UseMessageEventHook(RoomForwardEvent, onRoomForwardEvent);\n    UseMessageEventHook(RoomEntryInfoMessageEvent, onRoomEntryInfoMessageEvent);\n    UseMessageEventHook(GetGuestRoomResultEvent, onGetGuestRoomResultEvent);\n    UseMessageEventHook(RoomScoreEvent, onRoomScoreEvent);\n    UseMessageEventHook(RoomDoorbellEvent, onRoomDoorbellEvent);\n    UseMessageEventHook(RoomDoorbellAcceptedEvent, onRoomDoorbellAcceptedEvent);\n    UseMessageEventHook(RoomDoorbellRejectedEvent, onRoomDoorbellRejectedEvent);\n    UseMessageEventHook(GenericErrorEvent, onGenericErrorEvent);\n    UseMessageEventHook(NavigatorMetadataEvent, onNavigatorMetadataEvent);\n    UseMessageEventHook(NavigatorSearchEvent, onNavigatorSearchEvent);\n    UseMessageEventHook(NavigatorCategoriesEvent, onNavigatorCategoriesEvent);\n    UseMessageEventHook(RoomCreatedEvent, onRoomCreatedEvent);\n    UseMessageEventHook(NavigatorHomeRoomEvent, onNavigatorHomeRoomEvent);\n    UseMessageEventHook(RoomEnterErrorEvent, onRoomEnterErrorEvent);\n    UseMessageEventHook(NavigatorOpenRoomCreatorEvent, onRoomCreatorEvent);\n\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}