{"ast":null,"code":"import { Graphics } from '@pixi/graphics';\nimport { Vector3d } from '../../../../../../../room/utils/Vector3d';\nexport class PlaneMaterialCellColumn {\n  constructor(width, cells) {\n    let repeatMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    this._cells = void 0;\n    this._repeatMode = void 0;\n    this._width = void 0;\n    this._cachedTexture = void 0;\n    this._cachedBitmapData = void 0;\n    this._cachedBitmapNormal = void 0;\n    this._cachedBitmapDataOffsetX = void 0;\n    this._cachedBitmapDataOffsetY = void 0;\n    this._isCached = void 0;\n    this._isStatic = void 0;\n    this._cells = [];\n    this._repeatMode = repeatMode;\n    this._width = width < 1 ? 1 : width;\n    this._cachedBitmapData = null;\n    this._cachedBitmapNormal = null;\n    this._cachedBitmapDataOffsetX = 0;\n    this._cachedBitmapDataOffsetY = 0;\n    this._isCached = false;\n    this._isStatic = true;\n\n    if (cells && cells.length) {\n      let cellIndex = 0;\n\n      while (cellIndex < cells.length) {\n        const cell = cells[cellIndex];\n\n        if (cell) {\n          this._cells.push(cell);\n\n          if (!cell.isStatic) this._isStatic = false;\n        }\n\n        cellIndex++;\n      }\n    }\n  }\n\n  get isStatic() {\n    return this._isStatic;\n  }\n\n  isRepeated() {\n    return !(this._repeatMode === PlaneMaterialCellColumn.REPEAT_MODE_NONE);\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  dispose() {\n    if (this._cells && this._cells.length) {\n      for (const cell of this._cells) {\n        if (!cell) continue;\n        cell.dispose();\n      }\n\n      this._cells = null;\n    }\n\n    if (this._cachedBitmapData) {\n      this._cachedBitmapData.destroy();\n\n      this._cachedBitmapData = null;\n    }\n\n    if (this._cachedBitmapNormal) this._cachedBitmapNormal = null;\n  }\n\n  clearCache() {\n    if (!this._isCached) return;\n\n    if (this._cachedBitmapData) {\n      this._cachedBitmapData.destroy();\n\n      this._cachedBitmapData = null;\n    }\n\n    if (this._cachedBitmapNormal) {\n      this._cachedBitmapNormal.x = 0;\n      this._cachedBitmapNormal.y = 0;\n      this._cachedBitmapNormal.z = 0;\n    }\n\n    if (this._cells && this._cells.length) {\n      for (const cell of this._cells) {\n        if (!cell) continue;\n        cell.clearCache();\n      }\n    }\n\n    this._isCached = false;\n  }\n\n  render(height, normal, offsetX, offsetY) {\n    let ht = 0;\n\n    if (this._repeatMode == PlaneMaterialCellColumn.REPEAT_MODE_NONE) {\n      ht = this.getCellsHeight(this._cells, normal);\n      height = ht;\n    }\n\n    if (!this._cachedBitmapNormal) this._cachedBitmapNormal = new Vector3d();\n\n    if (this.isStatic) {\n      if (this._cachedBitmapData) {\n        if (this._cachedBitmapData.height === height && Vector3d.isEqual(this._cachedBitmapNormal, normal) && this._cachedBitmapDataOffsetX === offsetX && this._cachedBitmapDataOffsetY === offsetY) {\n          return this._cachedBitmapData;\n        }\n\n        this._cachedBitmapData.destroy();\n\n        this._cachedBitmapData = null;\n      }\n    } else {\n      if (this._cachedBitmapData) {\n        if (this._cachedBitmapData.height === height) {\n          this._cachedBitmapData.beginFill(0xFFFFFF).drawRect(0, 0, this._cachedBitmapData.width, height).endFill();\n        } else {\n          this._cachedBitmapData.destroy();\n\n          this._cachedBitmapData = null;\n        }\n      }\n    }\n\n    this._isCached = true;\n\n    if (!this._cachedBitmapData) {\n      this._cachedBitmapData = new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, this._width, height).endFill();\n    }\n\n    this._cachedBitmapNormal.assign(normal);\n\n    this._cachedBitmapDataOffsetX = offsetX;\n    this._cachedBitmapDataOffsetY = offsetY;\n    if (!this._cells.length) return this._cachedBitmapData;\n\n    switch (this._repeatMode) {\n      case PlaneMaterialCellColumn.REPEAT_MODE_NONE:\n        this.renderRepeatNone(normal);\n        break;\n\n      case PlaneMaterialCellColumn.REPEAT_MODE_BORDERS:\n        console.log('REPEAT_MODE_BORDERS'); //     this.renderRepeatBorders(normal);\n\n        break;\n\n      case PlaneMaterialCellColumn.REPEAT_MODE_CENTER:\n        console.log('REPEAT_MODE_CENTER'); //     this.renderRepeatCenter(normal);\n\n        break;\n\n      case PlaneMaterialCellColumn.REPEAT_MODE_FIRST:\n        console.log('REPEAT_MODE_FIRST'); //     this.renderRepeatFirst(normal);\n\n        break;\n\n      case PlaneMaterialCellColumn.REPEAT_MODE_LAST:\n        console.log('REPEAT_MODE_LAST'); //     this.renderRepeatLast(normal);\n\n        break;\n\n      default:\n        this.renderRepeatAll(normal, offsetX, offsetY);\n        break;\n    }\n\n    return this._cachedBitmapData;\n  }\n\n  getCellsHeight(cells, normal) {\n    if (!cells || !cells.length) return 0;\n    let height = 0;\n    let cellIterator = 0;\n\n    while (cellIterator < cells.length) {\n      const cell = cells[cellIterator];\n      if (cell) height += cell.getHeight(normal);\n      cellIterator++;\n    }\n\n    return height;\n  }\n\n  renderCells(cells, index, flag, normal) {\n    let offsetX = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let offsetY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    if (!cells || !cells.length || !this._cachedBitmapData) return index;\n    let cellIndex = 0;\n\n    while (cellIndex < cells.length) {\n      let cell = null;\n\n      if (flag) {\n        cell = cells[cellIndex];\n      } else {\n        cell = cells[cells.length - 1 - cellIndex];\n      }\n\n      if (cell) {\n        const graphic = cell.render(normal, offsetX, offsetY);\n\n        if (graphic) {\n          if (!flag) index -= graphic.height;\n          graphic.y = index;\n\n          this._cachedBitmapData.addChild(graphic);\n\n          if (flag) index = index + graphic.height;\n          if (flag && index >= this._cachedBitmapData.height || !flag && index <= 0) return index;\n        }\n      }\n\n      cellIndex++;\n    }\n\n    return index;\n  }\n\n  renderRepeatNone(normal) {\n    if (!this._cells.length || !this._cachedBitmapData) return;\n    this.renderCells(this._cells, 0, true, normal);\n  }\n\n  renderRepeatAll(normal, offsetX, offsetY) {\n    if (!this._cells.length || !this._cachedBitmapData) return;\n    let index = 0;\n\n    while (index < this._cachedBitmapData.height) {\n      index = this.renderCells(this._cells, index, true, normal, offsetX, offsetY);\n      if (!index) return;\n    }\n  } // private renderRepeatBorders(k:IVector3D): void\n  // {\n  //     if (((this._cells.length == 0) || (this._cachedBitmapData == null)))\n  //     {\n  //         return;\n  //     }\n  //     var _local_2:PlaneMaterialCell;\n  //     var _local_3:BitmapData;\n  //     var _local_4:Array = [];\n  //     var _local_5: number;\n  //     var _local_6: number;\n  //     var _local_7: number;\n  //     _local_7 = 1;\n  //     while (_local_7 < (this._cells.length - 1))\n  //     {\n  //         _local_2 = (this._cells[_local_7] as PlaneMaterialCell);\n  //         if (_local_2 != null)\n  //         {\n  //             _local_6 = _local_2.getHeight(k);\n  //             if (_local_6 > 0)\n  //             {\n  //                 _local_5 = (_local_5 + _local_6);\n  //                 _local_4.push(_local_2);\n  //             }\n  //         }\n  //         _local_7++;\n  //     }\n  //     if (this._cells.length == 1)\n  //     {\n  //         _local_2 = (this._cells[0] as PlaneMaterialCell);\n  //         if (_local_2 != null)\n  //         {\n  //             _local_6 = _local_2.getHeight(k);\n  //             if (_local_6 > 0)\n  //             {\n  //                 _local_5 = (_local_5 + _local_6);\n  //                 _local_4.push(_local_2);\n  //             }\n  //         }\n  //     }\n  //     var _local_8:* = ((this._cachedBitmapData.height - _local_5) >> 1);\n  //     var _local_9: number = this.renderCells(_local_4, _local_8, true, k);\n  //     _local_2 = (this._cells[0] as PlaneMaterialCell);\n  //     if (_local_2 != null)\n  //     {\n  //         _local_4 = [_local_2];\n  //         while (_local_8 >= 0)\n  //         {\n  //             _local_8 = this.renderCells(_local_4, _local_8, false, k);\n  //         }\n  //     }\n  //     _local_2 = (this._cells[(this._cells.length - 1)] as PlaneMaterialCell);\n  //     if (_local_2 != null)\n  //     {\n  //         _local_4 = [_local_2];\n  //         while (_local_9 < this._cachedBitmapData.height)\n  //         {\n  //             _local_9 = this.renderCells(_local_4, _local_9, true, k);\n  //         }\n  //     }\n  // }\n  // private renderRepeatCenter(k:IVector3D): void\n  // {\n  //     var _local_13: number;\n  //     var _local_14: number;\n  //     var _local_15: number;\n  //     var _local_16:Array;\n  //     if (((this._cells.length == 0) || (this._cachedBitmapData == null)))\n  //     {\n  //         return;\n  //     }\n  //     var _local_2:PlaneMaterialCell;\n  //     var _local_3:BitmapData;\n  //     var _local_4:Array = [];\n  //     var _local_5:Array = [];\n  //     var _local_6: number;\n  //     var _local_7: number;\n  //     var _local_8: number;\n  //     var _local_9: number;\n  //     _local_9 = 0;\n  //     while (_local_9 < (this._cells.length >> 1))\n  //     {\n  //         _local_2 = (this._cells[_local_9] as PlaneMaterialCell);\n  //         if (_local_2 != null)\n  //         {\n  //             _local_8 = _local_2.getHeight(k);\n  //             if (_local_8 > 0)\n  //             {\n  //                 _local_6 = (_local_6 + _local_8);\n  //                 _local_4.push(_local_2);\n  //             }\n  //         }\n  //         _local_9++;\n  //     }\n  //     _local_9 = ((this._cells.length >> 1) + 1);\n  //     while (_local_9 < this._cells.length)\n  //     {\n  //         _local_2 = (this._cells[_local_9] as PlaneMaterialCell);\n  //         if (_local_2 != null)\n  //         {\n  //             _local_8 = _local_2.getHeight(k);\n  //             if (_local_8 > 0)\n  //             {\n  //                 _local_7 = (_local_7 + _local_8);\n  //                 _local_5.push(_local_2);\n  //             }\n  //         }\n  //         _local_9++;\n  //     }\n  //     var _local_10: number;\n  //     var _local_11: number;\n  //     var _local_12: number = this._cachedBitmapData.height;\n  //     if ((_local_6 + _local_7) > this._cachedBitmapData.height)\n  //     {\n  //         _local_10 = ((_local_6 + _local_7) - this._cachedBitmapData.height);\n  //         _local_11 = (_local_11 - (_local_10 >> 1));\n  //         _local_12 = (_local_12 + (_local_10 - (_local_10 >> 1)));\n  //     }\n  //     if (_local_10 == 0)\n  //     {\n  //         _local_2 = (this._cells[(this._cells.length >> 1)] as PlaneMaterialCell);\n  //         if (_local_2 != null)\n  //         {\n  //             _local_8 = _local_2.getHeight(k);\n  //             if (_local_8 > 0)\n  //             {\n  //                 _local_13 = (this._cachedBitmapData.height - (_local_6 + _local_7));\n  //                 _local_14 = (Math.ceil((_local_13 / _local_8)) * _local_8);\n  //                 _local_11 = (_local_6 - ((_local_14 - _local_13) >> 1));\n  //                 _local_15 = (_local_11 + _local_14);\n  //                 _local_16 = [_local_2];\n  //                 while (_local_11 < _local_15)\n  //                 {\n  //                     _local_11 = this.renderCells(_local_16, _local_11, true, k);\n  //                 }\n  //             }\n  //         }\n  //     }\n  //     _local_11 = 0;\n  //     this.renderCells(_local_4, _local_11, true, k);\n  //     this.renderCells(_local_5, _local_12, false, k);\n  // }\n  // private renderRepeatFirst(k:IVector3D): void\n  // {\n  //     var _local_4:Array;\n  //     if (((this._cells.length == 0) || (this._cachedBitmapData == null)))\n  //     {\n  //         return;\n  //     }\n  //     var _local_2:PlaneMaterialCell;\n  //     var _local_3: number = this._cachedBitmapData.height;\n  //     _local_3 = this.renderCells(this._cells, _local_3, false, k);\n  //     _local_2 = (this._cells[0] as PlaneMaterialCell);\n  //     if (_local_2 != null)\n  //     {\n  //         _local_4 = [_local_2];\n  //         while (_local_3 >= 0)\n  //         {\n  //             _local_3 = this.renderCells(_local_4, _local_3, false, k);\n  //         }\n  //     }\n  // }\n  // private renderRepeatLast(k: IVector3D): void\n  // {\n  //     if(!this._cells.length || !this._cachedBitmapData) return;\n  //     var _local_4:Array;\n  //     var _local_2:PlaneMaterialCell;\n  //     var _local_3: number;\n  //     _local_3 = this.renderCells(this._cells, _local_3, true, k);\n  //     _local_2 = (this._cells[(this._cells.length - 1)] as PlaneMaterialCell);\n  //     if (_local_2 != null)\n  //     {\n  //         _local_4 = [_local_2];\n  //         while (_local_3 < this._cachedBitmapData.height)\n  //         {\n  //             _local_3 = this.renderCells(_local_4, _local_3, true, k);\n  //         }\n  //     }\n  // }\n\n\n  getCells() {\n    return this._cells;\n  }\n\n}\nPlaneMaterialCellColumn.REPEAT_MODE_NONE = 0;\nPlaneMaterialCellColumn.REPEAT_MODE_ALL = 1;\nPlaneMaterialCellColumn.REPEAT_MODE_BORDERS = 2;\nPlaneMaterialCellColumn.REPEAT_MODE_CENTER = 3;\nPlaneMaterialCellColumn.REPEAT_MODE_FIRST = 4;\nPlaneMaterialCellColumn.REPEAT_MODE_LAST = 5;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/basic/PlaneMaterialCellColumn.ts"],"names":["Graphics","Vector3d","PlaneMaterialCellColumn","constructor","width","cells","repeatMode","_cells","_repeatMode","_width","_cachedTexture","_cachedBitmapData","_cachedBitmapNormal","_cachedBitmapDataOffsetX","_cachedBitmapDataOffsetY","_isCached","_isStatic","length","cellIndex","cell","push","isStatic","isRepeated","REPEAT_MODE_NONE","dispose","destroy","clearCache","x","y","z","render","height","normal","offsetX","offsetY","ht","getCellsHeight","isEqual","beginFill","drawRect","endFill","assign","renderRepeatNone","REPEAT_MODE_BORDERS","console","log","REPEAT_MODE_CENTER","REPEAT_MODE_FIRST","REPEAT_MODE_LAST","renderRepeatAll","cellIterator","getHeight","renderCells","index","flag","graphic","addChild","getCells","REPEAT_MODE_ALL"],"mappings":"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","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { NitroRenderTexture } from '../../../../../../../core';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { Vector3d } from '../../../../../../../room/utils/Vector3d';\r\nimport { PlaneMaterialCell } from './PlaneMaterialCell';\r\n\r\nexport class PlaneMaterialCellColumn\r\n{\r\n    public static REPEAT_MODE_NONE: number = 0;\r\n    public static REPEAT_MODE_ALL: number = 1;\r\n    public static REPEAT_MODE_BORDERS: number = 2;\r\n    public static REPEAT_MODE_CENTER: number = 3;\r\n    public static REPEAT_MODE_FIRST: number = 4;\r\n    public static REPEAT_MODE_LAST: number = 5;\r\n\r\n    private _cells: PlaneMaterialCell[];\r\n    private _repeatMode: number;\r\n    private _width: number;\r\n    private _cachedTexture: NitroRenderTexture;\r\n    private _cachedBitmapData: Graphics;\r\n    private _cachedBitmapNormal: Vector3d;\r\n    private _cachedBitmapDataOffsetX: number;\r\n    private _cachedBitmapDataOffsetY: number;\r\n    private _isCached: boolean;\r\n    private _isStatic: boolean;\r\n\r\n    constructor(width: number, cells: PlaneMaterialCell[], repeatMode: number = 1)\r\n    {\r\n        this._cells = [];\r\n        this._repeatMode = repeatMode;\r\n        this._width = (width < 1) ? 1 : width;\r\n        this._cachedBitmapData = null;\r\n        this._cachedBitmapNormal = null;\r\n        this._cachedBitmapDataOffsetX = 0;\r\n        this._cachedBitmapDataOffsetY = 0;\r\n        this._isCached = false;\r\n        this._isStatic = true;\r\n\r\n        if(cells && cells.length)\r\n        {\r\n            let cellIndex = 0;\r\n\r\n            while(cellIndex < cells.length)\r\n            {\r\n                const cell = cells[cellIndex];\r\n\r\n                if(cell)\r\n                {\r\n                    this._cells.push(cell);\r\n\r\n                    if(!cell.isStatic) this._isStatic = false;\r\n                }\r\n\r\n                cellIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isStatic(): boolean\r\n    {\r\n        return this._isStatic;\r\n    }\r\n\r\n    public isRepeated(): boolean\r\n    {\r\n        return !(this._repeatMode === PlaneMaterialCellColumn.REPEAT_MODE_NONE);\r\n    }\r\n\r\n    public get width(): number\r\n    {\r\n        return this._width;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._cells && this._cells.length)\r\n        {\r\n            for(const cell of this._cells)\r\n            {\r\n                if(!cell) continue;\r\n\r\n                cell.dispose();\r\n            }\r\n\r\n            this._cells = null;\r\n        }\r\n\r\n        if(this._cachedBitmapData)\r\n        {\r\n            this._cachedBitmapData.destroy();\r\n\r\n            this._cachedBitmapData = null;\r\n        }\r\n\r\n        if(this._cachedBitmapNormal) this._cachedBitmapNormal = null;\r\n    }\r\n\r\n    public clearCache(): void\r\n    {\r\n        if(!this._isCached) return;\r\n\r\n        if(this._cachedBitmapData)\r\n        {\r\n            this._cachedBitmapData.destroy();\r\n\r\n            this._cachedBitmapData = null;\r\n        }\r\n\r\n        if(this._cachedBitmapNormal)\r\n        {\r\n            this._cachedBitmapNormal.x = 0;\r\n            this._cachedBitmapNormal.y = 0;\r\n            this._cachedBitmapNormal.z = 0;\r\n        }\r\n\r\n        if(this._cells && this._cells.length)\r\n        {\r\n            for(const cell of this._cells)\r\n            {\r\n                if(!cell) continue;\r\n\r\n                cell.clearCache();\r\n            }\r\n        }\r\n\r\n        this._isCached = false;\r\n    }\r\n\r\n    public render(height: number, normal: IVector3D, offsetX: number, offsetY: number): Graphics\r\n    {\r\n        let ht = 0;\r\n\r\n        if(this._repeatMode == PlaneMaterialCellColumn.REPEAT_MODE_NONE)\r\n        {\r\n            ht = this.getCellsHeight(this._cells, normal);\r\n            height = ht;\r\n        }\r\n\r\n        if(!this._cachedBitmapNormal) this._cachedBitmapNormal = new Vector3d();\r\n\r\n        if(this.isStatic)\r\n        {\r\n            if(this._cachedBitmapData)\r\n            {\r\n                if((this._cachedBitmapData.height === height) && Vector3d.isEqual(this._cachedBitmapNormal, normal) && (this._cachedBitmapDataOffsetX === offsetX) && (this._cachedBitmapDataOffsetY === offsetY))\r\n                {\r\n                    return this._cachedBitmapData;\r\n                }\r\n\r\n                this._cachedBitmapData.destroy();\r\n\r\n                this._cachedBitmapData = null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(this._cachedBitmapData)\r\n            {\r\n                if(this._cachedBitmapData.height === height)\r\n                {\r\n                    this._cachedBitmapData\r\n                        .beginFill(0xFFFFFF)\r\n                        .drawRect(0, 0, this._cachedBitmapData.width, height)\r\n                        .endFill();\r\n                }\r\n                else\r\n                {\r\n                    this._cachedBitmapData.destroy();\r\n\r\n                    this._cachedBitmapData = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isCached = true;\r\n\r\n        if(!this._cachedBitmapData)\r\n        {\r\n            this._cachedBitmapData = new Graphics()\r\n                .beginFill(0xFFFFFF)\r\n                .drawRect(0, 0, this._width, height)\r\n                .endFill();\r\n        }\r\n\r\n        this._cachedBitmapNormal.assign(normal);\r\n        this._cachedBitmapDataOffsetX = offsetX;\r\n        this._cachedBitmapDataOffsetY = offsetY;\r\n\r\n        if(!this._cells.length) return this._cachedBitmapData;\r\n\r\n        switch(this._repeatMode)\r\n        {\r\n            case PlaneMaterialCellColumn.REPEAT_MODE_NONE:\r\n                this.renderRepeatNone(normal);\r\n                break;\r\n            case PlaneMaterialCellColumn.REPEAT_MODE_BORDERS:\r\n                console.log('REPEAT_MODE_BORDERS');\r\n                //     this.renderRepeatBorders(normal);\r\n                break;\r\n            case PlaneMaterialCellColumn.REPEAT_MODE_CENTER:\r\n                console.log('REPEAT_MODE_CENTER');\r\n                //     this.renderRepeatCenter(normal);\r\n                break;\r\n            case PlaneMaterialCellColumn.REPEAT_MODE_FIRST:\r\n                console.log('REPEAT_MODE_FIRST');\r\n                //     this.renderRepeatFirst(normal);\r\n                break;\r\n            case PlaneMaterialCellColumn.REPEAT_MODE_LAST:\r\n                console.log('REPEAT_MODE_LAST');\r\n                //     this.renderRepeatLast(normal);\r\n                break;\r\n            default:\r\n                this.renderRepeatAll(normal, offsetX, offsetY);\r\n                break;\r\n        }\r\n\r\n        return this._cachedBitmapData;\r\n    }\r\n\r\n    private getCellsHeight(cells: PlaneMaterialCell[], normal: IVector3D): number\r\n    {\r\n        if(!cells || !cells.length) return 0;\r\n\r\n        let height = 0;\r\n        let cellIterator = 0;\r\n\r\n        while(cellIterator < cells.length)\r\n        {\r\n            const cell = cells[cellIterator];\r\n\r\n            if(cell) height += cell.getHeight(normal);\r\n\r\n            cellIterator++;\r\n        }\r\n\r\n        return height;\r\n    }\r\n\r\n    private renderCells(cells: PlaneMaterialCell[], index: number, flag: boolean, normal: IVector3D, offsetX: number = 0, offsetY: number = 0): number\r\n    {\r\n        if(((!cells || !cells.length) || !this._cachedBitmapData)) return index;\r\n\r\n        let cellIndex = 0;\r\n\r\n        while(cellIndex < cells.length)\r\n        {\r\n            let cell: PlaneMaterialCell = null;\r\n\r\n            if(flag)\r\n            {\r\n                cell = cells[cellIndex];\r\n            }\r\n            else\r\n            {\r\n                cell = cells[((cells.length - 1) - cellIndex)];\r\n            }\r\n\r\n            if(cell)\r\n            {\r\n                const graphic = cell.render(normal, offsetX, offsetY);\r\n\r\n                if(graphic)\r\n                {\r\n                    if(!flag) index -= graphic.height;\r\n\r\n                    graphic.y = index;\r\n\r\n                    this._cachedBitmapData.addChild(graphic);\r\n\r\n                    if(flag) index = (index + graphic.height);\r\n\r\n                    if(((flag) && (index >= this._cachedBitmapData.height)) || ((!(flag)) && (index <= 0))) return index;\r\n                }\r\n            }\r\n\r\n            cellIndex++;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    private renderRepeatNone(normal: IVector3D): void\r\n    {\r\n        if(!this._cells.length || !this._cachedBitmapData) return;\r\n\r\n        this.renderCells(this._cells, 0, true, normal);\r\n    }\r\n\r\n    private renderRepeatAll(normal: IVector3D, offsetX: number, offsetY: number): void\r\n    {\r\n        if(!this._cells.length || !this._cachedBitmapData) return;\r\n\r\n        let index = 0;\r\n\r\n        while(index < this._cachedBitmapData.height)\r\n        {\r\n            index = this.renderCells(this._cells, index, true, normal, offsetX, offsetY);\r\n\r\n            if(!index) return;\r\n        }\r\n    }\r\n\r\n    // private renderRepeatBorders(k:IVector3D): void\r\n    // {\r\n    //     if (((this._cells.length == 0) || (this._cachedBitmapData == null)))\r\n    //     {\r\n    //         return;\r\n    //     }\r\n    //     var _local_2:PlaneMaterialCell;\r\n    //     var _local_3:BitmapData;\r\n    //     var _local_4:Array = [];\r\n    //     var _local_5: number;\r\n    //     var _local_6: number;\r\n    //     var _local_7: number;\r\n    //     _local_7 = 1;\r\n    //     while (_local_7 < (this._cells.length - 1))\r\n    //     {\r\n    //         _local_2 = (this._cells[_local_7] as PlaneMaterialCell);\r\n    //         if (_local_2 != null)\r\n    //         {\r\n    //             _local_6 = _local_2.getHeight(k);\r\n    //             if (_local_6 > 0)\r\n    //             {\r\n    //                 _local_5 = (_local_5 + _local_6);\r\n    //                 _local_4.push(_local_2);\r\n    //             }\r\n    //         }\r\n    //         _local_7++;\r\n    //     }\r\n    //     if (this._cells.length == 1)\r\n    //     {\r\n    //         _local_2 = (this._cells[0] as PlaneMaterialCell);\r\n    //         if (_local_2 != null)\r\n    //         {\r\n    //             _local_6 = _local_2.getHeight(k);\r\n    //             if (_local_6 > 0)\r\n    //             {\r\n    //                 _local_5 = (_local_5 + _local_6);\r\n    //                 _local_4.push(_local_2);\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     var _local_8:* = ((this._cachedBitmapData.height - _local_5) >> 1);\r\n    //     var _local_9: number = this.renderCells(_local_4, _local_8, true, k);\r\n    //     _local_2 = (this._cells[0] as PlaneMaterialCell);\r\n    //     if (_local_2 != null)\r\n    //     {\r\n    //         _local_4 = [_local_2];\r\n    //         while (_local_8 >= 0)\r\n    //         {\r\n    //             _local_8 = this.renderCells(_local_4, _local_8, false, k);\r\n    //         }\r\n    //     }\r\n    //     _local_2 = (this._cells[(this._cells.length - 1)] as PlaneMaterialCell);\r\n    //     if (_local_2 != null)\r\n    //     {\r\n    //         _local_4 = [_local_2];\r\n    //         while (_local_9 < this._cachedBitmapData.height)\r\n    //         {\r\n    //             _local_9 = this.renderCells(_local_4, _local_9, true, k);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // private renderRepeatCenter(k:IVector3D): void\r\n    // {\r\n    //     var _local_13: number;\r\n    //     var _local_14: number;\r\n    //     var _local_15: number;\r\n    //     var _local_16:Array;\r\n    //     if (((this._cells.length == 0) || (this._cachedBitmapData == null)))\r\n    //     {\r\n    //         return;\r\n    //     }\r\n    //     var _local_2:PlaneMaterialCell;\r\n    //     var _local_3:BitmapData;\r\n    //     var _local_4:Array = [];\r\n    //     var _local_5:Array = [];\r\n    //     var _local_6: number;\r\n    //     var _local_7: number;\r\n    //     var _local_8: number;\r\n    //     var _local_9: number;\r\n    //     _local_9 = 0;\r\n    //     while (_local_9 < (this._cells.length >> 1))\r\n    //     {\r\n    //         _local_2 = (this._cells[_local_9] as PlaneMaterialCell);\r\n    //         if (_local_2 != null)\r\n    //         {\r\n    //             _local_8 = _local_2.getHeight(k);\r\n    //             if (_local_8 > 0)\r\n    //             {\r\n    //                 _local_6 = (_local_6 + _local_8);\r\n    //                 _local_4.push(_local_2);\r\n    //             }\r\n    //         }\r\n    //         _local_9++;\r\n    //     }\r\n    //     _local_9 = ((this._cells.length >> 1) + 1);\r\n    //     while (_local_9 < this._cells.length)\r\n    //     {\r\n    //         _local_2 = (this._cells[_local_9] as PlaneMaterialCell);\r\n    //         if (_local_2 != null)\r\n    //         {\r\n    //             _local_8 = _local_2.getHeight(k);\r\n    //             if (_local_8 > 0)\r\n    //             {\r\n    //                 _local_7 = (_local_7 + _local_8);\r\n    //                 _local_5.push(_local_2);\r\n    //             }\r\n    //         }\r\n    //         _local_9++;\r\n    //     }\r\n    //     var _local_10: number;\r\n    //     var _local_11: number;\r\n    //     var _local_12: number = this._cachedBitmapData.height;\r\n    //     if ((_local_6 + _local_7) > this._cachedBitmapData.height)\r\n    //     {\r\n    //         _local_10 = ((_local_6 + _local_7) - this._cachedBitmapData.height);\r\n    //         _local_11 = (_local_11 - (_local_10 >> 1));\r\n    //         _local_12 = (_local_12 + (_local_10 - (_local_10 >> 1)));\r\n    //     }\r\n    //     if (_local_10 == 0)\r\n    //     {\r\n    //         _local_2 = (this._cells[(this._cells.length >> 1)] as PlaneMaterialCell);\r\n    //         if (_local_2 != null)\r\n    //         {\r\n    //             _local_8 = _local_2.getHeight(k);\r\n    //             if (_local_8 > 0)\r\n    //             {\r\n    //                 _local_13 = (this._cachedBitmapData.height - (_local_6 + _local_7));\r\n    //                 _local_14 = (Math.ceil((_local_13 / _local_8)) * _local_8);\r\n    //                 _local_11 = (_local_6 - ((_local_14 - _local_13) >> 1));\r\n    //                 _local_15 = (_local_11 + _local_14);\r\n    //                 _local_16 = [_local_2];\r\n    //                 while (_local_11 < _local_15)\r\n    //                 {\r\n    //                     _local_11 = this.renderCells(_local_16, _local_11, true, k);\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     _local_11 = 0;\r\n    //     this.renderCells(_local_4, _local_11, true, k);\r\n    //     this.renderCells(_local_5, _local_12, false, k);\r\n    // }\r\n\r\n    // private renderRepeatFirst(k:IVector3D): void\r\n    // {\r\n    //     var _local_4:Array;\r\n    //     if (((this._cells.length == 0) || (this._cachedBitmapData == null)))\r\n    //     {\r\n    //         return;\r\n    //     }\r\n    //     var _local_2:PlaneMaterialCell;\r\n    //     var _local_3: number = this._cachedBitmapData.height;\r\n    //     _local_3 = this.renderCells(this._cells, _local_3, false, k);\r\n    //     _local_2 = (this._cells[0] as PlaneMaterialCell);\r\n    //     if (_local_2 != null)\r\n    //     {\r\n    //         _local_4 = [_local_2];\r\n    //         while (_local_3 >= 0)\r\n    //         {\r\n    //             _local_3 = this.renderCells(_local_4, _local_3, false, k);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // private renderRepeatLast(k: IVector3D): void\r\n    // {\r\n    //     if(!this._cells.length || !this._cachedBitmapData) return;\r\n\r\n\r\n    //     var _local_4:Array;\r\n    //     var _local_2:PlaneMaterialCell;\r\n    //     var _local_3: number;\r\n    //     _local_3 = this.renderCells(this._cells, _local_3, true, k);\r\n    //     _local_2 = (this._cells[(this._cells.length - 1)] as PlaneMaterialCell);\r\n    //     if (_local_2 != null)\r\n    //     {\r\n    //         _local_4 = [_local_2];\r\n    //         while (_local_3 < this._cachedBitmapData.height)\r\n    //         {\r\n    //             _local_3 = this.renderCells(_local_4, _local_3, true, k);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    public getCells(): PlaneMaterialCell[]\r\n    {\r\n        return this._cells;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}