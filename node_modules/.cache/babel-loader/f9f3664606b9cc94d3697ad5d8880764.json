{"ast":null,"code":"import { AdvancedMap } from '../../../../core/utils/AdvancedMap';\nimport { FigurePartSet } from './FigurePartSet';\nexport class SetType {\n  constructor(data) {\n    this._type = void 0;\n    this._paletteId = void 0;\n    this._isMandatory = void 0;\n    this._partSets = void 0;\n    if (!data) throw new Error('invalid_data');\n    this._type = data.type;\n    this._paletteId = data.paletteId;\n    this._isMandatory = {};\n    this._isMandatory['F'] = [data.mandatory_f_0, data.mandatory_f_1];\n    this._isMandatory['M'] = [data.mandatory_m_0, data.mandatory_m_1];\n    this._partSets = new AdvancedMap();\n    this.append(data);\n  }\n\n  dispose() {\n    for (const set of this._partSets.getValues()) {\n      const partSet = set;\n      partSet.dispose();\n    }\n\n    this._partSets = null;\n  }\n\n  cleanUp(data) {\n    for (const set of data.sets) {\n      const setId = set.id.toString();\n\n      const partSet = this._partSets.getValue(setId);\n\n      if (partSet) {\n        partSet.dispose();\n\n        this._partSets.remove(setId);\n      }\n    }\n  }\n\n  append(setType) {\n    if (!setType || !setType.sets) return;\n\n    for (const set of setType.sets) this._partSets.add(set.id.toString(), new FigurePartSet(this._type, set));\n  }\n\n  getDefaultPartSet(gender) {\n    for (const set of this._partSets.getValues()) {\n      if (!set) continue;\n      if (set.clubLevel === 0 && (set.gender === gender || set.gender === 'U')) return set;\n    }\n\n    return null;\n  }\n\n  getPartSet(k) {\n    return this._partSets.getValue(k.toString());\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get paletteID() {\n    return this._paletteId;\n  }\n\n  isMandatory(k, _arg_2) {\n    return this._isMandatory[k.toUpperCase()][Math.min(_arg_2, 1)];\n  }\n\n  optionalFromClubLevel(k) {\n    const _local_2 = this._isMandatory[k.toUpperCase()];\n\n    return _local_2.indexOf(false);\n  }\n\n  get partSets() {\n    return this._partSets;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/figure/SetType.ts"],"names":["AdvancedMap","FigurePartSet","SetType","constructor","data","_type","_paletteId","_isMandatory","_partSets","Error","type","paletteId","mandatory_f_0","mandatory_f_1","mandatory_m_0","mandatory_m_1","append","dispose","set","getValues","partSet","cleanUp","sets","setId","id","toString","getValue","remove","setType","add","getDefaultPartSet","gender","clubLevel","getPartSet","k","paletteID","isMandatory","_arg_2","toUpperCase","Math","min","optionalFromClubLevel","_local_2","indexOf","partSets"],"mappings":"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","sourcesContent":["import { AdvancedMap } from '../../../../core/utils/AdvancedMap';\r\nimport { IFigureDataSetType } from '../../interfaces';\r\nimport { FigurePartSet } from './FigurePartSet';\r\nimport { IFigurePartSet } from './IFigurePartSet';\r\nimport { ISetType } from './ISetType';\r\n\r\nexport class SetType implements ISetType\r\n{\r\n    private _type: string;\r\n    private _paletteId: number;\r\n    private _isMandatory: { [index: string]: boolean[] };\r\n    private _partSets: AdvancedMap<string, IFigurePartSet>;\r\n\r\n    constructor(data: IFigureDataSetType)\r\n    {\r\n        if(!data) throw new Error('invalid_data');\r\n\r\n        this._type = data.type;\r\n        this._paletteId = data.paletteId;\r\n        this._isMandatory = {};\r\n        this._isMandatory['F'] = [ data.mandatory_f_0, data.mandatory_f_1 ];\r\n        this._isMandatory['M'] = [ data.mandatory_m_0, data.mandatory_m_1 ];\r\n        this._partSets = new AdvancedMap();\r\n\r\n        this.append(data);\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        for(const set of this._partSets.getValues())\r\n        {\r\n            const partSet = set as FigurePartSet;\r\n\r\n            partSet.dispose();\r\n        }\r\n\r\n        this._partSets = null;\r\n    }\r\n\r\n    public cleanUp(data: IFigureDataSetType): void\r\n    {\r\n        for(const set of data.sets)\r\n        {\r\n            const setId = set.id.toString();\r\n            const partSet = (this._partSets.getValue(setId) as FigurePartSet);\r\n\r\n            if(partSet)\r\n            {\r\n                partSet.dispose();\r\n\r\n                this._partSets.remove(setId);\r\n            }\r\n        }\r\n    }\r\n\r\n    public append(setType: IFigureDataSetType): void\r\n    {\r\n        if(!setType || !setType.sets) return;\r\n\r\n        for(const set of setType.sets) this._partSets.add(set.id.toString(), new FigurePartSet(this._type, set));\r\n    }\r\n\r\n    public getDefaultPartSet(gender: string): IFigurePartSet\r\n    {\r\n        for(const set of this._partSets.getValues())\r\n        {\r\n            if(!set) continue;\r\n\r\n            if((set.clubLevel === 0) && ((set.gender === gender) || (set.gender === 'U'))) return set;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getPartSet(k: number): IFigurePartSet\r\n    {\r\n        return this._partSets.getValue(k.toString());\r\n    }\r\n\r\n    public get type(): string\r\n    {\r\n        return this._type;\r\n    }\r\n\r\n    public get paletteID(): number\r\n    {\r\n        return this._paletteId;\r\n    }\r\n\r\n    public isMandatory(k: string, _arg_2: number): boolean\r\n    {\r\n        return this._isMandatory[k.toUpperCase()][Math.min(_arg_2, 1)];\r\n    }\r\n\r\n    public optionalFromClubLevel(k: string): number\r\n    {\r\n        const _local_2 = this._isMandatory[k.toUpperCase()];\r\n\r\n        return _local_2.indexOf(false);\r\n    }\r\n\r\n    public get partSets(): AdvancedMap<string, IFigurePartSet>\r\n    {\r\n        return this._partSets;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}