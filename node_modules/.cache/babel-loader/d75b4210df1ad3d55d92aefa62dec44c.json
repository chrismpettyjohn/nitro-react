{"ast":null,"code":"import { FigurePart } from './FigurePart';\nexport class FigurePartSet {\n  constructor(type, data) {\n    this._id = void 0;\n    this._type = void 0;\n    this._gender = void 0;\n    this._clubLevel = void 0;\n    this._isColorable = void 0;\n    this._isSelectable = void 0;\n    this._parts = void 0;\n    this._hiddenLayers = void 0;\n    this._isPreSelectable = void 0;\n    this._isSellable = void 0;\n    if (!type || !data) throw new Error('invalid_data');\n    this._id = data.id;\n    this._type = type;\n    this._gender = data.gender;\n    this._clubLevel = data.club;\n    this._isColorable = data.colorable;\n    this._isSelectable = data.selectable;\n    this._parts = [];\n    this._hiddenLayers = [];\n    this._isPreSelectable = data.preselectable;\n    this._isSellable = data.sellable;\n\n    for (const part of data.parts) {\n      const newPart = new FigurePart(part);\n      const partIndex = this.getPartIndex(newPart);\n      if (partIndex !== -1) this._parts.splice(partIndex, 0, newPart);else this._parts.push(newPart);\n    }\n\n    if (data.hiddenLayers) {\n      for (const hiddenLayer of data.hiddenLayers) this._hiddenLayers.push(hiddenLayer.partType);\n    }\n  }\n\n  dispose() {\n    for (const part of this._parts) {\n      const figurePart = part;\n      figurePart.dispose();\n    }\n\n    this._parts = null;\n    this._hiddenLayers = null;\n  }\n\n  getPartIndex(part) {\n    const totalParts = this._parts.length;\n    if (!totalParts) return -1;\n\n    for (let i = 0; i < totalParts; i++) {\n      const existingPart = this._parts[i];\n      if (!existingPart) continue;\n      if (existingPart.type !== part.type || existingPart.index > part.index) continue;\n      return i;\n    }\n\n    return -1;\n  }\n\n  getPart(k, _arg_2) {\n    for (const part of this._parts) {\n      if (part.type !== k || part.id !== _arg_2) continue;\n      return part;\n    }\n\n    return null;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get gender() {\n    return this._gender;\n  }\n\n  get clubLevel() {\n    return this._clubLevel;\n  }\n\n  get isColorable() {\n    return this._isColorable;\n  }\n\n  get isSelectable() {\n    return this._isSelectable;\n  }\n\n  get parts() {\n    return this._parts;\n  }\n\n  get hiddenLayers() {\n    return this._hiddenLayers;\n  }\n\n  get isPreSelectable() {\n    return this._isPreSelectable;\n  }\n\n  get isSellable() {\n    return this._isSellable;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/figure/FigurePartSet.ts"],"names":["FigurePart","FigurePartSet","constructor","type","data","_id","_type","_gender","_clubLevel","_isColorable","_isSelectable","_parts","_hiddenLayers","_isPreSelectable","_isSellable","Error","id","gender","club","colorable","selectable","preselectable","sellable","part","parts","newPart","partIndex","getPartIndex","splice","push","hiddenLayers","hiddenLayer","partType","dispose","figurePart","totalParts","length","i","existingPart","index","getPart","k","_arg_2","clubLevel","isColorable","isSelectable","isPreSelectable","isSellable"],"mappings":"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","sourcesContent":["import { IFigureDataSet } from '../../interfaces';\r\nimport { FigurePart } from './FigurePart';\r\nimport { IFigurePart } from './IFigurePart';\r\nimport { IFigurePartSet } from './IFigurePartSet';\r\n\r\nexport class FigurePartSet implements IFigurePartSet\r\n{\r\n    private _id: number;\r\n    private _type: string;\r\n    private _gender: string;\r\n    private _clubLevel: number;\r\n    private _isColorable: boolean;\r\n    private _isSelectable: boolean;\r\n    private _parts: IFigurePart[];\r\n    private _hiddenLayers: string[];\r\n    private _isPreSelectable: boolean;\r\n    private _isSellable: boolean;\r\n\r\n    constructor(type: string, data: IFigureDataSet)\r\n    {\r\n        if(!type || !data) throw new Error('invalid_data');\r\n\r\n        this._id = data.id;\r\n        this._type = type;\r\n        this._gender = data.gender;\r\n        this._clubLevel = data.club;\r\n        this._isColorable = data.colorable;\r\n        this._isSelectable = data.selectable;\r\n        this._parts = [];\r\n        this._hiddenLayers = [];\r\n        this._isPreSelectable = data.preselectable;\r\n        this._isSellable = data.sellable;\r\n\r\n        for(const part of data.parts)\r\n        {\r\n            const newPart = new FigurePart(part);\r\n            const partIndex = this.getPartIndex(newPart);\r\n\r\n            if(partIndex !== -1) this._parts.splice(partIndex, 0, newPart);\r\n            else this._parts.push(newPart);\r\n        }\r\n\r\n        if(data.hiddenLayers)\r\n        {\r\n            for(const hiddenLayer of data.hiddenLayers) this._hiddenLayers.push(hiddenLayer.partType);\r\n        }\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        for(const part of this._parts)\r\n        {\r\n            const figurePart = part as FigurePart;\r\n\r\n            figurePart.dispose();\r\n        }\r\n\r\n        this._parts = null;\r\n        this._hiddenLayers = null;\r\n    }\r\n\r\n    private getPartIndex(part: FigurePart): number\r\n    {\r\n        const totalParts = this._parts.length;\r\n\r\n        if(!totalParts) return -1;\r\n\r\n        for(let i = 0; i < totalParts; i++)\r\n        {\r\n            const existingPart = this._parts[i];\r\n\r\n            if(!existingPart) continue;\r\n\r\n            if(existingPart.type !== part.type || existingPart.index > part.index) continue;\r\n\r\n            return i;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public getPart(k: string, _arg_2: number): IFigurePart\r\n    {\r\n        for(const part of this._parts)\r\n        {\r\n            if((part.type !== k) || (part.id !== _arg_2)) continue;\r\n\r\n            return part;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get id(): number\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get type(): string\r\n    {\r\n        return this._type;\r\n    }\r\n\r\n    public get gender(): string\r\n    {\r\n        return this._gender;\r\n    }\r\n\r\n    public get clubLevel(): number\r\n    {\r\n        return this._clubLevel;\r\n    }\r\n\r\n    public get isColorable(): boolean\r\n    {\r\n        return this._isColorable;\r\n    }\r\n\r\n    public get isSelectable(): boolean\r\n    {\r\n        return this._isSelectable;\r\n    }\r\n\r\n    public get parts(): IFigurePart[]\r\n    {\r\n        return this._parts;\r\n    }\r\n\r\n    public get hiddenLayers(): string[]\r\n    {\r\n        return this._hiddenLayers;\r\n    }\r\n\r\n    public get isPreSelectable(): boolean\r\n    {\r\n        return this._isPreSelectable;\r\n    }\r\n\r\n    public get isSellable(): boolean\r\n    {\r\n        return this._isSellable;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}