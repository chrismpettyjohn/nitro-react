{"ast":null,"code":"import { AchievementData } from '../../../incoming/inventory/achievements/AchievementData';\nexport class AchievementsParser {\n  constructor() {\n    this._achievements = void 0;\n    this._defaultCategory = void 0;\n  }\n\n  flush() {\n    this._achievements = [];\n    this._defaultCategory = null;\n    return true;\n  }\n\n  parse(k) {\n    if (!k) return false;\n    this._achievements = [];\n    let totalCount = k.readInt();\n\n    while (totalCount > 0) {\n      this._achievements.push(new AchievementData(k));\n\n      totalCount--;\n    }\n\n    this._defaultCategory = k.readString();\n    return true;\n  }\n\n  get achievements() {\n    return this._achievements;\n  }\n\n  get defaultCategory() {\n    return this._defaultCategory;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/inventory/achievements/AchievementsParser.ts"],"names":["AchievementData","AchievementsParser","_achievements","_defaultCategory","flush","parse","k","totalCount","readInt","push","readString","achievements","defaultCategory"],"mappings":"AAEA,SAASA,eAAT,QAAgC,0DAAhC;AAEA,OAAO,MAAMC,kBAAN,CACP;AAAA;AAAA,SACYC,aADZ;AAAA,SAEYC,gBAFZ;AAAA;;AAIWC,EAAAA,KAAK,GACZ;AACI,SAAKF,aAAL,GAAqB,EAArB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,CAAD,EACZ;AACI,QAAG,CAACA,CAAJ,EAAO,OAAO,KAAP;AAEP,SAAKJ,aAAL,GAAqB,EAArB;AAEA,QAAIK,UAAU,GAAGD,CAAC,CAACE,OAAF,EAAjB;;AAEA,WAAMD,UAAU,GAAG,CAAnB,EACA;AACI,WAAKL,aAAL,CAAmBO,IAAnB,CAAwB,IAAIT,eAAJ,CAAoBM,CAApB,CAAxB;;AAEAC,MAAAA,UAAU;AACb;;AAED,SAAKJ,gBAAL,GAAwBG,CAAC,CAACI,UAAF,EAAxB;AAEA,WAAO,IAAP;AACH;;AAEsB,MAAZC,YAAY,GACvB;AACI,WAAO,KAAKT,aAAZ;AACH;;AAEyB,MAAfU,eAAe,GAC1B;AACI,WAAO,KAAKT,gBAAZ;AACH;;AAxCL","sourcesContent":["\r\nimport { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\nimport { AchievementData } from '../../../incoming/inventory/achievements/AchievementData';\r\n\r\nexport class AchievementsParser implements IMessageParser\r\n{\r\n    private _achievements: AchievementData[];\r\n    private _defaultCategory: string;\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._achievements = [];\r\n        this._defaultCategory = null;\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(k: IMessageDataWrapper): boolean\r\n    {\r\n        if(!k) return false;\r\n\r\n        this._achievements = [];\r\n\r\n        let totalCount = k.readInt();\r\n\r\n        while(totalCount > 0)\r\n        {\r\n            this._achievements.push(new AchievementData(k));\r\n\r\n            totalCount--;\r\n        }\r\n\r\n        this._defaultCategory = k.readString();\r\n\r\n        return true;\r\n    }\r\n\r\n    public get achievements(): AchievementData[]\r\n    {\r\n        return this._achievements;\r\n    }\r\n\r\n    public get defaultCategory(): string\r\n    {\r\n        return this._defaultCategory;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}