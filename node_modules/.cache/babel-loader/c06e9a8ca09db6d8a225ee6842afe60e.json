{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/ButtonModtool.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { Flex } from './Flex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ButtonModtool = props => {\n  _s();\n\n  const {\n    variant = '',\n    size = '',\n    active = false,\n    disabled = false,\n    classNames = [],\n    ...rest\n  } = props;\n  const getClassNames = useMemo(() => {\n    const newClassNames = ['px-4 fw-bold'];\n    if (variant) newClassNames.push('btn-' + variant);\n    if (size) newClassNames.push('btn-' + size);\n    if (active) newClassNames.push('active');\n    if (disabled) newClassNames.push('disabled');\n    if (classNames.length) newClassNames.push(...classNames);\n    return newClassNames;\n  }, [variant, size, active, disabled, classNames]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    classNames: getClassNames,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ButtonModtool, \"dyksOB5DadzwRcuUMLdvWwPn8K8=\");\n\n_c = ButtonModtool;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonModtool\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/ButtonModtool.tsx"],"names":["useMemo","Flex","ButtonModtool","props","variant","size","active","disabled","classNames","rest","getClassNames","newClassNames","push","length"],"mappings":";;;AAAA,SAAaA,OAAb,QAA4B,OAA5B;AACA,SAASC,IAAT,QAAgC,QAAhC;;AAWA,OAAO,MAAMC,aAAqC,GAAGC,KAAK,IAC1D;AAAA;;AACI,QAAM;AAAEC,IAAAA,OAAO,GAAG,EAAZ;AAAgBC,IAAAA,IAAI,GAAG,EAAvB;AAA2BC,IAAAA,MAAM,GAAG,KAApC;AAA2CC,IAAAA,QAAQ,GAAG,KAAtD;AAA6DC,IAAAA,UAAU,GAAG,EAA1E;AAA8E,OAAGC;AAAjF,MAA0FN,KAAhG;AAEA,QAAMO,aAAa,GAAGV,OAAO,CAAC,MAC9B;AACI,UAAMW,aAAuB,GAAG,CAAE,cAAF,CAAhC;AAEA,QAAGP,OAAH,EAAYO,aAAa,CAACC,IAAd,CAAmB,SAASR,OAA5B;AAEZ,QAAGC,IAAH,EAASM,aAAa,CAACC,IAAd,CAAmB,SAASP,IAA5B;AAET,QAAGC,MAAH,EAAWK,aAAa,CAACC,IAAd,CAAmB,QAAnB;AAEX,QAAGL,QAAH,EAAaI,aAAa,CAACC,IAAd,CAAmB,UAAnB;AAEb,QAAGJ,UAAU,CAACK,MAAd,EAAsBF,aAAa,CAACC,IAAd,CAAmB,GAAGJ,UAAtB;AAEtB,WAAOG,aAAP;AACH,GAf4B,EAe1B,CAAEP,OAAF,EAAWC,IAAX,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,UAAnC,CAf0B,CAA7B;AAiBA,sBAAO,QAAC,IAAD;AAAM,IAAA,UAAU,EAAGE,aAAnB;AAAA,OAAwCD;AAAxC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAtBM;;GAAMP,a;;KAAAA,a","sourcesContent":["import { FC, useMemo } from 'react';\nimport { Flex, FlexProps } from './Flex';\nimport { ButtonSizeType, ColorVariantType } from './types';\n\nexport interface ButtonModtoolProps extends FlexProps\n{\n    variant?: ColorVariantType;\n    size?: ButtonSizeType;\n    active?: boolean;\n    disabled?: boolean;\n}\n\nexport const ButtonModtool: FC<ButtonModtoolProps> = props =>\n{\n    const { variant = '', size = '', active = false, disabled = false, classNames = [], ...rest } = props;\n\n    const getClassNames = useMemo(() =>\n    {\n        const newClassNames: string[] = [ 'px-4 fw-bold' ];\n\n        if(variant) newClassNames.push('btn-' + variant);\n\n        if(size) newClassNames.push('btn-' + size);\n\n        if(active) newClassNames.push('active');\n\n        if(disabled) newClassNames.push('disabled');\n\n        if(classNames.length) newClassNames.push(...classNames);\n\n        return newClassNames;\n    }, [ variant, size, active, disabled, classNames ]);\n\n    return <Flex classNames={ getClassNames } { ...rest } />;\n}\n"]},"metadata":{},"sourceType":"module"}