{"ast":null,"code":"import { ActivePartSet } from './parts/ActivePartSet';\nimport { PartDefinition } from './parts/PartDefinition';\nexport class PartSetsData {\n  constructor() {\n    this._parts = void 0;\n    this._activePartSets = void 0;\n    this._parts = new Map();\n    this._activePartSets = new Map();\n  }\n\n  parse(data) {\n    if (data.partSet && data.partSet.length > 0) {\n      for (const part of data.partSet) {\n        if (!part) continue;\n\n        this._parts.set(part.setType, new PartDefinition(part));\n      }\n    }\n\n    if (data.activePartSets && data.activePartSets.length > 0) {\n      for (const activePart of data.activePartSets) {\n        if (!activePart) continue;\n\n        this._activePartSets.set(activePart.id, new ActivePartSet(activePart));\n      }\n    }\n\n    return true;\n  }\n\n  appendJSON(data) {\n    if (data.partSet && data.partSet.length > 0) {\n      for (const part of data.partSet) {\n        if (!part) continue;\n\n        this._parts.set(part.setType, new PartDefinition(part));\n      }\n    }\n\n    if (data.activePartSets && data.activePartSets.length > 0) {\n      for (const activePart of data.activePartSets) {\n        if (!activePart) continue;\n\n        this._activePartSets.set(activePart.id, new ActivePartSet(activePart));\n      }\n    }\n\n    return false;\n  }\n\n  getActiveParts(k) {\n    const activePartSet = this._activePartSets.get(k.activePartSet);\n\n    if (!activePartSet) return [];\n    return activePartSet.parts;\n  }\n\n  getPartDefinition(part) {\n    const existing = this._parts.get(part);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  addPartDefinition(k) {\n    const _local_2 = k.setType;\n\n    let existing = this._parts.get(_local_2);\n\n    if (!existing) {\n      existing = new PartDefinition(k);\n\n      this._parts.set(_local_2, existing);\n    }\n\n    return existing;\n  }\n\n  getActivePartSet(k) {\n    const existing = this._activePartSets.get(k.activePartSet);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  get parts() {\n    return this._parts;\n  }\n\n  get activePartSets() {\n    return this._activePartSets;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/avatar/structure/PartSetsData.ts"],"names":["ActivePartSet","PartDefinition","PartSetsData","constructor","_parts","_activePartSets","Map","parse","data","partSet","length","part","set","setType","activePartSets","activePart","id","appendJSON","getActiveParts","k","activePartSet","get","parts","getPartDefinition","existing","addPartDefinition","_local_2","getActivePartSet"],"mappings":"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","sourcesContent":["import { ActionDefinition } from '../actions/ActionDefinition';\r\nimport { IActionDefinition } from '../actions/IActionDefinition';\r\nimport { IFigureSetData } from './IFigureSetData';\r\nimport { ActivePartSet } from './parts/ActivePartSet';\r\nimport { PartDefinition } from './parts/PartDefinition';\r\n\r\nexport class PartSetsData implements IFigureSetData\r\n{\r\n    private _parts: Map<string, PartDefinition>;\r\n    private _activePartSets: Map<string, ActivePartSet>;\r\n\r\n    constructor()\r\n    {\r\n        this._parts = new Map();\r\n        this._activePartSets = new Map();\r\n    }\r\n\r\n    public parse(data: any): boolean\r\n    {\r\n        if(data.partSet && (data.partSet.length > 0))\r\n        {\r\n            for(const part of data.partSet)\r\n            {\r\n                if(!part) continue;\r\n\r\n                this._parts.set(part.setType, new PartDefinition(part));\r\n            }\r\n        }\r\n\r\n        if(data.activePartSets && (data.activePartSets.length > 0))\r\n        {\r\n            for(const activePart of data.activePartSets)\r\n            {\r\n                if(!activePart) continue;\r\n\r\n                this._activePartSets.set(activePart.id, new ActivePartSet(activePart));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public appendJSON(data: any): boolean\r\n    {\r\n        if(data.partSet && (data.partSet.length > 0))\r\n        {\r\n            for(const part of data.partSet)\r\n            {\r\n                if(!part) continue;\r\n\r\n                this._parts.set(part.setType, new PartDefinition(part));\r\n            }\r\n        }\r\n\r\n        if(data.activePartSets && (data.activePartSets.length > 0))\r\n        {\r\n            for(const activePart of data.activePartSets)\r\n            {\r\n                if(!activePart) continue;\r\n\r\n                this._activePartSets.set(activePart.id, new ActivePartSet(activePart));\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveParts(k:IActionDefinition): string[]\r\n    {\r\n        const activePartSet = this._activePartSets.get(k.activePartSet);\r\n\r\n        if(!activePartSet) return [];\r\n\r\n        return activePartSet.parts;\r\n    }\r\n\r\n    public getPartDefinition(part: string): PartDefinition\r\n    {\r\n        const existing = this._parts.get(part);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public addPartDefinition(k: any): PartDefinition\r\n    {\r\n        const _local_2 = k.setType as string;\r\n\r\n        let existing = this._parts.get(_local_2);\r\n\r\n        if(!existing)\r\n        {\r\n            existing = new PartDefinition(k);\r\n\r\n            this._parts.set(_local_2, existing);\r\n        }\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getActivePartSet(k: ActionDefinition): ActivePartSet\r\n    {\r\n        const existing = this._activePartSets.get(k.activePartSet);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public get parts(): Map<string, PartDefinition>\r\n    {\r\n        return this._parts;\r\n    }\r\n\r\n    public get activePartSets(): Map<string, ActivePartSet>\r\n    {\r\n        return this._activePartSets;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}