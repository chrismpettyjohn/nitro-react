{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/nitropedia/NitropediaView.tsx\",\n    _s = $RefreshSig$();\n\nimport { NitroLogger } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { AddEventLinkTracker, GetConfiguration, NotificationUtilities, RemoveLinkEventTracker } from '../../api';\nimport { Base, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NEW_LINE_REGEX = /\\n\\r|\\n|\\r/mg;\nexport const NitropediaView = props => {\n  _s();\n\n  const [content, setContent] = useState(null);\n  const [header, setHeader] = useState('');\n  const [dimensions, setDimensions] = useState(null);\n  const elementRef = useRef(null);\n  const openPage = useCallback(async link => {\n    try {\n      const response = await fetch(link);\n      if (!response) return;\n      const text = await response.text();\n      const splitData = text.split(NEW_LINE_REGEX);\n      const line = splitData.shift().split('|');\n      setHeader(line[0]);\n      setDimensions(prevValue => {\n        if (line[1] && line[1].split(';').length === 2) {\n          return {\n            width: parseInt(line[1].split(';')[0]),\n            height: parseInt(line[1].split(';')[1])\n          };\n        }\n\n        return null;\n      });\n      setContent(splitData.join(''));\n    } catch (error) {\n      NitroLogger.error(`Failed to fetch ${link}`);\n    }\n  }, []);\n  const onLinkReceived = useCallback(link => {\n    const value = link.split('/');\n    if (value.length < 2) return;\n    value.shift();\n    openPage(GetConfiguration('habbopages.url') + value.join('/'));\n  }, [openPage]);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived: onLinkReceived,\n      eventUrlPrefix: 'habbopages/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, [onLinkReceived]);\n  useEffect(() => {\n    const handle = event => {\n      if (!(event.target instanceof HTMLAnchorElement)) return;\n      event.preventDefault();\n      const link = event.target.href;\n      if (!link || !link.length) return;\n      NotificationUtilities.openUrl(link);\n    };\n\n    document.addEventListener('click', handle);\n    return () => {\n      document.removeEventListener('click', handle);\n    };\n  }, []);\n  if (!content) return null;\n  return /*#__PURE__*/_jsxDEV(NitroCardView, {\n    className: \"nitropedia\",\n    theme: \"primary\",\n    style: dimensions ? {\n      width: dimensions.width,\n      height: dimensions.height\n    } : {},\n    children: [/*#__PURE__*/_jsxDEV(NitroCardHeaderView, {\n      headerText: header,\n      onCloseClick: () => setContent(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NitroCardContentView, {\n      children: /*#__PURE__*/_jsxDEV(Base, {\n        fit: true,\n        innerRef: elementRef,\n        className: \"text-black\",\n        dangerouslySetInnerHTML: {\n          __html: content\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NitropediaView, \"qy+HcksAOxaPE3UQe3FQByqQT2E=\");\n\n_c = NitropediaView;\n\nvar _c;\n\n$RefreshReg$(_c, \"NitropediaView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/nitropedia/NitropediaView.tsx"],"names":["NitroLogger","useCallback","useEffect","useRef","useState","AddEventLinkTracker","GetConfiguration","NotificationUtilities","RemoveLinkEventTracker","Base","NitroCardContentView","NitroCardHeaderView","NitroCardView","NEW_LINE_REGEX","NitropediaView","props","content","setContent","header","setHeader","dimensions","setDimensions","elementRef","openPage","link","response","fetch","text","splitData","split","line","shift","prevValue","length","width","parseInt","height","join","error","onLinkReceived","value","linkTracker","linkReceived","eventUrlPrefix","handle","event","target","HTMLAnchorElement","preventDefault","href","openUrl","document","addEventListener","removeEventListener","__html"],"mappings":"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","sourcesContent":["import { NitroLogger } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { AddEventLinkTracker, GetConfiguration, NotificationUtilities, RemoveLinkEventTracker } from '../../api';\nimport { Base, NitroCardContentView, NitroCardHeaderView, NitroCardView } from '../../common';\n\nconst NEW_LINE_REGEX = /\\n\\r|\\n|\\r/mg;\n\nexport const NitropediaView: FC<{}> = props =>\n{\n    const [ content, setContent ] = useState<string>(null);\n    const [ header, setHeader ] = useState<string>('');\n    const [ dimensions, setDimensions ] = useState<{ width: number, height: number }>(null);\n    const elementRef = useRef<HTMLDivElement>(null);\n    \n    const openPage = useCallback(async (link: string) =>\n    {\n        try\n        {\n            const response = await fetch(link);\n\n            if(!response) return;\n    \n            const text = await response.text();\n            const splitData = text.split(NEW_LINE_REGEX);\n            const line = splitData.shift().split('|');\n\n            setHeader(line[0]);\n\n            setDimensions(prevValue =>\n            {\n                if(line[1] && (line[1].split(';').length === 2))\n                {\n                    return {\n                        width: parseInt(line[1].split(';')[0]),\n                        height: parseInt(line[1].split(';')[1])\n                    }\n                }\n\n                return null;\n            });\n\n            setContent(splitData.join(''));\n        }\n\n        catch (error)\n        {\n            NitroLogger.error(`Failed to fetch ${ link }`);\n        }\n    }, []);\n\n    const onLinkReceived = useCallback((link: string) =>\n    {\n        const value = link.split('/');\n\n        if(value.length < 2) return;\n\n        value.shift();\n\n        openPage(GetConfiguration<string>('habbopages.url') + value.join('/'));\n    }, [ openPage ]);\n\n    useEffect(() =>\n    {\n        const linkTracker = { linkReceived: onLinkReceived, eventUrlPrefix: 'habbopages/' };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, [ onLinkReceived ]);\n\n    useEffect(() =>\n    {\n        const handle = (event: MouseEvent) =>\n        {\n            if(!(event.target instanceof HTMLAnchorElement)) return;\n\n            event.preventDefault();\n\n            const link = event.target.href;\n\n            if(!link || !link.length) return;\n\n            NotificationUtilities.openUrl(link);\n        }\n\n        document.addEventListener('click', handle);\n\n        return () =>\n        {\n            document.removeEventListener('click', handle);\n        }\n    }, []);\n\n    if(!content) return null;\n\n    return (\n        <NitroCardView className=\"nitropedia\" theme=\"primary\" style={ dimensions ? { width: dimensions.width, height: dimensions.height } : {} }>\n            <NitroCardHeaderView headerText={ header } onCloseClick={ () => setContent(null) }/>\n            <NitroCardContentView>\n                <Base fit innerRef={ elementRef } className=\"text-black\" dangerouslySetInnerHTML={ { __html: content } } />\n            </NitroCardContentView>\n        </NitroCardView>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}