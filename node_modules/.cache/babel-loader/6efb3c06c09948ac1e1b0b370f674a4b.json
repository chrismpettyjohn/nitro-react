{"ast":null,"code":"import { AdvancedMap, Nitro, NitroSettingsEvent, RoomEngineEvent, RoomEngineObjectEvent, RoomEngineSamplePlaybackEvent } from '../..';\nimport { NitroManager } from '../../core/common/NitroManager';\nimport { NitroSoundEvent } from '../events/NitroSoundEvent';\nexport class SoundManager extends NitroManager {\n  constructor() {\n    super();\n    this._volumeSystem = void 0;\n    this._volumeFurni = void 0;\n    this._volumeTrax = void 0;\n    this._internalSamples = void 0;\n    this._furniSamples = void 0;\n    this._furnitureBeingPlayed = void 0;\n    this._volumeSystem = 0.5;\n    this._volumeFurni = 0.5;\n    this._volumeTrax = 0.5;\n    this._internalSamples = new AdvancedMap();\n    this._furniSamples = new AdvancedMap();\n    this._furnitureBeingPlayed = new AdvancedMap();\n    this.onEvent = this.onEvent.bind(this);\n  }\n\n  onEvent(event) {\n    switch (event.type) {\n      case RoomEngineSamplePlaybackEvent.PLAY_SAMPLE:\n        {\n          const castedEvent = event;\n          this.playFurniSample(castedEvent.objectId, castedEvent.sampleId, castedEvent.pitch);\n          return;\n        }\n\n      case RoomEngineObjectEvent.REMOVED:\n        {\n          const castedEvent = event;\n          this.stopFurniSample(castedEvent.objectId);\n          return;\n        }\n\n      case RoomEngineEvent.DISPOSED:\n        {\n          this._furnitureBeingPlayed.getKeys().forEach(objectId => {\n            this.stopFurniSample(objectId);\n          });\n\n          return;\n        }\n\n      case NitroSettingsEvent.SETTINGS_UPDATED:\n        {\n          const castedEvent = event;\n          const volumeFurniUpdated = castedEvent.volumeFurni !== this._volumeFurni;\n          this._volumeSystem = castedEvent.volumeSystem / 100;\n          this._volumeFurni = castedEvent.volumeFurni / 100;\n          this._volumeTrax = castedEvent.volumeTrax / 100;\n          if (volumeFurniUpdated) this.updateFurniSamplesVolume(this._volumeFurni);\n          return;\n        }\n\n      case NitroSoundEvent.PLAY_SOUND:\n        {\n          const castedEvent = event;\n          this.playInternalSample(castedEvent.sampleCode);\n          return;\n        }\n    }\n  }\n\n  onInit() {\n    Nitro.instance.roomEngine.events.addEventListener(RoomEngineSamplePlaybackEvent.PLAY_SAMPLE, this.onEvent);\n    Nitro.instance.roomEngine.events.addEventListener(RoomEngineObjectEvent.REMOVED, this.onEvent);\n    Nitro.instance.roomEngine.events.addEventListener(RoomEngineEvent.DISPOSED, this.onEvent);\n    Nitro.instance.events.addEventListener(NitroSettingsEvent.SETTINGS_UPDATED, this.onEvent);\n    Nitro.instance.events.addEventListener(NitroSoundEvent.PLAY_SOUND, this.onEvent);\n  }\n\n  onDispose() {\n    Nitro.instance.roomEngine.events.removeEventListener(RoomEngineSamplePlaybackEvent.PLAY_SAMPLE, this.onEvent);\n    Nitro.instance.roomEngine.events.removeEventListener(RoomEngineObjectEvent.REMOVED, this.onEvent);\n    Nitro.instance.roomEngine.events.removeEventListener(RoomEngineEvent.DISPOSED, this.onEvent);\n    Nitro.instance.events.removeEventListener(NitroSettingsEvent.SETTINGS_UPDATED, this.onEvent);\n    Nitro.instance.events.removeEventListener(NitroSoundEvent.PLAY_SOUND, this.onEvent);\n  }\n\n  playSample(sample, volume) {\n    let pitch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    sample.volume = volume;\n    sample.currentTime = 0;\n\n    try {\n      sample.play();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  playInternalSample(code) {\n    let sample = this._internalSamples.getValue(code);\n\n    if (!sample) {\n      const sampleUrl = Nitro.instance.getConfiguration('sounds.url');\n      sample = new Audio(sampleUrl.replace('%sample%', code));\n\n      this._internalSamples.add(code, sample);\n    }\n\n    this.playSample(sample, this._volumeSystem);\n  }\n\n  playFurniSample(objectId, code, pitch) {\n    let sample = this._furniSamples.getValue(code);\n\n    if (!sample) {\n      const sampleUrl = Nitro.instance.getConfiguration('external.samples.url');\n      sample = new Audio(sampleUrl.replace('%sample%', code.toString()));\n\n      this._furniSamples.add(code, sample);\n    }\n\n    if (!this._furnitureBeingPlayed.hasKey(objectId)) this._furnitureBeingPlayed.add(objectId, code);\n\n    sample.onended = event => {\n      this.stopFurniSample(objectId);\n    };\n\n    sample.onpause = event => {\n      this.stopFurniSample(objectId);\n    };\n\n    sample.onerror = event => {\n      this.stopFurniSample(objectId);\n    };\n\n    this.playSample(sample, this._volumeFurni, pitch);\n  }\n\n  stopInternalSample(code) {\n    const sample = this._internalSamples.getValue(code);\n\n    if (!sample) return;\n\n    try {\n      sample.pause();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  stopFurniSample(objectId) {\n    const furnitureBeingPlayed = this._furnitureBeingPlayed.getValue(objectId);\n\n    if (!furnitureBeingPlayed) return;\n\n    const sample = this._furniSamples.getValue(furnitureBeingPlayed);\n\n    this._furnitureBeingPlayed.remove(objectId);\n\n    if (!sample) return;\n\n    try {\n      sample.pause();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  updateInternalSamplesVolume(volume) {\n    this._internalSamples.getValues().forEach(sample => {\n      sample.volume = volume;\n    });\n  }\n\n  updateFurniSamplesVolume(volume) {\n    this._furniSamples.getValues().forEach(sample => {\n      sample.volume = volume;\n    });\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/sound/SoundManager.ts"],"names":["AdvancedMap","Nitro","NitroSettingsEvent","RoomEngineEvent","RoomEngineObjectEvent","RoomEngineSamplePlaybackEvent","NitroManager","NitroSoundEvent","SoundManager","constructor","_volumeSystem","_volumeFurni","_volumeTrax","_internalSamples","_furniSamples","_furnitureBeingPlayed","onEvent","bind","event","type","PLAY_SAMPLE","castedEvent","playFurniSample","objectId","sampleId","pitch","REMOVED","stopFurniSample","DISPOSED","getKeys","forEach","SETTINGS_UPDATED","volumeFurniUpdated","volumeFurni","volumeSystem","volumeTrax","updateFurniSamplesVolume","PLAY_SOUND","playInternalSample","sampleCode","onInit","instance","roomEngine","events","addEventListener","onDispose","removeEventListener","playSample","sample","volume","currentTime","play","e","console","log","code","getValue","sampleUrl","getConfiguration","Audio","replace","add","toString","hasKey","onended","onpause","onerror","stopInternalSample","pause","furnitureBeingPlayed","remove","updateInternalSamplesVolume","getValues"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,KAAtB,EAA6BC,kBAA7B,EAAiDC,eAAjD,EAAkEC,qBAAlE,EAAyFC,6BAAzF,QAA8H,OAA9H;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AAGA,OAAO,MAAMC,YAAN,SAA2BF,YAA3B,CACP;AASIG,EAAAA,WAAW,GACX;AACI;AADJ,SATQC,aASR;AAAA,SARQC,YAQR;AAAA,SAPQC,WAOR;AAAA,SALQC,gBAKR;AAAA,SAJQC,aAIR;AAAA,SAHQC,qBAGR;AAGI,SAAKL,aAAL,GAAqB,GAArB;AACA,SAAKC,YAAL,GAAoB,GAApB;AACA,SAAKC,WAAL,GAAmB,GAAnB;AAEA,SAAKC,gBAAL,GAAwB,IAAIb,WAAJ,EAAxB;AACA,SAAKc,aAAL,GAAqB,IAAId,WAAJ,EAArB;AACA,SAAKe,qBAAL,GAA6B,IAAIf,WAAJ,EAA7B;AAEA,SAAKgB,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACH;;AAEOD,EAAAA,OAAO,CAACE,KAAD,EACf;AACI,YAAOA,KAAK,CAACC,IAAb;AAEI,WAAKd,6BAA6B,CAACe,WAAnC;AAAgD;AAC5C,gBAAMC,WAAW,GAAIH,KAArB;AAEA,eAAKI,eAAL,CAAqBD,WAAW,CAACE,QAAjC,EAA2CF,WAAW,CAACG,QAAvD,EAAiEH,WAAW,CAACI,KAA7E;AACA;AACH;;AACD,WAAKrB,qBAAqB,CAACsB,OAA3B;AAAoC;AAChC,gBAAML,WAAW,GAAIH,KAArB;AAEA,eAAKS,eAAL,CAAqBN,WAAW,CAACE,QAAjC;AACA;AACH;;AACD,WAAKpB,eAAe,CAACyB,QAArB;AAA+B;AAC3B,eAAKb,qBAAL,CAA2Bc,OAA3B,GAAqCC,OAArC,CAA8CP,QAAD,IAC7C;AACI,iBAAKI,eAAL,CAAqBJ,QAArB;AACH,WAHD;;AAIA;AACH;;AACD,WAAKrB,kBAAkB,CAAC6B,gBAAxB;AAA0C;AACtC,gBAAMV,WAAW,GAAIH,KAArB;AAEA,gBAAMc,kBAAkB,GAAGX,WAAW,CAACY,WAAZ,KAA4B,KAAKtB,YAA5D;AAEA,eAAKD,aAAL,GAAsBW,WAAW,CAACa,YAAZ,GAA2B,GAAjD;AACA,eAAKvB,YAAL,GAAqBU,WAAW,CAACY,WAAZ,GAA0B,GAA/C;AACA,eAAKrB,WAAL,GAAoBS,WAAW,CAACc,UAAZ,GAAyB,GAA7C;AAEA,cAAGH,kBAAH,EAAuB,KAAKI,wBAAL,CAA8B,KAAKzB,YAAnC;AACvB;AACH;;AACD,WAAKJ,eAAe,CAAC8B,UAArB;AAAiC;AAC7B,gBAAMhB,WAAW,GAAIH,KAArB;AAEA,eAAKoB,kBAAL,CAAwBjB,WAAW,CAACkB,UAApC;AACA;AACH;AAtCL;AAwCH;;AAEMC,EAAAA,MAAM,GACb;AACIvC,IAAAA,KAAK,CAACwC,QAAN,CAAeC,UAAf,CAA0BC,MAA1B,CAAiCC,gBAAjC,CAAkDvC,6BAA6B,CAACe,WAAhF,EAA6F,KAAKJ,OAAlG;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeC,UAAf,CAA0BC,MAA1B,CAAiCC,gBAAjC,CAAkDxC,qBAAqB,CAACsB,OAAxE,EAAiF,KAAKV,OAAtF;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeC,UAAf,CAA0BC,MAA1B,CAAiCC,gBAAjC,CAAkDzC,eAAe,CAACyB,QAAlE,EAA4E,KAAKZ,OAAjF;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeE,MAAf,CAAsBC,gBAAtB,CAAuC1C,kBAAkB,CAAC6B,gBAA1D,EAA4E,KAAKf,OAAjF;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeE,MAAf,CAAsBC,gBAAtB,CAAuCrC,eAAe,CAAC8B,UAAvD,EAAmE,KAAKrB,OAAxE;AACH;;AAEM6B,EAAAA,SAAS,GAChB;AACI5C,IAAAA,KAAK,CAACwC,QAAN,CAAeC,UAAf,CAA0BC,MAA1B,CAAiCG,mBAAjC,CAAqDzC,6BAA6B,CAACe,WAAnF,EAAgG,KAAKJ,OAArG;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeC,UAAf,CAA0BC,MAA1B,CAAiCG,mBAAjC,CAAqD1C,qBAAqB,CAACsB,OAA3E,EAAoF,KAAKV,OAAzF;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeC,UAAf,CAA0BC,MAA1B,CAAiCG,mBAAjC,CAAqD3C,eAAe,CAACyB,QAArE,EAA+E,KAAKZ,OAApF;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeE,MAAf,CAAsBG,mBAAtB,CAA0C5C,kBAAkB,CAAC6B,gBAA7D,EAA+E,KAAKf,OAApF;AACAf,IAAAA,KAAK,CAACwC,QAAN,CAAeE,MAAf,CAAsBG,mBAAtB,CAA0CvC,eAAe,CAAC8B,UAA1D,EAAsE,KAAKrB,OAA3E;AACH;;AAEO+B,EAAAA,UAAU,CAACC,MAAD,EAA2BC,MAA3B,EAClB;AAAA,QAD6DxB,KAC7D,uEAD6E,CAC7E;AACIuB,IAAAA,MAAM,CAACC,MAAP,GAAgBA,MAAhB;AACAD,IAAAA,MAAM,CAACE,WAAP,GAAqB,CAArB;;AAEA,QACA;AACIF,MAAAA,MAAM,CAACG,IAAP;AACH,KAHD,CAIA,OAAOC,CAAP,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AAEOd,EAAAA,kBAAkB,CAACiB,IAAD,EAC1B;AACI,QAAIP,MAAM,GAAG,KAAKnC,gBAAL,CAAsB2C,QAAtB,CAA+BD,IAA/B,CAAb;;AAEA,QAAG,CAACP,MAAJ,EACA;AACI,YAAMS,SAAS,GAAGxD,KAAK,CAACwC,QAAN,CAAeiB,gBAAf,CAAwC,YAAxC,CAAlB;AAEAV,MAAAA,MAAM,GAAG,IAAIW,KAAJ,CAAUF,SAAS,CAACG,OAAV,CAAkB,UAAlB,EAA8BL,IAA9B,CAAV,CAAT;;AACA,WAAK1C,gBAAL,CAAsBgD,GAAtB,CAA0BN,IAA1B,EAAgCP,MAAhC;AACH;;AAED,SAAKD,UAAL,CAAgBC,MAAhB,EAAwB,KAAKtC,aAA7B;AACH;;AAEOY,EAAAA,eAAe,CAACC,QAAD,EAAmBgC,IAAnB,EAAiC9B,KAAjC,EACvB;AACI,QAAIuB,MAAM,GAAG,KAAKlC,aAAL,CAAmB0C,QAAnB,CAA4BD,IAA5B,CAAb;;AAEA,QAAG,CAACP,MAAJ,EACA;AACI,YAAMS,SAAS,GAAGxD,KAAK,CAACwC,QAAN,CAAeiB,gBAAf,CAAwC,sBAAxC,CAAlB;AAEAV,MAAAA,MAAM,GAAG,IAAIW,KAAJ,CAAUF,SAAS,CAACG,OAAV,CAAkB,UAAlB,EAA8BL,IAAI,CAACO,QAAL,EAA9B,CAAV,CAAT;;AACA,WAAKhD,aAAL,CAAmB+C,GAAnB,CAAuBN,IAAvB,EAA6BP,MAA7B;AACH;;AAED,QAAG,CAAC,KAAKjC,qBAAL,CAA2BgD,MAA3B,CAAkCxC,QAAlC,CAAJ,EAAiD,KAAKR,qBAAL,CAA2B8C,GAA3B,CAA+BtC,QAA/B,EAAyCgC,IAAzC;;AAEjDP,IAAAA,MAAM,CAACgB,OAAP,GAAkB9C,KAAD,IACjB;AACI,WAAKS,eAAL,CAAqBJ,QAArB;AACH,KAHD;;AAKAyB,IAAAA,MAAM,CAACiB,OAAP,GAAkB/C,KAAD,IACjB;AACI,WAAKS,eAAL,CAAqBJ,QAArB;AACH,KAHD;;AAKAyB,IAAAA,MAAM,CAACkB,OAAP,GAAkBhD,KAAD,IACjB;AACI,WAAKS,eAAL,CAAqBJ,QAArB;AACH,KAHD;;AAKA,SAAKwB,UAAL,CAAgBC,MAAhB,EAAwB,KAAKrC,YAA7B,EAA2Cc,KAA3C;AACH;;AAEO0C,EAAAA,kBAAkB,CAACZ,IAAD,EAC1B;AACI,UAAMP,MAAM,GAAG,KAAKnC,gBAAL,CAAsB2C,QAAtB,CAA+BD,IAA/B,CAAf;;AAEA,QAAG,CAACP,MAAJ,EAAY;;AAEZ,QACA;AACIA,MAAAA,MAAM,CAACoB,KAAP;AACH,KAHD,CAIA,OAAOhB,CAAP,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AAEOzB,EAAAA,eAAe,CAACJ,QAAD,EACvB;AACI,UAAM8C,oBAAoB,GAAG,KAAKtD,qBAAL,CAA2ByC,QAA3B,CAAoCjC,QAApC,CAA7B;;AAEA,QAAG,CAAC8C,oBAAJ,EAA0B;;AAE1B,UAAMrB,MAAM,GAAG,KAAKlC,aAAL,CAAmB0C,QAAnB,CAA4Ba,oBAA5B,CAAf;;AAEA,SAAKtD,qBAAL,CAA2BuD,MAA3B,CAAkC/C,QAAlC;;AAEA,QAAG,CAACyB,MAAJ,EAAY;;AAEZ,QACA;AACIA,MAAAA,MAAM,CAACoB,KAAP;AACH,KAHD,CAIA,OAAOhB,CAAP,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AAEOmB,EAAAA,2BAA2B,CAACtB,MAAD,EACnC;AACI,SAAKpC,gBAAL,CAAsB2D,SAAtB,GAAkC1C,OAAlC,CAA2CkB,MAAD,IAC1C;AACIA,MAAAA,MAAM,CAACC,MAAP,GAAgBA,MAAhB;AACH,KAHD;AAIH;;AAEOb,EAAAA,wBAAwB,CAACa,MAAD,EAChC;AACI,SAAKnC,aAAL,CAAmB0D,SAAnB,GAA+B1C,OAA/B,CAAwCkB,MAAD,IACvC;AACIA,MAAAA,MAAM,CAACC,MAAP,GAAgBA,MAAhB;AACH,KAHD;AAIH;;AAxML","sourcesContent":["import { AdvancedMap, Nitro, NitroSettingsEvent, RoomEngineEvent, RoomEngineObjectEvent, RoomEngineSamplePlaybackEvent } from '../..';\r\nimport { NitroManager } from '../../core/common/NitroManager';\r\nimport { NitroSoundEvent } from '../events/NitroSoundEvent';\r\nimport { NitroEvent } from './../../core/events/NitroEvent';\r\n\r\nexport class SoundManager extends NitroManager\r\n{\r\n    private _volumeSystem: number;\r\n    private _volumeFurni: number;\r\n    private _volumeTrax: number;\r\n\r\n    private _internalSamples: AdvancedMap<string, HTMLAudioElement>;\r\n    private _furniSamples: AdvancedMap<number, HTMLAudioElement>;\r\n    private _furnitureBeingPlayed: AdvancedMap<number, number>;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._volumeSystem = 0.5;\r\n        this._volumeFurni = 0.5;\r\n        this._volumeTrax = 0.5;\r\n\r\n        this._internalSamples = new AdvancedMap();\r\n        this._furniSamples = new AdvancedMap();\r\n        this._furnitureBeingPlayed = new AdvancedMap();\r\n\r\n        this.onEvent = this.onEvent.bind(this);\r\n    }\r\n\r\n    private onEvent(event: NitroEvent)\r\n    {\r\n        switch(event.type)\r\n        {\r\n            case RoomEngineSamplePlaybackEvent.PLAY_SAMPLE: {\r\n                const castedEvent = (event as RoomEngineSamplePlaybackEvent);\r\n\r\n                this.playFurniSample(castedEvent.objectId, castedEvent.sampleId, castedEvent.pitch);\r\n                return;\r\n            }\r\n            case RoomEngineObjectEvent.REMOVED: {\r\n                const castedEvent = (event as RoomEngineObjectEvent);\r\n\r\n                this.stopFurniSample(castedEvent.objectId);\r\n                return;\r\n            }\r\n            case RoomEngineEvent.DISPOSED: {\r\n                this._furnitureBeingPlayed.getKeys().forEach((objectId: number) =>\r\n                {\r\n                    this.stopFurniSample(objectId);\r\n                });\r\n                return;\r\n            }\r\n            case NitroSettingsEvent.SETTINGS_UPDATED: {\r\n                const castedEvent = (event as NitroSettingsEvent);\r\n\r\n                const volumeFurniUpdated = castedEvent.volumeFurni !== this._volumeFurni;\r\n\r\n                this._volumeSystem = (castedEvent.volumeSystem / 100);\r\n                this._volumeFurni = (castedEvent.volumeFurni / 100);\r\n                this._volumeTrax = (castedEvent.volumeTrax / 100);\r\n\r\n                if(volumeFurniUpdated) this.updateFurniSamplesVolume(this._volumeFurni);\r\n                return;\r\n            }\r\n            case NitroSoundEvent.PLAY_SOUND: {\r\n                const castedEvent = (event as NitroSoundEvent);\r\n\r\n                this.playInternalSample(castedEvent.sampleCode);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public onInit(): void\r\n    {\r\n        Nitro.instance.roomEngine.events.addEventListener(RoomEngineSamplePlaybackEvent.PLAY_SAMPLE, this.onEvent);\r\n        Nitro.instance.roomEngine.events.addEventListener(RoomEngineObjectEvent.REMOVED, this.onEvent);\r\n        Nitro.instance.roomEngine.events.addEventListener(RoomEngineEvent.DISPOSED, this.onEvent);\r\n        Nitro.instance.events.addEventListener(NitroSettingsEvent.SETTINGS_UPDATED, this.onEvent);\r\n        Nitro.instance.events.addEventListener(NitroSoundEvent.PLAY_SOUND, this.onEvent);\r\n    }\r\n\r\n    public onDispose(): void\r\n    {\r\n        Nitro.instance.roomEngine.events.removeEventListener(RoomEngineSamplePlaybackEvent.PLAY_SAMPLE, this.onEvent);\r\n        Nitro.instance.roomEngine.events.removeEventListener(RoomEngineObjectEvent.REMOVED, this.onEvent);\r\n        Nitro.instance.roomEngine.events.removeEventListener(RoomEngineEvent.DISPOSED, this.onEvent);\r\n        Nitro.instance.events.removeEventListener(NitroSettingsEvent.SETTINGS_UPDATED, this.onEvent);\r\n        Nitro.instance.events.removeEventListener(NitroSoundEvent.PLAY_SOUND, this.onEvent);\r\n    }\r\n\r\n    private playSample(sample: HTMLAudioElement, volume: number, pitch: number = 1): void\r\n    {\r\n        sample.volume = volume;\r\n        sample.currentTime = 0;\r\n\r\n        try\r\n        {\r\n            sample.play();\r\n        }\r\n        catch (e)\r\n        {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    private playInternalSample(code: string): void\r\n    {\r\n        let sample = this._internalSamples.getValue(code);\r\n\r\n        if(!sample)\r\n        {\r\n            const sampleUrl = Nitro.instance.getConfiguration<string>('sounds.url');\r\n\r\n            sample = new Audio(sampleUrl.replace('%sample%', code));\r\n            this._internalSamples.add(code, sample);\r\n        }\r\n\r\n        this.playSample(sample, this._volumeSystem);\r\n    }\r\n\r\n    private playFurniSample(objectId: number, code: number, pitch: number): void\r\n    {\r\n        let sample = this._furniSamples.getValue(code);\r\n\r\n        if(!sample)\r\n        {\r\n            const sampleUrl = Nitro.instance.getConfiguration<string>('external.samples.url');\r\n\r\n            sample = new Audio(sampleUrl.replace('%sample%', code.toString()));\r\n            this._furniSamples.add(code, sample);\r\n        }\r\n\r\n        if(!this._furnitureBeingPlayed.hasKey(objectId)) this._furnitureBeingPlayed.add(objectId, code);\r\n\r\n        sample.onended = (event) =>\r\n        {\r\n            this.stopFurniSample(objectId);\r\n        };\r\n\r\n        sample.onpause = (event) =>\r\n        {\r\n            this.stopFurniSample(objectId);\r\n        };\r\n\r\n        sample.onerror = (event) =>\r\n        {\r\n            this.stopFurniSample(objectId);\r\n        };\r\n\r\n        this.playSample(sample, this._volumeFurni, pitch);\r\n    }\r\n\r\n    private stopInternalSample(code: string): void\r\n    {\r\n        const sample = this._internalSamples.getValue(code);\r\n\r\n        if(!sample) return;\r\n\r\n        try\r\n        {\r\n            sample.pause();\r\n        }\r\n        catch (e)\r\n        {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    private stopFurniSample(objectId: number): void\r\n    {\r\n        const furnitureBeingPlayed = this._furnitureBeingPlayed.getValue(objectId);\r\n\r\n        if(!furnitureBeingPlayed) return;\r\n\r\n        const sample = this._furniSamples.getValue(furnitureBeingPlayed);\r\n\r\n        this._furnitureBeingPlayed.remove(objectId);\r\n\r\n        if(!sample) return;\r\n\r\n        try\r\n        {\r\n            sample.pause();\r\n        }\r\n        catch (e)\r\n        {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    private updateInternalSamplesVolume(volume: number): void\r\n    {\r\n        this._internalSamples.getValues().forEach((sample: HTMLAudioElement) =>\r\n        {\r\n            sample.volume = volume;\r\n        });\r\n    }\r\n\r\n    private updateFurniSamplesVolume(volume: number): void\r\n    {\r\n        this._furniSamples.getValues().forEach((sample: HTMLAudioElement) =>\r\n        {\r\n            sample.volume = volume;\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}