{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { Point } from '@pixi/math';\nimport { NitroSprite } from '../../../core';\nimport { RoomId } from '../../../room/utils/RoomId';\nimport { Vector3d } from '../../../room/utils/Vector3d';\nimport { FloorHeightMapMessageParser } from '../../communication/messages/parser/room/mapping/FloorHeightMapMessageParser';\nimport { Nitro } from '../../Nitro';\nimport { RoomEngineEvent } from '../events/RoomEngineEvent';\nimport { RoomEngineObjectEvent } from '../events/RoomEngineObjectEvent';\nimport { ObjectRoomMapUpdateMessage } from '../messages/ObjectRoomMapUpdateMessage';\nimport { LegacyDataType } from '../object/data/type/LegacyDataType';\nimport { RoomObjectCategory } from '../object/RoomObjectCategory';\nimport { RoomObjectUserType } from '../object/RoomObjectUserType';\nimport { RoomObjectVariable } from '../object/RoomObjectVariable';\nimport { RoomPlaneParser } from '../object/RoomPlaneParser';\nimport { RoomEngine } from '../RoomEngine';\nimport { LegacyWallGeometry } from '../utils/LegacyWallGeometry';\nexport class RoomPreviewer {\n  constructor(roomEngine) {\n    let roomId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this._roomEngine = void 0;\n    this._planeParser = void 0;\n    this._previewRoomId = 1;\n    this._currentPreviewObjectType = 0;\n    this._currentPreviewObjectCategory = 0;\n    this._currentPreviewObjectData = '';\n    this._currentPreviewRectangle = null;\n    this._currentPreviewCanvasWidth = 0;\n    this._currentPreviewCanvasHeight = 0;\n    this._currentPreviewScale = 64;\n    this._currentPreviewNeedsZoomOut = void 0;\n    this._automaticStateChange = void 0;\n    this._previousAutomaticStateChangeTime = void 0;\n    this._addViewOffset = void 0;\n    this._backgroundColor = 305148561;\n    this._backgroundSprite = null;\n    this._disableUpdate = false;\n    this._roomEngine = roomEngine;\n    this._planeParser = new RoomPlaneParser();\n    this._previewRoomId = RoomId.makeRoomPreviewerId(roomId);\n    this._addViewOffset = new Point(0, 0);\n    this.onRoomObjectAdded = this.onRoomObjectAdded.bind(this);\n    this.onRoomInitializedonRoomInitialized = this.onRoomInitializedonRoomInitialized.bind(this);\n\n    if (this.isRoomEngineReady && this._roomEngine.events) {\n      this._roomEngine.events.addEventListener(RoomEngineObjectEvent.ADDED, this.onRoomObjectAdded);\n\n      this._roomEngine.events.addEventListener(RoomEngineObjectEvent.CONTENT_UPDATED, this.onRoomObjectAdded);\n\n      this._roomEngine.events.addEventListener(RoomEngineEvent.INITIALIZED, this.onRoomInitializedonRoomInitialized);\n    }\n\n    this.createRoomForPreview();\n  }\n\n  dispose() {\n    this.reset(true);\n\n    if (this.isRoomEngineReady && this._roomEngine.events) {\n      this._roomEngine.events.removeEventListener(RoomEngineObjectEvent.ADDED, this.onRoomObjectAdded);\n\n      this._roomEngine.events.removeEventListener(RoomEngineObjectEvent.CONTENT_UPDATED, this.onRoomObjectAdded);\n\n      this._roomEngine.events.removeEventListener(RoomEngineEvent.INITIALIZED, this.onRoomInitializedonRoomInitialized);\n    }\n\n    if (this._backgroundSprite) {\n      this._backgroundSprite.destroy();\n\n      this._backgroundSprite = null;\n    }\n\n    if (this._planeParser) {\n      this._planeParser.dispose();\n\n      this._planeParser = null;\n    }\n  }\n\n  createRoomForPreview() {\n    if (this.isRoomEngineReady) {\n      const size = 7;\n      const planeParser = new RoomPlaneParser();\n      planeParser.initializeTileMap(size + 2, size + 2);\n      let y = 1;\n\n      while (y < 1 + size) {\n        let x = 1;\n\n        while (x < 1 + size) {\n          planeParser.setTileHeight(x, y, 0);\n          x++;\n        }\n\n        y++;\n      }\n\n      planeParser.initializeFromTileData();\n\n      this._roomEngine.createRoomInstance(this._previewRoomId, planeParser.getMapData());\n\n      planeParser.dispose();\n    }\n  }\n\n  reset(k) {\n    if (this.isRoomEngineReady) {\n      this._roomEngine.removeRoomObjectFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID);\n\n      this._roomEngine.removeRoomObjectWall(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID);\n\n      this._roomEngine.removeRoomObjectUser(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID);\n\n      if (!k) this.updatePreviewRoomView();\n    }\n\n    this._currentPreviewObjectCategory = RoomObjectCategory.MINIMUM;\n  }\n\n  updatePreviewModel(model, wallHeight) {\n    let scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const parser = new FloorHeightMapMessageParser();\n    parser.flush();\n    parser.parseModel(model, wallHeight, scale); //@ts-ignore\n\n    const wallGeometry = this._roomEngine.getLegacyWallGeometry(this._previewRoomId);\n\n    if (!wallGeometry) return;\n\n    this._planeParser.reset();\n\n    const width = parser.width;\n    const height = parser.height;\n\n    this._planeParser.initializeTileMap(width, height);\n\n    const entryTile = null;\n    let doorX = -1;\n    let doorY = -1;\n    let doorZ = 0;\n    let doorDirection = 0;\n    let y = 0;\n\n    while (y < height) {\n      let x = 0;\n\n      while (x < width) {\n        const tileHeight = parser.getHeight(x, y);\n\n        if ((y > 0 && y < height - 1 || x > 0 && x < width - 1) && !(tileHeight == RoomPlaneParser.TILE_BLOCKED) && (entryTile == null || x == entryTile.x && y == entryTile.y)) {\n          if (parser.getHeight(x, y - 1) == RoomPlaneParser.TILE_BLOCKED && parser.getHeight(x - 1, y) == RoomPlaneParser.TILE_BLOCKED && parser.getHeight(x, y + 1) == RoomPlaneParser.TILE_BLOCKED) {\n            doorX = x + 0.5;\n            doorY = y;\n            doorZ = tileHeight;\n            doorDirection = 90;\n          }\n\n          if (parser.getHeight(x, y - 1) == RoomPlaneParser.TILE_BLOCKED && parser.getHeight(x - 1, y) == RoomPlaneParser.TILE_BLOCKED && parser.getHeight(x + 1, y) == RoomPlaneParser.TILE_BLOCKED) {\n            doorX = x;\n            doorY = y + 0.5;\n            doorZ = tileHeight;\n            doorDirection = 180;\n          }\n        }\n\n        this._planeParser.setTileHeight(x, y, tileHeight);\n\n        x++;\n      }\n\n      y++;\n    }\n\n    this._planeParser.setTileHeight(Math.floor(doorX), Math.floor(doorY), doorZ);\n\n    this._planeParser.initializeFromTileData(parser.wallHeight);\n\n    this._planeParser.setTileHeight(Math.floor(doorX), Math.floor(doorY), doorZ + this._planeParser.wallHeight);\n\n    wallGeometry.scale = LegacyWallGeometry.DEFAULT_SCALE;\n    wallGeometry.initialize(width, height, this._planeParser.floorHeight);\n    let heightIterator = parser.height - 1;\n\n    while (heightIterator >= 0) {\n      let widthIterator = parser.width - 1;\n\n      while (widthIterator >= 0) {\n        wallGeometry.setHeight(widthIterator, heightIterator, this._planeParser.getTileHeight(widthIterator, heightIterator));\n        widthIterator--;\n      }\n\n      heightIterator--;\n    }\n\n    const roomMap = this._planeParser.getMapData();\n\n    roomMap.doors.push({\n      x: doorX,\n      y: doorY,\n      z: doorZ,\n      dir: doorDirection\n    });\n    const roomObject = this.getRoomPreviewOwnRoomObject();\n    if (roomObject) roomObject.processUpdateMessage(new ObjectRoomMapUpdateMessage(roomMap));\n  }\n\n  addFurnitureIntoRoom(classId, direction) {\n    let objectData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    if (!objectData) objectData = new LegacyDataType();\n\n    if (this.isRoomEngineReady) {\n      this.reset(false);\n      this._currentPreviewObjectType = classId;\n      this._currentPreviewObjectCategory = RoomObjectCategory.FLOOR;\n      this._currentPreviewObjectData = '';\n\n      if (this._roomEngine.addFurnitureFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, classId, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), direction, 0, objectData, NaN, -1, 0, -1, '', true, false)) {\n        this._previousAutomaticStateChangeTime = Nitro.instance.time;\n        this._automaticStateChange = true;\n\n        const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\n\n        if (roomObject && extra) roomObject.model.setValue(RoomObjectVariable.FURNITURE_EXTRAS, extra);\n        this.updatePreviewRoomView();\n        return RoomPreviewer.PREVIEW_OBJECT_ID;\n      }\n    }\n\n    return -1;\n  }\n\n  addWallItemIntoRoom(classId, direction, objectData) {\n    if (this.isRoomEngineReady) {\n      if (this._currentPreviewObjectCategory === RoomObjectCategory.WALL && this._currentPreviewObjectType === classId && this._currentPreviewObjectData === objectData) return RoomPreviewer.PREVIEW_OBJECT_ID;\n      this.reset(false);\n      this._currentPreviewObjectType = classId;\n      this._currentPreviewObjectCategory = RoomObjectCategory.WALL;\n      this._currentPreviewObjectData = objectData;\n\n      if (this._roomEngine.addFurnitureWall(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, classId, new Vector3d(0.5, 2.3, 1.8), direction, 0, objectData, 0, 0, -1, '', false)) {\n        this._previousAutomaticStateChangeTime = Nitro.instance.time;\n        this._automaticStateChange = true;\n        this.updatePreviewRoomView();\n        return RoomPreviewer.PREVIEW_OBJECT_ID;\n      }\n    }\n\n    return -1;\n  }\n\n  addAvatarIntoRoom(figure, effect) {\n    if (this.isRoomEngineReady) {\n      this.reset(false);\n      this._currentPreviewObjectType = 1;\n      this._currentPreviewObjectCategory = RoomObjectCategory.UNIT;\n      this._currentPreviewObjectData = figure;\n\n      if (this._roomEngine.addRoomObjectUser(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), new Vector3d(90, 0, 0), 135, RoomObjectUserType.getTypeNumber(RoomObjectUserType.USER), figure)) {\n        this._previousAutomaticStateChangeTime = Nitro.instance.time;\n        this._automaticStateChange = true;\n        this.updateUserGesture(1);\n        this.updateUserEffect(effect);\n        this.updateUserPosture('std');\n      }\n\n      this.updatePreviewRoomView();\n      return RoomPreviewer.PREVIEW_OBJECT_ID;\n    }\n\n    return -1;\n  }\n\n  addPetIntoRoom(figure) {\n    if (this.isRoomEngineReady) {\n      this.reset(false);\n      this._currentPreviewObjectType = 1;\n      this._currentPreviewObjectCategory = RoomObjectCategory.UNIT;\n      this._currentPreviewObjectData = figure;\n\n      if (this._roomEngine.addRoomObjectUser(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), new Vector3d(90, 0, 0), 90, RoomObjectUserType.getTypeNumber(RoomObjectUserType.PET), figure)) {\n        this._previousAutomaticStateChangeTime = Nitro.instance.time;\n        this._automaticStateChange = false;\n        this.updateUserGesture(1);\n        this.updateUserPosture('std');\n      }\n\n      this.updatePreviewRoomView();\n      return RoomPreviewer.PREVIEW_OBJECT_ID;\n    }\n\n    return -1;\n  }\n\n  updateUserPosture(type) {\n    let parameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    if (this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserPosture(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, type, parameter);\n  }\n\n  updateUserGesture(gestureId) {\n    if (this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserGesture(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, gestureId);\n  }\n\n  updateUserEffect(effectId) {\n    if (this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserEffect(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, effectId);\n  }\n\n  updateObjectUserFigure(figure) {\n    let gender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let subType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let isRiding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (this.isRoomEngineReady) return this._roomEngine.updateRoomObjectUserFigure(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, figure, gender, subType, isRiding);\n    return false;\n  }\n\n  updateObjectUserAction(action, value) {\n    let parameter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserAction(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, action, value, parameter);\n  }\n\n  updateObjectStuffData(stuffData) {\n    if (this.isRoomEngineReady) this._roomEngine.updateRoomObjectFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, null, null, stuffData.state, stuffData);\n  }\n\n  changeRoomObjectState() {\n    if (this.isRoomEngineReady) {\n      this._automaticStateChange = false;\n      if (this._currentPreviewObjectCategory !== RoomObjectCategory.UNIT) this._roomEngine.changeObjectState(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\n    }\n  }\n\n  changeRoomObjectDirection() {\n    if (this.isRoomEngineReady) {\n      const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\n\n      if (!roomObject) return;\n\n      const direction = this._roomEngine.objectEventHandler.getValidRoomObjectDirection(roomObject, true);\n\n      switch (this._currentPreviewObjectCategory) {\n        case RoomObjectCategory.FLOOR:\n          {\n            const floorLocation = new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y);\n            const floorDirection = new Vector3d(direction, direction, direction);\n\n            this._roomEngine.updateRoomObjectFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, floorLocation, floorDirection, null, null);\n\n            return;\n          }\n\n        case RoomObjectCategory.WALL:\n          //this._roomEngine.updateRoomObjectWall(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, null, direction, null, null);\n          return;\n      }\n    }\n  }\n\n  checkAutomaticRoomObjectStateChange() {\n    if (this._automaticStateChange) {\n      const time = Nitro.instance.time;\n\n      if (time > this._previousAutomaticStateChangeTime + RoomPreviewer.AUTOMATIC_STATE_CHANGE_INTERVAL) {\n        this._previousAutomaticStateChangeTime = time;\n        if (this.isRoomEngineReady) this._roomEngine.changeObjectState(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\n      }\n    }\n  }\n\n  getRoomCanvas(width, height) {\n    if (this.isRoomEngineReady) {\n      const displayObject = this._roomEngine.getRoomInstanceDisplay(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, width, height, this._currentPreviewScale);\n\n      if (displayObject && this._backgroundColor !== null) {\n        let backgroundSprite = this._backgroundSprite;\n\n        if (!backgroundSprite) {\n          backgroundSprite = new NitroSprite(Texture.WHITE);\n          displayObject.addChildAt(backgroundSprite, 0);\n        }\n\n        backgroundSprite.width = width;\n        backgroundSprite.height = height;\n        backgroundSprite.tint = this._backgroundColor;\n      }\n\n      this._roomEngine.setRoomInstanceRenderingCanvasMask(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, true);\n\n      const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\n\n      if (geometry) geometry.adjustLocation(new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), 30);\n      this._currentPreviewCanvasWidth = width;\n      this._currentPreviewCanvasHeight = height;\n      return displayObject;\n    }\n\n    return null;\n  }\n\n  modifyRoomCanvas(width, height) {\n    if (this.isRoomEngineReady) {\n      this._currentPreviewCanvasWidth = width;\n      this._currentPreviewCanvasHeight = height;\n\n      if (this._backgroundSprite) {\n        this._backgroundSprite.width = width;\n        this._backgroundSprite.height = height;\n      }\n\n      this._roomEngine.initializeRoomInstanceRenderingCanvas(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, width, height);\n    }\n  }\n\n  set addViewOffset(point) {\n    this._addViewOffset = point;\n  }\n\n  get addViewOffset() {\n    return this._addViewOffset;\n  }\n\n  updatePreviewObjectBoundingRectangle(point) {\n    const objectBounds = this._roomEngine.getRoomObjectBoundingRectangle(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, RoomPreviewer.PREVIEW_CANVAS_ID);\n\n    if (objectBounds && point) {\n      objectBounds.x += -(this._currentPreviewCanvasWidth >> 1);\n      objectBounds.y += -(this._currentPreviewCanvasHeight >> 1);\n      objectBounds.x += -point.x;\n      objectBounds.y += -point.y;\n\n      if (!this._currentPreviewRectangle) {\n        this._currentPreviewRectangle = objectBounds;\n      } else {\n        const bounds = this._currentPreviewRectangle.clone().enlarge(objectBounds);\n\n        if (bounds.width - this._currentPreviewRectangle.width > this._currentPreviewCanvasWidth - this._currentPreviewRectangle.width >> 1 || bounds.height - this._currentPreviewRectangle.height > this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height >> 1 || this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1) this._currentPreviewRectangle = bounds;\n      }\n    }\n  }\n\n  validatePreviewSize(point) {\n    if (this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1) {\n      return point;\n    }\n\n    if (this.isRoomEngineReady) {\n      const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\n\n      if (this._currentPreviewRectangle.width > this._currentPreviewCanvasWidth * (1 + RoomPreviewer.ALLOWED_IMAGE_CUT) || this._currentPreviewRectangle.height > this._currentPreviewCanvasHeight * (1 + RoomPreviewer.ALLOWED_IMAGE_CUT)) {\n        if (RoomPreviewer.ZOOM_ENABLED) {\n          if (this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID) !== 0.5) {\n            this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 0.5, null, null);\n\n            this._currentPreviewScale = RoomPreviewer.SCALE_SMALL;\n            this._currentPreviewNeedsZoomOut = true;\n            point.x = point.x >> 1;\n            point.y = point.y >> 1;\n            this._currentPreviewRectangle.x = this._currentPreviewRectangle.x >> 2;\n            this._currentPreviewRectangle.y = this._currentPreviewRectangle.y >> 2;\n            this._currentPreviewRectangle.width = this._currentPreviewRectangle.width >> 2;\n            this._currentPreviewRectangle.height = this._currentPreviewRectangle.height >> 2;\n          }\n        } else {\n          if (geometry.isZoomedIn()) {\n            geometry.performZoomOut();\n            this._currentPreviewScale = RoomPreviewer.SCALE_SMALL;\n            this._currentPreviewNeedsZoomOut = true;\n          }\n        }\n      } else if (!this._currentPreviewNeedsZoomOut) {\n        if (RoomPreviewer.ZOOM_ENABLED) {\n          if (this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID) !== 1) {\n            this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 1, null, null);\n\n            this._currentPreviewScale = RoomPreviewer.SCALE_NORMAL;\n          }\n        } else {\n          if (!geometry.isZoomedIn()) {\n            geometry.performZoomIn();\n            this._currentPreviewScale = RoomPreviewer.SCALE_NORMAL;\n          }\n        }\n      }\n    }\n\n    return point;\n  }\n\n  zoomIn() {\n    if (this.isRoomEngineReady) {\n      if (RoomPreviewer.ZOOM_ENABLED) {\n        this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 1);\n      } else {\n        const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\n\n        geometry.performZoomIn();\n      }\n    }\n\n    this._currentPreviewScale = RoomPreviewer.SCALE_NORMAL;\n  }\n\n  zoomOut() {\n    if (this.isRoomEngineReady) {\n      if (RoomPreviewer.ZOOM_ENABLED) {\n        this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 0.5);\n      } else {\n        const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\n\n        geometry.performZoomOut();\n      }\n    }\n\n    this._currentPreviewScale = RoomPreviewer.SCALE_SMALL;\n  }\n\n  updateAvatarDirection(direction, headDirection) {\n    if (this.isRoomEngineReady) {\n      this._roomEngine.updateRoomObjectUserLocation(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), false, 0, new Vector3d(direction * 45, 0, 0), headDirection * 45);\n    }\n  }\n\n  updateObjectRoom() {\n    let floorType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let wallType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let landscapeType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    let _arg_4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    if (this.isRoomEngineReady) return this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, floorType, wallType, landscapeType, _arg_4);\n    return false;\n  }\n\n  updateRoomWallsAndFloorVisibility(wallsVisible) {\n    let floorsVisible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (this.isRoomEngineReady) this._roomEngine.updateRoomInstancePlaneVisibility(this._previewRoomId, wallsVisible, floorsVisible);\n  }\n\n  getCanvasOffset(point) {\n    if (this._currentPreviewRectangle.width < 1 || this._currentPreviewRectangle.height < 1) return point;\n    let x = -(this._currentPreviewRectangle.left + this._currentPreviewRectangle.right) >> 1;\n    let y = -(this._currentPreviewRectangle.top + this._currentPreviewRectangle.bottom) >> 1;\n    const height = this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height >> 1;\n\n    if (height > 10) {\n      y = y + Math.min(15, height - 10);\n    } else {\n      if (this._currentPreviewObjectCategory !== RoomObjectCategory.UNIT) {\n        y = y + (5 - Math.max(0, height / 2));\n      } else {\n        y = y - (5 - Math.min(0, height / 2));\n      }\n    }\n\n    y = y + this._addViewOffset.y;\n    x = x + this._addViewOffset.x;\n    const offsetX = x - point.x;\n    const offsetY = y - point.y;\n\n    if (offsetX !== 0 || offsetY !== 0) {\n      const _local_7 = Math.sqrt(offsetX * offsetX + offsetY * offsetY);\n\n      if (_local_7 > 10) {\n        x = point.x + offsetX * 10 / _local_7;\n        y = point.y + offsetY * 10 / _local_7;\n      }\n\n      return new Point(x, y);\n    }\n\n    return null;\n  }\n\n  updatePreviewRoomView() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this._disableUpdate && !k) return;\n    this.checkAutomaticRoomObjectStateChange();\n\n    if (this.isRoomEngineReady) {\n      let offset = this._roomEngine.getRoomInstanceRenderingCanvasOffset(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\n\n      if (offset) {\n        this.updatePreviewObjectBoundingRectangle(offset);\n\n        if (this._currentPreviewRectangle) {\n          const scale = this._currentPreviewScale;\n          offset = this.validatePreviewSize(offset);\n          const canvasOffset = this.getCanvasOffset(offset);\n\n          if (canvasOffset) {\n            this._roomEngine.setRoomInstanceRenderingCanvasOffset(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, canvasOffset);\n          }\n\n          if (this._currentPreviewScale !== scale) this._currentPreviewRectangle = null;\n        }\n      }\n    }\n  }\n\n  set disableUpdate(flag) {\n    this._disableUpdate = flag;\n  }\n\n  set disableRoomEngineUpdate(flag) {\n    if (this.isRoomEngineReady) this._roomEngine.disableUpdate(flag);\n  }\n\n  onRoomInitializedonRoomInitialized(event) {\n    if (!event) return;\n\n    switch (event.type) {\n      case RoomEngineEvent.INITIALIZED:\n        if (event.roomId === this._previewRoomId && this.isRoomEngineReady) {\n          this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, '110', '99999');\n        }\n\n        return;\n    }\n  }\n\n  onRoomObjectAdded(event) {\n    if (event.roomId === this._previewRoomId && event.objectId === RoomPreviewer.PREVIEW_OBJECT_ID && event.category === this._currentPreviewObjectCategory) {\n      this._currentPreviewRectangle = null;\n      this._currentPreviewNeedsZoomOut = false;\n\n      const roomObject = this._roomEngine.getRoomObject(event.roomId, event.objectId, event.category);\n\n      if (roomObject && roomObject.model && event.category === RoomObjectCategory.WALL) {\n        const sizeZ = roomObject.model.getValue(RoomObjectVariable.FURNITURE_SIZE_Z);\n        const centerZ = roomObject.model.getValue(RoomObjectVariable.FURNITURE_CENTER_Z);\n\n        if (sizeZ !== null || centerZ !== null) {\n          this._roomEngine.updateRoomObjectWallLocation(event.roomId, event.objectId, new Vector3d(0.5, 2.3, (3.6 - sizeZ) / 2 + centerZ));\n        }\n      }\n    }\n  }\n\n  updateRoomEngine() {\n    if (this.isRoomEngineReady) this._roomEngine.runUpdate();\n  }\n\n  getRenderingCanvas() {\n    const renderingCanvas = this._roomEngine.getRoomInstanceRenderingCanvas(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\n\n    if (!renderingCanvas) return null;\n    return renderingCanvas;\n  }\n\n  getGenericRoomObjectImage(type, value, direction, scale, listener) {\n    let bgColor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let extras = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    let objectData = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    let state = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : -1;\n    let frame = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : -1;\n    let posture = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;\n\n    if (this.isRoomEngineReady) {\n      return this._roomEngine.getGenericRoomObjectImage(type, value, direction, scale, listener, bgColor, extras, objectData, state, frame, posture);\n    }\n\n    return null;\n  }\n\n  getRoomObjectImage(direction, scale, listener) {\n    let bgColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (this.isRoomEngineReady) {\n      return this._roomEngine.getRoomObjectImage(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, direction, scale, listener, bgColor);\n    }\n\n    return null;\n  }\n\n  getRoomObjectCurrentImage() {\n    if (this.isRoomEngineReady) {\n      const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\n\n      if (roomObject && roomObject.visualization) return roomObject.visualization.getImage(0xFFFFFF, -1);\n    }\n\n    return null;\n  }\n\n  getRoomPreviewObject() {\n    if (this.isRoomEngineReady) {\n      const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\n\n      if (roomObject) return roomObject;\n    }\n\n    return null;\n  }\n\n  getRoomPreviewOwnRoomObject() {\n    if (this.isRoomEngineReady) {\n      const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM);\n\n      if (roomObject) return roomObject;\n    }\n\n    return null;\n  }\n\n  get isRoomEngineReady() {\n    return this._roomEngine && this._roomEngine.ready;\n  }\n\n  get roomId() {\n    return this._previewRoomId;\n  }\n\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(color) {\n    this._backgroundColor = color;\n  }\n\n  get width() {\n    return this._currentPreviewCanvasWidth;\n  }\n\n  get height() {\n    return this._currentPreviewCanvasHeight;\n  }\n\n}\nRoomPreviewer.SCALE_NORMAL = 64;\nRoomPreviewer.SCALE_SMALL = 32;\nRoomPreviewer.PREVIEW_COUNTER = 0;\nRoomPreviewer.PREVIEW_CANVAS_ID = 1;\nRoomPreviewer.PREVIEW_OBJECT_ID = 1;\nRoomPreviewer.PREVIEW_OBJECT_LOCATION_X = 2;\nRoomPreviewer.PREVIEW_OBJECT_LOCATION_Y = 2;\nRoomPreviewer.ALLOWED_IMAGE_CUT = 0.25;\nRoomPreviewer.AUTOMATIC_STATE_CHANGE_INTERVAL = 2500;\nRoomPreviewer.ZOOM_ENABLED = true;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/preview/RoomPreviewer.ts"],"names":["Texture","Point","NitroSprite","RoomId","Vector3d","FloorHeightMapMessageParser","Nitro","RoomEngineEvent","RoomEngineObjectEvent","ObjectRoomMapUpdateMessage","LegacyDataType","RoomObjectCategory","RoomObjectUserType","RoomObjectVariable","RoomPlaneParser","RoomEngine","LegacyWallGeometry","RoomPreviewer","constructor","roomEngine","roomId","_roomEngine","_planeParser","_previewRoomId","_currentPreviewObjectType","_currentPreviewObjectCategory","_currentPreviewObjectData","_currentPreviewRectangle","_currentPreviewCanvasWidth","_currentPreviewCanvasHeight","_currentPreviewScale","_currentPreviewNeedsZoomOut","_automaticStateChange","_previousAutomaticStateChangeTime","_addViewOffset","_backgroundColor","_backgroundSprite","_disableUpdate","makeRoomPreviewerId","onRoomObjectAdded","bind","onRoomInitializedonRoomInitialized","isRoomEngineReady","events","addEventListener","ADDED","CONTENT_UPDATED","INITIALIZED","createRoomForPreview","dispose","reset","removeEventListener","destroy","size","planeParser","initializeTileMap","y","x","setTileHeight","initializeFromTileData","createRoomInstance","getMapData","k","removeRoomObjectFloor","PREVIEW_OBJECT_ID","removeRoomObjectWall","removeRoomObjectUser","updatePreviewRoomView","MINIMUM","updatePreviewModel","model","wallHeight","scale","parser","flush","parseModel","wallGeometry","getLegacyWallGeometry","width","height","entryTile","doorX","doorY","doorZ","doorDirection","tileHeight","getHeight","TILE_BLOCKED","Math","floor","DEFAULT_SCALE","initialize","floorHeight","heightIterator","widthIterator","setHeight","getTileHeight","roomMap","doors","push","z","dir","roomObject","getRoomPreviewOwnRoomObject","processUpdateMessage","addFurnitureIntoRoom","classId","direction","objectData","extra","FLOOR","addFurnitureFloor","PREVIEW_OBJECT_LOCATION_X","PREVIEW_OBJECT_LOCATION_Y","NaN","instance","time","getRoomObject","setValue","FURNITURE_EXTRAS","addWallItemIntoRoom","WALL","addFurnitureWall","addAvatarIntoRoom","figure","effect","UNIT","addRoomObjectUser","getTypeNumber","USER","updateUserGesture","updateUserEffect","updateUserPosture","addPetIntoRoom","PET","type","parameter","updateRoomObjectUserPosture","gestureId","updateRoomObjectUserGesture","effectId","updateRoomObjectUserEffect","updateObjectUserFigure","gender","subType","isRiding","updateRoomObjectUserFigure","updateObjectUserAction","action","value","updateRoomObjectUserAction","updateObjectStuffData","stuffData","updateRoomObjectFloor","state","changeRoomObjectState","changeObjectState","changeRoomObjectDirection","objectEventHandler","getValidRoomObjectDirection","floorLocation","floorDirection","checkAutomaticRoomObjectStateChange","AUTOMATIC_STATE_CHANGE_INTERVAL","getRoomCanvas","displayObject","getRoomInstanceDisplay","PREVIEW_CANVAS_ID","backgroundSprite","WHITE","addChildAt","tint","setRoomInstanceRenderingCanvasMask","geometry","getRoomInstanceGeometry","adjustLocation","modifyRoomCanvas","initializeRoomInstanceRenderingCanvas","addViewOffset","point","updatePreviewObjectBoundingRectangle","objectBounds","getRoomObjectBoundingRectangle","bounds","clone","enlarge","validatePreviewSize","ALLOWED_IMAGE_CUT","ZOOM_ENABLED","getRoomInstanceRenderingCanvasScale","setRoomInstanceRenderingCanvasScale","SCALE_SMALL","isZoomedIn","performZoomOut","SCALE_NORMAL","performZoomIn","zoomIn","zoomOut","updateAvatarDirection","headDirection","updateRoomObjectUserLocation","updateObjectRoom","floorType","wallType","landscapeType","_arg_4","updateRoomInstancePlaneType","updateRoomWallsAndFloorVisibility","wallsVisible","floorsVisible","updateRoomInstancePlaneVisibility","getCanvasOffset","left","right","top","bottom","min","max","offsetX","offsetY","_local_7","sqrt","offset","getRoomInstanceRenderingCanvasOffset","canvasOffset","setRoomInstanceRenderingCanvasOffset","disableUpdate","flag","disableRoomEngineUpdate","event","objectId","category","sizeZ","getValue","FURNITURE_SIZE_Z","centerZ","FURNITURE_CENTER_Z","updateRoomObjectWallLocation","updateRoomEngine","runUpdate","getRenderingCanvas","renderingCanvas","getRoomInstanceRenderingCanvas","getGenericRoomObjectImage","listener","bgColor","extras","frame","posture","getRoomObjectImage","getRoomObjectCurrentImage","visualization","getImage","getRoomPreviewObject","ROOM_OBJECT_ID","ROOM","ready","backgroundColor","color","PREVIEW_COUNTER"],"mappings":"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","sourcesContent":["import { RenderTexture, Texture } from '@pixi/core';\r\nimport { Container, DisplayObject } from '@pixi/display';\r\nimport { Point, Rectangle } from '@pixi/math';\r\nimport { Sprite } from '@pixi/sprite';\r\nimport { NitroSprite } from '../../../core';\r\nimport { IRoomObjectController } from '../../../room/object/IRoomObjectController';\r\nimport { IRoomRenderingCanvas } from '../../../room/renderer/IRoomRenderingCanvas';\r\nimport { IVector3D } from '../../../room/utils/IVector3D';\r\nimport { RoomId } from '../../../room/utils/RoomId';\r\nimport { Vector3d } from '../../../room/utils/Vector3d';\r\nimport { FloorHeightMapMessageParser } from '../../communication/messages/parser/room/mapping/FloorHeightMapMessageParser';\r\nimport { RoomEntryTileMessageParser } from '../../communication/messages/parser/room/mapping/RoomEntryTileMessageParser';\r\nimport { Nitro } from '../../Nitro';\r\nimport { RoomEngineEvent } from '../events/RoomEngineEvent';\r\nimport { RoomEngineObjectEvent } from '../events/RoomEngineObjectEvent';\r\nimport { IGetImageListener } from '../IGetImageListener';\r\nimport { ImageResult } from '../ImageResult';\r\nimport { IRoomCreator } from '../IRoomCreator';\r\nimport { IRoomEngine } from '../IRoomEngine';\r\nimport { ObjectRoomMapUpdateMessage } from '../messages/ObjectRoomMapUpdateMessage';\r\nimport { IObjectData } from '../object/data/IObjectData';\r\nimport { LegacyDataType } from '../object/data/type/LegacyDataType';\r\nimport { RoomObjectCategory } from '../object/RoomObjectCategory';\r\nimport { RoomObjectUserType } from '../object/RoomObjectUserType';\r\nimport { RoomObjectVariable } from '../object/RoomObjectVariable';\r\nimport { RoomPlaneParser } from '../object/RoomPlaneParser';\r\nimport { RoomEngine } from '../RoomEngine';\r\nimport { LegacyWallGeometry } from '../utils/LegacyWallGeometry';\r\n\r\nexport class RoomPreviewer\r\n{\r\n    public static SCALE_NORMAL: number = 64;\r\n    public static SCALE_SMALL: number = 32;\r\n    public static PREVIEW_COUNTER: number = 0;\r\n    public static PREVIEW_CANVAS_ID: number = 1;\r\n    public static PREVIEW_OBJECT_ID: number = 1;\r\n    public static PREVIEW_OBJECT_LOCATION_X: number = 2;\r\n    public static PREVIEW_OBJECT_LOCATION_Y: number = 2;\r\n\r\n    private static ALLOWED_IMAGE_CUT: number = 0.25;\r\n    private static AUTOMATIC_STATE_CHANGE_INTERVAL: number = 2500;\r\n    private static ZOOM_ENABLED: boolean = true;\r\n\r\n    private _roomEngine: IRoomEngine;\r\n    private _planeParser: RoomPlaneParser;\r\n    private _previewRoomId: number = 1;\r\n    private _currentPreviewObjectType: number = 0;\r\n    private _currentPreviewObjectCategory: number = 0;\r\n    private _currentPreviewObjectData: string = '';\r\n    private _currentPreviewRectangle: Rectangle = null;\r\n    private _currentPreviewCanvasWidth: number = 0;\r\n    private _currentPreviewCanvasHeight: number = 0;\r\n    private _currentPreviewScale: number = 64;\r\n    private _currentPreviewNeedsZoomOut: boolean;\r\n    private _automaticStateChange: boolean;\r\n    private _previousAutomaticStateChangeTime: number;\r\n    private _addViewOffset: Point;\r\n    private _backgroundColor: number = 305148561;\r\n    private _backgroundSprite: Sprite = null;\r\n    private _disableUpdate: boolean = false;\r\n\r\n    constructor(roomEngine: IRoomEngine, roomId: number = 1)\r\n    {\r\n        this._roomEngine = roomEngine;\r\n        this._planeParser = new RoomPlaneParser();\r\n        this._previewRoomId = RoomId.makeRoomPreviewerId(roomId);\r\n        this._addViewOffset = new Point(0, 0);\r\n\r\n        this.onRoomObjectAdded = this.onRoomObjectAdded.bind(this);\r\n        this.onRoomInitializedonRoomInitialized = this.onRoomInitializedonRoomInitialized.bind(this);\r\n\r\n        if(this.isRoomEngineReady && this._roomEngine.events)\r\n        {\r\n            this._roomEngine.events.addEventListener(RoomEngineObjectEvent.ADDED, this.onRoomObjectAdded);\r\n            this._roomEngine.events.addEventListener(RoomEngineObjectEvent.CONTENT_UPDATED, this.onRoomObjectAdded);\r\n            this._roomEngine.events.addEventListener(RoomEngineEvent.INITIALIZED, this.onRoomInitializedonRoomInitialized);\r\n        }\r\n\r\n        this.createRoomForPreview();\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this.reset(true);\r\n\r\n        if(this.isRoomEngineReady && this._roomEngine.events)\r\n        {\r\n            this._roomEngine.events.removeEventListener(RoomEngineObjectEvent.ADDED, this.onRoomObjectAdded);\r\n            this._roomEngine.events.removeEventListener(RoomEngineObjectEvent.CONTENT_UPDATED, this.onRoomObjectAdded);\r\n            this._roomEngine.events.removeEventListener(RoomEngineEvent.INITIALIZED, this.onRoomInitializedonRoomInitialized);\r\n        }\r\n\r\n        if(this._backgroundSprite)\r\n        {\r\n            this._backgroundSprite.destroy();\r\n\r\n            this._backgroundSprite = null;\r\n        }\r\n\r\n        if(this._planeParser)\r\n        {\r\n            this._planeParser.dispose();\r\n\r\n            this._planeParser = null;\r\n        }\r\n    }\r\n\r\n    private createRoomForPreview(): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            const size = 7;\r\n\r\n            const planeParser = new RoomPlaneParser();\r\n\r\n            planeParser.initializeTileMap((size + 2), (size + 2));\r\n\r\n            let y = 1;\r\n\r\n            while(y < (1 + size))\r\n            {\r\n                let x = 1;\r\n\r\n                while(x < (1 + size))\r\n                {\r\n                    planeParser.setTileHeight(x, y, 0);\r\n\r\n                    x++;\r\n                }\r\n\r\n                y++;\r\n            }\r\n\r\n            planeParser.initializeFromTileData();\r\n\r\n            this._roomEngine.createRoomInstance(this._previewRoomId, planeParser.getMapData());\r\n\r\n            planeParser.dispose();\r\n        }\r\n    }\r\n\r\n    public reset(k: boolean): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            this._roomEngine.removeRoomObjectFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID);\r\n            this._roomEngine.removeRoomObjectWall(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID);\r\n            this._roomEngine.removeRoomObjectUser(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID);\r\n\r\n            if(!k) this.updatePreviewRoomView();\r\n        }\r\n\r\n        this._currentPreviewObjectCategory = RoomObjectCategory.MINIMUM;\r\n    }\r\n\r\n    public updatePreviewModel(model: string, wallHeight: number, scale: boolean = true): void\r\n    {\r\n        const parser = new FloorHeightMapMessageParser();\r\n\r\n        parser.flush();\r\n        parser.parseModel(model, wallHeight, scale);\r\n\r\n        //@ts-ignore\r\n        const wallGeometry = (this._roomEngine as IRoomCreator).getLegacyWallGeometry(this._previewRoomId);\r\n\r\n        if(!wallGeometry) return;\r\n\r\n        this._planeParser.reset();\r\n\r\n        const width = parser.width;\r\n        const height = parser.height;\r\n\r\n        this._planeParser.initializeTileMap(width, height);\r\n\r\n        const entryTile: RoomEntryTileMessageParser = null;\r\n\r\n        let doorX = -1;\r\n        let doorY = -1;\r\n        let doorZ = 0;\r\n        let doorDirection = 0;\r\n\r\n        let y = 0;\r\n\r\n        while(y < height)\r\n        {\r\n            let x = 0;\r\n\r\n            while(x < width)\r\n            {\r\n                const tileHeight = parser.getHeight(x, y);\r\n\r\n                if(((((y > 0) && (y < (height - 1))) || ((x > 0) && (x < (width - 1)))) && (!(tileHeight == RoomPlaneParser.TILE_BLOCKED))) && ((entryTile == null) || ((x == entryTile.x) && (y == entryTile.y))))\r\n                {\r\n                    if(((parser.getHeight(x, (y - 1)) == RoomPlaneParser.TILE_BLOCKED) && (parser.getHeight((x - 1), y) == RoomPlaneParser.TILE_BLOCKED)) && (parser.getHeight(x, (y + 1)) == RoomPlaneParser.TILE_BLOCKED))\r\n                    {\r\n                        doorX = (x + 0.5);\r\n                        doorY = y;\r\n                        doorZ = tileHeight;\r\n                        doorDirection = 90;\r\n                    }\r\n\r\n                    if(((parser.getHeight(x, (y - 1)) == RoomPlaneParser.TILE_BLOCKED) && (parser.getHeight((x - 1), y) == RoomPlaneParser.TILE_BLOCKED)) && (parser.getHeight((x + 1), y) == RoomPlaneParser.TILE_BLOCKED))\r\n                    {\r\n                        doorX = x;\r\n                        doorY = (y + 0.5);\r\n                        doorZ = tileHeight;\r\n                        doorDirection = 180;\r\n                    }\r\n                }\r\n\r\n                this._planeParser.setTileHeight(x, y, tileHeight);\r\n\r\n                x++;\r\n            }\r\n\r\n            y++;\r\n        }\r\n\r\n        this._planeParser.setTileHeight(Math.floor(doorX), Math.floor(doorY), doorZ);\r\n        this._planeParser.initializeFromTileData(parser.wallHeight);\r\n        this._planeParser.setTileHeight(Math.floor(doorX), Math.floor(doorY), (doorZ + this._planeParser.wallHeight));\r\n\r\n        wallGeometry.scale = LegacyWallGeometry.DEFAULT_SCALE;\r\n        wallGeometry.initialize(width, height, this._planeParser.floorHeight);\r\n\r\n        let heightIterator = (parser.height - 1);\r\n\r\n        while(heightIterator >= 0)\r\n        {\r\n            let widthIterator = (parser.width - 1);\r\n\r\n            while(widthIterator >= 0)\r\n            {\r\n                wallGeometry.setHeight(widthIterator, heightIterator, this._planeParser.getTileHeight(widthIterator, heightIterator));\r\n                widthIterator--;\r\n            }\r\n\r\n            heightIterator--;\r\n        }\r\n\r\n        const roomMap = this._planeParser.getMapData();\r\n\r\n        roomMap.doors.push({\r\n            x: doorX,\r\n            y: doorY,\r\n            z: doorZ,\r\n            dir: doorDirection\r\n        });\r\n\r\n        const roomObject = this.getRoomPreviewOwnRoomObject();\r\n\r\n        if(roomObject) roomObject.processUpdateMessage(new ObjectRoomMapUpdateMessage(roomMap));\r\n    }\r\n\r\n    public addFurnitureIntoRoom(classId: number, direction: IVector3D, objectData: IObjectData = null, extra: string = null): number\r\n    {\r\n        if(!objectData) objectData = new LegacyDataType();\r\n\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            this.reset(false);\r\n\r\n            this._currentPreviewObjectType = classId;\r\n            this._currentPreviewObjectCategory = RoomObjectCategory.FLOOR;\r\n            this._currentPreviewObjectData = '';\r\n\r\n            if(this._roomEngine.addFurnitureFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, classId, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), direction, 0, objectData, NaN, -1, 0, -1, '', true, false))\r\n            {\r\n                this._previousAutomaticStateChangeTime = Nitro.instance.time;\r\n                this._automaticStateChange = true;\r\n\r\n                const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\r\n\r\n                if(roomObject && extra) roomObject.model.setValue(RoomObjectVariable.FURNITURE_EXTRAS, extra);\r\n\r\n                this.updatePreviewRoomView();\r\n\r\n                return RoomPreviewer.PREVIEW_OBJECT_ID;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public addWallItemIntoRoom(classId: number, direction: IVector3D, objectData: string): number\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            if((this._currentPreviewObjectCategory === RoomObjectCategory.WALL) && (this._currentPreviewObjectType === classId) && (this._currentPreviewObjectData === objectData)) return RoomPreviewer.PREVIEW_OBJECT_ID;\r\n\r\n            this.reset(false);\r\n\r\n            this._currentPreviewObjectType = classId;\r\n            this._currentPreviewObjectCategory = RoomObjectCategory.WALL;\r\n            this._currentPreviewObjectData = objectData;\r\n\r\n            if(this._roomEngine.addFurnitureWall(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, classId, new Vector3d(0.5, 2.3, 1.8), direction, 0, objectData, 0, 0, -1, '', false))\r\n            {\r\n                this._previousAutomaticStateChangeTime = Nitro.instance.time;\r\n                this._automaticStateChange = true;\r\n\r\n                this.updatePreviewRoomView();\r\n\r\n                return RoomPreviewer.PREVIEW_OBJECT_ID;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public addAvatarIntoRoom(figure: string, effect: number): number\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            this.reset(false);\r\n\r\n            this._currentPreviewObjectType = 1;\r\n            this._currentPreviewObjectCategory = RoomObjectCategory.UNIT;\r\n            this._currentPreviewObjectData = figure;\r\n\r\n            if(this._roomEngine.addRoomObjectUser(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), new Vector3d(90, 0, 0), 135, RoomObjectUserType.getTypeNumber(RoomObjectUserType.USER), figure))\r\n            {\r\n                this._previousAutomaticStateChangeTime = Nitro.instance.time;\r\n                this._automaticStateChange = true;\r\n\r\n                this.updateUserGesture(1);\r\n                this.updateUserEffect(effect);\r\n                this.updateUserPosture('std');\r\n            }\r\n\r\n            this.updatePreviewRoomView();\r\n\r\n            return RoomPreviewer.PREVIEW_OBJECT_ID;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public addPetIntoRoom(figure: string): number\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            this.reset(false);\r\n\r\n            this._currentPreviewObjectType = 1;\r\n            this._currentPreviewObjectCategory = RoomObjectCategory.UNIT;\r\n            this._currentPreviewObjectData = figure;\r\n\r\n            if(this._roomEngine.addRoomObjectUser(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), new Vector3d(90, 0, 0), 90, RoomObjectUserType.getTypeNumber(RoomObjectUserType.PET), figure))\r\n            {\r\n                this._previousAutomaticStateChangeTime = Nitro.instance.time;\r\n                this._automaticStateChange = false;\r\n\r\n                this.updateUserGesture(1);\r\n                this.updateUserPosture('std');\r\n            }\r\n\r\n            this.updatePreviewRoomView();\r\n\r\n            return RoomPreviewer.PREVIEW_OBJECT_ID;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public updateUserPosture(type: string, parameter: string = ''): void\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserPosture(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, type, parameter);\r\n    }\r\n\r\n    public updateUserGesture(gestureId: number): void\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserGesture(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, gestureId);\r\n    }\r\n\r\n    public updateUserEffect(effectId: number): void\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserEffect(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, effectId);\r\n    }\r\n\r\n    public updateObjectUserFigure(figure: string, gender: string = null, subType: string = null, isRiding: boolean = false): boolean\r\n    {\r\n        if(this.isRoomEngineReady) return this._roomEngine.updateRoomObjectUserFigure(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, figure, gender, subType, isRiding);\r\n\r\n        return false;\r\n    }\r\n\r\n    public updateObjectUserAction(action: string, value: number, parameter: string = null): void\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.updateRoomObjectUserAction(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, action, value, parameter);\r\n    }\r\n\r\n    public updateObjectStuffData(stuffData: IObjectData): void\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.updateRoomObjectFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, null, null, stuffData.state, stuffData);\r\n    }\r\n\r\n    public changeRoomObjectState(): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            this._automaticStateChange = false;\r\n\r\n            if(this._currentPreviewObjectCategory !== RoomObjectCategory.UNIT) this._roomEngine.changeObjectState(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\r\n        }\r\n    }\r\n\r\n    public changeRoomObjectDirection(): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\r\n\r\n            if(!roomObject) return;\r\n\r\n            const direction = this._roomEngine.objectEventHandler.getValidRoomObjectDirection(roomObject, true);\r\n\r\n            switch(this._currentPreviewObjectCategory)\r\n            {\r\n                case RoomObjectCategory.FLOOR: {\r\n                    const floorLocation = new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y);\r\n                    const floorDirection = new Vector3d(direction, direction, direction);\r\n\r\n                    this._roomEngine.updateRoomObjectFloor(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, floorLocation, floorDirection, null, null);\r\n                    return;\r\n                }\r\n                case RoomObjectCategory.WALL:\r\n                    //this._roomEngine.updateRoomObjectWall(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, null, direction, null, null);\r\n                    return;\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkAutomaticRoomObjectStateChange(): void\r\n    {\r\n        if(this._automaticStateChange)\r\n        {\r\n            const time = Nitro.instance.time;\r\n\r\n            if(time > (this._previousAutomaticStateChangeTime + RoomPreviewer.AUTOMATIC_STATE_CHANGE_INTERVAL))\r\n            {\r\n                this._previousAutomaticStateChangeTime = time;\r\n\r\n                if(this.isRoomEngineReady) this._roomEngine.changeObjectState(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getRoomCanvas(width: number, height: number): DisplayObject\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            const displayObject = (this._roomEngine.getRoomInstanceDisplay(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, width, height, this._currentPreviewScale) as Container);\r\n\r\n            if(displayObject && (this._backgroundColor !== null))\r\n            {\r\n                let backgroundSprite = this._backgroundSprite;\r\n\r\n                if(!backgroundSprite)\r\n                {\r\n                    backgroundSprite = new NitroSprite(Texture.WHITE);\r\n\r\n                    displayObject.addChildAt(backgroundSprite, 0);\r\n                }\r\n\r\n                backgroundSprite.width = width;\r\n                backgroundSprite.height = height;\r\n                backgroundSprite.tint = this._backgroundColor;\r\n            }\r\n\r\n            this._roomEngine.setRoomInstanceRenderingCanvasMask(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, true);\r\n\r\n            const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\r\n\r\n            if(geometry) geometry.adjustLocation(new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), 30);\r\n\r\n            this._currentPreviewCanvasWidth = width;\r\n            this._currentPreviewCanvasHeight = height;\r\n\r\n            return displayObject;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public modifyRoomCanvas(width: number, height: number): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            this._currentPreviewCanvasWidth = width;\r\n            this._currentPreviewCanvasHeight = height;\r\n\r\n            if(this._backgroundSprite)\r\n            {\r\n                this._backgroundSprite.width = width;\r\n                this._backgroundSprite.height = height;\r\n            }\r\n\r\n            this._roomEngine.initializeRoomInstanceRenderingCanvas(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, width, height);\r\n        }\r\n    }\r\n\r\n    public set addViewOffset(point: Point)\r\n    {\r\n        this._addViewOffset = point;\r\n    }\r\n\r\n    public get addViewOffset(): Point\r\n    {\r\n        return this._addViewOffset;\r\n    }\r\n\r\n    public updatePreviewObjectBoundingRectangle(point: Point): void\r\n    {\r\n        const objectBounds = this._roomEngine.getRoomObjectBoundingRectangle(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, RoomPreviewer.PREVIEW_CANVAS_ID);\r\n\r\n        if(objectBounds && point)\r\n        {\r\n            objectBounds.x += -(this._currentPreviewCanvasWidth >> 1);\r\n            objectBounds.y += -(this._currentPreviewCanvasHeight >> 1);\r\n\r\n            objectBounds.x += -(point.x);\r\n            objectBounds.y += -(point.y);\r\n\r\n            if(!this._currentPreviewRectangle)\r\n            {\r\n                this._currentPreviewRectangle = objectBounds;\r\n            }\r\n            else\r\n            {\r\n                const bounds = this._currentPreviewRectangle.clone().enlarge(objectBounds);\r\n\r\n                if(((((bounds.width - this._currentPreviewRectangle.width) > ((this._currentPreviewCanvasWidth - this._currentPreviewRectangle.width) >> 1)) || ((bounds.height - this._currentPreviewRectangle.height) > ((this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height) >> 1))) || (this._currentPreviewRectangle.width < 1)) || (this._currentPreviewRectangle.height < 1)) this._currentPreviewRectangle = bounds;\r\n            }\r\n        }\r\n    }\r\n\r\n    private validatePreviewSize(point: Point): Point\r\n    {\r\n        if(((this._currentPreviewRectangle.width < 1) || (this._currentPreviewRectangle.height < 1)))\r\n        {\r\n            return point;\r\n        }\r\n\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\r\n\r\n            if((this._currentPreviewRectangle.width > (this._currentPreviewCanvasWidth * (1 + RoomPreviewer.ALLOWED_IMAGE_CUT))) || (this._currentPreviewRectangle.height > (this._currentPreviewCanvasHeight * (1 + RoomPreviewer.ALLOWED_IMAGE_CUT))))\r\n            {\r\n                if(RoomPreviewer.ZOOM_ENABLED)\r\n                {\r\n                    if(this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID) !== 0.5)\r\n                    {\r\n                        this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 0.5, null, null);\r\n\r\n                        this._currentPreviewScale = RoomPreviewer.SCALE_SMALL;\r\n                        this._currentPreviewNeedsZoomOut = true;\r\n\r\n                        point.x = (point.x >> 1);\r\n                        point.y = (point.y >> 1);\r\n\r\n                        this._currentPreviewRectangle.x = (this._currentPreviewRectangle.x >> 2);\r\n                        this._currentPreviewRectangle.y = (this._currentPreviewRectangle.y >> 2);\r\n                        this._currentPreviewRectangle.width = (this._currentPreviewRectangle.width >> 2);\r\n                        this._currentPreviewRectangle.height = (this._currentPreviewRectangle.height >> 2);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if(geometry.isZoomedIn())\r\n                    {\r\n                        geometry.performZoomOut();\r\n\r\n                        this._currentPreviewScale = RoomPreviewer.SCALE_SMALL;\r\n                        this._currentPreviewNeedsZoomOut = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            else if(!this._currentPreviewNeedsZoomOut)\r\n            {\r\n                if(RoomPreviewer.ZOOM_ENABLED)\r\n                {\r\n                    if(this._roomEngine.getRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID) !== 1)\r\n                    {\r\n                        this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 1, null, null);\r\n\r\n                        this._currentPreviewScale = RoomPreviewer.SCALE_NORMAL;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if(!geometry.isZoomedIn())\r\n                    {\r\n                        geometry.performZoomIn();\r\n\r\n                        this._currentPreviewScale = RoomPreviewer.SCALE_NORMAL;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    public zoomIn(): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            if(RoomPreviewer.ZOOM_ENABLED)\r\n            {\r\n                this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 1);\r\n            }\r\n            else\r\n            {\r\n                const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\r\n\r\n                geometry.performZoomIn();\r\n            }\r\n        }\r\n\r\n        this._currentPreviewScale = RoomPreviewer.SCALE_NORMAL;\r\n    }\r\n\r\n    public zoomOut(): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            if(RoomPreviewer.ZOOM_ENABLED)\r\n            {\r\n                this._roomEngine.setRoomInstanceRenderingCanvasScale(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, 0.5);\r\n            }\r\n            else\r\n            {\r\n                const geometry = this._roomEngine.getRoomInstanceGeometry(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\r\n\r\n                geometry.performZoomOut();\r\n            }\r\n        }\r\n\r\n        this._currentPreviewScale = RoomPreviewer.SCALE_SMALL;\r\n    }\r\n\r\n    public updateAvatarDirection(direction: number, headDirection: number): void\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            this._roomEngine.updateRoomObjectUserLocation(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), new Vector3d(RoomPreviewer.PREVIEW_OBJECT_LOCATION_X, RoomPreviewer.PREVIEW_OBJECT_LOCATION_Y, 0), false, 0, new Vector3d((direction * 45), 0, 0), (headDirection * 45));\r\n        }\r\n    }\r\n\r\n    public updateObjectRoom(floorType: string = null, wallType: string = null, landscapeType: string = null, _arg_4: boolean = false): boolean\r\n    {\r\n        if(this.isRoomEngineReady) return this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, floorType, wallType, landscapeType, _arg_4);\r\n\r\n        return false;\r\n    }\r\n\r\n    public updateRoomWallsAndFloorVisibility(wallsVisible: boolean, floorsVisible: boolean = true): void\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.updateRoomInstancePlaneVisibility(this._previewRoomId, wallsVisible, floorsVisible);\r\n    }\r\n\r\n    private getCanvasOffset(point: Point): Point\r\n    {\r\n        if(((this._currentPreviewRectangle.width < 1) || (this._currentPreviewRectangle.height < 1))) return point;\r\n\r\n        let x = (-(this._currentPreviewRectangle.left + this._currentPreviewRectangle.right) >> 1);\r\n        let y = (-(this._currentPreviewRectangle.top + this._currentPreviewRectangle.bottom) >> 1);\r\n        const height = ((this._currentPreviewCanvasHeight - this._currentPreviewRectangle.height) >> 1);\r\n\r\n        if(height > 10)\r\n        {\r\n            y = (y + Math.min(15, (height - 10)));\r\n        }\r\n        else\r\n        {\r\n            if(this._currentPreviewObjectCategory !== RoomObjectCategory.UNIT)\r\n            {\r\n                y = (y + (5 - Math.max(0, (height / 2))));\r\n            }\r\n            else\r\n            {\r\n                y = (y - (5 - Math.min(0, (height / 2))));\r\n            }\r\n        }\r\n\r\n        y = (y + this._addViewOffset.y);\r\n        x = (x + this._addViewOffset.x);\r\n\r\n        const offsetX = (x - point.x);\r\n        const offsetY = (y - point.y);\r\n\r\n        if((offsetX !== 0) || (offsetY !== 0))\r\n        {\r\n            const _local_7 = Math.sqrt(((offsetX * offsetX) + (offsetY * offsetY)));\r\n\r\n            if(_local_7 > 10)\r\n            {\r\n                x = (point.x + ((offsetX * 10) / _local_7));\r\n                y = (point.y + ((offsetY * 10) / _local_7));\r\n            }\r\n\r\n            return new Point(x, y);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public updatePreviewRoomView(k: boolean = false): void\r\n    {\r\n        if(this._disableUpdate && !k) return;\r\n\r\n        this.checkAutomaticRoomObjectStateChange();\r\n\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            let offset = this._roomEngine.getRoomInstanceRenderingCanvasOffset(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\r\n\r\n            if(offset)\r\n            {\r\n                this.updatePreviewObjectBoundingRectangle(offset);\r\n\r\n                if(this._currentPreviewRectangle)\r\n                {\r\n                    const scale = this._currentPreviewScale;\r\n\r\n                    offset = this.validatePreviewSize(offset);\r\n\r\n                    const canvasOffset = this.getCanvasOffset(offset);\r\n\r\n                    if(canvasOffset)\r\n                    {\r\n                        this._roomEngine.setRoomInstanceRenderingCanvasOffset(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID, canvasOffset);\r\n                    }\r\n\r\n                    if(this._currentPreviewScale !== scale) this._currentPreviewRectangle = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public set disableUpdate(flag: boolean)\r\n    {\r\n        this._disableUpdate = flag;\r\n    }\r\n\r\n    public set disableRoomEngineUpdate(flag: boolean)\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.disableUpdate(flag);\r\n    }\r\n\r\n    private onRoomInitializedonRoomInitialized(event: RoomEngineEvent): void\r\n    {\r\n        if(!event) return;\r\n\r\n        switch(event.type)\r\n        {\r\n            case RoomEngineEvent.INITIALIZED:\r\n                if((event.roomId === this._previewRoomId) && this.isRoomEngineReady)\r\n                {\r\n                    this._roomEngine.updateRoomInstancePlaneType(this._previewRoomId, '110', '99999');\r\n                }\r\n                return;\r\n        }\r\n    }\r\n\r\n    private onRoomObjectAdded(event: RoomEngineObjectEvent): void\r\n    {\r\n        if((event.roomId === this._previewRoomId) && (event.objectId === RoomPreviewer.PREVIEW_OBJECT_ID) && (event.category === this._currentPreviewObjectCategory))\r\n        {\r\n            this._currentPreviewRectangle = null;\r\n            this._currentPreviewNeedsZoomOut = false;\r\n\r\n            const roomObject = this._roomEngine.getRoomObject(event.roomId, event.objectId, event.category);\r\n\r\n            if(roomObject && roomObject.model && (event.category === RoomObjectCategory.WALL))\r\n            {\r\n                const sizeZ = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_SIZE_Z);\r\n                const centerZ = roomObject.model.getValue<number>(RoomObjectVariable.FURNITURE_CENTER_Z);\r\n\r\n                if((sizeZ !== null) || (centerZ !== null))\r\n                {\r\n                    this._roomEngine.updateRoomObjectWallLocation(event.roomId, event.objectId, new Vector3d(0.5, 2.3, (((3.6 - sizeZ) / 2) + centerZ)));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateRoomEngine(): void\r\n    {\r\n        if(this.isRoomEngineReady) this._roomEngine.runUpdate();\r\n    }\r\n\r\n    public getRenderingCanvas(): IRoomRenderingCanvas\r\n    {\r\n        const renderingCanvas = this._roomEngine.getRoomInstanceRenderingCanvas(this._previewRoomId, RoomPreviewer.PREVIEW_CANVAS_ID);\r\n\r\n        if(!renderingCanvas) return null;\r\n\r\n        return renderingCanvas;\r\n    }\r\n\r\n    public getGenericRoomObjectImage(type: string, value: string, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor: number = 0, extras: string = null, objectData: IObjectData = null, state: number = -1, frame: number = -1, posture: string = null): ImageResult\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            return this._roomEngine.getGenericRoomObjectImage(type, value, direction, scale, listener, bgColor, extras, objectData, state, frame, posture);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getRoomObjectImage(direction: IVector3D, scale: number, listener: IGetImageListener, bgColor: number = 0): ImageResult\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            return this._roomEngine.getRoomObjectImage(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory, direction, scale, listener, bgColor);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getRoomObjectCurrentImage(): RenderTexture\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\r\n\r\n            if(roomObject && roomObject.visualization) return roomObject.visualization.getImage(0xFFFFFF, -1);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getRoomPreviewObject(): IRoomObjectController\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomPreviewer.PREVIEW_OBJECT_ID, this._currentPreviewObjectCategory);\r\n\r\n            if(roomObject) return roomObject;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getRoomPreviewOwnRoomObject(): IRoomObjectController\r\n    {\r\n        if(this.isRoomEngineReady)\r\n        {\r\n            const roomObject = this._roomEngine.getRoomObject(this._previewRoomId, RoomEngine.ROOM_OBJECT_ID, RoomObjectCategory.ROOM);\r\n\r\n            if(roomObject) return roomObject;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get isRoomEngineReady(): boolean\r\n    {\r\n        return (this._roomEngine && this._roomEngine.ready);\r\n    }\r\n\r\n    public get roomId(): number\r\n    {\r\n        return this._previewRoomId;\r\n    }\r\n\r\n    public get backgroundColor(): number\r\n    {\r\n        return this._backgroundColor;\r\n    }\r\n\r\n    public set backgroundColor(color: number)\r\n    {\r\n        this._backgroundColor = color;\r\n    }\r\n\r\n    public get width(): number\r\n    {\r\n        return this._currentPreviewCanvasWidth;\r\n    }\r\n\r\n    public get height(): number\r\n    {\r\n        return this._currentPreviewCanvasHeight;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}