{"ast":null,"code":"import { AnimationData } from './AnimationData';\nimport { SizeData } from './SizeData';\nexport class AnimationSizeData extends SizeData {\n  constructor(layerCount, angle) {\n    super(layerCount, angle);\n    this._animations = void 0;\n    this._animationIds = void 0;\n    this._animations = new Map();\n    this._animationIds = [];\n  }\n\n  dispose() {\n    super.dispose();\n\n    for (const animation of this._animations.values()) {\n      if (!animation) continue;\n      animation.dispose();\n    }\n\n    this._animations.clear();\n\n    this._animationIds = [];\n  }\n\n  defineAnimations(animations) {\n    if (!animations) return true;\n\n    for (const key in animations) {\n      const animation = animations[key];\n      if (!animation) return false;\n      let animationId = parseInt(key.split('_')[0]);\n      let isTransition = false;\n      const transitionTo = animation.transitionTo;\n      const transitionFrom = animation.transitionFrom;\n\n      if (transitionTo !== undefined) {\n        animationId = AnimationData.getTransitionToAnimationId(transitionTo);\n        isTransition = true;\n      }\n\n      if (transitionFrom !== undefined) {\n        animationId = AnimationData.getTransitionFromAnimationId(transitionFrom);\n        isTransition = true;\n      }\n\n      const animationData = this.createAnimationData();\n\n      if (!animationData.initialize(animation)) {\n        animationData.dispose();\n        return false;\n      }\n\n      const immediateChangeFrom = animation.immediateChangeFrom;\n\n      if (immediateChangeFrom !== undefined) {\n        const changes = immediateChangeFrom.split(',');\n        const changeIds = [];\n\n        for (const change of changes) {\n          const changeId = parseInt(change);\n          if (changeIds.indexOf(changeId) === -1) changeIds.push(changeId);\n        }\n\n        animationData.setImmediateChanges(changeIds);\n      }\n\n      this._animations.set(animationId, animationData);\n\n      if (!isTransition) this._animationIds.push(animationId);\n    }\n\n    return true;\n  }\n\n  createAnimationData() {\n    return new AnimationData();\n  }\n\n  hasAnimation(animationId) {\n    if (!this._animations.get(animationId)) return false;\n    return true;\n  }\n\n  getAnimationCount() {\n    return this._animationIds.length || 0;\n  }\n\n  getAnimationId(animationId) {\n    const totalAnimations = this.getAnimationCount();\n    if (animationId < 0 || totalAnimations <= 0) return 0;\n    return this._animationIds[animationId % totalAnimations];\n  }\n\n  isImmediateChange(animationId, _arg_2) {\n    const animation = this._animations.get(animationId);\n\n    if (!animation) return false;\n    return animation.isImmediateChange(_arg_2);\n  }\n\n  getStartFrame(animationId, direction) {\n    const animation = this._animations.get(animationId);\n\n    if (!animation) return 0;\n    return animation.getStartFrame(direction);\n  }\n\n  getFrame(animationId, direction, layerId, frameCount) {\n    const animation = this._animations.get(animationId);\n\n    if (!animation) return null;\n    return animation.getFrame(direction, layerId, frameCount);\n  }\n\n  getFrameFromSequence(animationId, direction, layerId, sequenceId, offset, frameCount) {\n    const animation = this._animations.get(animationId);\n\n    if (!animation) return null;\n    return animation.getFrameFromSequence(direction, layerId, sequenceId, offset, frameCount);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/data/AnimationSizeData.ts"],"names":["AnimationData","SizeData","AnimationSizeData","constructor","layerCount","angle","_animations","_animationIds","Map","dispose","animation","values","clear","defineAnimations","animations","key","animationId","parseInt","split","isTransition","transitionTo","transitionFrom","undefined","getTransitionToAnimationId","getTransitionFromAnimationId","animationData","createAnimationData","initialize","immediateChangeFrom","changes","changeIds","change","changeId","indexOf","push","setImmediateChanges","set","hasAnimation","get","getAnimationCount","length","getAnimationId","totalAnimations","isImmediateChange","_arg_2","getStartFrame","direction","getFrame","layerId","frameCount","getFrameFromSequence","sequenceId","offset"],"mappings":"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","sourcesContent":["import { IAssetVisualAnimation } from '../../../../../core/asset/interfaces/visualization';\r\nimport { AnimationData } from './AnimationData';\r\nimport { AnimationFrame } from './AnimationFrame';\r\nimport { SizeData } from './SizeData';\r\n\r\nexport class AnimationSizeData extends SizeData\r\n{\r\n    private _animations: Map<number, AnimationData>;\r\n    private _animationIds: number[];\r\n\r\n    constructor(layerCount: number, angle: number)\r\n    {\r\n        super(layerCount, angle);\r\n\r\n        this._animations = new Map();\r\n        this._animationIds = [];\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        super.dispose();\r\n\r\n        for(const animation of this._animations.values())\r\n        {\r\n            if(!animation) continue;\r\n\r\n            animation.dispose();\r\n        }\r\n\r\n        this._animations.clear();\r\n\r\n        this._animationIds = [];\r\n    }\r\n\r\n    public defineAnimations(animations: { [index: string]: IAssetVisualAnimation }): boolean\r\n    {\r\n        if(!animations) return true;\r\n\r\n        for(const key in animations)\r\n        {\r\n            const animation = animations[key];\r\n\r\n            if(!animation) return false;\r\n\r\n            let animationId = parseInt(key.split('_')[0]);\r\n            let isTransition = false;\r\n\r\n            const transitionTo = animation.transitionTo;\r\n            const transitionFrom = animation.transitionFrom;\r\n\r\n            if(transitionTo !== undefined)\r\n            {\r\n                animationId = AnimationData.getTransitionToAnimationId(transitionTo);\r\n                isTransition = true;\r\n            }\r\n\r\n            if(transitionFrom !== undefined)\r\n            {\r\n                animationId = AnimationData.getTransitionFromAnimationId(transitionFrom);\r\n                isTransition = true;\r\n            }\r\n\r\n            const animationData = this.createAnimationData();\r\n\r\n            if(!animationData.initialize(animation))\r\n            {\r\n                animationData.dispose();\r\n\r\n                return false;\r\n            }\r\n\r\n            const immediateChangeFrom = animation.immediateChangeFrom;\r\n\r\n            if(immediateChangeFrom !== undefined)\r\n            {\r\n                const changes = immediateChangeFrom.split(',');\r\n                const changeIds = [];\r\n\r\n                for(const change of changes)\r\n                {\r\n                    const changeId = parseInt(change);\r\n\r\n                    if(changeIds.indexOf(changeId) === -1) changeIds.push(changeId);\r\n                }\r\n\r\n                animationData.setImmediateChanges(changeIds);\r\n            }\r\n\r\n            this._animations.set(animationId, animationData);\r\n\r\n            if(!isTransition) this._animationIds.push(animationId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected createAnimationData(): AnimationData\r\n    {\r\n        return new AnimationData();\r\n    }\r\n\r\n    public hasAnimation(animationId: number): boolean\r\n    {\r\n        if(!this._animations.get(animationId)) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    public getAnimationCount(): number\r\n    {\r\n        return this._animationIds.length || 0;\r\n    }\r\n\r\n    public getAnimationId(animationId: number): number\r\n    {\r\n        const totalAnimations = this.getAnimationCount();\r\n\r\n        if((animationId < 0) || (totalAnimations <= 0)) return 0;\r\n\r\n        return this._animationIds[(animationId % totalAnimations)];\r\n    }\r\n\r\n    public isImmediateChange(animationId: number, _arg_2: number): boolean\r\n    {\r\n        const animation = this._animations.get(animationId);\r\n\r\n        if(!animation) return false;\r\n\r\n        return animation.isImmediateChange(_arg_2);\r\n    }\r\n\r\n    public getStartFrame(animationId: number, direction: number): number\r\n    {\r\n        const animation = this._animations.get(animationId);\r\n\r\n        if(!animation) return 0;\r\n\r\n        return animation.getStartFrame(direction);\r\n    }\r\n\r\n    public getFrame(animationId: number, direction: number, layerId: number, frameCount: number): AnimationFrame\r\n    {\r\n        const animation = this._animations.get(animationId);\r\n\r\n        if(!animation) return null;\r\n\r\n        return animation.getFrame(direction, layerId, frameCount);\r\n    }\r\n\r\n    public getFrameFromSequence(animationId: number, direction: number, layerId: number, sequenceId: number, offset: number, frameCount: number): AnimationFrame\r\n    {\r\n        const animation = this._animations.get(animationId);\r\n\r\n        if(!animation) return null;\r\n\r\n        return animation.getFrameFromSequence(direction, layerId, sequenceId, offset, frameCount);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}