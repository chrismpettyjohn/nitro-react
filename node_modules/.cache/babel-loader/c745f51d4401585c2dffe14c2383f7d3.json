{"ast":null,"code":"import { FurniturePlacePaintComposer, RoomObjectCategory, RoomObjectPlacementSource, RoomObjectType } from '@nitrots/nitro-renderer';\nimport { FurniCategory } from '.';\nimport { CreateLinkEvent, GetRoomEngine, GetRoomSessionManager, SendMessageComposer } from '..';\nlet objectMoverRequested = false;\nlet itemIdInPlacing = -1;\nexport const isObjectMoverRequested = () => objectMoverRequested;\nexport const setObjectMoverRequested = flag => objectMoverRequested = flag;\nexport const getPlacingItemId = () => itemIdInPlacing;\nexport const setPlacingItemId = id => itemIdInPlacing = id;\nexport const cancelRoomObjectPlacement = () => {\n  if (getPlacingItemId() === -1) return;\n  GetRoomEngine().cancelRoomObjectPlacement();\n  setPlacingItemId(-1);\n  setObjectMoverRequested(false);\n};\nexport const attemptPetPlacement = function (petItem) {\n  let flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const petData = petItem.petData;\n  if (!petData) return false;\n  const session = GetRoomSessionManager().getSession(1);\n  if (!session) return false;\n  if (!session.isRoomOwner && !session.allowPets) return false;\n  CreateLinkEvent('inventory/hide');\n\n  if (GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, -petData.id, RoomObjectCategory.UNIT, RoomObjectType.PET, petData.figureData.figuredata)) {\n    setPlacingItemId(petData.id);\n    setObjectMoverRequested(true);\n  }\n\n  return true;\n};\nexport const attemptItemPlacement = function (groupItem) {\n  let flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!groupItem || !groupItem.getUnlockedCount()) return false;\n  const item = groupItem.getLastItem();\n  if (!item) return false;\n\n  if (item.category === FurniCategory.FLOOR || item.category === FurniCategory.WALL_PAPER || item.category === FurniCategory.LANDSCAPE) {\n    if (flag) return false;\n    SendMessageComposer(new FurniturePlacePaintComposer(item.id));\n    return false;\n  } else {\n    CreateLinkEvent('inventory/hide');\n    let category = 0;\n    let isMoving = false;\n    if (item.isWallItem) category = RoomObjectCategory.WALL;else category = RoomObjectCategory.FLOOR;\n\n    if (item.category === FurniCategory.POSTER) // or external image from furnidata\n      {\n        isMoving = GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, item.id, category, item.type, item.stuffData.getLegacyString());\n      } else {\n      isMoving = GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, item.id, category, item.type, item.extra.toString(), item.stuffData);\n    }\n\n    if (isMoving) {\n      setPlacingItemId(item.ref);\n      setObjectMoverRequested(true);\n    }\n  }\n\n  return true;\n};\nexport const attemptBotPlacement = function (botItem) {\n  let flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const botData = botItem.botData;\n  if (!botData) return false;\n  const session = GetRoomSessionManager().getSession(1);\n  if (!session || !session.isRoomOwner) return false;\n  CreateLinkEvent('inventory/hide');\n\n  if (GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, -botData.id, RoomObjectCategory.UNIT, RoomObjectType.RENTABLE_BOT, botData.figure)) {\n    setPlacingItemId(botData.id);\n    setObjectMoverRequested(true);\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/api/inventory/InventoryUtilities.ts"],"names":["FurniturePlacePaintComposer","RoomObjectCategory","RoomObjectPlacementSource","RoomObjectType","FurniCategory","CreateLinkEvent","GetRoomEngine","GetRoomSessionManager","SendMessageComposer","objectMoverRequested","itemIdInPlacing","isObjectMoverRequested","setObjectMoverRequested","flag","getPlacingItemId","setPlacingItemId","id","cancelRoomObjectPlacement","attemptPetPlacement","petItem","petData","session","getSession","isRoomOwner","allowPets","processRoomObjectPlacement","INVENTORY","UNIT","PET","figureData","figuredata","attemptItemPlacement","groupItem","getUnlockedCount","item","getLastItem","category","FLOOR","WALL_PAPER","LANDSCAPE","isMoving","isWallItem","WALL","POSTER","type","stuffData","getLegacyString","extra","toString","ref","attemptBotPlacement","botItem","botData","RENTABLE_BOT","figure"],"mappings":"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","sourcesContent":["import { FurniturePlacePaintComposer, RoomObjectCategory, RoomObjectPlacementSource, RoomObjectType } from '@nitrots/nitro-renderer';\nimport { FurniCategory, GroupItem } from '.';\nimport { CreateLinkEvent, GetRoomEngine, GetRoomSessionManager, SendMessageComposer } from '..';\nimport { IBotItem } from './IBotItem';\nimport { IPetItem } from './IPetItem';\n\nlet objectMoverRequested = false;\nlet itemIdInPlacing = -1;\n\nexport const isObjectMoverRequested = () => objectMoverRequested;\n\nexport const setObjectMoverRequested = (flag: boolean) => objectMoverRequested = flag;\n\nexport const getPlacingItemId = () => itemIdInPlacing;\n\nexport const setPlacingItemId = (id: number) => (itemIdInPlacing = id);\n\nexport const cancelRoomObjectPlacement = () =>\n{\n    if(getPlacingItemId() === -1) return;\n    \n    GetRoomEngine().cancelRoomObjectPlacement();\n\n    setPlacingItemId(-1);\n    setObjectMoverRequested(false);\n}\n\nexport const attemptPetPlacement = (petItem: IPetItem, flag: boolean = false) =>\n{\n    const petData = petItem.petData;\n\n    if(!petData) return false;\n\n    const session = GetRoomSessionManager().getSession(1);\n\n    if(!session) return false;\n\n    if(!session.isRoomOwner && !session.allowPets) return false;\n\n    CreateLinkEvent('inventory/hide');\n\n    if(GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, -(petData.id), RoomObjectCategory.UNIT, RoomObjectType.PET, petData.figureData.figuredata))\n    {\n        setPlacingItemId(petData.id);\n        setObjectMoverRequested(true);\n    }\n\n    return true;\n}\n\nexport const attemptItemPlacement = (groupItem: GroupItem, flag: boolean = false) =>\n{\n    if(!groupItem || !groupItem.getUnlockedCount()) return false;\n\n    const item = groupItem.getLastItem();\n\n    if(!item) return false;\n\n    if((item.category === FurniCategory.FLOOR) || (item.category === FurniCategory.WALL_PAPER) || (item.category === FurniCategory.LANDSCAPE))\n    {\n        if(flag) return false;\n\n        SendMessageComposer(new FurniturePlacePaintComposer(item.id));\n\n        return false;\n    }\n    else\n    {\n        CreateLinkEvent('inventory/hide');\n\n        let category = 0;\n        let isMoving = false;\n\n        if(item.isWallItem) category = RoomObjectCategory.WALL;\n        else category = RoomObjectCategory.FLOOR;\n\n        if((item.category === FurniCategory.POSTER)) // or external image from furnidata\n        {\n            isMoving = GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, item.id, category, item.type, item.stuffData.getLegacyString());\n        }\n        else\n        {\n            isMoving = GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, item.id, category, item.type, item.extra.toString(), item.stuffData);\n        }\n\n        if(isMoving)\n        {\n            setPlacingItemId(item.ref);\n            setObjectMoverRequested(true);\n        }\n    }\n\n    return true;\n}\n\n\nexport const attemptBotPlacement = (botItem: IBotItem, flag: boolean = false) =>\n{\n    const botData = botItem.botData;\n\n    if(!botData) return false;\n\n    const session = GetRoomSessionManager().getSession(1);\n\n    if(!session || !session.isRoomOwner) return false;\n\n    CreateLinkEvent('inventory/hide');\n\n    if(GetRoomEngine().processRoomObjectPlacement(RoomObjectPlacementSource.INVENTORY, -(botData.id), RoomObjectCategory.UNIT, RoomObjectType.RENTABLE_BOT, botData.figure))\n    {\n        setPlacingItemId(botData.id);\n        setObjectMoverRequested(true);\n    }\n\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}