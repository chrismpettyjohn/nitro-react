{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/room/widgets/infostand/InfoStandWidgetUserView.tsx\",\n    _s = $RefreshSig$();\n\nimport { RelationshipStatusInfoEvent, RoomSessionFavoriteGroupUpdateEvent, RoomSessionUserBadgesEvent, RoomSessionUserFigureUpdateEvent, UserRelationshipsComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { CloneObject, GetConfiguration, GetGroupInformation, GetSessionDataManager, GetUserProfile, LocalizeText, RoomWidgetChangeMottoMessage, RoomWidgetUpdateInfostandUserEvent, SendMessageComposer } from '../../../../api';\nimport { Base, Column, Flex, LayoutAvatarImageView, LayoutBadgeImageView, Text } from '../../../../common';\nimport { UseEventDispatcherHook, UseMessageEventHook } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\nimport { InfoStandWidgetUserRelationshipsView } from './InfoStandWidgetUserRelationshipsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const InfoStandWidgetUserView = props => {\n  _s();\n\n  const {\n    userData = null,\n    setUserData = null,\n    close = null\n  } = props;\n  const [motto, setMotto] = useState(null);\n  const [isEditingMotto, setIsEditingMotto] = useState(false);\n  const [relationships, setRelationships] = useState(null);\n  const {\n    eventDispatcher = null,\n    widgetHandler = null\n  } = useRoomContext();\n  const maxBadgeCount = GetConfiguration('user.badges.max.slots', 5);\n\n  const saveMotto = motto => {\n    if (!isEditingMotto || motto.length > GetConfiguration('motto.max.length', 38)) return;\n    widgetHandler.processWidgetMessage(new RoomWidgetChangeMottoMessage(motto));\n    setIsEditingMotto(false);\n  };\n\n  const onMottoBlur = event => saveMotto(event.target.value);\n\n  const onMottoKeyDown = event => {\n    event.stopPropagation();\n\n    switch (event.key) {\n      case 'Enter':\n        saveMotto(event.target.value);\n        return;\n    }\n  };\n\n  const onRoomSessionUserBadgesEvent = useCallback(event => {\n    if (!userData || userData.webID !== event.userId) return;\n    setUserData(prevValue => {\n      const newValue = CloneObject(prevValue);\n      newValue.badges = event.badges;\n      return newValue;\n    });\n  }, [userData, setUserData]);\n  UseEventDispatcherHook(RoomSessionUserBadgesEvent.RSUBE_BADGES, eventDispatcher, onRoomSessionUserBadgesEvent);\n  const onRoomSessionUserFigureUpdateEvent = useCallback(event => {\n    if (!userData || userData.roomIndex !== event.roomIndex) return;\n    setUserData(prevValue => {\n      const newValue = CloneObject(prevValue);\n      newValue.figure = event.figure;\n      newValue.motto = event.customInfo;\n      newValue.achievementScore = event.activityPoints;\n      return newValue;\n    });\n  }, [userData, setUserData]);\n  UseEventDispatcherHook(RoomSessionUserFigureUpdateEvent.USER_FIGURE, eventDispatcher, onRoomSessionUserFigureUpdateEvent);\n  const onRoomSessionFavoriteGroupUpdateEvent = useCallback(event => {\n    if (!userData || userData.roomIndex !== event.roomIndex) return;\n    setUserData(prevValue => {\n      const newValue = CloneObject(prevValue);\n      const clearGroup = event.status === -1 || event.habboGroupId <= 0;\n      newValue.groupId = clearGroup ? -1 : event.habboGroupId;\n      newValue.groupName = clearGroup ? null : event.habboGroupName;\n      newValue.groupBadgeId = clearGroup ? null : GetSessionDataManager().getGroupBadge(event.habboGroupId);\n      return newValue;\n    });\n  }, [userData, setUserData]);\n  UseEventDispatcherHook(RoomSessionFavoriteGroupUpdateEvent.FAVOURITE_GROUP_UPDATE, eventDispatcher, onRoomSessionFavoriteGroupUpdateEvent);\n  const onUserRelationshipsEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!userData || userData.webID !== parser.userId) return;\n    setRelationships(parser);\n  }, [userData]);\n  UseMessageEventHook(RelationshipStatusInfoEvent, onUserRelationshipsEvent);\n  useEffect(() => {\n    setIsEditingMotto(false);\n    setMotto(userData.motto);\n    SendMessageComposer(new UserRelationshipsComposer(userData.webID));\n    return () => {\n      setIsEditingMotto(false);\n      setMotto(null);\n      setRelationships(null);\n    };\n  }, [userData]);\n  if (!userData) return null;\n  return /*#__PURE__*/_jsxDEV(Column, {\n    className: \"nitro-infostand rounded\",\n    children: /*#__PURE__*/_jsxDEV(Column, {\n      overflow: \"visible\",\n      className: \"container-fluid content-area\",\n      gap: 1,\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        gap: 1,\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          justifyContent: \"between\",\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            gap: 1,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"icon icon-profile-house cursor-pointer\",\n              onClick: event => GetUserProfile(userData.webID)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              gfbold: true,\n              variant: \"white\",\n              className: \"infostand-name\",\n              onClick: event => GetUserProfile(userData.webID),\n              children: userData.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"infostand-close\",\n            onClick: close\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"m-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        gap: 1,\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          gap: 1,\n          children: [/*#__PURE__*/_jsxDEV(Column, {\n            fullWidth: true,\n            className: \"body-image infostand-thumb-bg\",\n            onClick: event => GetUserProfile(userData.webID),\n            children: /*#__PURE__*/_jsxDEV(LayoutAvatarImageView, {\n              figure: userData.figure,\n              direction: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Column, {\n            grow: true,\n            gap: 0,\n            children: [/*#__PURE__*/_jsxDEV(Flex, {\n              gap: 1,\n              children: [/*#__PURE__*/_jsxDEV(Base, {\n                className: \"badge-image\",\n                children: userData.badges[0] && /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n                  badgeCode: userData.badges[0],\n                  showInfo: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 61\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Base, {\n                pointer: userData.groupId > 0,\n                className: \"badge-image\",\n                onClick: event => GetGroupInformation(userData.groupId),\n                children: userData.groupId > 0 && /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n                  badgeCode: userData.groupBadgeId,\n                  isGroup: true,\n                  showInfo: true,\n                  customTitle: userData.groupName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              gap: 1,\n              children: [/*#__PURE__*/_jsxDEV(Base, {\n                className: \"badge-image\",\n                children: userData.badges[1] && /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n                  badgeCode: userData.badges[1],\n                  showInfo: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 61\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Base, {\n                className: \"badge-image\",\n                children: userData.badges[2] && /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n                  badgeCode: userData.badges[2],\n                  showInfo: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 61\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              gap: 1,\n              children: [/*#__PURE__*/_jsxDEV(Base, {\n                className: \"badge-image\",\n                children: userData.badges[3] && /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n                  badgeCode: userData.badges[3],\n                  showInfo: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 61\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Base, {\n                className: \"badge-image\",\n                children: userData.badges[4] && /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n                  badgeCode: userData.badges[4],\n                  showInfo: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 61\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"m-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        gap: 1,\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          className: \"infostand-thumb-bg py-1 px-2\",\n          children: [userData.type !== RoomWidgetUpdateInfostandUserEvent.OWN_USER && /*#__PURE__*/_jsxDEV(Flex, {\n            grow: true,\n            alignItems: \"center\",\n            className: \"motto-content\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fullWidth: true,\n              pointer: true,\n              wrap: true,\n              textBreak: true,\n              variant: \"white\",\n              children: motto\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 29\n          }, this), userData.type === RoomWidgetUpdateInfostandUserEvent.OWN_USER && /*#__PURE__*/_jsxDEV(Flex, {\n            grow: true,\n            alignItems: \"center\",\n            gap: 2,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"icon pencil-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              grow: true,\n              alignItems: \"center\",\n              className: \"motto-content\",\n              children: [!isEditingMotto && /*#__PURE__*/_jsxDEV(Text, {\n                fullWidth: true,\n                pointer: true,\n                wrap: true,\n                textBreak: true,\n                variant: \"white\",\n                onClick: event => setIsEditingMotto(true),\n                children: [motto, \"\\xA0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 41\n              }, this), isEditingMotto && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"motto-input\",\n                maxLength: GetConfiguration('motto.max.length', 38),\n                value: motto,\n                onChange: event => setMotto(event.target.value),\n                onBlur: onMottoBlur,\n                onKeyDown: onMottoKeyDown,\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"m-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        gap: 1,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          gfbold: true,\n          variant: \"white\",\n          wrap: true,\n          children: LocalizeText('infostand.text.achievement_score') + ' ' + userData.achievementScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), userData.carryItem > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"m-0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            gfbold: true,\n            variant: \"white\",\n            wrap: true,\n            children: LocalizeText('infostand.text.handitem', ['item'], [LocalizeText('handitem' + userData.carryItem)])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        gap: 1,\n        children: /*#__PURE__*/_jsxDEV(InfoStandWidgetUserRelationshipsView, {\n          relationships: relationships\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfoStandWidgetUserView, \"Fio6y7w5hpE3WeN7YTkt8aQNGA4=\", false, function () {\n  return [useRoomContext];\n});\n\n_c = InfoStandWidgetUserView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoStandWidgetUserView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/room/widgets/infostand/InfoStandWidgetUserView.tsx"],"names":["RelationshipStatusInfoEvent","RoomSessionFavoriteGroupUpdateEvent","RoomSessionUserBadgesEvent","RoomSessionUserFigureUpdateEvent","UserRelationshipsComposer","useCallback","useEffect","useState","CloneObject","GetConfiguration","GetGroupInformation","GetSessionDataManager","GetUserProfile","LocalizeText","RoomWidgetChangeMottoMessage","RoomWidgetUpdateInfostandUserEvent","SendMessageComposer","Base","Column","Flex","LayoutAvatarImageView","LayoutBadgeImageView","Text","UseEventDispatcherHook","UseMessageEventHook","useRoomContext","InfoStandWidgetUserRelationshipsView","InfoStandWidgetUserView","props","userData","setUserData","close","motto","setMotto","isEditingMotto","setIsEditingMotto","relationships","setRelationships","eventDispatcher","widgetHandler","maxBadgeCount","saveMotto","length","processWidgetMessage","onMottoBlur","event","target","value","onMottoKeyDown","stopPropagation","key","onRoomSessionUserBadgesEvent","webID","userId","prevValue","newValue","badges","RSUBE_BADGES","onRoomSessionUserFigureUpdateEvent","roomIndex","figure","customInfo","achievementScore","activityPoints","USER_FIGURE","onRoomSessionFavoriteGroupUpdateEvent","clearGroup","status","habboGroupId","groupId","groupName","habboGroupName","groupBadgeId","getGroupBadge","FAVOURITE_GROUP_UPDATE","onUserRelationshipsEvent","parser","getParser","name","type","OWN_USER","carryItem"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { RelationshipStatusInfoEvent, RelationshipStatusInfoMessageParser, RoomSessionFavoriteGroupUpdateEvent, RoomSessionUserBadgesEvent, RoomSessionUserFigureUpdateEvent, UserRelationshipsComposer } from '@nitrots/nitro-renderer';\nimport { Dispatch, FC, FocusEvent, KeyboardEvent, SetStateAction, useCallback, useEffect, useState } from 'react';\nimport { CloneObject, GetConfiguration, GetGroupInformation, GetSessionDataManager, GetUserProfile, LocalizeText, RoomWidgetChangeMottoMessage, RoomWidgetUpdateInfostandUserEvent, SendMessageComposer } from '../../../../api';\nimport { Base, Column, Flex, LayoutAvatarImageView, LayoutBadgeImageView, Text, UserProfileIconView } from '../../../../common';\nimport { UseEventDispatcherHook, UseMessageEventHook } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\nimport { InfoStandWidgetUserRelationshipsView } from './InfoStandWidgetUserRelationshipsView';\n\ninterface InfoStandWidgetUserViewProps\n{\n    userData: RoomWidgetUpdateInfostandUserEvent;\n    setUserData: Dispatch<SetStateAction<RoomWidgetUpdateInfostandUserEvent>>;\n    close: () => void;\n}\n\nexport const InfoStandWidgetUserView: FC<InfoStandWidgetUserViewProps> = props =>\n{\n    const { userData = null, setUserData = null, close = null } = props;\n    const [ motto, setMotto ] = useState<string>(null);\n    const [ isEditingMotto, setIsEditingMotto ] = useState(false);\n    const [ relationships, setRelationships ] = useState<RelationshipStatusInfoMessageParser>(null);\n    const { eventDispatcher = null, widgetHandler = null } = useRoomContext();\n    const maxBadgeCount = GetConfiguration<number>('user.badges.max.slots', 5);\n\n    const saveMotto = (motto: string) =>\n    {\n        if(!isEditingMotto || (motto.length > GetConfiguration<number>('motto.max.length', 38))) return;\n\n        widgetHandler.processWidgetMessage(new RoomWidgetChangeMottoMessage(motto));\n\n        setIsEditingMotto(false);\n    }\n\n    const onMottoBlur = (event: FocusEvent<HTMLInputElement>) => saveMotto(event.target.value);\n\n    const onMottoKeyDown = (event: KeyboardEvent<HTMLInputElement>) =>\n    {\n        event.stopPropagation();\n        \n        switch(event.key)\n        {\n            case 'Enter':\n                saveMotto((event.target as HTMLInputElement).value);\n                return;\n        }\n    }\n\n    const onRoomSessionUserBadgesEvent = useCallback((event: RoomSessionUserBadgesEvent) =>\n    {\n        if(!userData || (userData.webID !== event.userId)) return;\n\n        setUserData(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            newValue.badges = event.badges;\n\n            return newValue;\n        });\n    }, [ userData, setUserData ]);\n\n    UseEventDispatcherHook(RoomSessionUserBadgesEvent.RSUBE_BADGES, eventDispatcher, onRoomSessionUserBadgesEvent);\n\n    const onRoomSessionUserFigureUpdateEvent = useCallback((event: RoomSessionUserFigureUpdateEvent) =>\n    {\n        if(!userData || (userData.roomIndex !== event.roomIndex)) return;\n\n        setUserData(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            newValue.figure = event.figure;\n            newValue.motto = event.customInfo;\n            newValue.achievementScore = event.activityPoints;\n\n            return newValue;\n        });\n    }, [ userData, setUserData ]);\n\n    UseEventDispatcherHook(RoomSessionUserFigureUpdateEvent.USER_FIGURE, eventDispatcher, onRoomSessionUserFigureUpdateEvent);\n\n    const onRoomSessionFavoriteGroupUpdateEvent = useCallback((event: RoomSessionFavoriteGroupUpdateEvent) =>\n    {\n        if(!userData || (userData.roomIndex !== event.roomIndex)) return;\n\n        setUserData(prevValue =>\n        {\n            const newValue = CloneObject(prevValue);\n\n            const clearGroup = ((event.status === -1) || (event.habboGroupId <= 0));\n\n            newValue.groupId = clearGroup ? -1 : event.habboGroupId;\n            newValue.groupName = clearGroup ? null : event.habboGroupName\n            newValue.groupBadgeId = clearGroup ? null : GetSessionDataManager().getGroupBadge(event.habboGroupId);\n\n            return newValue;\n        });\n    }, [ userData, setUserData ]);\n\n    UseEventDispatcherHook(RoomSessionFavoriteGroupUpdateEvent.FAVOURITE_GROUP_UPDATE, eventDispatcher, onRoomSessionFavoriteGroupUpdateEvent);\n\n    const onUserRelationshipsEvent = useCallback((event: RelationshipStatusInfoEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!userData || (userData.webID !== parser.userId)) return;\n\n        setRelationships(parser);\n    }, [ userData ]);\n\n    UseMessageEventHook(RelationshipStatusInfoEvent, onUserRelationshipsEvent);\n\n    useEffect(() =>\n    {\n        setIsEditingMotto(false);\n        setMotto(userData.motto);\n        \n        SendMessageComposer(new UserRelationshipsComposer(userData.webID));\n\n        return () => \n        {\n            setIsEditingMotto(false);\n            setMotto(null);\n            setRelationships(null);\n        }\n    }, [ userData ]);\n\n    if(!userData) return null;\n\n    return (\n        <Column className=\"nitro-infostand rounded\">\n            <Column overflow=\"visible\" className=\"container-fluid content-area\" gap={ 1 }>\n                <Column gap={ 1 }>\n                    <Flex alignItems=\"center\" justifyContent=\"between\">\n                        <Flex alignItems=\"center\" gap={ 1 }>\n                            <i className=\"icon icon-profile-house cursor-pointer\" onClick={ event => GetUserProfile(userData.webID) }/>\n                            <Text gfbold variant=\"white\" className=\"infostand-name\" onClick={ event => GetUserProfile(userData.webID) }>{ userData.name }</Text>\n                        </Flex>\n                        <i className=\"infostand-close\" onClick={ close } />\n                    </Flex>\n                    <hr className=\"m-0\" />\n                </Column>\n                <Column gap={ 1 }>\n                    <Flex gap={ 1 }>\n                        <Column fullWidth className=\"body-image infostand-thumb-bg\" onClick={ event => GetUserProfile(userData.webID) }>\n                            <LayoutAvatarImageView figure={ userData.figure } direction={ 4 } />\n                        </Column>\n                        <Column grow gap={ 0 }>\n                            <Flex gap={ 1 }>\n                                <Base className=\"badge-image\">\n                                    { userData.badges[0] && <LayoutBadgeImageView badgeCode={ userData.badges[0] } showInfo={ true } /> }\n                                </Base>\n                                <Base pointer={ ( userData.groupId > 0) } className=\"badge-image\" onClick={ event => GetGroupInformation(userData.groupId) }>\n                                    { userData.groupId > 0 &&\n                                        <LayoutBadgeImageView badgeCode={ userData.groupBadgeId } isGroup={ true } showInfo={ true } customTitle={ userData.groupName } /> }\n                                </Base>\n                            </Flex>\n                            <Flex gap={ 1 }>\n                                <Base className=\"badge-image\">\n                                    { userData.badges[1] && <LayoutBadgeImageView badgeCode={ userData.badges[1] } showInfo={ true } /> }\n                                </Base>\n                                <Base className=\"badge-image\">\n                                    { userData.badges[2] && <LayoutBadgeImageView badgeCode={ userData.badges[2] } showInfo={ true } /> }\n                                </Base>\n                            </Flex>\n                            <Flex gap={ 1 }>\n                                <Base className=\"badge-image\">\n                                    { userData.badges[3] && <LayoutBadgeImageView badgeCode={ userData.badges[3] } showInfo={ true } /> }\n                                </Base>\n                                <Base className=\"badge-image\">\n                                    { userData.badges[4] && <LayoutBadgeImageView badgeCode={ userData.badges[4] } showInfo={ true } /> }\n                                </Base>\n                            </Flex>\n                        </Column>\n                    </Flex>\n                    <hr className=\"m-0\" />\n                </Column>\n                <Column gap={ 1 }>\n                    <Flex alignItems=\"center\" className=\"infostand-thumb-bg py-1 px-2\">\n                        { (userData.type !== RoomWidgetUpdateInfostandUserEvent.OWN_USER) &&\n                            <Flex grow alignItems=\"center\" className=\"motto-content\">\n                                <Text fullWidth pointer wrap textBreak variant=\"white\">{ motto }</Text>\n                            </Flex> }\n                        { userData.type === RoomWidgetUpdateInfostandUserEvent.OWN_USER &&\n                            <Flex grow alignItems=\"center\" gap={ 2 }>\n                                <i className=\"icon pencil-icon\" />\n                                <Flex grow alignItems=\"center\" className=\"motto-content\">\n                                    { !isEditingMotto &&\n                                        <Text fullWidth pointer wrap textBreak variant=\"white\" onClick={ event => setIsEditingMotto(true) }>{ motto }&nbsp;</Text> }\n                                    { isEditingMotto &&\n                                        <input type=\"text\" className=\"motto-input\" maxLength={ GetConfiguration<number>('motto.max.length', 38) } value={ motto } onChange={ event => setMotto(event.target.value) } onBlur={ onMottoBlur } onKeyDown={ onMottoKeyDown } autoFocus={ true } /> }\n                                </Flex>\n                            </Flex> }\n                    </Flex>\n                    <hr className=\"m-0\" />\n                </Column>\n                <Column gap={ 1 }>\n                    <Text gfbold variant=\"white\" wrap>\n                        { LocalizeText('infostand.text.achievement_score') + ' ' + userData.achievementScore }\n                    </Text>\n                    { (userData.carryItem > 0) &&\n                        <>\n                            <hr className=\"m-0\" />\n                            <Text gfbold variant=\"white\" wrap>\n                                { LocalizeText('infostand.text.handitem', [ 'item' ], [ LocalizeText('handitem' + userData.carryItem) ]) }\n                            </Text>\n                        </> }\n                </Column>\n                <Column gap={ 1 }>\n                    <InfoStandWidgetUserRelationshipsView relationships={ relationships } />\n                </Column>\n            </Column>\n        </Column>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}