{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/campaign/CampaignView.tsx\",\n    _s = $RefreshSig$();\n\nimport { CampaignCalendarDataMessageEvent, CampaignCalendarDoorOpenedMessageEvent, OpenCampaignCalendarDoorAsStaffComposer, OpenCampaignCalendarDoorComposer } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, CalendarItem, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { UseMessageEventHook } from '../../hooks';\nimport { CalendarView } from './CalendarView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CampaignView = props => {\n  _s();\n\n  const [calendarData, setCalendarData] = useState(null);\n  const [lastOpenAttempt, setLastOpenAttempt] = useState(-1);\n  const [receivedProducts, setReceivedProducts] = useState(new Map());\n  const [isCalendarOpen, setCalendarOpen] = useState(false);\n  const onCampaignCalendarDataMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    setCalendarData(parser.calendarData);\n  }, []);\n  UseMessageEventHook(CampaignCalendarDataMessageEvent, onCampaignCalendarDataMessageEvent);\n  const onCampaignCalendarDoorOpenedMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    const lastAttempt = lastOpenAttempt;\n\n    if (parser.doorOpened) {\n      setCalendarData(prev => {\n        const copy = prev.clone();\n        copy.openedDays.push(lastOpenAttempt);\n        return copy;\n      });\n      setReceivedProducts(prev => {\n        const copy = new Map(prev);\n        copy.set(lastAttempt, new CalendarItem(parser.productName, parser.customImage, parser.furnitureClassName));\n        return copy;\n      });\n    }\n\n    setLastOpenAttempt(-1);\n  }, [lastOpenAttempt]);\n  UseMessageEventHook(CampaignCalendarDoorOpenedMessageEvent, onCampaignCalendarDoorOpenedMessageEvent);\n  const openPackage = useCallback(function (id) {\n    let asStaff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!calendarData) return;\n    setLastOpenAttempt(id);\n\n    if (asStaff) {\n      SendMessageComposer(new OpenCampaignCalendarDoorAsStaffComposer(calendarData.campaignName, id));\n    } else {\n      SendMessageComposer(new OpenCampaignCalendarDoorComposer(calendarData.campaignName, id));\n    }\n  }, [calendarData]);\n  const onCalendarClose = useCallback(() => {\n    setCalendarOpen(false);\n  }, []);\n  const onLinkReceived = useCallback(link => {\n    const value = link.split('/');\n    if (value.length < 2) return;\n\n    switch (value[1]) {\n      case 'calendar':\n        setCalendarOpen(true);\n        break;\n    }\n  }, []);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived: onLinkReceived,\n      eventUrlPrefix: 'openView/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => {\n      RemoveLinkEventTracker(linkTracker);\n    };\n  }, [onLinkReceived]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: calendarData && isCalendarOpen && /*#__PURE__*/_jsxDEV(CalendarView, {\n      close: onCalendarClose,\n      campaignName: calendarData.campaignName,\n      currentDay: calendarData.currentDay,\n      numDays: calendarData.campaignDays,\n      openedDays: calendarData.openedDays,\n      missedDays: calendarData.missedDays,\n      openPackage: openPackage,\n      receivedProducts: receivedProducts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(CampaignView, \"ubrY16l3qgmCU2PN4o6C7Av+WKU=\");\n\n_c = CampaignView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CampaignView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/campaign/CampaignView.tsx"],"names":["CampaignCalendarDataMessageEvent","CampaignCalendarDoorOpenedMessageEvent","OpenCampaignCalendarDoorAsStaffComposer","OpenCampaignCalendarDoorComposer","useCallback","useEffect","useState","AddEventLinkTracker","CalendarItem","RemoveLinkEventTracker","SendMessageComposer","UseMessageEventHook","CalendarView","CampaignView","props","calendarData","setCalendarData","lastOpenAttempt","setLastOpenAttempt","receivedProducts","setReceivedProducts","Map","isCalendarOpen","setCalendarOpen","onCampaignCalendarDataMessageEvent","event","parser","getParser","onCampaignCalendarDoorOpenedMessageEvent","lastAttempt","doorOpened","prev","copy","clone","openedDays","push","set","productName","customImage","furnitureClassName","openPackage","id","asStaff","campaignName","onCalendarClose","onLinkReceived","link","value","split","length","linkTracker","linkReceived","eventUrlPrefix","currentDay","campaignDays","missedDays"],"mappings":"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","sourcesContent":["import { CampaignCalendarData, CampaignCalendarDataMessageEvent, CampaignCalendarDoorOpenedMessageEvent, OpenCampaignCalendarDoorAsStaffComposer, OpenCampaignCalendarDoorComposer } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, CalendarItem, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { UseMessageEventHook } from '../../hooks';\nimport { CalendarView } from './CalendarView';\n\nexport const CampaignView: FC<{}> = props =>\n{\n    const [ calendarData, setCalendarData ] = useState<CampaignCalendarData>(null);\n    const [ lastOpenAttempt, setLastOpenAttempt ] = useState<number>(-1);\n    const [ receivedProducts, setReceivedProducts ] = useState<Map<number, CalendarItem>>(new Map());\n    const [ isCalendarOpen, setCalendarOpen ] = useState(false);\n    \n    const onCampaignCalendarDataMessageEvent = useCallback((event: CampaignCalendarDataMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n        setCalendarData(parser.calendarData);\n    }, []);\n\n    UseMessageEventHook(CampaignCalendarDataMessageEvent, onCampaignCalendarDataMessageEvent);\n\n    const onCampaignCalendarDoorOpenedMessageEvent = useCallback((event: CampaignCalendarDoorOpenedMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        const lastAttempt = lastOpenAttempt;\n\n        if(parser.doorOpened)\n        {\n            setCalendarData(prev => \n            {\n                const copy = prev.clone();\n                copy.openedDays.push(lastOpenAttempt);\n                    \n                return copy;\n            });\n    \n            setReceivedProducts(prev =>\n            {\n                const copy = new Map(prev);\n                copy.set(lastAttempt, new CalendarItem(parser.productName, parser.customImage,parser.furnitureClassName));\n                    \n                return copy;\n            });\n        }\n\n        setLastOpenAttempt(-1);\n    }, [ lastOpenAttempt ]);\n\n    UseMessageEventHook(CampaignCalendarDoorOpenedMessageEvent, onCampaignCalendarDoorOpenedMessageEvent);\n\n    const openPackage = useCallback((id: number, asStaff = false) =>\n    {\n        if(!calendarData) return;\n\n        setLastOpenAttempt(id);\n\n        if(asStaff)\n        {\n            SendMessageComposer(new OpenCampaignCalendarDoorAsStaffComposer(calendarData.campaignName, id));\n        }\n\n        else\n        {\n            SendMessageComposer(new OpenCampaignCalendarDoorComposer(calendarData.campaignName, id));\n        }\n    }, [ calendarData ]);\n\n    const onCalendarClose = useCallback(() =>\n    {\n        setCalendarOpen(false);\n    }, []);\n\n    const onLinkReceived = useCallback((link: string) =>\n    {\n        const value = link.split('/');\n\n        if(value.length < 2) return;\n\n        switch(value[1])\n        {\n            case 'calendar':\n                setCalendarOpen(true);\n                break;\n        }\n    }, []);\n\n    useEffect(() =>\n    {\n        const linkTracker = { linkReceived: onLinkReceived, eventUrlPrefix: 'openView/' };\n        AddEventLinkTracker(linkTracker);\n\n        return () =>\n        {\n            RemoveLinkEventTracker(linkTracker);\n        }\n    }, [ onLinkReceived ]);\n\n    return (\n        <>\n            { (calendarData && isCalendarOpen) && \n                <CalendarView close={ onCalendarClose } campaignName={ calendarData.campaignName } currentDay={ calendarData.currentDay } numDays={ calendarData.campaignDays } openedDays={ calendarData.openedDays } missedDays={ calendarData.missedDays } openPackage={ openPackage } receivedProducts={ receivedProducts } />\n            }\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}