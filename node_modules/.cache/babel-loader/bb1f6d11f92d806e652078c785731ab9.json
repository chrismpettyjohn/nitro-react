{"ast":null,"code":"import { HabboWebTools, RoomEnterEffect } from '@nitrots/nitro-renderer';\nimport { CreateLinkEvent, GetConfiguration, GetNitroInstance, LocalizeText, PlaySound } from '..';\nimport { NotificationAlertEvent, NotificationConfirmEvent } from '../../events';\nimport { NotificationBubbleEvent } from '../../events/notification-center/NotificationBubbleEvent';\nimport { DispatchUiEvent } from '../../hooks';\nimport { NotificationAlertType } from './NotificationAlertType';\nimport { NotificationBubbleType } from './NotificationBubbleType';\nexport class NotificationUtilities {\n  static cleanText(text) {\n    return text.replace(/\\\\r/g, '\\r');\n  }\n\n  static getTimeZeroPadded(time) {\n    const text = '0' + time;\n    return text.substr(text.length - 2, text.length);\n  }\n\n  static getMainNotificationConfig() {\n    return GetConfiguration('notification', {});\n  }\n\n  static getNotificationConfig(key) {\n    const mainConfig = this.getMainNotificationConfig();\n    if (!mainConfig) return null;\n    return mainConfig[key];\n  }\n\n  static getNotificationPart(options, type, key, localize) {\n    if (options.has(key)) return options.get(key);\n    const localizeKey = ['notification', type, key].join('.');\n\n    if (GetNitroInstance().localization.hasValue(localizeKey) || localize) {\n      return LocalizeText(localizeKey, Array.from(options.keys()), Array.from(options.values()));\n    }\n\n    return null;\n  }\n\n  static getNotificationImageUrl(options, type) {\n    let imageUrl = options.get('image');\n    if (!imageUrl) imageUrl = GetConfiguration('image.library.notifications.url', '').replace('%image%', type.replace(/\\./g, '_'));\n    return LocalizeText(imageUrl);\n  }\n\n  static showNotification(type) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!options) options = new Map();\n    const configuration = this.getNotificationConfig('notification.' + type);\n    if (configuration) for (const key in configuration) options.set(key, configuration[key]);\n    const title = this.getNotificationPart(options, type, 'title', true);\n    const message = this.getNotificationPart(options, type, 'message', true).replace(/\\\\r/g, '\\r');\n    const linkTitle = this.getNotificationPart(options, type, 'linkTitle', false);\n    const linkUrl = this.getNotificationPart(options, type, 'linkUrl', false);\n    const image = this.getNotificationImageUrl(options, type);\n\n    if (options.get('display') === 'BUBBLE') {\n      this.showSingleBubble(LocalizeText(message), NotificationBubbleType.INFO, image, linkUrl);\n    } else {\n      this.simpleAlert(message, type, linkUrl, linkTitle, title, image);\n    }\n\n    if (options.get('sound')) PlaySound(options.get('sound'));\n  }\n\n  static showSingleBubble(message, type) {\n    let imageUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let internalLink = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    if (this.BUBBLES_DISABLED) return;\n    DispatchUiEvent(new NotificationBubbleEvent(message, type, imageUrl, internalLink));\n  }\n\n  static showClubGiftNotification(numGifts) {\n    if (numGifts <= 0) return;\n    this.showSingleBubble(numGifts.toString(), NotificationBubbleType.CLUBGIFT, null, 'catalog/open/' + GetConfiguration('catalog.links')['hc.hc_gifts']);\n  }\n\n  static handleMOTD(messages) {\n    messages = messages.map(message => this.cleanText(message));\n    DispatchUiEvent(new NotificationAlertEvent(messages, NotificationAlertType.MOTD, null, null, LocalizeText('notifications.motd.title')));\n  }\n\n  static confirm(message, onConfirm, onCancel) {\n    let confirmText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let cancelText = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let title = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let type = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    if (!confirmText || !confirmText.length) confirmText = LocalizeText('generic.confirm');\n    if (!cancelText || !cancelText.length) cancelText = LocalizeText('generic.cancel');\n    if (!title || !title.length) title = LocalizeText('notifications.broadcast.title');\n    DispatchUiEvent(new NotificationConfirmEvent(type, this.cleanText(message), onConfirm, onCancel, confirmText, cancelText, title));\n  }\n\n  static simpleAlert(message) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let clickUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let clickUrlText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let title = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let imageUrl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    if (!title || !title.length) title = LocalizeText('notifications.broadcast.title');\n    if (!type || !type.length) type = NotificationAlertType.DEFAULT;\n    DispatchUiEvent(new NotificationAlertEvent([this.cleanText(message)], type, clickUrl, clickUrlText, title, imageUrl));\n  }\n\n  static showNitroAlert() {\n    DispatchUiEvent(new NotificationAlertEvent(null, NotificationAlertType.NITRO));\n  }\n\n  static showModeratorMessage(message) {\n    let url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let showHabboWay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.simpleAlert(message, NotificationAlertType.DEFAULT, url, LocalizeText('mod.alert.link'), LocalizeText('mod.alert.title'));\n  }\n\n  static handleModeratorCaution(message) {\n    let url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.showModeratorMessage(message, url);\n  }\n\n  static handleModeratorMessage(message) {\n    let url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.showModeratorMessage(message, url, false);\n  }\n\n  static handleUserBannedMessage(message) {\n    this.showModeratorMessage(message);\n  }\n\n  static handleHotelClosedMessage(open, minute, thrownOut) {\n    this.simpleAlert(LocalizeText('opening.hours.' + (thrownOut ? 'disconnected' : 'closed'), ['h', 'm'], [this.getTimeZeroPadded(open), this.getTimeZeroPadded(minute)]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n  }\n\n  static handleHotelMaintenanceMessage(minutesUntilMaintenance, duration) {\n    this.simpleAlert(LocalizeText('maintenance.shutdown', ['m', 'd'], [minutesUntilMaintenance.toString(), duration.toString()]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n  }\n\n  static handleHotelClosingMessage(minutes) {\n    this.simpleAlert(LocalizeText('opening.hours.shutdown', ['m'], [minutes.toString()]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n  }\n\n  static handleLoginFailedHotelClosedMessage(openHour, openMinutes) {\n    this.simpleAlert(LocalizeText('opening.hours.disconnected', ['h', 'm'], [openHour.toString(), openMinutes.toString()]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n  }\n\n  static openUrl(url) {\n    if (!url || !url.length) return;\n\n    if (url.startsWith('http')) {\n      HabboWebTools.openWebPage(url);\n    } else {\n      CreateLinkEvent(url);\n    }\n  }\n\n  static showModerationDisclaimer() {\n    if (RoomEnterEffect.isRunning()) {\n      if (this.MODERATION_DISCLAIMER_TIMEOUT) return;\n      this.MODERATION_DISCLAIMER_TIMEOUT = setTimeout(() => {\n        this.showModerationDisclaimer();\n      }, RoomEnterEffect.totalRunningTime + this.MODERATION_DISCLAIMER_DELAY_MS);\n    } else {\n      if (this.MODERATION_DISCLAIMER_SHOWN) return;\n      this.showSingleBubble(LocalizeText('mod.chatdisclaimer'), NotificationBubbleType.INFO);\n      this.MODERATION_DISCLAIMER_SHOWN = true;\n    }\n  }\n\n}\nNotificationUtilities.MODERATION_DISCLAIMER_SHOWN = false;\nNotificationUtilities.MODERATION_DISCLAIMER_DELAY_MS = 5000;\nNotificationUtilities.MODERATION_DISCLAIMER_TIMEOUT = null;\nNotificationUtilities.BUBBLES_DISABLED = false;","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/api/notification/NotificationUtilities.ts"],"names":["HabboWebTools","RoomEnterEffect","CreateLinkEvent","GetConfiguration","GetNitroInstance","LocalizeText","PlaySound","NotificationAlertEvent","NotificationConfirmEvent","NotificationBubbleEvent","DispatchUiEvent","NotificationAlertType","NotificationBubbleType","NotificationUtilities","cleanText","text","replace","getTimeZeroPadded","time","substr","length","getMainNotificationConfig","getNotificationConfig","key","mainConfig","getNotificationPart","options","type","localize","has","get","localizeKey","join","localization","hasValue","Array","from","keys","values","getNotificationImageUrl","imageUrl","showNotification","Map","configuration","set","title","message","linkTitle","linkUrl","image","showSingleBubble","INFO","simpleAlert","internalLink","BUBBLES_DISABLED","showClubGiftNotification","numGifts","toString","CLUBGIFT","handleMOTD","messages","map","MOTD","confirm","onConfirm","onCancel","confirmText","cancelText","clickUrl","clickUrlText","DEFAULT","showNitroAlert","NITRO","showModeratorMessage","url","showHabboWay","handleModeratorCaution","handleModeratorMessage","handleUserBannedMessage","handleHotelClosedMessage","open","minute","thrownOut","handleHotelMaintenanceMessage","minutesUntilMaintenance","duration","handleHotelClosingMessage","minutes","handleLoginFailedHotelClosedMessage","openHour","openMinutes","openUrl","startsWith","openWebPage","showModerationDisclaimer","isRunning","MODERATION_DISCLAIMER_TIMEOUT","setTimeout","totalRunningTime","MODERATION_DISCLAIMER_DELAY_MS","MODERATION_DISCLAIMER_SHOWN"],"mappings":"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","sourcesContent":["import { HabboWebTools, RoomEnterEffect } from '@nitrots/nitro-renderer';\nimport { CreateLinkEvent, GetConfiguration, GetNitroInstance, LocalizeText, PlaySound } from '..';\nimport { NotificationAlertEvent, NotificationConfirmEvent } from '../../events';\nimport { NotificationBubbleEvent } from '../../events/notification-center/NotificationBubbleEvent';\nimport { DispatchUiEvent } from '../../hooks';\nimport { NotificationAlertType } from './NotificationAlertType';\nimport { NotificationBubbleType } from './NotificationBubbleType';\n\nexport class NotificationUtilities\n{\n    private static MODERATION_DISCLAIMER_SHOWN: boolean = false;\n    private static MODERATION_DISCLAIMER_DELAY_MS: number = 5000;\n    private static MODERATION_DISCLAIMER_TIMEOUT: ReturnType<typeof setTimeout> = null;\n\n    public static BUBBLES_DISABLED: boolean = false;\n\n    private static cleanText(text: string): string\n    {\n        return text.replace(/\\\\r/g, '\\r')\n    }\n\n    private static getTimeZeroPadded(time: number): string\n    {\n        const text = ('0' + time);\n\n        return text.substr((text.length - 2), text.length);\n    }\n\n    private static getMainNotificationConfig(): { [key: string]: { delivery?: string, display?: string; title?: string; image?: string }}\n    {\n        return GetConfiguration<{ [key: string]: { delivery?: string, display?: string; title?: string; image?: string }}>('notification', {});\n    }\n\n    private static getNotificationConfig(key: string): { delivery?: string, display?: string; title?: string; image?: string }\n    {\n        const mainConfig = this.getMainNotificationConfig();\n\n        if(!mainConfig) return null;\n\n        return mainConfig[key];\n    }\n\n    public static getNotificationPart(options: Map<string, string>, type: string, key: string, localize: boolean): string\n    {\n        if(options.has(key)) return options.get(key);\n\n        const localizeKey = [ 'notification', type, key ].join('.');\n\n        if(GetNitroInstance().localization.hasValue(localizeKey) || localize)\n        {\n            return LocalizeText(localizeKey, Array.from(options.keys()), Array.from(options.values()));\n        }\n\n        return null;\n    }\n\n    public static getNotificationImageUrl(options: Map<string, string>, type: string): string\n    {\n        let imageUrl = options.get('image');\n\n        if(!imageUrl) imageUrl = GetConfiguration<string>('image.library.notifications.url', '').replace('%image%', type.replace(/\\./g, '_'));\n\n        return LocalizeText(imageUrl);\n    }\n\n    public static showNotification(type: string, options: Map<string, string> = null): void\n    {\n        if(!options) options = new Map();\n\n        const configuration = this.getNotificationConfig(('notification.' + type));\n\n        if(configuration) for(const key in configuration) options.set(key, configuration[key]);\n\n        const title = this.getNotificationPart(options, type, 'title', true);\n        const message = this.getNotificationPart(options, type, 'message', true).replace(/\\\\r/g, '\\r');\n        const linkTitle = this.getNotificationPart(options, type, 'linkTitle', false);\n        const linkUrl = this.getNotificationPart(options, type, 'linkUrl', false);\n        const image = this.getNotificationImageUrl(options, type);\n        \n        if(options.get('display') === 'BUBBLE')\n        {\n            this.showSingleBubble(LocalizeText(message), NotificationBubbleType.INFO, image, linkUrl);\n        }\n        else\n        {\n            this.simpleAlert(message, type, linkUrl, linkTitle, title, image);\n        }\n\n        if(options.get('sound')) PlaySound(options.get('sound'));\n    }\n\n    public static showSingleBubble(message: string, type: string, imageUrl: string = null, internalLink: string = null): void\n    {\n        if(this.BUBBLES_DISABLED) return;\n\n        DispatchUiEvent(new NotificationBubbleEvent(message, type, imageUrl, internalLink));\n    }\n\n    public static showClubGiftNotification(numGifts: number): void\n    {\n        if(numGifts <= 0) return;\n\n        this.showSingleBubble(numGifts.toString(), NotificationBubbleType.CLUBGIFT, null, ('catalog/open/' + GetConfiguration('catalog.links')['hc.hc_gifts']));\n    }\n\n    public static handleMOTD(messages: string[]): void\n    {\n        messages = messages.map(message => this.cleanText(message));\n\n        DispatchUiEvent(new NotificationAlertEvent(messages, NotificationAlertType.MOTD, null, null, LocalizeText('notifications.motd.title')));\n    }\n\n    public static confirm(message: string, onConfirm: Function, onCancel: Function, confirmText: string = null, cancelText: string = null, title: string = null, type: string = null): void\n    {\n        if(!confirmText || !confirmText.length) confirmText = LocalizeText('generic.confirm');\n\n        if(!cancelText || !cancelText.length) cancelText = LocalizeText('generic.cancel');\n\n        if(!title || !title.length) title = LocalizeText('notifications.broadcast.title');\n\n        DispatchUiEvent(new NotificationConfirmEvent(type, this.cleanText(message), onConfirm, onCancel, confirmText, cancelText, title));\n    }\n\n    public static simpleAlert(message: string, type: string = null, clickUrl: string = null, clickUrlText: string = null, title: string = null, imageUrl: string = null): void\n    {\n        if(!title || !title.length) title = LocalizeText('notifications.broadcast.title');\n\n        if(!type || !type.length) type = NotificationAlertType.DEFAULT;\n\n        DispatchUiEvent(new NotificationAlertEvent([ this.cleanText(message) ], type, clickUrl, clickUrlText, title, imageUrl));\n    }\n\n    public static showNitroAlert(): void\n    {\n        DispatchUiEvent(new NotificationAlertEvent(null, NotificationAlertType.NITRO));\n    }\n\n    public static showModeratorMessage(message: string, url: string = null, showHabboWay: boolean = true): void\n    {\n        this.simpleAlert(message, NotificationAlertType.DEFAULT, url, LocalizeText('mod.alert.link'), LocalizeText('mod.alert.title'));\n    }\n\n    public static handleModeratorCaution(message: string, url: string = null): void\n    {\n        this.showModeratorMessage(message, url);\n    }\n\n    public static handleModeratorMessage(message: string, url: string = null): void\n    {\n        this.showModeratorMessage(message, url, false);\n    }\n\n    public static handleUserBannedMessage(message: string): void\n    {\n        this.showModeratorMessage(message);\n    }\n\n    public static handleHotelClosedMessage(open: number, minute: number, thrownOut: boolean): void\n    {\n        this.simpleAlert( LocalizeText(('opening.hours.' + (thrownOut ? 'disconnected' : 'closed')), [ 'h', 'm' ], [ this.getTimeZeroPadded(open), this.getTimeZeroPadded(minute) ]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n    }\n\n    public static handleHotelMaintenanceMessage(minutesUntilMaintenance: number, duration: number): void\n    {\n        this.simpleAlert(LocalizeText('maintenance.shutdown', [ 'm', 'd' ], [ minutesUntilMaintenance.toString(), duration.toString() ]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n    }\n\n    public static handleHotelClosingMessage(minutes: number): void\n    {\n        this.simpleAlert(LocalizeText('opening.hours.shutdown', [ 'm' ], [ minutes.toString() ]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n    }\n\n    public static handleLoginFailedHotelClosedMessage(openHour: number, openMinutes: number): void\n    {\n        this.simpleAlert(LocalizeText('opening.hours.disconnected', [ 'h', 'm' ], [ openHour.toString(), openMinutes.toString() ]), NotificationAlertType.DEFAULT, null, null, LocalizeText('opening.hours.title'));\n    }\n\n    public static openUrl(url: string): void\n    {\n        if(!url || !url.length) return;\n        \n        if(url.startsWith('http'))\n        {\n            HabboWebTools.openWebPage(url);\n        }\n        else\n        {\n            CreateLinkEvent(url);\n        }\n    }\n\n    public static showModerationDisclaimer(): void\n    {\n        if(RoomEnterEffect.isRunning())\n        {\n            if(this.MODERATION_DISCLAIMER_TIMEOUT) return;\n\n            this.MODERATION_DISCLAIMER_TIMEOUT = setTimeout(() =>\n            {\n                this.showModerationDisclaimer();\n            }, (RoomEnterEffect.totalRunningTime + this.MODERATION_DISCLAIMER_DELAY_MS));\n        }\n        else\n        {\n            if(this.MODERATION_DISCLAIMER_SHOWN) return;\n\n            this.showSingleBubble(LocalizeText('mod.chatdisclaimer'), NotificationBubbleType.INFO);\n\n            this.MODERATION_DISCLAIMER_SHOWN = true;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}