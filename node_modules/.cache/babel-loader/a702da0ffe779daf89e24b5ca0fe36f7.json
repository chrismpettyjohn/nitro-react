{"ast":null,"code":"import { TextureUtils } from '../../../../../room';\nexport class RenderRoomMessageComposer {\n  constructor() {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    let _arg_2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    let _arg_3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    let _arg_4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n\n    let _arg_5 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n\n    this._data = void 0;\n    this._data = [];\n  }\n\n  getMessageArray() {\n    return this._data;\n  }\n\n  dispose() {\n    this._data = [];\n  }\n\n  assignBitmap(texture) {\n    const url = TextureUtils.generateImageUrl(texture);\n    if (!url) return;\n    const base64Data = url.split(',')[1];\n    const binaryData = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));\n\n    this._data.push(binaryData.byteLength, binaryData.buffer);\n  }\n\n  assignBase64(base64) {\n    const base64Data = base64.split(',')[1];\n    const binaryData = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));\n\n    this._data.push(binaryData.byteLength, binaryData.buffer);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/outgoing/camera/RenderRoomMessageComposer.ts"],"names":["TextureUtils","RenderRoomMessageComposer","constructor","k","_arg_2","_arg_3","_arg_4","_arg_5","_data","getMessageArray","dispose","assignBitmap","texture","url","generateImageUrl","base64Data","split","binaryData","Uint8Array","from","atob","c","charCodeAt","push","byteLength","buffer","assignBase64","base64"],"mappings":"AAEA,SAASA,YAAT,QAA6B,qBAA7B;AAEA,OAAO,MAAMC,yBAAN,CACP;AAGIC,EAAAA,WAAW,GACX;AAAA,QADYC,CACZ,uEADoB,EACpB;;AAAA,QADwBC,MACxB,uEADyC,EACzC;;AAAA,QAD6CC,MAC7C,uEAD8D,EAC9D;;AAAA,QADkEC,MAClE,uEADmF,CAAC,CACpF;;AAAA,QADuFC,MACvF,uEADwG,CAAC,CACzG;;AAAA,SAHQC,KAGR;AACI,SAAKA,KAAL,GAAa,EAAb;AACH;;AAEMC,EAAAA,eAAe,GACtB;AACI,WAAO,KAAKD,KAAZ;AACH;;AAEME,EAAAA,OAAO,GACd;AACI,SAAKF,KAAL,GAAa,EAAb;AACH;;AAEMG,EAAAA,YAAY,CAACC,OAAD,EACnB;AACI,UAAMC,GAAG,GAAGb,YAAY,CAACc,gBAAb,CAA8BF,OAA9B,CAAZ;AAEA,QAAG,CAACC,GAAJ,EAAS;AAET,UAAME,UAAU,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAnB;AACA,UAAMC,UAAU,GAAGC,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACL,UAAD,CAApB,EAAkCM,CAAC,IAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAvC,CAAnB;;AAEA,SAAKd,KAAL,CAAWe,IAAX,CAAgBN,UAAU,CAACO,UAA3B,EAAuCP,UAAU,CAACQ,MAAlD;AACH;;AAEMC,EAAAA,YAAY,CAACC,MAAD,EACnB;AACI,UAAMZ,UAAU,GAAGY,MAAM,CAACX,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAnB;AACA,UAAMC,UAAU,GAAGC,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACL,UAAD,CAApB,EAAkCM,CAAC,IAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAvC,CAAnB;;AAEA,SAAKd,KAAL,CAAWe,IAAX,CAAgBN,UAAU,CAACO,UAA3B,EAAuCP,UAAU,CAACQ,MAAlD;AACH;;AApCL","sourcesContent":["import { RenderTexture } from '@pixi/core';\r\nimport { IMessageComposer } from '../../../../../core/communication/messages/IMessageComposer';\r\nimport { TextureUtils } from '../../../../../room';\r\n\r\nexport class RenderRoomMessageComposer implements IMessageComposer<ConstructorParameters<typeof RenderRoomMessageComposer>>\r\n{\r\n    private _data: any;\r\n\r\n    constructor(k:any = '', _arg_2: string = '', _arg_3: string = '', _arg_4: number = -1, _arg_5: number = -1)\r\n    {\r\n        this._data = [];\r\n    }\r\n\r\n    public getMessageArray()\r\n    {\r\n        return this._data;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        this._data = [];\r\n    }\r\n\r\n    public assignBitmap(texture: RenderTexture):void\r\n    {\r\n        const url = TextureUtils.generateImageUrl(texture);\r\n\r\n        if(!url) return;\r\n\r\n        const base64Data = url.split(',')[1];\r\n        const binaryData = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));\r\n\r\n        this._data.push(binaryData.byteLength, binaryData.buffer);\r\n    }\r\n\r\n    public assignBase64(base64: string):void\r\n    {\r\n        const base64Data = base64.split(',')[1];\r\n        const binaryData = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));\r\n\r\n        this._data.push(binaryData.byteLength, binaryData.buffer);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}