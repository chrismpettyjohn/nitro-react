{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/layout/LayoutBadgeImageView.tsx\",\n    _s = $RefreshSig$();\n\nimport { BadgeImageReadyEvent, NitroSprite, TextureUtils } from '@nitrots/nitro-renderer';\nimport { useEffect, useMemo, useState } from 'react';\nimport { GetConfiguration, GetSessionDataManager, LocalizeBadgeDescription, LocalizeBadgeName, LocalizeText } from '../../api';\nimport { Base } from '../Base';\nimport { Text } from '../../common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LayoutBadgeImageView = props => {\n  _s();\n\n  const {\n    badgeCode = null,\n    isGroup = false,\n    showInfo = false,\n    customTitle = null,\n    isGrayscale = false,\n    scale = 1,\n    classNames = [],\n    style = {},\n    children = null,\n    ...rest\n  } = props;\n  const [imageElement, setImageElement] = useState(null);\n  const getClassNames = useMemo(() => {\n    const newClassNames = ['badge-image'];\n    if (isGroup) newClassNames.push('group-badge');\n    if (isGrayscale) newClassNames.push('grayscale');\n    if (classNames.length) newClassNames.push(...classNames);\n    return newClassNames;\n  }, [classNames, isGroup, isGrayscale]);\n  const getStyle = useMemo(() => {\n    let newStyle = {};\n\n    if (imageElement) {\n      newStyle.backgroundImage = `url('${imageElement.src}')`;\n      newStyle.width = imageElement.width;\n      newStyle.height = imageElement.height;\n\n      if (scale !== 1) {\n        newStyle.transform = `scale(${scale})`;\n        if (!(scale % 1)) newStyle.imageRendering = 'pixelated';\n        newStyle.width = imageElement.width * scale;\n        newStyle.height = imageElement.height * scale;\n      }\n    }\n\n    if (Object.keys(style).length) newStyle = { ...newStyle,\n      ...style\n    };\n    return newStyle;\n  }, [imageElement, scale, style]);\n  useEffect(() => {\n    if (!badgeCode || !badgeCode.length) return;\n    let didSetBadge = false;\n\n    const onBadgeImageReadyEvent = event => {\n      if (event.badgeId !== badgeCode) return;\n      const element = TextureUtils.generateImage(new NitroSprite(event.image));\n\n      element.onload = () => setImageElement(element);\n\n      didSetBadge = true;\n      GetSessionDataManager().events.removeEventListener(BadgeImageReadyEvent.IMAGE_READY, onBadgeImageReadyEvent);\n    };\n\n    GetSessionDataManager().events.addEventListener(BadgeImageReadyEvent.IMAGE_READY, onBadgeImageReadyEvent);\n    const texture = isGroup ? GetSessionDataManager().getGroupBadgeImage(badgeCode) : GetSessionDataManager().getBadgeImage(badgeCode);\n\n    if (texture && !didSetBadge) {\n      const element = TextureUtils.generateImage(new NitroSprite(texture));\n\n      element.onload = () => setImageElement(element);\n    }\n\n    return () => GetSessionDataManager().events.removeEventListener(BadgeImageReadyEvent.IMAGE_READY, onBadgeImageReadyEvent);\n  }, [badgeCode, isGroup]);\n\n  const BadgeInformationView = props => {\n    const {\n      title = null,\n      description = null\n    } = props;\n    if (!GetConfiguration('badge.descriptions.enabled', true)) return null;\n    return /*#__PURE__*/_jsxDEV(Base, {\n      className: \"badge-information text-black pt-2 px-2 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-1 pb-1\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge-desc\",\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Base, {\n    classNames: getClassNames,\n    style: getStyle,\n    ...rest,\n    children: [showInfo && GetConfiguration('badge.descriptions.enabled', true) && /*#__PURE__*/_jsxDEV(Base, {\n      className: \"badge-information text-black p-2\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        gfbold: true,\n        className: \"mb-1\",\n        children: isGroup ? customTitle : LocalizeBadgeName(badgeCode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge-desc\",\n        children: isGroup ? LocalizeText('group.badgepopup.body') : LocalizeBadgeDescription(badgeCode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LayoutBadgeImageView, \"DOKit9gMOdDhA4Xwd7K5KCoyH28=\");\n\n_c = LayoutBadgeImageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutBadgeImageView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/layout/LayoutBadgeImageView.tsx"],"names":["BadgeImageReadyEvent","NitroSprite","TextureUtils","useEffect","useMemo","useState","GetConfiguration","GetSessionDataManager","LocalizeBadgeDescription","LocalizeBadgeName","LocalizeText","Base","Text","LayoutBadgeImageView","props","badgeCode","isGroup","showInfo","customTitle","isGrayscale","scale","classNames","style","children","rest","imageElement","setImageElement","getClassNames","newClassNames","push","length","getStyle","newStyle","backgroundImage","src","width","height","transform","imageRendering","Object","keys","didSetBadge","onBadgeImageReadyEvent","event","badgeId","element","generateImage","image","onload","events","removeEventListener","IMAGE_READY","addEventListener","texture","getGroupBadgeImage","getBadgeImage","BadgeInformationView","title","description"],"mappings":"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","sourcesContent":["import { BadgeImageReadyEvent, NitroSprite, TextureUtils } from '@nitrots/nitro-renderer';\nimport { CSSProperties, FC, useEffect, useMemo, useState } from 'react';\nimport { GetConfiguration, GetSessionDataManager, LocalizeBadgeDescription, LocalizeBadgeName, LocalizeText } from '../../api';\nimport { Base, BaseProps } from '../Base';\nimport { Text } from '../../common';\n\nexport interface LayoutBadgeImageViewProps extends BaseProps<HTMLDivElement>\n{\n    badgeCode: string;\n    isGroup?: boolean;\n    showInfo?: boolean;\n    customTitle?: string;\n    isGrayscale?: boolean;\n    scale?: number;\n}\n\nexport const LayoutBadgeImageView: FC<LayoutBadgeImageViewProps> = props =>\n{\n    const { badgeCode = null, isGroup = false, showInfo = false, customTitle = null, isGrayscale = false, scale = 1, classNames = [], style = {}, children = null, ...rest } = props;\n    const [ imageElement, setImageElement ] = useState<HTMLImageElement>(null);\n\n    const getClassNames = useMemo(() =>\n    {\n        const newClassNames: string[] = [ 'badge-image' ];\n\n        if(isGroup) newClassNames.push('group-badge');\n\n        if(isGrayscale) newClassNames.push('grayscale');\n\n        if(classNames.length) newClassNames.push(...classNames);\n\n        return newClassNames;\n    }, [ classNames, isGroup, isGrayscale ]);\n\n    const getStyle = useMemo(() =>\n    {\n        let newStyle: CSSProperties = {};\n\n        if(imageElement)\n        {\n            newStyle.backgroundImage = `url('${ imageElement.src }')`;\n            newStyle.width = imageElement.width;\n            newStyle.height = imageElement.height;\n\n            if(scale !== 1)\n            {\n                newStyle.transform = `scale(${ scale })`;\n\n                if(!(scale % 1)) newStyle.imageRendering = 'pixelated';\n            \n                newStyle.width = (imageElement.width * scale);\n                newStyle.height = (imageElement.height * scale);\n            }\n        }\n\n        if(Object.keys(style).length) newStyle = { ...newStyle, ...style };\n\n        return newStyle;\n    }, [ imageElement, scale, style ]);\n\n    useEffect(() =>\n    {\n        if(!badgeCode || !badgeCode.length) return;\n\n        let didSetBadge = false;\n\n        const onBadgeImageReadyEvent = (event: BadgeImageReadyEvent) =>\n        {\n            if(event.badgeId !== badgeCode) return;\n\n            const element = TextureUtils.generateImage(new NitroSprite(event.image));\n\n            element.onload = () => setImageElement(element);\n\n            didSetBadge = true;\n            \n            GetSessionDataManager().events.removeEventListener(BadgeImageReadyEvent.IMAGE_READY, onBadgeImageReadyEvent);\n        }\n\n        GetSessionDataManager().events.addEventListener(BadgeImageReadyEvent.IMAGE_READY, onBadgeImageReadyEvent);\n\n        const texture = isGroup ? GetSessionDataManager().getGroupBadgeImage(badgeCode) : GetSessionDataManager().getBadgeImage(badgeCode);\n\n        if(texture && !didSetBadge)\n        {\n            const element = TextureUtils.generateImage(new NitroSprite(texture));\n\n            element.onload = () => setImageElement(element);\n        }\n\n        return () => GetSessionDataManager().events.removeEventListener(BadgeImageReadyEvent.IMAGE_READY, onBadgeImageReadyEvent);\n    }, [ badgeCode, isGroup ]);\n\n    const BadgeInformationView = (props: { title: string, description: string }) =>\n    {\n        const { title = null, description = null } = props;\n\n        if(!GetConfiguration('badge.descriptions.enabled', true)) return null;\n\n        return (\n            <Base className=\"badge-information text-black pt-2 px-2 pb-4\">\n                <div className=\"mb-1 pb-1\">{ title }</div>\n                <div className=\"badge-desc\">{ description }</div>\n            </Base>\n        );\n    };\n\n    return (\n        <Base classNames={ getClassNames } style={ getStyle } { ...rest }>\n            { (showInfo && GetConfiguration<boolean>('badge.descriptions.enabled', true)) &&\n                <Base className=\"badge-information text-black p-2\">\n                    <Text gfbold className=\"mb-1\">{ isGroup ? customTitle : LocalizeBadgeName(badgeCode) }</Text>\n                    <div className=\"badge-desc\">{ isGroup ? LocalizeText('group.badgepopup.body') : LocalizeBadgeDescription(badgeCode) }</div>\n                </Base> }\n            { children }\n        </Base>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}