{"ast":null,"code":"import { Vector3d } from '../../../../../room';\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\nimport { FurniturePlanetSystemVisualizationPlanetObject } from './FurniturePlanetSystemVisualizationPlanetObject';\nexport class FurniturePlanetSystemVisualization extends FurnitureAnimatedVisualization {\n  constructor() {\n    super();\n    this._planetIndex = void 0;\n    this._planetNameIndex = void 0;\n    this._offsetArray = void 0;\n    this._rootPosition = void 0;\n    this._offsetArray = [];\n    this._rootPosition = new Vector3d();\n  }\n\n  dispose() {\n    if (this._planetIndex) {\n      while (this._planetIndex.length > 0) {\n        const planet = this._planetIndex.shift();\n\n        planet.dispose();\n      }\n    }\n\n    this._planetIndex = null;\n    this._planetNameIndex = null;\n  }\n\n  updateAnimation(scale) {\n    if (!this._planetIndex && this.spriteCount > 0) {\n      if (!this.processPlanets()) return 0;\n    }\n\n    if (this._planetIndex) {\n      for (const planet of this._planetIndex) planet.update(this._offsetArray, this._rootPosition, scale);\n\n      return super.updateAnimation(scale);\n    }\n\n    return 0;\n  }\n\n  getLayerXOffset(scale, direction, layerId) {\n    if (this._offsetArray[layerId]) {\n      return this._offsetArray[layerId].x;\n    }\n\n    return super.getLayerXOffset(scale, direction, layerId);\n  }\n\n  getLayerYOffset(scale, direction, layerId) {\n    if (this._offsetArray[layerId]) {\n      return this._offsetArray[layerId].y;\n    }\n\n    return super.getLayerYOffset(scale, direction, layerId);\n  }\n\n  getLayerZOffset(scale, direction, layerId) {\n    if (this._offsetArray[layerId]) {\n      return this._offsetArray[layerId].z;\n    }\n\n    return super.getLayerZOffset(scale, direction, layerId);\n  }\n\n  processPlanets() {\n    if (!this.object || !this.object.model) return;\n    const planetSystems = this.object.model.getValue(RoomObjectVariable.FURNITURE_PLANETSYSTEM_DATA);\n    if (!planetSystems) return false;\n    this._planetIndex = [];\n    this._planetNameIndex = [];\n\n    for (const planet of planetSystems) {\n      const sprite = this.getSprite(planet.id);\n\n      if (sprite) {\n        this.addPlanet(planet.name, planet.id, planet.parent, planet.radius || 0, planet.arcSpeed || 0, planet.arcOffset || 0, planet.height || 0);\n      }\n    }\n\n    return true;\n  }\n\n  addPlanet(name, index, parentName, radius, arcSpeed, arcOffset, height) {\n    if (!this._planetIndex) return;\n    const planet = new FurniturePlanetSystemVisualizationPlanetObject(name, index, radius, arcSpeed, arcOffset, height);\n    const existingPlanet = this.getPlanet(parentName);\n    if (existingPlanet) existingPlanet.addChild(planet);else {\n      this._planetIndex.push(planet);\n\n      this._planetNameIndex.push(name);\n    }\n  }\n\n  getPlanet(name) {\n    for (const planet of this._planetIndex) {\n      if (planet.name === name) return planet;\n      if (planet.hasChild(name)) return planet.getChild(name);\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/furniture/FurniturePlanetSystemVisualization.ts"],"names":["Vector3d","RoomObjectVariable","FurnitureAnimatedVisualization","FurniturePlanetSystemVisualizationPlanetObject","FurniturePlanetSystemVisualization","constructor","_planetIndex","_planetNameIndex","_offsetArray","_rootPosition","dispose","length","planet","shift","updateAnimation","scale","spriteCount","processPlanets","update","getLayerXOffset","direction","layerId","x","getLayerYOffset","y","getLayerZOffset","z","object","model","planetSystems","getValue","FURNITURE_PLANETSYSTEM_DATA","sprite","getSprite","id","addPlanet","name","parent","radius","arcSpeed","arcOffset","height","index","parentName","existingPlanet","getPlanet","addChild","push","hasChild","getChild"],"mappings":"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","sourcesContent":["import { IAssetLogicPlanetSystem } from '../../../../../core';\r\nimport { Vector3d } from '../../../../../room';\r\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\r\nimport { FurnitureAnimatedVisualization } from './FurnitureAnimatedVisualization';\r\nimport { FurniturePlanetSystemVisualizationPlanetObject } from './FurniturePlanetSystemVisualizationPlanetObject';\r\n\r\nexport class FurniturePlanetSystemVisualization extends FurnitureAnimatedVisualization\r\n{\r\n    private _planetIndex: FurniturePlanetSystemVisualizationPlanetObject[];\r\n    private _planetNameIndex: string[];\r\n    private _offsetArray: Vector3d[];\r\n    private _rootPosition: Vector3d;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._offsetArray = [];\r\n        this._rootPosition = new Vector3d();\r\n    }\r\n\r\n    public dispose():void\r\n    {\r\n        if(this._planetIndex)\r\n        {\r\n            while(this._planetIndex.length > 0)\r\n            {\r\n                const planet = this._planetIndex.shift();\r\n\r\n                planet.dispose();\r\n            }\r\n        }\r\n\r\n        this._planetIndex = null;\r\n        this._planetNameIndex = null;\r\n    }\r\n\r\n    protected updateAnimation(scale: number): number\r\n    {\r\n        if(!this._planetIndex && (this.spriteCount > 0))\r\n        {\r\n            if(!this.processPlanets()) return 0;\r\n        }\r\n\r\n        if(this._planetIndex)\r\n        {\r\n            for(const planet of this._planetIndex) planet.update(this._offsetArray, this._rootPosition, scale);\r\n\r\n            return super.updateAnimation(scale);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    protected getLayerXOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if(this._offsetArray[layerId])\r\n        {\r\n            return this._offsetArray[layerId].x;\r\n        }\r\n\r\n        return super.getLayerXOffset(scale, direction, layerId);\r\n    }\r\n\r\n    protected getLayerYOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if(this._offsetArray[layerId])\r\n        {\r\n            return this._offsetArray[layerId].y;\r\n        }\r\n\r\n        return super.getLayerYOffset(scale, direction, layerId);\r\n    }\r\n\r\n    protected getLayerZOffset(scale: number, direction: number, layerId: number): number\r\n    {\r\n        if(this._offsetArray[layerId])\r\n        {\r\n            return this._offsetArray[layerId].z;\r\n        }\r\n\r\n        return super.getLayerZOffset(scale, direction, layerId);\r\n    }\r\n\r\n    private processPlanets(): boolean\r\n    {\r\n        if(!this.object || !this.object.model) return;\r\n\r\n        const planetSystems = this.object.model.getValue<IAssetLogicPlanetSystem[]>(RoomObjectVariable.FURNITURE_PLANETSYSTEM_DATA);\r\n\r\n        if(!planetSystems) return false;\r\n\r\n        this._planetIndex = [];\r\n        this._planetNameIndex = [];\r\n\r\n        for(const planet of planetSystems)\r\n        {\r\n            const sprite = this.getSprite(planet.id);\r\n\r\n            if(sprite)\r\n            {\r\n                this.addPlanet(planet.name, planet.id, planet.parent, (planet.radius || 0), (planet.arcSpeed || 0), (planet.arcOffset || 0), (planet.height || 0));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private addPlanet(name: string, index: number, parentName: string, radius: number, arcSpeed: number, arcOffset: number, height: number):void\r\n    {\r\n        if(!this._planetIndex) return;\r\n\r\n        const planet = new FurniturePlanetSystemVisualizationPlanetObject(name, index, radius, arcSpeed, arcOffset, height);\r\n        const existingPlanet = this.getPlanet(parentName);\r\n\r\n        if(existingPlanet) existingPlanet.addChild(planet);\r\n        else\r\n        {\r\n            this._planetIndex.push(planet);\r\n            this._planetNameIndex.push(name);\r\n        }\r\n    }\r\n\r\n    private getPlanet(name: string): FurniturePlanetSystemVisualizationPlanetObject\r\n    {\r\n        for(const planet of this._planetIndex)\r\n        {\r\n            if(planet.name === name) return planet;\r\n\r\n            if(planet.hasChild(name)) return planet.getChild(name);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}