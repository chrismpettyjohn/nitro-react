{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/camera/CameraWidgetView.tsx\",\n    _s = $RefreshSig$();\n\nimport { InitCameraMessageEvent, RequestCameraConfigurationComposer, RoomCameraWidgetManagerEvent, RoomSessionEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, GetRoomCameraWidgetManager, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { UseCameraEvent, UseMessageEventHook, UseRoomSessionManagerEvent } from '../../hooks';\nimport { CameraWidgetContextProvider } from './CameraWidgetContext';\nimport { CameraWidgetCaptureView } from './views/capture/CameraWidgetCaptureView';\nimport { CameraWidgetCheckoutView } from './views/checkout/CameraWidgetCheckoutView';\nimport { CameraWidgetEditorView } from './views/editor/CameraWidgetEditorView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MODE_NONE = 0;\nconst MODE_CAPTURE = 1;\nconst MODE_EDITOR = 2;\nconst MODE_CHECKOUT = 3;\nexport const CameraWidgetView = props => {\n  _s();\n\n  const [mode, setMode] = useState(MODE_NONE);\n  const [availableEffects, setAvailableEffects] = useState([]);\n  const [cameraRoll, setCameraRoll] = useState([]);\n  const [selectedPictureIndex, setSelectedPictureIndex] = useState(-1);\n  const [myLevel, setMyLevel] = useState(10);\n  const [base64Url, setSavedPictureUrl] = useState(null);\n  const [price, setPrice] = useState(null);\n  const onRoomCameraWidgetManagerEvent = useCallback(event => {\n    setAvailableEffects(Array.from(GetRoomCameraWidgetManager().effects.values()));\n  }, []);\n  UseCameraEvent(RoomCameraWidgetManagerEvent.INITIALIZED, onRoomCameraWidgetManagerEvent);\n  const onCameraConfigurationEvent = useCallback(event => {\n    const parser = event.getParser();\n    setPrice({\n      credits: parser.creditPrice,\n      duckets: parser.ducketPrice,\n      publishDucketPrice: parser.publishDucketPrice\n    });\n  }, []);\n  UseMessageEventHook(InitCameraMessageEvent, onCameraConfigurationEvent);\n  const onRoomSessionEvent = useCallback(event => {\n    setMode(MODE_NONE);\n  }, []);\n  UseRoomSessionManagerEvent(RoomSessionEvent.ENDED, onRoomSessionEvent);\n  useEffect(() => {\n    if (!GetRoomCameraWidgetManager().isLoaded) {\n      GetRoomCameraWidgetManager().init();\n      SendMessageComposer(new RequestCameraConfigurationComposer());\n      return;\n    }\n  }, []);\n  const processAction = useCallback(type => {\n    switch (type) {\n      case 'close':\n        setMode(MODE_NONE);\n        return;\n\n      case 'edit':\n        setMode(MODE_EDITOR);\n        return;\n\n      case 'delete':\n        setCameraRoll(prevValue => {\n          const clone = [...prevValue];\n          clone.splice(selectedPictureIndex, 1);\n          return clone;\n        });\n        return;\n\n      case 'editor_cancel':\n        setMode(MODE_CAPTURE);\n        return;\n    }\n  }, [selectedPictureIndex]);\n  const checkoutPictureUrl = useCallback(pictureUrl => {\n    setSavedPictureUrl(pictureUrl);\n    setMode(MODE_CHECKOUT);\n  }, []);\n  const linkReceived = useCallback(url => {\n    const parts = url.split('/');\n    if (parts.length < 2) return;\n\n    switch (parts[1]) {\n      case 'show':\n        setMode(MODE_CAPTURE);\n        return;\n\n      case 'hide':\n        setMode(MODE_NONE);\n        return;\n\n      case 'toggle':\n        setMode(prevValue => {\n          if (!prevValue) return MODE_CAPTURE;else return MODE_NONE;\n        });\n        return;\n    }\n  }, []);\n  useEffect(() => {\n    const linkTracker = {\n      linkReceived,\n      eventUrlPrefix: 'camera/'\n    };\n    AddEventLinkTracker(linkTracker);\n    return () => RemoveLinkEventTracker(linkTracker);\n  }, [linkReceived]);\n  if (mode === MODE_NONE) return null;\n  return /*#__PURE__*/_jsxDEV(CameraWidgetContextProvider, {\n    value: {\n      cameraRoll,\n      setCameraRoll,\n      selectedPictureIndex,\n      setSelectedPictureIndex\n    },\n    children: [mode === MODE_CAPTURE && /*#__PURE__*/_jsxDEV(CameraWidgetCaptureView, {\n      onClose: () => processAction('close'),\n      onEdit: () => processAction('edit'),\n      onDelete: () => processAction('delete')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 42\n    }, this), mode === MODE_EDITOR && /*#__PURE__*/_jsxDEV(CameraWidgetEditorView, {\n      picture: cameraRoll[selectedPictureIndex],\n      myLevel: myLevel,\n      onClose: () => processAction('close'),\n      onCancel: () => processAction('editor_cancel'),\n      onCheckout: checkoutPictureUrl,\n      availableEffects: availableEffects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 41\n    }, this), mode === MODE_CHECKOUT && /*#__PURE__*/_jsxDEV(CameraWidgetCheckoutView, {\n      base64Url: base64Url,\n      onCloseClick: () => processAction('close'),\n      onCancelClick: () => processAction('editor_cancel'),\n      price: price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 43\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CameraWidgetView, \"IqZfWI4Mj8mTmY9dL+9aZGFEtFQ=\");\n\n_c = CameraWidgetView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CameraWidgetView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/camera/CameraWidgetView.tsx"],"names":["InitCameraMessageEvent","RequestCameraConfigurationComposer","RoomCameraWidgetManagerEvent","RoomSessionEvent","useCallback","useEffect","useState","AddEventLinkTracker","GetRoomCameraWidgetManager","RemoveLinkEventTracker","SendMessageComposer","UseCameraEvent","UseMessageEventHook","UseRoomSessionManagerEvent","CameraWidgetContextProvider","CameraWidgetCaptureView","CameraWidgetCheckoutView","CameraWidgetEditorView","MODE_NONE","MODE_CAPTURE","MODE_EDITOR","MODE_CHECKOUT","CameraWidgetView","props","mode","setMode","availableEffects","setAvailableEffects","cameraRoll","setCameraRoll","selectedPictureIndex","setSelectedPictureIndex","myLevel","setMyLevel","base64Url","setSavedPictureUrl","price","setPrice","onRoomCameraWidgetManagerEvent","event","Array","from","effects","values","INITIALIZED","onCameraConfigurationEvent","parser","getParser","credits","creditPrice","duckets","ducketPrice","publishDucketPrice","onRoomSessionEvent","ENDED","isLoaded","init","processAction","type","prevValue","clone","splice","checkoutPictureUrl","pictureUrl","linkReceived","url","parts","split","length","linkTracker","eventUrlPrefix"],"mappings":"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","sourcesContent":["import { ILinkEventTracker, InitCameraMessageEvent, IRoomCameraWidgetEffect, RequestCameraConfigurationComposer, RoomCameraWidgetManagerEvent, RoomSessionEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { AddEventLinkTracker, GetRoomCameraWidgetManager, RemoveLinkEventTracker, SendMessageComposer } from '../../api';\nimport { UseCameraEvent, UseMessageEventHook, UseRoomSessionManagerEvent } from '../../hooks';\nimport { CameraWidgetContextProvider } from './CameraWidgetContext';\nimport { CameraPicture } from './common/CameraPicture';\nimport { CameraWidgetCaptureView } from './views/capture/CameraWidgetCaptureView';\nimport { CameraWidgetCheckoutView } from './views/checkout/CameraWidgetCheckoutView';\nimport { CameraWidgetEditorView } from './views/editor/CameraWidgetEditorView';\n\nconst MODE_NONE: number = 0;\nconst MODE_CAPTURE: number = 1;\nconst MODE_EDITOR: number = 2;\nconst MODE_CHECKOUT: number = 3;\n\nexport const CameraWidgetView: FC<{}> = props =>\n{\n    const [ mode, setMode ] = useState<number>(MODE_NONE);\n    const [ availableEffects, setAvailableEffects ] = useState<IRoomCameraWidgetEffect[]>([]);\n    const [ cameraRoll, setCameraRoll ] = useState<CameraPicture[]>([]);\n    const [ selectedPictureIndex, setSelectedPictureIndex ] = useState(-1);\n    const [ myLevel, setMyLevel ] = useState(10);\n    const [ base64Url, setSavedPictureUrl ] = useState<string>(null);\n    const [ price, setPrice ] = useState<{ credits: number, duckets: number, publishDucketPrice: number }>(null);\n\n    const onRoomCameraWidgetManagerEvent = useCallback((event: RoomCameraWidgetManagerEvent) =>\n    {\n        setAvailableEffects(Array.from(GetRoomCameraWidgetManager().effects.values()))\n    }, []);\n\n    UseCameraEvent(RoomCameraWidgetManagerEvent.INITIALIZED, onRoomCameraWidgetManagerEvent);\n\n    const onCameraConfigurationEvent = useCallback((event: InitCameraMessageEvent) =>\n    {\n        const parser = event.getParser();\n        \n        setPrice({ credits: parser.creditPrice, duckets: parser.ducketPrice, publishDucketPrice: parser.publishDucketPrice });\n    }, []);\n\n    UseMessageEventHook(InitCameraMessageEvent, onCameraConfigurationEvent);\n\n    const onRoomSessionEvent = useCallback((event: RoomSessionEvent) =>\n    {\n        setMode(MODE_NONE);\n    }, []);\n\n    UseRoomSessionManagerEvent(RoomSessionEvent.ENDED, onRoomSessionEvent);\n\n    useEffect(() =>\n    {\n        if(!GetRoomCameraWidgetManager().isLoaded)\n        {\n            GetRoomCameraWidgetManager().init();\n\n            SendMessageComposer(new RequestCameraConfigurationComposer());\n\n            return;\n        }\n    }, []);\n\n    const processAction = useCallback((type: string) =>\n    {\n        switch(type)\n        {\n            case 'close':\n                setMode(MODE_NONE);\n                return;\n            case 'edit':\n                setMode(MODE_EDITOR);\n                return;\n            case 'delete':\n                setCameraRoll(prevValue =>\n                {\n                    const clone = [ ...prevValue ];\n\n                    clone.splice(selectedPictureIndex, 1);\n\n                    return clone;\n                });\n                return;\n            case 'editor_cancel':\n                setMode(MODE_CAPTURE);\n                return;\n        }\n    }, [ selectedPictureIndex ]);\n\n    const checkoutPictureUrl = useCallback((pictureUrl: string) =>\n    {\n        setSavedPictureUrl(pictureUrl);\n        setMode(MODE_CHECKOUT);\n    }, []);\n\n    const linkReceived = useCallback((url: string) =>\n    {\n        const parts = url.split('/');\n\n        if(parts.length < 2) return;\n\n        switch(parts[1])\n        {\n            case 'show':\n                setMode(MODE_CAPTURE);\n                return;\n            case 'hide':\n                setMode(MODE_NONE);\n                return;\n            case 'toggle':\n                setMode(prevValue =>\n                {\n                    if(!prevValue) return MODE_CAPTURE;\n                    else return MODE_NONE;\n                });\n                return;\n        }\n    }, []);\n\n    useEffect(() =>\n    {\n        const linkTracker: ILinkEventTracker = {\n            linkReceived,\n            eventUrlPrefix: 'camera/'\n        };\n\n        AddEventLinkTracker(linkTracker);\n\n        return () => RemoveLinkEventTracker(linkTracker);\n    }, [ linkReceived ]);\n\n    if(mode === MODE_NONE) return null;\n\n    return (\n        <CameraWidgetContextProvider value={ { cameraRoll, setCameraRoll, selectedPictureIndex, setSelectedPictureIndex } }>\n            { (mode === MODE_CAPTURE) && <CameraWidgetCaptureView onClose={ () => processAction('close') } onEdit={ () => processAction('edit') } onDelete={ () => processAction('delete') } /> }\n            { (mode === MODE_EDITOR) && <CameraWidgetEditorView picture={ cameraRoll[selectedPictureIndex] } myLevel={ myLevel } onClose={ () => processAction('close') } onCancel={ () => processAction('editor_cancel') } onCheckout={ checkoutPictureUrl } availableEffects={ availableEffects } /> }\n            { (mode === MODE_CHECKOUT) && <CameraWidgetCheckoutView base64Url={ base64Url } onCloseClick={ () => processAction('close') } onCancelClick={ () => processAction('editor_cancel') } price={ price }></CameraWidgetCheckoutView> }\n        </CameraWidgetContextProvider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}