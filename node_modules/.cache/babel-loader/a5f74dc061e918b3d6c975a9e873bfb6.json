{"ast":null,"code":"export class JukeboxSongDisksMessageParser {\n  constructor() {\n    this._songDisks = new Map();\n    this._maxLength = void 0;\n  }\n\n  flush() {\n    this._songDisks.clear();\n\n    this._maxLength = 0;\n    return true;\n  }\n\n  parse(wrapper) {\n    this._maxLength = wrapper.readInt();\n    const count = wrapper.readInt();\n\n    for (let i = 0; i < count; i++) {\n      this._songDisks.set(wrapper.readInt(), wrapper.readInt());\n    }\n\n    return true;\n  }\n\n  get songDisks() {\n    return this._songDisks;\n  }\n\n  get maxLength() {\n    return this._maxLength;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/sound/JukeboxSongDisksMessageParser.ts"],"names":["JukeboxSongDisksMessageParser","_songDisks","Map","_maxLength","flush","clear","parse","wrapper","readInt","count","i","set","songDisks","maxLength"],"mappings":"AAEA,OAAO,MAAMA,6BAAN,CACP;AAAA;AAAA,SACYC,UADZ,GAC8C,IAAIC,GAAJ,EAD9C;AAAA,SAEYC,UAFZ;AAAA;;AAIIC,EAAAA,KAAK,GACL;AACI,SAAKH,UAAL,CAAgBI,KAAhB;;AACA,SAAKF,UAAL,GAAkB,CAAlB;AACA,WAAO,IAAP;AACH;;AAEDG,EAAAA,KAAK,CAACC,OAAD,EACL;AACI,SAAKJ,UAAL,GAAkBI,OAAO,CAACC,OAAR,EAAlB;AACA,UAAMC,KAAK,GAAGF,OAAO,CAACC,OAAR,EAAd;;AAEA,SAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAnB,EAA0BC,CAAC,EAA3B,EACA;AACI,WAAKT,UAAL,CAAgBU,GAAhB,CAAoBJ,OAAO,CAACC,OAAR,EAApB,EAAuCD,OAAO,CAACC,OAAR,EAAvC;AACH;;AAED,WAAO,IAAP;AACH;;AAEmB,MAATI,SAAS,GACpB;AACI,WAAO,KAAKX,UAAZ;AACH;;AAEmB,MAATY,SAAS,GACpB;AACI,WAAO,KAAKV,UAAZ;AACH;;AAhCL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../core';\r\n\r\nexport class JukeboxSongDisksMessageParser implements IMessageParser\r\n{\r\n    private _songDisks: Map<number, number> = new Map();\r\n    private _maxLength: number;\r\n\r\n    flush(): boolean\r\n    {\r\n        this._songDisks.clear();\r\n        this._maxLength = 0;\r\n        return true;\r\n    }\r\n\r\n    parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        this._maxLength = wrapper.readInt();\r\n        const count = wrapper.readInt();\r\n\r\n        for(let i = 0; i < count; i++)\r\n        {\r\n            this._songDisks.set(wrapper.readInt(), wrapper.readInt());\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get songDisks(): Map<number, number>\r\n    {\r\n        return this._songDisks;\r\n    }\r\n\r\n    public get maxLength(): number\r\n    {\r\n        return this._maxLength;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}