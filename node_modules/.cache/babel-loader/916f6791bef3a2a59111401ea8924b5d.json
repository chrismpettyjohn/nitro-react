{"ast":null,"code":"import { Nitro } from '../../../nitro/Nitro';\nimport { NitroLogger } from '../../common/logger/NitroLogger';\nimport { EventDispatcher } from '../../events/EventDispatcher';\nimport { EvaWireFormat } from '../codec/evawire/EvaWireFormat';\nimport { SocketConnectionEvent } from '../events/SocketConnectionEvent';\nimport { MessageClassManager } from '../messages/MessageClassManager';\nimport { WebSocketEventEnum } from './enums/WebSocketEventEnum';\nexport class SocketConnection extends EventDispatcher {\n  constructor(communicationManager, stateListener) {\n    super();\n    this._communicationManager = void 0;\n    this._stateListener = void 0;\n    this._socket = void 0;\n    this._messages = void 0;\n    this._codec = void 0;\n    this._dataBuffer = void 0;\n    this._isReady = void 0;\n    this._pendingClientMessages = void 0;\n    this._pendingServerMessages = void 0;\n    this._isAuthenticated = void 0;\n    this._communicationManager = communicationManager;\n    this._stateListener = stateListener;\n    this._socket = null;\n    this._messages = new MessageClassManager();\n    this._codec = new EvaWireFormat();\n    this._dataBuffer = null;\n    this._isReady = false;\n    this._pendingClientMessages = [];\n    this._pendingServerMessages = [];\n    this._isAuthenticated = false;\n    this.onOpen = this.onOpen.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onError = this.onError.bind(this);\n    this.onMessage = this.onMessage.bind(this);\n  }\n\n  init(socketUrl) {\n    if (this._stateListener) {\n      this._stateListener.connectionInit(socketUrl);\n    }\n\n    this.createSocket(socketUrl);\n  }\n\n  onDispose() {\n    super.onDispose();\n    this.destroySocket();\n    this._communicationManager = null;\n    this._stateListener = null;\n    this._messages = null;\n    this._codec = null;\n    this._dataBuffer = null;\n  }\n\n  onReady() {\n    if (this._isReady) return;\n    this._isReady = true;\n    if (this._pendingServerMessages && this._pendingServerMessages.length) this.processWrappers(...this._pendingServerMessages);\n    if (this._pendingClientMessages && this._pendingClientMessages.length) this.send(...this._pendingClientMessages);\n    this._pendingServerMessages = [];\n    this._pendingClientMessages = [];\n  }\n\n  createSocket(socketUrl) {\n    if (!socketUrl) return;\n    this.destroySocket();\n    this._dataBuffer = new ArrayBuffer(0);\n    this._socket = new WebSocket(socketUrl);\n\n    this._socket.addEventListener(WebSocketEventEnum.CONNECTION_OPENED, this.onOpen);\n\n    this._socket.addEventListener(WebSocketEventEnum.CONNECTION_CLOSED, this.onClose);\n\n    this._socket.addEventListener(WebSocketEventEnum.CONNECTION_ERROR, this.onError);\n\n    this._socket.addEventListener(WebSocketEventEnum.CONNECTION_MESSAGE, this.onMessage);\n  }\n\n  destroySocket() {\n    if (!this._socket) return;\n\n    this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_OPENED, this.onOpen);\n\n    this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_CLOSED, this.onClose);\n\n    this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_ERROR, this.onError);\n\n    this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_MESSAGE, this.onMessage);\n\n    if (this._socket.readyState === WebSocket.OPEN) this._socket.close();\n    this._socket = null;\n  }\n\n  onOpen(event) {\n    this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_OPENED, event);\n  }\n\n  onClose(event) {\n    this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_CLOSED, event);\n  }\n\n  onError(event) {\n    this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_ERROR, event);\n  }\n\n  onMessage(event) {\n    if (!event) return; //this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_MESSAGE, event);\n\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(event.data);\n\n    reader.onloadend = () => {\n      this._dataBuffer = this.concatArrayBuffers(this._dataBuffer, reader.result);\n      this.processReceivedData();\n    };\n  }\n\n  dispatchConnectionEvent(type, event) {\n    this.dispatchEvent(new SocketConnectionEvent(type, this, event));\n  }\n\n  authenticated() {\n    this._isAuthenticated = true;\n  }\n\n  send() {\n    for (var _len = arguments.length, composers = new Array(_len), _key = 0; _key < _len; _key++) {\n      composers[_key] = arguments[_key];\n    }\n\n    if (this.disposed || !composers) return false;\n    composers = [...composers];\n\n    if (this._isAuthenticated && !this._isReady) {\n      if (!this._pendingClientMessages) this._pendingClientMessages = [];\n\n      this._pendingClientMessages.push(...composers);\n\n      return false;\n    }\n\n    for (const composer of composers) {\n      if (!composer) continue;\n\n      const header = this._messages.getComposerId(composer);\n\n      if (header === -1) {\n        NitroLogger.log(`Unknown Composer: ${composer.constructor.name}`);\n        continue;\n      }\n\n      const message = composer.getMessageArray();\n\n      const encoded = this._codec.encode(header, message);\n\n      if (!encoded) {\n        if (Nitro.instance.getConfiguration('system.packet.log')) console.log(`Encoding Failed: ${composer.constructor.name}`);\n        continue;\n      }\n\n      if (Nitro.instance.getConfiguration('system.packet.log')) console.log(`OutgoingComposer: [${header}] ${composer.constructor.name}`, message);\n      this.write(encoded.getBuffer());\n    }\n\n    return true;\n  }\n\n  write(buffer) {\n    if (this._socket.readyState !== WebSocket.OPEN) return;\n\n    this._socket.send(buffer);\n  }\n\n  processReceivedData() {\n    try {\n      this.processData();\n    } catch (err) {\n      NitroLogger.log(err);\n    }\n  }\n\n  processData() {\n    const wrappers = this.splitReceivedMessages();\n    if (!wrappers || !wrappers.length) return;\n\n    if (this._isAuthenticated && !this._isReady) {\n      if (!this._pendingServerMessages) this._pendingServerMessages = [];\n\n      this._pendingServerMessages.push(...wrappers);\n\n      return;\n    }\n\n    this.processWrappers(...wrappers);\n  }\n\n  processWrappers() {\n    for (var _len2 = arguments.length, wrappers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      wrappers[_key2] = arguments[_key2];\n    }\n\n    if (!wrappers || !wrappers.length) return;\n\n    for (const wrapper of wrappers) {\n      if (!wrapper) continue;\n      const messages = this.getMessagesForWrapper(wrapper);\n      if (!messages || !messages.length) continue;\n\n      if (Nitro.instance.getConfiguration('system.packet.log')) {\n        console.log(`IncomingMessage: [${wrapper.header}] ${messages[0].constructor.name}`, messages[0].parser);\n      }\n\n      this.handleMessages(...messages);\n    }\n  }\n\n  splitReceivedMessages() {\n    if (!this._dataBuffer || !this._dataBuffer.byteLength) return null;\n    return this._codec.decode(this);\n  }\n\n  concatArrayBuffers(buffer1, buffer2) {\n    const array = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    array.set(new Uint8Array(buffer1), 0);\n    array.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return array.buffer;\n  }\n\n  getMessagesForWrapper(wrapper) {\n    if (!wrapper) return null;\n\n    const events = this._messages.getEvents(wrapper.header);\n\n    if (!events || !events.length) {\n      if (Nitro.instance.getConfiguration('system.packet.log')) {\n        console.log(`IncomingMessage: [${wrapper.header}] UNREGISTERED`, wrapper);\n      }\n\n      return;\n    }\n\n    try {\n      //@ts-ignore\n      const parser = new events[0].parserClass();\n      if (!parser || !parser.flush() || !parser.parse(wrapper)) return null;\n\n      for (const event of events) event.parser = parser;\n    } catch (e) {\n      NitroLogger.log(`Error parsing message: ${e}`, events[0].constructor.name);\n      return null;\n    }\n\n    return events;\n  }\n\n  handleMessages() {\n    for (var _len3 = arguments.length, messages = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      messages[_key3] = arguments[_key3];\n    }\n\n    messages = [...messages];\n\n    for (const message of messages) {\n      if (!message) continue;\n      message.connection = this;\n      if (message.callBack) message.callBack(message);\n    }\n  }\n\n  registerMessages(configuration) {\n    if (!configuration) return;\n\n    this._messages.registerMessages(configuration);\n  }\n\n  addMessageEvent(event) {\n    if (!event || !this._messages) return;\n\n    this._messages.registerMessageEvent(event);\n  }\n\n  removeMessageEvent(event) {\n    if (!event || !this._messages) return;\n\n    this._messages.removeMessageEvent(event);\n  }\n\n  get isAuthenticated() {\n    return this._isAuthenticated;\n  }\n\n  get dataBuffer() {\n    return this._dataBuffer;\n  }\n\n  set dataBuffer(buffer) {\n    this._dataBuffer = buffer;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/communication/connections/SocketConnection.ts"],"names":["Nitro","NitroLogger","EventDispatcher","EvaWireFormat","SocketConnectionEvent","MessageClassManager","WebSocketEventEnum","SocketConnection","constructor","communicationManager","stateListener","_communicationManager","_stateListener","_socket","_messages","_codec","_dataBuffer","_isReady","_pendingClientMessages","_pendingServerMessages","_isAuthenticated","onOpen","bind","onClose","onError","onMessage","init","socketUrl","connectionInit","createSocket","onDispose","destroySocket","onReady","length","processWrappers","send","ArrayBuffer","WebSocket","addEventListener","CONNECTION_OPENED","CONNECTION_CLOSED","CONNECTION_ERROR","CONNECTION_MESSAGE","removeEventListener","readyState","OPEN","close","event","dispatchConnectionEvent","reader","FileReader","readAsArrayBuffer","data","onloadend","concatArrayBuffers","result","processReceivedData","type","dispatchEvent","authenticated","composers","disposed","push","composer","header","getComposerId","log","name","message","getMessageArray","encoded","encode","instance","getConfiguration","console","write","getBuffer","buffer","processData","err","wrappers","splitReceivedMessages","wrapper","messages","getMessagesForWrapper","parser","handleMessages","byteLength","decode","buffer1","buffer2","array","Uint8Array","set","events","getEvents","parserClass","flush","parse","e","connection","callBack","registerMessages","configuration","addMessageEvent","registerMessageEvent","removeMessageEvent","isAuthenticated","dataBuffer"],"mappings":"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","sourcesContent":["import { Nitro } from '../../../nitro/Nitro';\r\nimport { NitroLogger } from '../../common/logger/NitroLogger';\r\nimport { EventDispatcher } from '../../events/EventDispatcher';\r\nimport { EvaWireFormat } from '../codec/evawire/EvaWireFormat';\r\nimport { ICodec } from '../codec/ICodec';\r\nimport { SocketConnectionEvent } from '../events/SocketConnectionEvent';\r\nimport { ICommunicationManager } from '../ICommunicationManager';\r\nimport { IMessageComposer } from '../messages/IMessageComposer';\r\nimport { IMessageConfiguration } from '../messages/IMessageConfiguration';\r\nimport { IMessageDataWrapper } from '../messages/IMessageDataWrapper';\r\nimport { IMessageEvent } from '../messages/IMessageEvent';\r\nimport { MessageClassManager } from '../messages/MessageClassManager';\r\nimport { WebSocketEventEnum } from './enums/WebSocketEventEnum';\r\nimport { IConnection } from './IConnection';\r\nimport { IConnectionStateListener } from './IConnectionStateListener';\r\n\r\nexport class SocketConnection extends EventDispatcher implements IConnection\r\n{\r\n    private _communicationManager: ICommunicationManager;\r\n    private _stateListener: IConnectionStateListener;\r\n    private _socket: WebSocket;\r\n    private _messages: MessageClassManager;\r\n    private _codec: ICodec;\r\n    private _dataBuffer: ArrayBuffer;\r\n    private _isReady: boolean;\r\n\r\n    private _pendingClientMessages: IMessageComposer<unknown[]>[];\r\n    private _pendingServerMessages: IMessageDataWrapper[];\r\n\r\n    private _isAuthenticated: boolean;\r\n\r\n    constructor(communicationManager: ICommunicationManager, stateListener: IConnectionStateListener)\r\n    {\r\n        super();\r\n\r\n        this._communicationManager = communicationManager;\r\n        this._stateListener = stateListener;\r\n        this._socket = null;\r\n        this._messages = new MessageClassManager();\r\n        this._codec = new EvaWireFormat();\r\n        this._dataBuffer = null;\r\n        this._isReady = false;\r\n\r\n        this._pendingClientMessages = [];\r\n        this._pendingServerMessages = [];\r\n\r\n        this._isAuthenticated = false;\r\n\r\n        this.onOpen = this.onOpen.bind(this);\r\n        this.onClose = this.onClose.bind(this);\r\n        this.onError = this.onError.bind(this);\r\n        this.onMessage = this.onMessage.bind(this);\r\n    }\r\n\r\n    public init(socketUrl: string): void\r\n    {\r\n        if(this._stateListener)\r\n        {\r\n            this._stateListener.connectionInit(socketUrl);\r\n        }\r\n\r\n        this.createSocket(socketUrl);\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        super.onDispose();\r\n\r\n        this.destroySocket();\r\n\r\n        this._communicationManager = null;\r\n        this._stateListener = null;\r\n        this._messages = null;\r\n        this._codec = null;\r\n        this._dataBuffer = null;\r\n    }\r\n\r\n    public onReady(): void\r\n    {\r\n        if(this._isReady) return;\r\n\r\n        this._isReady = true;\r\n\r\n        if(this._pendingServerMessages && this._pendingServerMessages.length) this.processWrappers(...this._pendingServerMessages);\r\n\r\n        if(this._pendingClientMessages && this._pendingClientMessages.length) this.send(...this._pendingClientMessages);\r\n\r\n        this._pendingServerMessages = [];\r\n        this._pendingClientMessages = [];\r\n    }\r\n\r\n    private createSocket(socketUrl: string): void\r\n    {\r\n        if(!socketUrl) return;\r\n\r\n        this.destroySocket();\r\n\r\n        this._dataBuffer = new ArrayBuffer(0);\r\n        this._socket = new WebSocket(socketUrl);\r\n\r\n        this._socket.addEventListener(WebSocketEventEnum.CONNECTION_OPENED, this.onOpen);\r\n        this._socket.addEventListener(WebSocketEventEnum.CONNECTION_CLOSED, this.onClose);\r\n        this._socket.addEventListener(WebSocketEventEnum.CONNECTION_ERROR, this.onError);\r\n        this._socket.addEventListener(WebSocketEventEnum.CONNECTION_MESSAGE, this.onMessage);\r\n    }\r\n\r\n    private destroySocket(): void\r\n    {\r\n        if(!this._socket) return;\r\n\r\n        this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_OPENED, this.onOpen);\r\n        this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_CLOSED, this.onClose);\r\n        this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_ERROR, this.onError);\r\n        this._socket.removeEventListener(WebSocketEventEnum.CONNECTION_MESSAGE, this.onMessage);\r\n\r\n        if(this._socket.readyState === WebSocket.OPEN) this._socket.close();\r\n\r\n        this._socket = null;\r\n    }\r\n\r\n    private onOpen(event: Event): void\r\n    {\r\n        this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_OPENED, event);\r\n    }\r\n\r\n    private onClose(event: CloseEvent): void\r\n    {\r\n        this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_CLOSED, event);\r\n    }\r\n\r\n    private onError(event: Event): void\r\n    {\r\n        this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_ERROR, event);\r\n    }\r\n\r\n    private onMessage(event: MessageEvent): void\r\n    {\r\n        if(!event) return;\r\n\r\n        //this.dispatchConnectionEvent(SocketConnectionEvent.CONNECTION_MESSAGE, event);\r\n\r\n        const reader = new FileReader();\r\n\r\n        reader.readAsArrayBuffer(event.data);\r\n\r\n        reader.onloadend = () =>\r\n        {\r\n            this._dataBuffer = this.concatArrayBuffers(this._dataBuffer, (reader.result as ArrayBuffer));\r\n\r\n            this.processReceivedData();\r\n        };\r\n    }\r\n\r\n    private dispatchConnectionEvent(type: string, event: Event): void\r\n    {\r\n        this.dispatchEvent(new SocketConnectionEvent(type, this, event));\r\n    }\r\n\r\n    public authenticated(): void\r\n    {\r\n        this._isAuthenticated = true;\r\n    }\r\n\r\n    public send(...composers: IMessageComposer<unknown[]>[]): boolean\r\n    {\r\n        if(this.disposed || !composers) return false;\r\n\r\n        composers = [ ...composers ];\r\n\r\n        if(this._isAuthenticated && !this._isReady)\r\n        {\r\n            if(!this._pendingClientMessages) this._pendingClientMessages = [];\r\n\r\n            this._pendingClientMessages.push(...composers);\r\n\r\n            return false;\r\n        }\r\n\r\n        for(const composer of composers)\r\n        {\r\n            if(!composer) continue;\r\n\r\n            const header = this._messages.getComposerId(composer);\r\n\r\n            if(header === -1)\r\n            {\r\n                NitroLogger.log(`Unknown Composer: ${ composer.constructor.name }`);\r\n\r\n                continue;\r\n            }\r\n\r\n            const message = composer.getMessageArray();\r\n            const encoded = this._codec.encode(header, message);\r\n\r\n            if(!encoded)\r\n            {\r\n                if(Nitro.instance.getConfiguration<boolean>('system.packet.log')) console.log(`Encoding Failed: ${ composer.constructor.name }`);\r\n\r\n                continue;\r\n            }\r\n\r\n            if(Nitro.instance.getConfiguration<boolean>('system.packet.log')) console.log(`OutgoingComposer: [${ header }] ${ composer.constructor.name }`, message);\r\n\r\n            this.write(encoded.getBuffer());\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private write(buffer: ArrayBuffer): void\r\n    {\r\n        if(this._socket.readyState !== WebSocket.OPEN) return;\r\n\r\n        this._socket.send(buffer);\r\n    }\r\n\r\n    public processReceivedData(): void\r\n    {\r\n        try\r\n        {\r\n            this.processData();\r\n        }\r\n\r\n        catch (err)\r\n        {\r\n            NitroLogger.log(err);\r\n        }\r\n    }\r\n\r\n    private processData(): void\r\n    {\r\n        const wrappers = this.splitReceivedMessages();\r\n\r\n        if(!wrappers || !wrappers.length) return;\r\n\r\n        if(this._isAuthenticated && !this._isReady)\r\n        {\r\n            if(!this._pendingServerMessages) this._pendingServerMessages = [];\r\n\r\n            this._pendingServerMessages.push(...wrappers);\r\n\r\n            return;\r\n        }\r\n\r\n        this.processWrappers(...wrappers);\r\n    }\r\n\r\n    private processWrappers(...wrappers: IMessageDataWrapper[]): void\r\n    {\r\n        if(!wrappers || !wrappers.length) return;\r\n\r\n        for(const wrapper of wrappers)\r\n        {\r\n            if(!wrapper) continue;\r\n\r\n            const messages = this.getMessagesForWrapper(wrapper);\r\n\r\n            if(!messages || !messages.length) continue;\r\n\r\n            if(Nitro.instance.getConfiguration<boolean>('system.packet.log'))\r\n            {\r\n                console.log(`IncomingMessage: [${ wrapper.header }] ${ messages[0].constructor.name }`, messages[0].parser);\r\n            }\r\n\r\n            this.handleMessages(...messages);\r\n        }\r\n    }\r\n\r\n    private splitReceivedMessages(): IMessageDataWrapper[]\r\n    {\r\n        if(!this._dataBuffer || !this._dataBuffer.byteLength) return null;\r\n\r\n        return this._codec.decode(this);\r\n    }\r\n\r\n    private concatArrayBuffers(buffer1: ArrayBuffer, buffer2: ArrayBuffer): ArrayBuffer\r\n    {\r\n        const array = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\r\n\r\n        array.set(new Uint8Array(buffer1), 0);\r\n        array.set(new Uint8Array(buffer2), buffer1.byteLength);\r\n\r\n        return array.buffer;\r\n    }\r\n\r\n    private getMessagesForWrapper(wrapper: IMessageDataWrapper): IMessageEvent[]\r\n    {\r\n        if(!wrapper) return null;\r\n\r\n        const events = this._messages.getEvents(wrapper.header);\r\n\r\n        if(!events || !events.length)\r\n        {\r\n            if(Nitro.instance.getConfiguration<boolean>('system.packet.log'))\r\n            {\r\n                console.log(`IncomingMessage: [${ wrapper.header }] UNREGISTERED`, wrapper);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            //@ts-ignore\r\n            const parser = new events[0].parserClass();\r\n\r\n            if(!parser || !parser.flush() || !parser.parse(wrapper)) return null;\r\n\r\n            for(const event of events) (event.parser = parser);\r\n        }\r\n\r\n        catch (e)\r\n        {\r\n            NitroLogger.log(`Error parsing message: ${ e }`, events[0].constructor.name);\r\n\r\n            return null;\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    private handleMessages(...messages: IMessageEvent[]): void\r\n    {\r\n        messages = [ ...messages ];\r\n\r\n        for(const message of messages)\r\n        {\r\n            if(!message) continue;\r\n\r\n            message.connection = this;\r\n\r\n            if(message.callBack) message.callBack(message);\r\n        }\r\n    }\r\n\r\n    public registerMessages(configuration: IMessageConfiguration): void\r\n    {\r\n        if(!configuration) return;\r\n\r\n        this._messages.registerMessages(configuration);\r\n    }\r\n\r\n    public addMessageEvent(event: IMessageEvent): void\r\n    {\r\n        if(!event || !this._messages) return;\r\n\r\n        this._messages.registerMessageEvent(event);\r\n    }\r\n\r\n    public removeMessageEvent(event: IMessageEvent): void\r\n    {\r\n        if(!event || !this._messages) return;\r\n\r\n        this._messages.removeMessageEvent(event);\r\n    }\r\n\r\n    public get isAuthenticated(): boolean\r\n    {\r\n        return this._isAuthenticated;\r\n    }\r\n\r\n    public get dataBuffer(): ArrayBuffer\r\n    {\r\n        return this._dataBuffer;\r\n    }\r\n\r\n    public set dataBuffer(buffer: ArrayBuffer)\r\n    {\r\n        this._dataBuffer = buffer;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}