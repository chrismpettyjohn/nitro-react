{"ast":null,"code":"import { Disposable } from '../core/common/disposable/Disposable';\nimport { RoomObjectModel } from './object/RoomObjectModel';\nexport class RoomInstance extends Disposable {\n  constructor(id, container) {\n    super();\n    this._id = void 0;\n    this._container = void 0;\n    this._renderer = void 0;\n    this._managers = void 0;\n    this._updateCategories = void 0;\n    this._model = void 0;\n    this._id = id;\n    this._container = container;\n    this._renderer = null;\n    this._managers = new Map();\n    this._updateCategories = [];\n    this._model = new RoomObjectModel();\n  }\n\n  onDispose() {\n    this.removeAllManagers();\n    this.destroyRenderer();\n    this._container = null;\n\n    this._model.dispose();\n  }\n\n  setRenderer(renderer) {\n    if (renderer === this._renderer) return;\n    if (this._renderer) this.destroyRenderer();\n    this._renderer = renderer;\n    if (!this._renderer) return;\n\n    this._renderer.reset();\n\n    if (this._managers.size) {\n      for (const manager of this._managers.values()) {\n        if (!manager) continue;\n        const objects = manager.objects;\n        if (!objects.length) continue;\n\n        for (const object of objects.getValues()) {\n          if (!object) continue;\n\n          this._renderer.addObject(object);\n        }\n      }\n    }\n  }\n\n  destroyRenderer() {\n    if (!this._renderer) return;\n\n    this._renderer.dispose();\n\n    this._renderer = null;\n  }\n\n  getManager(category) {\n    const manager = this._managers.get(category);\n\n    if (!manager) return null;\n    return manager;\n  }\n\n  getManagerOrCreate(category) {\n    let manager = this.getManager(category);\n    if (manager) return manager;\n    manager = this._container.createRoomObjectManager(category);\n    if (!manager) return null;\n\n    this._managers.set(category, manager);\n\n    return manager;\n  }\n\n  getTotalObjectsForManager(category) {\n    const manager = this.getManager(category);\n    if (!manager) return 0;\n    return manager.totalObjects;\n  }\n\n  getRoomObject(id, category) {\n    const manager = this.getManager(category);\n    if (!manager) return null;\n    const object = manager.getObject(id);\n    if (!object) return null;\n    return object;\n  }\n\n  getRoomObjectsForCategory(category) {\n    const manager = this.getManager(category);\n    return manager ? manager.objects.getValues() : [];\n  }\n\n  getRoomObjectByIndex(index, category) {\n    const manager = this.getManager(category);\n    if (!manager) return null;\n    const object = manager.getObjectByIndex(index);\n    if (!object) return null;\n    return object;\n  }\n\n  createRoomObject(id, stateCount, type, category) {\n    const manager = this.getManagerOrCreate(category);\n    if (!manager) return null;\n    const object = manager.createObject(id, stateCount, type);\n    if (!object) return null;\n    if (this._renderer) this._renderer.addObject(object);\n    return object;\n  }\n\n  createRoomObjectAndInitalize(objectId, type, category) {\n    if (!this._container) return null;\n    return this._container.createRoomObjectAndInitalize(this._id, objectId, type, category);\n  }\n\n  removeRoomObject(id, category) {\n    const manager = this.getManager(category);\n    if (!manager) return;\n    const object = manager.getObject(id);\n    if (!object) return;\n    object.tearDown();\n    if (this._renderer) this._renderer.removeObject(object);\n    manager.removeObject(id);\n  }\n\n  removeAllManagers() {\n    for (const manager of this._managers.values()) {\n      if (!manager) continue;\n\n      if (this._renderer) {\n        const objects = manager.objects;\n\n        if (objects.length) {\n          for (const object of objects.getValues()) {\n            if (!object) continue;\n\n            this._renderer.removeObject(object);\n          }\n        }\n      }\n\n      manager.dispose();\n    }\n\n    this._managers.clear();\n  }\n\n  addUpdateCategory(category) {\n    const index = this._updateCategories.indexOf(category);\n\n    if (index >= 0) return;\n\n    this._updateCategories.push(category);\n  }\n\n  removeUpdateCategory(category) {\n    const index = this._updateCategories.indexOf(category);\n\n    if (index === -1) return;\n\n    this._updateCategories.splice(index, 1);\n  }\n\n  update(time) {\n    let update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    for (const category of this._updateCategories) {\n      const manager = this.getManager(category);\n      if (!manager) continue;\n      const objects = manager.objects;\n      if (!objects.length) continue;\n\n      for (const object of objects.getValues()) {\n        if (!object) continue;\n        const logic = object.logic;\n        logic && logic.update(time);\n      }\n    }\n\n    this._renderer && this._renderer.update(time, update);\n  }\n\n  hasUninitializedObjects() {\n    for (const manager of this._managers.values()) {\n      if (!manager) continue;\n\n      for (const object of manager.objects.getValues()) {\n        if (!object) continue;\n        if (!object.isReady) return true;\n      }\n    }\n\n    return false;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get container() {\n    return this._container;\n  }\n\n  get renderer() {\n    return this._renderer;\n  }\n\n  get managers() {\n    return this._managers;\n  }\n\n  get model() {\n    return this._model;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/RoomInstance.ts"],"names":["Disposable","RoomObjectModel","RoomInstance","constructor","id","container","_id","_container","_renderer","_managers","_updateCategories","_model","Map","onDispose","removeAllManagers","destroyRenderer","dispose","setRenderer","renderer","reset","size","manager","values","objects","length","object","getValues","addObject","getManager","category","get","getManagerOrCreate","createRoomObjectManager","set","getTotalObjectsForManager","totalObjects","getRoomObject","getObject","getRoomObjectsForCategory","getRoomObjectByIndex","index","getObjectByIndex","createRoomObject","stateCount","type","createObject","createRoomObjectAndInitalize","objectId","removeRoomObject","tearDown","removeObject","clear","addUpdateCategory","indexOf","push","removeUpdateCategory","splice","update","time","logic","hasUninitializedObjects","isReady","managers","model"],"mappings":"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","sourcesContent":["import { Disposable } from '../core/common/disposable/Disposable';\r\nimport { IRoomInstance } from './IRoomInstance';\r\nimport { IRoomInstanceContainer } from './IRoomInstanceContainer';\r\nimport { IRoomObjectManager } from './IRoomObjectManager';\r\nimport { IRoomObject } from './object/IRoomObject';\r\nimport { IRoomObjectController } from './object/IRoomObjectController';\r\nimport { IRoomObjectModel } from './object/IRoomObjectModel';\r\nimport { RoomObjectModel } from './object/RoomObjectModel';\r\nimport { IRoomRendererBase } from './renderer/IRoomRendererBase';\r\n\r\nexport class RoomInstance extends Disposable implements IRoomInstance\r\n{\r\n    private _id: string;\r\n    private _container: IRoomInstanceContainer;\r\n    private _renderer: IRoomRendererBase;\r\n    private _managers: Map<number, IRoomObjectManager>;\r\n    private _updateCategories: number[];\r\n    private _model: IRoomObjectModel;\r\n\r\n    constructor(id: string, container: IRoomInstanceContainer)\r\n    {\r\n        super();\r\n\r\n        this._id = id;\r\n        this._container = container;\r\n        this._renderer = null;\r\n        this._managers = new Map();\r\n        this._updateCategories = [];\r\n        this._model = new RoomObjectModel();\r\n    }\r\n\r\n    protected onDispose(): void\r\n    {\r\n        this.removeAllManagers();\r\n\r\n        this.destroyRenderer();\r\n\r\n        this._container = null;\r\n\r\n        this._model.dispose();\r\n    }\r\n\r\n    public setRenderer(renderer: IRoomRendererBase): void\r\n    {\r\n        if(renderer === this._renderer) return;\r\n\r\n        if(this._renderer) this.destroyRenderer();\r\n\r\n        this._renderer = renderer;\r\n\r\n        if(!this._renderer) return;\r\n\r\n        this._renderer.reset();\r\n\r\n        if(this._managers.size)\r\n        {\r\n            for(const manager of this._managers.values())\r\n            {\r\n                if(!manager) continue;\r\n\r\n                const objects = manager.objects;\r\n\r\n                if(!objects.length) continue;\r\n\r\n                for(const object of objects.getValues())\r\n                {\r\n                    if(!object) continue;\r\n\r\n                    this._renderer.addObject(object);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private destroyRenderer(): void\r\n    {\r\n        if(!this._renderer) return;\r\n\r\n        this._renderer.dispose();\r\n\r\n        this._renderer = null;\r\n    }\r\n\r\n    public getManager(category: number): IRoomObjectManager\r\n    {\r\n        const manager = this._managers.get(category);\r\n\r\n        if(!manager) return null;\r\n\r\n        return manager;\r\n    }\r\n\r\n    private getManagerOrCreate(category: number): IRoomObjectManager\r\n    {\r\n        let manager = this.getManager(category);\r\n\r\n        if(manager) return manager;\r\n\r\n        manager = this._container.createRoomObjectManager(category);\r\n\r\n        if(!manager) return null;\r\n\r\n        this._managers.set(category, manager);\r\n\r\n        return manager;\r\n    }\r\n\r\n    public getTotalObjectsForManager(category: number): number\r\n    {\r\n        const manager = this.getManager(category);\r\n\r\n        if(!manager) return 0;\r\n\r\n        return manager.totalObjects;\r\n    }\r\n\r\n    public getRoomObject(id: number, category: number): IRoomObject\r\n    {\r\n        const manager = this.getManager(category);\r\n\r\n        if(!manager) return null;\r\n\r\n        const object = manager.getObject(id);\r\n\r\n        if(!object) return null;\r\n\r\n        return object;\r\n    }\r\n\r\n    public getRoomObjectsForCategory(category: number): IRoomObject[]\r\n    {\r\n        const manager = this.getManager(category);\r\n\r\n        return (manager ? manager.objects.getValues() : []);\r\n    }\r\n\r\n    public getRoomObjectByIndex(index: number, category: number): IRoomObject\r\n    {\r\n        const manager = this.getManager(category);\r\n\r\n        if(!manager) return null;\r\n\r\n        const object = manager.getObjectByIndex(index);\r\n\r\n        if(!object) return null;\r\n\r\n        return object;\r\n    }\r\n\r\n    public createRoomObject(id: number, stateCount: number, type: string, category: number): IRoomObjectController\r\n    {\r\n        const manager = this.getManagerOrCreate(category);\r\n\r\n        if(!manager) return null;\r\n\r\n        const object = manager.createObject(id, stateCount, type);\r\n\r\n        if(!object) return null;\r\n\r\n        if(this._renderer) this._renderer.addObject(object);\r\n\r\n        return object;\r\n    }\r\n\r\n    public createRoomObjectAndInitalize(objectId: number, type: string, category: number): IRoomObject\r\n    {\r\n        if(!this._container) return null;\r\n\r\n        return this._container.createRoomObjectAndInitalize(this._id, objectId, type, category);\r\n    }\r\n\r\n    public removeRoomObject(id: number, category: number): void\r\n    {\r\n        const manager = this.getManager(category);\r\n\r\n        if(!manager) return;\r\n\r\n        const object = manager.getObject(id);\r\n\r\n        if(!object) return;\r\n\r\n        object.tearDown();\r\n\r\n        if(this._renderer) this._renderer.removeObject(object);\r\n\r\n        manager.removeObject(id);\r\n    }\r\n\r\n    public removeAllManagers(): void\r\n    {\r\n        for(const manager of this._managers.values())\r\n        {\r\n            if(!manager) continue;\r\n\r\n            if(this._renderer)\r\n            {\r\n                const objects = manager.objects;\r\n\r\n                if(objects.length)\r\n                {\r\n                    for(const object of objects.getValues())\r\n                    {\r\n                        if(!object) continue;\r\n\r\n                        this._renderer.removeObject(object);\r\n                    }\r\n                }\r\n            }\r\n\r\n            manager.dispose();\r\n        }\r\n\r\n        this._managers.clear();\r\n    }\r\n\r\n    public addUpdateCategory(category: number): void\r\n    {\r\n        const index = this._updateCategories.indexOf(category);\r\n\r\n        if(index >= 0) return;\r\n\r\n        this._updateCategories.push(category);\r\n    }\r\n\r\n    public removeUpdateCategory(category: number): void\r\n    {\r\n        const index = this._updateCategories.indexOf(category);\r\n\r\n        if(index === -1) return;\r\n\r\n        this._updateCategories.splice(index, 1);\r\n    }\r\n\r\n    public update(time: number, update: boolean = false): void\r\n    {\r\n        for(const category of this._updateCategories)\r\n        {\r\n            const manager = this.getManager(category);\r\n\r\n            if(!manager) continue;\r\n\r\n            const objects = manager.objects;\r\n\r\n            if(!objects.length) continue;\r\n\r\n            for(const object of objects.getValues())\r\n            {\r\n                if(!object) continue;\r\n\r\n                const logic = object.logic;\r\n\r\n                (logic && logic.update(time));\r\n            }\r\n        }\r\n\r\n        this._renderer && this._renderer.update(time, update);\r\n    }\r\n\r\n    public hasUninitializedObjects(): boolean\r\n    {\r\n        for(const manager of this._managers.values())\r\n        {\r\n            if(!manager) continue;\r\n\r\n            for(const object of manager.objects.getValues())\r\n            {\r\n                if(!object) continue;\r\n\r\n                if(!object.isReady) return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public get id(): string\r\n    {\r\n        return this._id;\r\n    }\r\n\r\n    public get container(): IRoomInstanceContainer\r\n    {\r\n        return this._container;\r\n    }\r\n\r\n    public get renderer(): IRoomRendererBase\r\n    {\r\n        return this._renderer;\r\n    }\r\n\r\n    public get managers(): Map<number, IRoomObjectManager>\r\n    {\r\n        return this._managers;\r\n    }\r\n\r\n    public get model(): IRoomObjectModel\r\n    {\r\n        return this._model;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}