{"ast":null,"code":"import { BadgeAndPointLimit } from './BadgeAndPointLimit';\nexport class BadgePointLimitsParser {\n  constructor() {\n    this._data = void 0;\n  }\n\n  flush() {\n    this._data = [];\n    return true;\n  }\n\n  parse(wrapper) {\n    if (!wrapper) return false;\n\n    let _local_2 = wrapper.readInt();\n\n    while (_local_2 > 0) {\n      const _local_4 = wrapper.readString();\n\n      const _local_5 = wrapper.readInt();\n\n      let _local_6 = 0;\n\n      while (_local_6 < _local_5) {\n        this._data.push(new BadgeAndPointLimit(_local_4, wrapper));\n\n        _local_6++;\n      }\n\n      _local_2--;\n    }\n\n    return true;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/communication/messages/parser/inventory/badges/BadgePointLimitsParser.ts"],"names":["BadgeAndPointLimit","BadgePointLimitsParser","_data","flush","parse","wrapper","_local_2","readInt","_local_4","readString","_local_5","_local_6","push","data"],"mappings":"AACA,SAASA,kBAAT,QAAmC,sBAAnC;AAEA,OAAO,MAAMC,sBAAN,CACP;AAAA;AAAA,SACYC,KADZ;AAAA;;AAGWC,EAAAA,KAAK,GACZ;AACI,SAAKD,KAAL,GAAa,EAAb;AAEA,WAAO,IAAP;AACH;;AAEME,EAAAA,KAAK,CAACC,OAAD,EACZ;AACI,QAAG,CAACA,OAAJ,EAAa,OAAO,KAAP;;AAEb,QAAIC,QAAQ,GAAGD,OAAO,CAACE,OAAR,EAAf;;AAEA,WAAMD,QAAQ,GAAG,CAAjB,EACA;AACI,YAAME,QAAQ,GAAGH,OAAO,CAACI,UAAR,EAAjB;;AACA,YAAMC,QAAQ,GAAGL,OAAO,CAACE,OAAR,EAAjB;;AAEA,UAAII,QAAQ,GAAG,CAAf;;AAEA,aAAMA,QAAQ,GAAGD,QAAjB,EACA;AACI,aAAKR,KAAL,CAAWU,IAAX,CAAgB,IAAIZ,kBAAJ,CAAuBQ,QAAvB,EAAiCH,OAAjC,CAAhB;;AAEAM,QAAAA,QAAQ;AACX;;AAEDL,MAAAA,QAAQ;AACX;;AAED,WAAO,IAAP;AACH;;AAEc,MAAJO,IAAI,GACf;AACI,WAAO,KAAKX,KAAZ;AACH;;AAvCL","sourcesContent":["import { IMessageDataWrapper, IMessageParser } from '../../../../../../core';\r\nimport { BadgeAndPointLimit } from './BadgeAndPointLimit';\r\n\r\nexport class BadgePointLimitsParser implements IMessageParser\r\n{\r\n    private _data: BadgeAndPointLimit[];\r\n\r\n    public flush(): boolean\r\n    {\r\n        this._data = [];\r\n\r\n        return true;\r\n    }\r\n\r\n    public parse(wrapper: IMessageDataWrapper): boolean\r\n    {\r\n        if(!wrapper) return false;\r\n\r\n        let _local_2 = wrapper.readInt();\r\n\r\n        while(_local_2 > 0)\r\n        {\r\n            const _local_4 = wrapper.readString();\r\n            const _local_5 = wrapper.readInt();\r\n\r\n            let _local_6 = 0;\r\n\r\n            while(_local_6 < _local_5)\r\n            {\r\n                this._data.push(new BadgeAndPointLimit(_local_4, wrapper));\r\n\r\n                _local_6++;\r\n            }\r\n\r\n            _local_2--;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public get data(): BadgeAndPointLimit[]\r\n    {\r\n        return this._data;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}