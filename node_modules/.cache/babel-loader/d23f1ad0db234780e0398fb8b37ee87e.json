{"ast":null,"code":"import { BLEND_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\nimport { AdvancedMap } from '../../../../../core/utils/AdvancedMap';\nimport { AlphaTolerance } from '../../../../../room/object/enum/AlphaTolerance';\nimport { RoomObjectSpriteType } from '../../../../../room/object/enum/RoomObjectSpriteType';\nimport { RoomObjectSpriteVisualization } from '../../../../../room/object/visualization/RoomObjectSpriteVisualization';\nimport { AvatarAction } from '../../../../avatar/enum/AvatarAction';\nimport { AvatarGuideStatus } from '../../../../avatar/enum/AvatarGuideStatus';\nimport { AvatarSetType } from '../../../../avatar/enum/AvatarSetType';\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\nimport { ExpressionAdditionFactory } from './additions/ExpressionAdditionFactory';\nimport { FloatingIdleZAddition } from './additions/FloatingIdleZAddition';\nimport { GameClickTargetAddition } from './additions/GameClickTargetAddition';\nimport { GuideStatusBubbleAddition } from './additions/GuideStatusBubbleAddition';\nimport { MutedBubbleAddition } from './additions/MutedBubbleAddition';\nimport { NumberBubbleAddition } from './additions/NumberBubbleAddition';\nimport { TypingBubbleAddition } from './additions/TypingBubbleAddition';\nimport { AvatarVisualizationData } from './AvatarVisualizationData';\nexport class AvatarVisualization extends RoomObjectSpriteVisualization {\n  constructor() {\n    super();\n    this._data = void 0;\n    this._avatarImage = void 0;\n    this._cachedAvatars = void 0;\n    this._cachedAvatarEffects = void 0;\n    this._shadow = void 0;\n    this._lastUpdate = void 0;\n    this._disposed = void 0;\n    this._figure = void 0;\n    this._gender = void 0;\n    this._direction = void 0;\n    this._headDirection = void 0;\n    this._posture = void 0;\n    this._postureParameter = void 0;\n    this._canStandUp = void 0;\n    this._postureOffset = void 0;\n    this._verticalOffset = void 0;\n    this._angle = void 0;\n    this._headAngle = void 0;\n    this._talk = void 0;\n    this._expression = void 0;\n    this._sleep = void 0;\n    this._blink = void 0;\n    this._gesture = void 0;\n    this._sign = void 0;\n    this._highlightEnabled = void 0;\n    this._highlight = void 0;\n    this._dance = void 0;\n    this._effect = void 0;\n    this._carryObject = void 0;\n    this._useObject = void 0;\n    this._ownUser = void 0;\n    this._isLaying = void 0;\n    this._layInside = void 0;\n    this._isAnimating = void 0;\n    this._extraSpritesStartIndex = void 0;\n    this._forcedAnimFrames = void 0;\n    this._updatesUntilFrameUpdate = void 0;\n    this._isAvatarReady = void 0;\n    this._needsUpdate = void 0;\n    this._geometryUpdateCounter = void 0;\n    this._additions = void 0;\n    this._data = null;\n    this._avatarImage = null;\n    this._cachedAvatars = new AdvancedMap();\n    this._cachedAvatarEffects = new AdvancedMap();\n    this._shadow = null;\n    this._lastUpdate = -1000;\n    this._disposed = false;\n    this._figure = null;\n    this._gender = null;\n    this._direction = -1;\n    this._headDirection = -1;\n    this._posture = '';\n    this._postureParameter = '';\n    this._canStandUp = false;\n    this._postureOffset = 0;\n    this._verticalOffset = 0;\n    this._angle = -1;\n    this._headAngle = -1;\n    this._talk = false;\n    this._expression = 0;\n    this._sleep = false;\n    this._blink = false;\n    this._gesture = 0;\n    this._sign = -1;\n    this._highlightEnabled = false;\n    this._highlight = false;\n    this._dance = 0;\n    this._effect = 0;\n    this._carryObject = 0;\n    this._useObject = 0;\n    this._ownUser = false;\n    this._isLaying = false;\n    this._layInside = false;\n    this._isAnimating = false;\n    this._extraSpritesStartIndex = 2;\n    this._forcedAnimFrames = 0;\n    this._updatesUntilFrameUpdate = 0;\n    this._isAvatarReady = false;\n    this._needsUpdate = false;\n    this._geometryUpdateCounter = -1;\n    this._additions = new Map();\n  }\n\n  initialize(data) {\n    if (!(data instanceof AvatarVisualizationData)) return false;\n    this._data = data;\n    this.createSprites(AvatarVisualization.INITIAL_RESERVED_SPRITES);\n    super.initialize(data);\n    return true;\n  }\n\n  dispose() {\n    if (this._disposed) return;\n    super.dispose();\n    if (this._avatarImage) this._avatarImage.dispose();\n    this._shadow = null;\n    this._disposed = true;\n  }\n\n  update(geometry, time, update, skipUpdate) {\n    if (!this.object || !geometry || !this._data) return;\n    if (time < this._lastUpdate + AvatarVisualization.UPDATE_TIME_INCREASER) return;\n    this._lastUpdate += AvatarVisualization.UPDATE_TIME_INCREASER;\n    if (this._lastUpdate + AvatarVisualization.UPDATE_TIME_INCREASER < time) this._lastUpdate = time - AvatarVisualization.UPDATE_TIME_INCREASER;\n    const model = this.object.model;\n    const scale = geometry.scale;\n    const effect = this._effect;\n    let didScaleUpdate = false;\n    let didEffectUpdate = false;\n    let otherUpdate = false;\n    let objectUpdate = false;\n    const updateModel = this.updateModel(model, scale);\n\n    if (updateModel || scale !== this._scale || !this._avatarImage) {\n      if (scale !== this._scale) {\n        didScaleUpdate = true;\n        this.updateScale(scale);\n      }\n\n      if (effect !== this._effect) didEffectUpdate = true;\n\n      if (didScaleUpdate || !this._avatarImage || didEffectUpdate) {\n        this._avatarImage = this.createAvatarImage(scale, this._effect);\n        if (!this._avatarImage) return;\n        otherUpdate = true;\n        const sprite = this.getSprite(AvatarVisualization.AVATAR_LAYER_ID);\n\n        if (sprite && this._avatarImage && this._avatarImage.isPlaceholder()) {\n          sprite.alpha = 150;\n        } else if (sprite) {\n          sprite.alpha = 255;\n        }\n      }\n\n      if (!this._avatarImage) return;\n      if (didEffectUpdate && this._avatarImage.animationHasResetOnToggle) this._avatarImage.resetAnimationFrameCounter();\n      this.updateShadow(scale);\n      objectUpdate = this.updateObject(this.object, geometry, update, true);\n      this.processActionsForAvatar(this._avatarImage);\n\n      if (this._additions) {\n        let index = this._extraSpritesStartIndex;\n\n        for (const addition of this._additions.values()) {\n          addition.update(this.getSprite(index++), scale);\n        }\n      }\n\n      this._scale = scale;\n    } else {\n      objectUpdate = this.updateObject(this.object, geometry, update);\n    }\n\n    if (this._additions) {\n      let index = this._extraSpritesStartIndex;\n\n      for (const addition of this._additions.values()) {\n        if (addition.animate(this.getSprite(index++))) this.updateSpriteCounter++;\n      }\n    }\n\n    const update1 = objectUpdate || updateModel || didScaleUpdate;\n    const update2 = (this._isAnimating || this._forcedAnimFrames > 0) && update;\n    if (update1) this._forcedAnimFrames = AvatarVisualization.ANIMATION_FRAME_UPDATE_INTERVAL;\n\n    if (update1 || update2) {\n      this.updateSpriteCounter++;\n      this._forcedAnimFrames--;\n      this._updatesUntilFrameUpdate--;\n\n      if (this._updatesUntilFrameUpdate <= 0 || didScaleUpdate || updateModel || otherUpdate) {\n        this._avatarImage.updateAnimationByFrames(1);\n\n        this._updatesUntilFrameUpdate = AvatarVisualization.ANIMATION_FRAME_UPDATE_INTERVAL;\n      } else {\n        return;\n      }\n\n      let _local_20 = this._avatarImage.getCanvasOffsets();\n\n      if (!_local_20 || _local_20.length < 3) _local_20 = AvatarVisualization.DEFAULT_CANVAS_OFFSETS;\n      const sprite = this.getSprite(AvatarVisualization.SPRITE_INDEX_AVATAR);\n\n      if (sprite) {\n        const highlightEnabled = this.object.model.getValue(RoomObjectVariable.FIGURE_HIGHLIGHT_ENABLE) === 1 && this.object.model.getValue(RoomObjectVariable.FIGURE_HIGHLIGHT) === 1;\n\n        const avatarImage = this._avatarImage.getImage(AvatarSetType.FULL, highlightEnabled);\n\n        if (avatarImage) {\n          sprite.texture = avatarImage;\n\n          if (highlightEnabled) {// sprite.filters  = [\n            //     new GlowFilter({\n            //         color: 0xFFFFFF,\n            //         distance: 6\n            //     })\n            // ];\n          } else {\n            sprite.filters = [];\n          }\n        }\n\n        if (sprite.texture) {\n          sprite.offsetX = -1 * scale / 2 + _local_20[0] - (sprite.texture.width - scale) / 2;\n          sprite.offsetY = -sprite.texture.height + scale / 4 + _local_20[1] + this._postureOffset;\n        }\n\n        if (this._isLaying) {\n          if (this._layInside) sprite.relativeDepth = -0.5;else sprite.relativeDepth = AvatarVisualization.AVATAR_SPRITE_LAYING_DEPTH + _local_20[2];\n        } else {\n          sprite.relativeDepth = AvatarVisualization.AVATAR_SPRITE_DEFAULT_DEPTH + _local_20[2];\n        }\n\n        if (this._ownUser) {\n          sprite.relativeDepth -= AvatarVisualization.AVATAR_OWN_DEPTH_ADJUST;\n          sprite.spriteType = RoomObjectSpriteType.AVATAR_OWN;\n        } else {\n          sprite.spriteType = RoomObjectSpriteType.AVATAR;\n        }\n      }\n\n      const typingBubble = this.getAddition(AvatarVisualization.TYPING_BUBBLE_ID);\n\n      if (typingBubble) {\n        if (!this._isLaying) typingBubble.relativeDepth = AvatarVisualization.AVATAR_SPRITE_DEFAULT_DEPTH - 0.01 + _local_20[2];else typingBubble.relativeDepth = AvatarVisualization.AVATAR_SPRITE_LAYING_DEPTH - 0.01 + _local_20[2];\n      }\n\n      this._isAnimating = this._avatarImage.isAnimating();\n      let _local_21 = AvatarVisualization.INITIAL_RESERVED_SPRITES;\n\n      const direction = this._avatarImage.getDirection();\n\n      for (const spriteData of this._avatarImage.getSprites()) {\n        if (spriteData.id === AvatarVisualization.AVATAR) {\n          const sprite = this.getSprite(AvatarVisualization.SPRITE_INDEX_AVATAR);\n\n          if (sprite) {\n            const layerData = this._avatarImage.getLayerData(spriteData);\n\n            let offsetX = spriteData.getDirectionOffsetX(direction);\n            let offsetY = spriteData.getDirectionOffsetY(direction);\n\n            if (layerData) {\n              offsetX += layerData.dx;\n              offsetY += layerData.dy;\n            }\n\n            if (scale < 48) {\n              offsetX /= 2;\n              offsetY /= 2;\n            }\n\n            if (!this._canStandUp) {\n              sprite.offsetX += offsetX;\n              sprite.offsetY += offsetY;\n            }\n          }\n        } else {\n          const sprite = this.getSprite(_local_21);\n\n          if (sprite) {\n            sprite.alphaTolerance = AlphaTolerance.MATCH_NOTHING;\n            sprite.visible = true;\n\n            const layerData = this._avatarImage.getLayerData(spriteData);\n\n            let frameNumber = 0;\n            let offsetX = spriteData.getDirectionOffsetX(direction);\n            let offsetY = spriteData.getDirectionOffsetY(direction);\n            const offsetZ = spriteData.getDirectionOffsetZ(direction);\n            let dd = 0;\n            if (spriteData.hasDirections) dd = direction;\n\n            if (layerData) {\n              frameNumber = layerData.animationFrame;\n              offsetX += layerData.dx;\n              offsetY += layerData.dy;\n              dd += layerData.dd;\n            }\n\n            if (scale < 48) {\n              offsetX /= 2;\n              offsetY /= 2;\n            }\n\n            if (dd < 0) dd += 8;else {\n              if (dd > 7) dd -= 8;\n            }\n            const assetName = this._avatarImage.getScale() + '_' + spriteData.member + '_' + dd + '_' + frameNumber;\n\n            const asset = this._avatarImage.getAsset(assetName);\n\n            if (!asset) continue;\n            sprite.texture = asset.texture;\n            sprite.offsetX = asset.offsetX - scale / 2 + offsetX;\n            sprite.offsetY = asset.offsetY + offsetY;\n            sprite.flipH = asset.flipH;\n\n            if (spriteData.hasStaticY) {\n              sprite.offsetY += this._verticalOffset * scale / (2 * AvatarVisualization.BASE_Y_SCALE);\n            } else {\n              sprite.offsetY += this._postureOffset;\n            }\n\n            if (this._isLaying) {\n              sprite.relativeDepth = AvatarVisualization.AVATAR_SPRITE_LAYING_DEPTH - 0.001 * this.totalSprites * offsetZ;\n            } else {\n              sprite.relativeDepth = AvatarVisualization.AVATAR_SPRITE_DEFAULT_DEPTH - 0.001 * this.totalSprites * offsetZ;\n            }\n\n            if (spriteData.ink === 33) sprite.blendMode = BLEND_MODES.ADD;else sprite.blendMode = BLEND_MODES.NORMAL;\n          }\n\n          _local_21++;\n        }\n      }\n    }\n  }\n\n  createAvatarImage(scale, effectId) {\n    let cachedImage = null;\n    let imageName = 'avatarImage' + scale.toString();\n\n    if (!effectId) {\n      cachedImage = this._cachedAvatars.getValue(imageName);\n    } else {\n      imageName += '-' + effectId;\n      cachedImage = this._cachedAvatarEffects.getValue(imageName);\n    }\n\n    if (!cachedImage) {\n      cachedImage = this._data.createAvatarImage(this._figure, scale, this._gender, this, this);\n\n      if (cachedImage) {\n        if (!effectId) {\n          this._cachedAvatars.add(imageName, cachedImage);\n        } else {\n          if (this._cachedAvatarEffects.length >= AvatarVisualization.MAX_EFFECT_CACHE) {\n            const cached = this._cachedAvatarEffects.remove(this._cachedAvatarEffects.getKey(0));\n\n            if (cached) cached.dispose();\n          }\n\n          this._cachedAvatarEffects.add(imageName, cachedImage);\n        }\n      }\n    }\n\n    return cachedImage;\n  }\n\n  updateObject(object, geometry, update) {\n    let _arg_4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    if (!_arg_4 && this.updateObjectCounter === object.updateCounter && this._geometryUpdateCounter === geometry.updateId) return false;\n    let direction = object.getDirection().x - geometry.direction.x;\n    let headDirection = this._headDirection - geometry.direction.x;\n    if (this._posture === 'float') headDirection = direction;\n    direction = (direction % 360 + 360) % 360;\n    headDirection = (headDirection % 360 + 360) % 360;\n\n    if (this._posture === 'sit' && this._canStandUp) {\n      direction -= direction % 90 - 45;\n      headDirection -= headDirection % 90 - 45;\n    }\n\n    if (direction !== this._angle || _arg_4) {\n      update = true;\n      this._angle = direction;\n      direction = direction - (135 - 22.5);\n      direction = (direction + 360) % 360;\n\n      this._avatarImage.setDirectionAngle(AvatarSetType.FULL, direction);\n    }\n\n    if (headDirection !== this._headAngle || _arg_4) {\n      update = true;\n      this._headAngle = headDirection;\n\n      if (this._headAngle !== this._angle) {\n        headDirection = headDirection - (135 - 22.5);\n        headDirection = (headDirection + 360) % 360;\n\n        this._avatarImage.setDirectionAngle(AvatarSetType.HEAD, headDirection);\n      }\n    }\n\n    this._geometryUpdateCounter = geometry.updateId;\n    this.updateObjectCounter = this.object.updateCounter;\n    return update;\n  }\n\n  updateModel(model, scale) {\n    if (!model) return false;\n    if (this.updateModelCounter === model.updateCounter) return false;\n    let needsUpdate = false;\n    const talk = model.getValue(RoomObjectVariable.FIGURE_TALK) > 0;\n\n    if (talk !== this._talk) {\n      this._talk = talk;\n      needsUpdate = true;\n    }\n\n    const expression = model.getValue(RoomObjectVariable.FIGURE_EXPRESSION);\n\n    if (expression !== this._expression) {\n      this._expression = expression;\n      needsUpdate = true;\n    }\n\n    const sleep = model.getValue(RoomObjectVariable.FIGURE_SLEEP) > 0;\n\n    if (sleep !== this._sleep) {\n      this._sleep = sleep;\n      needsUpdate = true;\n    }\n\n    const blink = model.getValue(RoomObjectVariable.FIGURE_BLINK) > 0;\n\n    if (blink !== this._blink) {\n      this._blink = blink;\n      needsUpdate = true;\n    }\n\n    const gesture = model.getValue(RoomObjectVariable.FIGURE_GESTURE) || 0;\n\n    if (gesture !== this._gesture) {\n      this._gesture = gesture;\n      needsUpdate = true;\n    }\n\n    const posture = model.getValue(RoomObjectVariable.FIGURE_POSTURE);\n\n    if (posture !== this._posture) {\n      this._posture = posture;\n      needsUpdate = true;\n    }\n\n    const postureParameter = model.getValue(RoomObjectVariable.FIGURE_POSTURE_PARAMETER);\n\n    if (postureParameter !== this._postureParameter) {\n      this._postureParameter = postureParameter;\n      needsUpdate = true;\n    }\n\n    const canStandUp = model.getValue(RoomObjectVariable.FIGURE_CAN_STAND_UP);\n\n    if (canStandUp !== this._canStandUp) {\n      this._canStandUp = canStandUp;\n      needsUpdate = true;\n    }\n\n    const verticalOffset = model.getValue(RoomObjectVariable.FIGURE_VERTICAL_OFFSET) * AvatarVisualization.BASE_Y_SCALE;\n\n    if (verticalOffset !== this._verticalOffset) {\n      this._verticalOffset = verticalOffset;\n      needsUpdate = true;\n    }\n\n    const dance = model.getValue(RoomObjectVariable.FIGURE_DANCE) || 0;\n\n    if (dance !== this._dance) {\n      this._dance = dance;\n      needsUpdate = true;\n    }\n\n    const effect = model.getValue(RoomObjectVariable.FIGURE_EFFECT) || 0;\n\n    if (effect !== this._effect) {\n      this._effect = effect;\n      needsUpdate = true;\n    }\n\n    const carryObject = model.getValue(RoomObjectVariable.FIGURE_CARRY_OBJECT) || 0;\n\n    if (carryObject !== this._carryObject) {\n      this._carryObject = carryObject;\n      needsUpdate = true;\n    }\n\n    const useObject = model.getValue(RoomObjectVariable.FIGURE_USE_OBJECT) || 0;\n\n    if (useObject !== this._useObject) {\n      this._useObject = useObject;\n      needsUpdate = true;\n    }\n\n    const headDirection = model.getValue(RoomObjectVariable.HEAD_DIRECTION);\n\n    if (headDirection !== this._headDirection) {\n      this._headDirection = headDirection;\n      needsUpdate = true;\n    }\n\n    if (this._carryObject > 0 && useObject > 0) {\n      if (this._useObject !== this._carryObject) {\n        this._useObject = this._carryObject;\n        needsUpdate = true;\n      }\n    } else {\n      if (this._useObject !== 0) {\n        this._useObject = 0;\n        needsUpdate = true;\n      }\n    }\n\n    let idleAddition = this.getAddition(AvatarVisualization.FLOATING_IDLE_Z_ID);\n\n    if (this._sleep) {\n      if (!idleAddition) idleAddition = this.addAddition(new FloatingIdleZAddition(AvatarVisualization.FLOATING_IDLE_Z_ID, this));\n      needsUpdate = true;\n    } else {\n      if (idleAddition) this.removeAddition(AvatarVisualization.FLOATING_IDLE_Z_ID);\n    }\n\n    const isMuted = model.getValue(RoomObjectVariable.FIGURE_IS_MUTED) > 0;\n    let mutedAddition = this.getAddition(AvatarVisualization.MUTED_BUBBLE_ID);\n\n    if (isMuted) {\n      if (!mutedAddition) mutedAddition = this.addAddition(new MutedBubbleAddition(AvatarVisualization.MUTED_BUBBLE_ID, this));\n      needsUpdate = true;\n    } else {\n      if (mutedAddition) {\n        this.removeAddition(AvatarVisualization.MUTED_BUBBLE_ID);\n        needsUpdate = true;\n      }\n\n      const isTyping = model.getValue(RoomObjectVariable.FIGURE_IS_TYPING) > 0;\n      let typingAddition = this.getAddition(AvatarVisualization.TYPING_BUBBLE_ID);\n\n      if (isTyping) {\n        if (!typingAddition) typingAddition = this.addAddition(new TypingBubbleAddition(AvatarVisualization.TYPING_BUBBLE_ID, this));\n        needsUpdate = true;\n      } else {\n        if (typingAddition) {\n          this.removeAddition(AvatarVisualization.TYPING_BUBBLE_ID);\n          needsUpdate = true;\n        }\n      }\n    }\n\n    const guideStatusValue = model.getValue(RoomObjectVariable.FIGURE_GUIDE_STATUS) || 0;\n\n    if (guideStatusValue !== AvatarGuideStatus.NONE) {\n      this.removeAddition(AvatarVisualization.GUIDE_BUBBLE_ID);\n      this.addAddition(new GuideStatusBubbleAddition(AvatarVisualization.GUIDE_BUBBLE_ID, this, guideStatusValue));\n      needsUpdate = true;\n    } else {\n      if (this.getAddition(AvatarVisualization.GUIDE_BUBBLE_ID)) {\n        this.removeAddition(AvatarVisualization.GUIDE_BUBBLE_ID);\n        needsUpdate = true;\n      }\n    }\n\n    const isPlayingGame = model.getValue(RoomObjectVariable.FIGURE_IS_PLAYING_GAME) > 0;\n    let gameClickAddition = this.getAddition(AvatarVisualization.GAME_CLICK_TARGET_ID);\n\n    if (isPlayingGame) {\n      if (!gameClickAddition) gameClickAddition = this.addAddition(new GameClickTargetAddition(AvatarVisualization.GAME_CLICK_TARGET_ID));\n      needsUpdate = true;\n    } else {\n      if (gameClickAddition) this.removeAddition(AvatarVisualization.GAME_CLICK_TARGET_ID);\n    }\n\n    const numberValue = model.getValue(RoomObjectVariable.FIGURE_NUMBER_VALUE);\n    let numberAddition = this.getAddition(AvatarVisualization.NUMBER_BUBBLE_ID);\n\n    if (numberValue > 0) {\n      if (!numberAddition) numberAddition = this.addAddition(new NumberBubbleAddition(AvatarVisualization.NUMBER_BUBBLE_ID, numberValue, this));\n      needsUpdate = true;\n    } else {\n      if (numberAddition) this.removeAddition(AvatarVisualization.NUMBER_BUBBLE_ID);\n    }\n\n    let expressionAddition = this.getAddition(AvatarVisualization.EXPRESSION_ID);\n\n    if (this._expression > 0) {\n      if (!expressionAddition) {\n        expressionAddition = ExpressionAdditionFactory.getExpressionAddition(AvatarVisualization.EXPRESSION_ID, this._expression, this);\n        if (expressionAddition) this.addAddition(expressionAddition);\n      }\n    } else {\n      if (expressionAddition) this.removeAddition(AvatarVisualization.EXPRESSION_ID);\n    }\n\n    this.updateScale(scale);\n    const gender = model.getValue(RoomObjectVariable.GENDER);\n\n    if (gender !== this._gender) {\n      this._gender = gender;\n      needsUpdate = true;\n    }\n\n    if (this.updateFigure(model.getValue(RoomObjectVariable.FIGURE))) needsUpdate = true;\n    let sign = model.getValue(RoomObjectVariable.FIGURE_SIGN);\n    if (sign === null) sign = -1;\n\n    if (this._sign !== sign) {\n      this._sign = sign;\n      needsUpdate = true;\n    }\n\n    const highlightEnabled = model.getValue(RoomObjectVariable.FIGURE_HIGHLIGHT_ENABLE) > 0;\n\n    if (highlightEnabled !== this._highlightEnabled) {\n      this._highlightEnabled = highlightEnabled;\n      needsUpdate = true;\n    }\n\n    if (this._highlightEnabled) {\n      const highlight = model.getValue(RoomObjectVariable.FIGURE_HIGHLIGHT) > 0;\n\n      if (highlight !== this._highlight) {\n        this._highlight = highlight;\n        needsUpdate = true;\n      }\n    }\n\n    const ownUser = model.getValue(RoomObjectVariable.OWN_USER) > 0;\n\n    if (ownUser !== this._ownUser) {\n      this._ownUser = ownUser;\n      needsUpdate = true;\n    }\n\n    this.updateModelCounter = model.updateCounter;\n    return needsUpdate;\n  }\n\n  setDirection(direction) {\n    if (this._direction === direction) return;\n    this._direction = direction;\n    this._needsUpdate = true;\n  }\n\n  updateScale(scale) {\n    if (scale < 48) this._blink = false;\n\n    if (this._posture === 'sit' || this._posture === 'lay') {\n      this._postureOffset = scale / 2;\n    } else {\n      this._postureOffset = 0;\n    }\n\n    this._layInside = false;\n    this._isLaying = false;\n\n    if (this._posture === 'lay') {\n      this._isLaying = true;\n\n      const _local_2 = parseInt(this._postureParameter);\n\n      if (_local_2 < 0) this._layInside = true;\n    }\n  }\n\n  processActionsForAvatar(avatar) {\n    if (!avatar) return;\n    avatar.initActionAppends();\n    avatar.appendAction(AvatarAction.POSTURE, this._posture, this._postureParameter);\n    if (this._gesture > 0) this._avatarImage.appendAction(AvatarAction.GESTURE, AvatarAction.getGesture(this._gesture));\n    if (this._dance > 0) this._avatarImage.appendAction(AvatarAction.DANCE, this._dance);\n    if (this._sign > -1) this._avatarImage.appendAction(AvatarAction.SIGN, this._sign);\n    if (this._carryObject > 0) this._avatarImage.appendAction(AvatarAction.CARRY_OBJECT, this._carryObject);\n    if (this._useObject > 0) this._avatarImage.appendAction(AvatarAction.USE_OBJECT, this._useObject);\n    if (this._talk) this._avatarImage.appendAction(AvatarAction.TALK);\n    if (this._sleep || this._blink) this._avatarImage.appendAction(AvatarAction.SLEEP);\n\n    if (this._expression > 0) {\n      const expression = AvatarAction.getExpression(this._expression);\n\n      if (expression !== '') {\n        switch (expression) {\n          case AvatarAction.DANCE:\n            this._avatarImage.appendAction(AvatarAction.DANCE, 2);\n\n            break;\n\n          default:\n            this._avatarImage.appendAction(expression);\n\n            break;\n        }\n      }\n    }\n\n    if (this._effect > 0) this._avatarImage.appendAction(AvatarAction.EFFECT, this._effect);\n    avatar.endActionAppends();\n    this._isAnimating = avatar.isAnimating();\n    let spriteCount = AvatarVisualization.INITIAL_RESERVED_SPRITES;\n\n    for (const sprite of this._avatarImage.getSprites()) {\n      if (sprite.id !== AvatarVisualization.AVATAR) spriteCount++;\n    }\n\n    if (spriteCount !== this.totalSprites) this.createSprites(spriteCount);\n    this._extraSpritesStartIndex = spriteCount;\n\n    if (this._additions) {\n      for (const addition of this._additions.values()) this.createSprite();\n    }\n  }\n\n  updateFigure(figure) {\n    if (this._figure === figure) return false;\n    this._figure = figure;\n    this.clearAvatar();\n    return true;\n  }\n\n  resetFigure(figure) {\n    this.clearAvatar();\n  }\n\n  resetEffect(effect) {\n    this.clearAvatar();\n  }\n\n  clearAvatar() {\n    for (const avatar of this._cachedAvatars.getValues()) avatar && avatar.dispose();\n\n    for (const avatar of this._cachedAvatarEffects.getValues()) avatar && avatar.dispose();\n\n    this._cachedAvatars.reset();\n\n    this._cachedAvatarEffects.reset();\n\n    this._avatarImage = null;\n    const sprite = this.getSprite(AvatarVisualization.AVATAR_LAYER_ID);\n\n    if (sprite) {\n      sprite.texture = Texture.EMPTY;\n      sprite.alpha = 255;\n    }\n  }\n\n  getAddition(id) {\n    if (!this._additions) return null;\n\n    const existing = this._additions.get(id);\n\n    if (!existing) return null;\n    return existing;\n  }\n\n  addAddition(addition) {\n    const existing = this.getAddition(addition.id);\n    if (existing) return;\n\n    this._additions.set(addition.id, addition);\n\n    return addition;\n  }\n\n  removeAddition(id) {\n    const addition = this.getAddition(id);\n    if (!addition) return;\n\n    this._additions.delete(addition.id);\n\n    addition.dispose();\n  }\n\n  updateShadow(scale) {\n    this._shadow = null;\n    const sprite = this.getSprite(AvatarVisualization.SHADOW_LAYER_ID);\n    if (!sprite) return;\n    let hasShadow = this._posture === 'mv' || this._posture === 'std' || this._posture === 'sit' && this._canStandUp;\n    if (this._effect === AvatarVisualization.SNOWBOARDING_EFFECT) hasShadow = false;\n\n    if (hasShadow) {\n      sprite.visible = true;\n\n      if (!this._shadow || scale !== this._scale) {\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (scale < 48) {\n          sprite.libraryAssetName = 'sh_std_sd_1_0_0';\n          this._shadow = this._avatarImage.getAsset(sprite.libraryAssetName);\n          offsetX = -8;\n          offsetY = this._canStandUp ? 6 : -3;\n        } else {\n          sprite.libraryAssetName = 'h_std_sd_1_0_0';\n          this._shadow = this._avatarImage.getAsset(sprite.libraryAssetName);\n          offsetX = -17;\n          offsetY = this._canStandUp ? 10 : -7;\n        }\n\n        if (this._shadow) {\n          sprite.texture = this._shadow.texture;\n          sprite.offsetX = offsetX;\n          sprite.offsetY = offsetY;\n          sprite.alpha = 50;\n          sprite.relativeDepth = 1;\n        } else {\n          sprite.visible = false;\n        }\n      }\n    } else {\n      this._shadow = null;\n      sprite.visible = false;\n    }\n  }\n\n  getAvatarRenderAsset(name) {\n    return this._data ? this._data.getAvatarRendererAsset(name) : null;\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n  get posture() {\n    return this._posture;\n  }\n\n  get angle() {\n    return this._angle;\n  }\n\n  get disposed() {\n    return this._disposed;\n  }\n\n}\nAvatarVisualization.AVATAR = 'avatar';\nAvatarVisualization.FLOATING_IDLE_Z_ID = 1;\nAvatarVisualization.TYPING_BUBBLE_ID = 2;\nAvatarVisualization.EXPRESSION_ID = 3;\nAvatarVisualization.NUMBER_BUBBLE_ID = 4;\nAvatarVisualization.GAME_CLICK_TARGET_ID = 5;\nAvatarVisualization.MUTED_BUBBLE_ID = 6;\nAvatarVisualization.GUIDE_BUBBLE_ID = 7;\nAvatarVisualization.OWN_USER_ID = 4;\nAvatarVisualization.UPDATE_TIME_INCREASER = 41;\nAvatarVisualization.AVATAR_LAYER_ID = 0;\nAvatarVisualization.SHADOW_LAYER_ID = 1;\nAvatarVisualization.SNOWBOARDING_EFFECT = 97;\nAvatarVisualization.INITIAL_RESERVED_SPRITES = 2;\nAvatarVisualization.ANIMATION_FRAME_UPDATE_INTERVAL = 2;\nAvatarVisualization.DEFAULT_CANVAS_OFFSETS = [0, 0, 0];\nAvatarVisualization.MAX_EFFECT_CACHE = 2;\nAvatarVisualization.SPRITE_INDEX_AVATAR = 0;\nAvatarVisualization.BASE_Y_SCALE = 1000;\nAvatarVisualization.AVATAR_SPRITE_DEFAULT_DEPTH = -0.01;\nAvatarVisualization.AVATAR_OWN_DEPTH_ADJUST = 0.001;\nAvatarVisualization.AVATAR_SPRITE_LAYING_DEPTH = -0.409;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/avatar/AvatarVisualization.ts"],"names":["BLEND_MODES","Texture","AdvancedMap","AlphaTolerance","RoomObjectSpriteType","RoomObjectSpriteVisualization","AvatarAction","AvatarGuideStatus","AvatarSetType","RoomObjectVariable","ExpressionAdditionFactory","FloatingIdleZAddition","GameClickTargetAddition","GuideStatusBubbleAddition","MutedBubbleAddition","NumberBubbleAddition","TypingBubbleAddition","AvatarVisualizationData","AvatarVisualization","constructor","_data","_avatarImage","_cachedAvatars","_cachedAvatarEffects","_shadow","_lastUpdate","_disposed","_figure","_gender","_direction","_headDirection","_posture","_postureParameter","_canStandUp","_postureOffset","_verticalOffset","_angle","_headAngle","_talk","_expression","_sleep","_blink","_gesture","_sign","_highlightEnabled","_highlight","_dance","_effect","_carryObject","_useObject","_ownUser","_isLaying","_layInside","_isAnimating","_extraSpritesStartIndex","_forcedAnimFrames","_updatesUntilFrameUpdate","_isAvatarReady","_needsUpdate","_geometryUpdateCounter","_additions","Map","initialize","data","createSprites","INITIAL_RESERVED_SPRITES","dispose","update","geometry","time","skipUpdate","object","UPDATE_TIME_INCREASER","model","scale","effect","didScaleUpdate","didEffectUpdate","otherUpdate","objectUpdate","updateModel","_scale","updateScale","createAvatarImage","sprite","getSprite","AVATAR_LAYER_ID","isPlaceholder","alpha","animationHasResetOnToggle","resetAnimationFrameCounter","updateShadow","updateObject","processActionsForAvatar","index","addition","values","animate","updateSpriteCounter","update1","update2","ANIMATION_FRAME_UPDATE_INTERVAL","updateAnimationByFrames","_local_20","getCanvasOffsets","length","DEFAULT_CANVAS_OFFSETS","SPRITE_INDEX_AVATAR","highlightEnabled","getValue","FIGURE_HIGHLIGHT_ENABLE","FIGURE_HIGHLIGHT","avatarImage","getImage","FULL","texture","filters","offsetX","width","offsetY","height","relativeDepth","AVATAR_SPRITE_LAYING_DEPTH","AVATAR_SPRITE_DEFAULT_DEPTH","AVATAR_OWN_DEPTH_ADJUST","spriteType","AVATAR_OWN","AVATAR","typingBubble","getAddition","TYPING_BUBBLE_ID","isAnimating","_local_21","direction","getDirection","spriteData","getSprites","id","layerData","getLayerData","getDirectionOffsetX","getDirectionOffsetY","dx","dy","alphaTolerance","MATCH_NOTHING","visible","frameNumber","offsetZ","getDirectionOffsetZ","dd","hasDirections","animationFrame","assetName","getScale","member","asset","getAsset","flipH","hasStaticY","BASE_Y_SCALE","totalSprites","ink","blendMode","ADD","NORMAL","effectId","cachedImage","imageName","toString","add","MAX_EFFECT_CACHE","cached","remove","getKey","_arg_4","updateObjectCounter","updateCounter","updateId","x","headDirection","setDirectionAngle","HEAD","updateModelCounter","needsUpdate","talk","FIGURE_TALK","expression","FIGURE_EXPRESSION","sleep","FIGURE_SLEEP","blink","FIGURE_BLINK","gesture","FIGURE_GESTURE","posture","FIGURE_POSTURE","postureParameter","FIGURE_POSTURE_PARAMETER","canStandUp","FIGURE_CAN_STAND_UP","verticalOffset","FIGURE_VERTICAL_OFFSET","dance","FIGURE_DANCE","FIGURE_EFFECT","carryObject","FIGURE_CARRY_OBJECT","useObject","FIGURE_USE_OBJECT","HEAD_DIRECTION","idleAddition","FLOATING_IDLE_Z_ID","addAddition","removeAddition","isMuted","FIGURE_IS_MUTED","mutedAddition","MUTED_BUBBLE_ID","isTyping","FIGURE_IS_TYPING","typingAddition","guideStatusValue","FIGURE_GUIDE_STATUS","NONE","GUIDE_BUBBLE_ID","isPlayingGame","FIGURE_IS_PLAYING_GAME","gameClickAddition","GAME_CLICK_TARGET_ID","numberValue","FIGURE_NUMBER_VALUE","numberAddition","NUMBER_BUBBLE_ID","expressionAddition","EXPRESSION_ID","getExpressionAddition","gender","GENDER","updateFigure","FIGURE","sign","FIGURE_SIGN","highlight","ownUser","OWN_USER","setDirection","_local_2","parseInt","avatar","initActionAppends","appendAction","POSTURE","GESTURE","getGesture","DANCE","SIGN","CARRY_OBJECT","USE_OBJECT","TALK","SLEEP","getExpression","EFFECT","endActionAppends","spriteCount","createSprite","figure","clearAvatar","resetFigure","resetEffect","getValues","reset","EMPTY","existing","get","set","delete","SHADOW_LAYER_ID","hasShadow","SNOWBOARDING_EFFECT","libraryAssetName","getAvatarRenderAsset","name","getAvatarRendererAsset","angle","disposed","OWN_USER_ID"],"mappings":"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","sourcesContent":["import { BLEND_MODES } from '@pixi/constants';\r\nimport { Resource, Texture } from '@pixi/core';\r\nimport { AdvancedMap } from '../../../../../core/utils/AdvancedMap';\r\nimport { AlphaTolerance } from '../../../../../room/object/enum/AlphaTolerance';\r\nimport { RoomObjectSpriteType } from '../../../../../room/object/enum/RoomObjectSpriteType';\r\nimport { IRoomObject } from '../../../../../room/object/IRoomObject';\r\nimport { IRoomObjectModel } from '../../../../../room/object/IRoomObjectModel';\r\nimport { IObjectVisualizationData } from '../../../../../room/object/visualization/IRoomObjectVisualizationData';\r\nimport { RoomObjectSpriteVisualization } from '../../../../../room/object/visualization/RoomObjectSpriteVisualization';\r\nimport { IGraphicAsset } from '../../../../../room/object/visualization/utils/IGraphicAsset';\r\nimport { IRoomGeometry } from '../../../../../room/utils/IRoomGeometry';\r\nimport { AvatarAction } from '../../../../avatar/enum/AvatarAction';\r\nimport { AvatarGuideStatus } from '../../../../avatar/enum/AvatarGuideStatus';\r\nimport { AvatarSetType } from '../../../../avatar/enum/AvatarSetType';\r\nimport { IAvatarEffectListener } from '../../../../avatar/IAvatarEffectListener';\r\nimport { IAvatarImage } from '../../../../avatar/IAvatarImage';\r\nimport { IAvatarImageListener } from '../../../../avatar/IAvatarImageListener';\r\nimport { RoomObjectVariable } from '../../RoomObjectVariable';\r\nimport { ExpressionAdditionFactory } from './additions/ExpressionAdditionFactory';\r\nimport { FloatingIdleZAddition } from './additions/FloatingIdleZAddition';\r\nimport { GameClickTargetAddition } from './additions/GameClickTargetAddition';\r\nimport { GuideStatusBubbleAddition } from './additions/GuideStatusBubbleAddition';\r\nimport { IAvatarAddition } from './additions/IAvatarAddition';\r\nimport { MutedBubbleAddition } from './additions/MutedBubbleAddition';\r\nimport { NumberBubbleAddition } from './additions/NumberBubbleAddition';\r\nimport { TypingBubbleAddition } from './additions/TypingBubbleAddition';\r\nimport { AvatarVisualizationData } from './AvatarVisualizationData';\r\n\r\nexport class AvatarVisualization extends RoomObjectSpriteVisualization implements IAvatarImageListener, IAvatarEffectListener\r\n{\r\n    private static AVATAR: string = 'avatar';\r\n    private static FLOATING_IDLE_Z_ID: number = 1;\r\n    private static TYPING_BUBBLE_ID: number = 2;\r\n    private static EXPRESSION_ID: number = 3;\r\n    private static NUMBER_BUBBLE_ID: number = 4;\r\n    private static GAME_CLICK_TARGET_ID: number = 5;\r\n    private static MUTED_BUBBLE_ID: number = 6;\r\n    private static GUIDE_BUBBLE_ID: number = 7;\r\n    private static OWN_USER_ID: number = 4;\r\n    private static UPDATE_TIME_INCREASER: number = 41;\r\n    private static AVATAR_LAYER_ID: number = 0;\r\n    private static SHADOW_LAYER_ID: number = 1;\r\n    private static SNOWBOARDING_EFFECT: number = 97;\r\n    private static INITIAL_RESERVED_SPRITES: number = 2;\r\n    private static ANIMATION_FRAME_UPDATE_INTERVAL: number = 2;\r\n    private static DEFAULT_CANVAS_OFFSETS: number[] = [0, 0, 0];\r\n    private static MAX_EFFECT_CACHE: number = 2;\r\n    private static SPRITE_INDEX_AVATAR: number = 0;\r\n    private static BASE_Y_SCALE: number = 1000;\r\n    private static AVATAR_SPRITE_DEFAULT_DEPTH: number = -0.01;\r\n    private static AVATAR_OWN_DEPTH_ADJUST: number = 0.001;\r\n    private static AVATAR_SPRITE_LAYING_DEPTH: number = -0.409;\r\n\r\n    protected _data: AvatarVisualizationData;\r\n\r\n    private _avatarImage: IAvatarImage;\r\n    private _cachedAvatars: AdvancedMap<string, IAvatarImage>;\r\n    private _cachedAvatarEffects: AdvancedMap<string, IAvatarImage>;\r\n    private _shadow: IGraphicAsset;\r\n    private _lastUpdate: number;\r\n    private _disposed: boolean;\r\n\r\n    private _figure: string;\r\n    private _gender: string;\r\n    private _direction: number;\r\n    private _headDirection: number;\r\n    private _posture: string;\r\n    private _postureParameter: string;\r\n    private _canStandUp: boolean;\r\n    private _postureOffset: number;\r\n    private _verticalOffset: number;\r\n    private _angle: number;\r\n    private _headAngle: number;\r\n    private _talk: boolean;\r\n    private _expression: number;\r\n    private _sleep: boolean;\r\n    private _blink: boolean;\r\n    private _gesture: number;\r\n    private _sign: number;\r\n    private _highlightEnabled: boolean;\r\n    private _highlight: boolean;\r\n    private _dance: number;\r\n    private _effect: number;\r\n    private _carryObject: number;\r\n    private _useObject: number;\r\n    private _ownUser: boolean;\r\n\r\n    private _isLaying: boolean;\r\n    private _layInside: boolean;\r\n    private _isAnimating: boolean;\r\n    private _extraSpritesStartIndex: number;\r\n    private _forcedAnimFrames: number;\r\n    private _updatesUntilFrameUpdate: number;\r\n\r\n    private _isAvatarReady: boolean;\r\n    private _needsUpdate: boolean;\r\n    private _geometryUpdateCounter: number;\r\n\r\n    private _additions: Map<number, IAvatarAddition>;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this._data = null;\r\n\r\n        this._avatarImage = null;\r\n        this._cachedAvatars = new AdvancedMap();\r\n        this._cachedAvatarEffects = new AdvancedMap();\r\n        this._shadow = null;\r\n        this._lastUpdate = -1000;\r\n        this._disposed = false;\r\n\r\n        this._figure = null;\r\n        this._gender = null;\r\n        this._direction = -1;\r\n        this._headDirection = -1;\r\n        this._posture = '';\r\n        this._postureParameter = '';\r\n        this._canStandUp = false;\r\n        this._postureOffset = 0;\r\n        this._verticalOffset = 0;\r\n        this._angle = -1;\r\n        this._headAngle = -1;\r\n        this._talk = false;\r\n        this._expression = 0;\r\n        this._sleep = false;\r\n        this._blink = false;\r\n        this._gesture = 0;\r\n        this._sign = -1;\r\n        this._highlightEnabled = false;\r\n        this._highlight = false;\r\n        this._dance = 0;\r\n        this._effect = 0;\r\n        this._carryObject = 0;\r\n        this._useObject = 0;\r\n        this._ownUser = false;\r\n\r\n        this._isLaying = false;\r\n        this._layInside = false;\r\n        this._isAnimating = false;\r\n        this._extraSpritesStartIndex = 2;\r\n        this._forcedAnimFrames = 0;\r\n        this._updatesUntilFrameUpdate = 0;\r\n\r\n        this._isAvatarReady = false;\r\n        this._needsUpdate = false;\r\n        this._geometryUpdateCounter = -1;\r\n\r\n        this._additions = new Map();\r\n    }\r\n\r\n    public initialize(data: IObjectVisualizationData): boolean\r\n    {\r\n        if(!(data instanceof AvatarVisualizationData)) return false;\r\n\r\n        this._data = data;\r\n\r\n        this.createSprites(AvatarVisualization.INITIAL_RESERVED_SPRITES);\r\n\r\n        super.initialize(data);\r\n\r\n        return true;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n        if(this._disposed) return;\r\n\r\n        super.dispose();\r\n\r\n        if(this._avatarImage) this._avatarImage.dispose();\r\n\r\n        this._shadow = null;\r\n        this._disposed = true;\r\n    }\r\n\r\n    public update(geometry: IRoomGeometry, time: number, update: boolean, skipUpdate: boolean): void\r\n    {\r\n        if(!this.object || !geometry || !this._data) return;\r\n\r\n        if(time < (this._lastUpdate + AvatarVisualization.UPDATE_TIME_INCREASER)) return;\r\n\r\n        this._lastUpdate += AvatarVisualization.UPDATE_TIME_INCREASER;\r\n\r\n        if((this._lastUpdate + AvatarVisualization.UPDATE_TIME_INCREASER) < time) this._lastUpdate = (time - AvatarVisualization.UPDATE_TIME_INCREASER);\r\n\r\n        const model = this.object.model;\r\n        const scale = geometry.scale;\r\n        const effect = this._effect;\r\n\r\n        let didScaleUpdate = false;\r\n        let didEffectUpdate = false;\r\n        let otherUpdate = false;\r\n        let objectUpdate = false;\r\n\r\n        const updateModel = this.updateModel(model, scale);\r\n\r\n        if((updateModel || (scale !== this._scale)) || !this._avatarImage)\r\n        {\r\n            if(scale !== this._scale)\r\n            {\r\n                didScaleUpdate = true;\r\n\r\n                this.updateScale(scale);\r\n            }\r\n\r\n            if(effect !== this._effect) didEffectUpdate = true;\r\n\r\n            if(didScaleUpdate || !this._avatarImage || didEffectUpdate)\r\n            {\r\n                this._avatarImage = this.createAvatarImage(scale, this._effect);\r\n\r\n                if(!this._avatarImage) return;\r\n\r\n                otherUpdate = true;\r\n\r\n                const sprite = this.getSprite(AvatarVisualization.AVATAR_LAYER_ID);\r\n\r\n                if((sprite && this._avatarImage) && this._avatarImage.isPlaceholder())\r\n                {\r\n                    sprite.alpha = 150;\r\n                }\r\n\r\n                else if(sprite)\r\n                {\r\n                    sprite.alpha = 255;\r\n                }\r\n            }\r\n\r\n            if(!this._avatarImage) return;\r\n\r\n            if(didEffectUpdate && this._avatarImage.animationHasResetOnToggle) this._avatarImage.resetAnimationFrameCounter();\r\n\r\n            this.updateShadow(scale);\r\n\r\n            objectUpdate = this.updateObject(this.object, geometry, update, true);\r\n\r\n            this.processActionsForAvatar(this._avatarImage);\r\n\r\n            if(this._additions)\r\n            {\r\n                let index = this._extraSpritesStartIndex;\r\n\r\n                for(const addition of this._additions.values())\r\n                {\r\n                    addition.update(this.getSprite(index++), scale);\r\n                }\r\n            }\r\n\r\n            this._scale = scale;\r\n        }\r\n        else\r\n        {\r\n            objectUpdate = this.updateObject(this.object, geometry, update);\r\n        }\r\n\r\n        if(this._additions)\r\n        {\r\n            let index = this._extraSpritesStartIndex;\r\n\r\n            for(const addition of this._additions.values())\r\n            {\r\n                if(addition.animate(this.getSprite(index++))) this.updateSpriteCounter++;\r\n            }\r\n        }\r\n\r\n        const update1 = (objectUpdate || updateModel || didScaleUpdate);\r\n        const update2 = ((this._isAnimating || (this._forcedAnimFrames > 0)) && update);\r\n\r\n        if(update1) this._forcedAnimFrames = AvatarVisualization.ANIMATION_FRAME_UPDATE_INTERVAL;\r\n\r\n        if(update1 || update2)\r\n        {\r\n            this.updateSpriteCounter++;\r\n\r\n            this._forcedAnimFrames--;\r\n            this._updatesUntilFrameUpdate--;\r\n\r\n            if((((this._updatesUntilFrameUpdate <= 0) || didScaleUpdate) || updateModel) || otherUpdate)\r\n            {\r\n                this._avatarImage.updateAnimationByFrames(1);\r\n\r\n                this._updatesUntilFrameUpdate = AvatarVisualization.ANIMATION_FRAME_UPDATE_INTERVAL;\r\n            }\r\n            else\r\n            {\r\n                return;\r\n            }\r\n\r\n            let _local_20 = this._avatarImage.getCanvasOffsets();\r\n\r\n            if(!_local_20 || (_local_20.length < 3)) _local_20 = AvatarVisualization.DEFAULT_CANVAS_OFFSETS;\r\n\r\n            const sprite = this.getSprite(AvatarVisualization.SPRITE_INDEX_AVATAR);\r\n\r\n            if(sprite)\r\n            {\r\n                const highlightEnabled = ((this.object.model.getValue<number>(RoomObjectVariable.FIGURE_HIGHLIGHT_ENABLE) === 1) && (this.object.model.getValue<number>(RoomObjectVariable.FIGURE_HIGHLIGHT) === 1));\r\n\r\n                const avatarImage = this._avatarImage.getImage(AvatarSetType.FULL, highlightEnabled);\r\n\r\n                if(avatarImage)\r\n                {\r\n                    sprite.texture = avatarImage;\r\n\r\n                    if(highlightEnabled)\r\n                    {\r\n                        // sprite.filters  = [\r\n                        //     new GlowFilter({\r\n                        //         color: 0xFFFFFF,\r\n                        //         distance: 6\r\n                        //     })\r\n                        // ];\r\n                    }\r\n                    else\r\n                    {\r\n                        sprite.filters = [];\r\n                    }\r\n                }\r\n\r\n                if(sprite.texture)\r\n                {\r\n                    sprite.offsetX = ((((-1 * scale) / 2) + _local_20[0]) - ((sprite.texture.width - scale) / 2));\r\n                    sprite.offsetY = (((-(sprite.texture.height) + (scale / 4)) + _local_20[1]) + this._postureOffset);\r\n                }\r\n\r\n                if(this._isLaying)\r\n                {\r\n                    if(this._layInside) sprite.relativeDepth = -0.5;\r\n                    else sprite.relativeDepth = (AvatarVisualization.AVATAR_SPRITE_LAYING_DEPTH + _local_20[2]);\r\n                }\r\n                else\r\n                {\r\n                    sprite.relativeDepth = (AvatarVisualization.AVATAR_SPRITE_DEFAULT_DEPTH + _local_20[2]);\r\n                }\r\n\r\n                if(this._ownUser)\r\n                {\r\n                    sprite.relativeDepth -= AvatarVisualization.AVATAR_OWN_DEPTH_ADJUST;\r\n                    sprite.spriteType = RoomObjectSpriteType.AVATAR_OWN;\r\n                }\r\n                else\r\n                {\r\n                    sprite.spriteType = RoomObjectSpriteType.AVATAR;\r\n                }\r\n            }\r\n\r\n            const typingBubble = this.getAddition(AvatarVisualization.TYPING_BUBBLE_ID) as TypingBubbleAddition;\r\n\r\n            if(typingBubble)\r\n            {\r\n                if(!this._isLaying) typingBubble.relativeDepth = ((AvatarVisualization.AVATAR_SPRITE_DEFAULT_DEPTH - 0.01) + _local_20[2]);\r\n                else typingBubble.relativeDepth = ((AvatarVisualization.AVATAR_SPRITE_LAYING_DEPTH - 0.01) + _local_20[2]);\r\n            }\r\n\r\n            this._isAnimating = this._avatarImage.isAnimating();\r\n\r\n            let _local_21 = AvatarVisualization.INITIAL_RESERVED_SPRITES;\r\n            const direction = this._avatarImage.getDirection();\r\n\r\n            for(const spriteData of this._avatarImage.getSprites())\r\n            {\r\n                if(spriteData.id === AvatarVisualization.AVATAR)\r\n                {\r\n                    const sprite = this.getSprite(AvatarVisualization.SPRITE_INDEX_AVATAR);\r\n\r\n                    if(sprite)\r\n                    {\r\n                        const layerData = this._avatarImage.getLayerData(spriteData);\r\n\r\n                        let offsetX = spriteData.getDirectionOffsetX(direction);\r\n                        let offsetY = spriteData.getDirectionOffsetY(direction);\r\n\r\n                        if(layerData)\r\n                        {\r\n                            offsetX += layerData.dx;\r\n                            offsetY += layerData.dy;\r\n                        }\r\n\r\n                        if(scale < 48)\r\n                        {\r\n                            offsetX /= 2;\r\n                            offsetY /= 2;\r\n                        }\r\n\r\n                        if(!this._canStandUp)\r\n                        {\r\n                            sprite.offsetX += offsetX;\r\n                            sprite.offsetY += offsetY;\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    const sprite = this.getSprite(_local_21);\r\n\r\n                    if(sprite)\r\n                    {\r\n                        sprite.alphaTolerance = AlphaTolerance.MATCH_NOTHING;\r\n                        sprite.visible = true;\r\n\r\n                        const layerData = this._avatarImage.getLayerData(spriteData);\r\n\r\n                        let frameNumber = 0;\r\n                        let offsetX = spriteData.getDirectionOffsetX(direction);\r\n                        let offsetY = spriteData.getDirectionOffsetY(direction);\r\n                        const offsetZ = spriteData.getDirectionOffsetZ(direction);\r\n                        let dd = 0;\r\n\r\n                        if(spriteData.hasDirections) dd = direction;\r\n\r\n                        if(layerData)\r\n                        {\r\n                            frameNumber = layerData.animationFrame;\r\n                            offsetX += layerData.dx;\r\n                            offsetY += layerData.dy;\r\n                            dd += layerData.dd;\r\n                        }\r\n\r\n                        if(scale < 48)\r\n                        {\r\n                            offsetX /= 2;\r\n                            offsetY /= 2;\r\n                        }\r\n\r\n                        if(dd < 0) dd += 8;\r\n                        else\r\n                        {\r\n                            if(dd > 7) dd -= 8;\r\n                        }\r\n\r\n                        const assetName = ((((((this._avatarImage.getScale() + '_') + spriteData.member) + '_') + dd) + '_') + frameNumber);\r\n\r\n                        const asset = this._avatarImage.getAsset(assetName);\r\n\r\n                        if(!asset) continue;\r\n\r\n                        sprite.texture = asset.texture;\r\n                        sprite.offsetX = ((asset.offsetX - (scale / 2)) + offsetX);\r\n                        sprite.offsetY = (asset.offsetY + offsetY);\r\n                        sprite.flipH = asset.flipH;\r\n\r\n                        if(spriteData.hasStaticY)\r\n                        {\r\n                            sprite.offsetY += ((this._verticalOffset * scale) / (2 * AvatarVisualization.BASE_Y_SCALE));\r\n                        }\r\n                        else\r\n                        {\r\n                            sprite.offsetY += this._postureOffset;\r\n                        }\r\n\r\n                        if(this._isLaying)\r\n                        {\r\n                            sprite.relativeDepth = (AvatarVisualization.AVATAR_SPRITE_LAYING_DEPTH - ((0.001 * this.totalSprites) * offsetZ));\r\n                        }\r\n                        else\r\n                        {\r\n                            sprite.relativeDepth = (AvatarVisualization.AVATAR_SPRITE_DEFAULT_DEPTH - ((0.001 * this.totalSprites) * offsetZ));\r\n                        }\r\n\r\n                        if(spriteData.ink === 33) sprite.blendMode = BLEND_MODES.ADD;\r\n                        else sprite.blendMode = BLEND_MODES.NORMAL;\r\n                    }\r\n\r\n                    _local_21++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createAvatarImage(scale: number, effectId: number): IAvatarImage\r\n    {\r\n        let cachedImage: IAvatarImage = null;\r\n        let imageName = 'avatarImage' + scale.toString();\r\n\r\n        if(!effectId)\r\n        {\r\n            cachedImage = this._cachedAvatars.getValue(imageName);\r\n        }\r\n        else\r\n        {\r\n            imageName += '-' + effectId;\r\n\r\n            cachedImage = this._cachedAvatarEffects.getValue(imageName);\r\n        }\r\n\r\n        if(!cachedImage)\r\n        {\r\n            cachedImage = this._data.createAvatarImage(this._figure, scale, this._gender, this, this);\r\n\r\n            if(cachedImage)\r\n            {\r\n                if(!effectId)\r\n                {\r\n                    this._cachedAvatars.add(imageName, cachedImage);\r\n                }\r\n\r\n                else\r\n                {\r\n                    if(this._cachedAvatarEffects.length >= AvatarVisualization.MAX_EFFECT_CACHE)\r\n                    {\r\n                        const cached = this._cachedAvatarEffects.remove(this._cachedAvatarEffects.getKey(0));\r\n\r\n                        if(cached) cached.dispose();\r\n                    }\r\n\r\n                    this._cachedAvatarEffects.add(imageName, cachedImage);\r\n                }\r\n            }\r\n        }\r\n\r\n        return cachedImage;\r\n    }\r\n\r\n    protected updateObject(object: IRoomObject, geometry: IRoomGeometry, update: boolean, _arg_4: boolean = false): boolean\r\n    {\r\n        if((!_arg_4 && (this.updateObjectCounter === object.updateCounter)) && (this._geometryUpdateCounter === geometry.updateId)) return false;\r\n\r\n        let direction = (object.getDirection().x - geometry.direction.x);\r\n        let headDirection = (this._headDirection - geometry.direction.x);\r\n\r\n        if(this._posture === 'float') headDirection = direction;\r\n\r\n        direction = (((direction % 360) + 360) % 360);\r\n        headDirection = (((headDirection % 360) + 360) % 360);\r\n\r\n        if((this._posture === 'sit') && this._canStandUp)\r\n        {\r\n            direction -= ((direction % 90) - 45);\r\n            headDirection -= ((headDirection % 90) - 45);\r\n        }\r\n\r\n        if((direction !== this._angle) || _arg_4)\r\n        {\r\n            update = true;\r\n\r\n            this._angle = direction;\r\n\r\n            direction = (direction - (135 - 22.5));\r\n            direction = ((direction + 360) % 360);\r\n\r\n            this._avatarImage.setDirectionAngle(AvatarSetType.FULL, direction);\r\n        }\r\n\r\n        if((headDirection !== this._headAngle) || _arg_4)\r\n        {\r\n            update = true;\r\n\r\n            this._headAngle = headDirection;\r\n\r\n            if(this._headAngle !== this._angle)\r\n            {\r\n                headDirection = (headDirection - (135 - 22.5));\r\n                headDirection = ((headDirection + 360) % 360);\r\n\r\n                this._avatarImage.setDirectionAngle(AvatarSetType.HEAD, headDirection);\r\n            }\r\n        }\r\n\r\n        this._geometryUpdateCounter = geometry.updateId;\r\n\r\n        this.updateObjectCounter = this.object.updateCounter;\r\n\r\n        return update;\r\n    }\r\n\r\n    protected updateModel(model: IRoomObjectModel, scale: number): boolean\r\n    {\r\n        if(!model) return false;\r\n\r\n        if(this.updateModelCounter === model.updateCounter) return false;\r\n\r\n        let needsUpdate = false;\r\n\r\n        const talk = (model.getValue<number>(RoomObjectVariable.FIGURE_TALK) > 0);\r\n\r\n        if(talk !== this._talk)\r\n        {\r\n            this._talk = talk;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const expression = model.getValue<number>(RoomObjectVariable.FIGURE_EXPRESSION);\r\n\r\n        if(expression !== this._expression)\r\n        {\r\n            this._expression = expression;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const sleep = (model.getValue<number>(RoomObjectVariable.FIGURE_SLEEP) > 0);\r\n\r\n        if(sleep !== this._sleep)\r\n        {\r\n            this._sleep = sleep;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const blink = (model.getValue<number>(RoomObjectVariable.FIGURE_BLINK) > 0);\r\n\r\n        if(blink !== this._blink)\r\n        {\r\n            this._blink = blink;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const gesture = (model.getValue<number>(RoomObjectVariable.FIGURE_GESTURE) || 0);\r\n\r\n        if(gesture !== this._gesture)\r\n        {\r\n            this._gesture = gesture;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const posture = model.getValue<string>(RoomObjectVariable.FIGURE_POSTURE);\r\n\r\n        if(posture !== this._posture)\r\n        {\r\n            this._posture = posture;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const postureParameter = model.getValue<string>(RoomObjectVariable.FIGURE_POSTURE_PARAMETER);\r\n\r\n        if(postureParameter !== this._postureParameter)\r\n        {\r\n            this._postureParameter = postureParameter;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const canStandUp = model.getValue<boolean>(RoomObjectVariable.FIGURE_CAN_STAND_UP);\r\n\r\n        if(canStandUp !== this._canStandUp)\r\n        {\r\n            this._canStandUp = canStandUp;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const verticalOffset = (model.getValue<number>(RoomObjectVariable.FIGURE_VERTICAL_OFFSET) * AvatarVisualization.BASE_Y_SCALE);\r\n\r\n        if(verticalOffset !== this._verticalOffset)\r\n        {\r\n            this._verticalOffset = verticalOffset;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const dance = (model.getValue<number>(RoomObjectVariable.FIGURE_DANCE) || 0);\r\n\r\n        if(dance !== this._dance)\r\n        {\r\n            this._dance = dance;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const effect = (model.getValue<number>(RoomObjectVariable.FIGURE_EFFECT) || 0);\r\n\r\n        if(effect !== this._effect)\r\n        {\r\n            this._effect = effect;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const carryObject = (model.getValue<number>(RoomObjectVariable.FIGURE_CARRY_OBJECT) || 0);\r\n\r\n        if(carryObject !== this._carryObject)\r\n        {\r\n            this._carryObject = carryObject;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const useObject = (model.getValue<number>(RoomObjectVariable.FIGURE_USE_OBJECT) || 0);\r\n\r\n        if(useObject !== this._useObject)\r\n        {\r\n            this._useObject = useObject;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const headDirection = model.getValue<number>(RoomObjectVariable.HEAD_DIRECTION);\r\n\r\n        if(headDirection !== this._headDirection)\r\n        {\r\n            this._headDirection = headDirection;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        if((this._carryObject > 0) && (useObject > 0))\r\n        {\r\n            if(this._useObject !== this._carryObject)\r\n            {\r\n                this._useObject = this._carryObject;\r\n\r\n                needsUpdate = true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(this._useObject !== 0)\r\n            {\r\n                this._useObject = 0;\r\n\r\n                needsUpdate = true;\r\n            }\r\n        }\r\n\r\n        let idleAddition = this.getAddition(AvatarVisualization.FLOATING_IDLE_Z_ID);\r\n\r\n        if(this._sleep)\r\n        {\r\n            if(!idleAddition) idleAddition = this.addAddition(new FloatingIdleZAddition(AvatarVisualization.FLOATING_IDLE_Z_ID, this));\r\n\r\n            needsUpdate = true;\r\n        }\r\n        else\r\n        {\r\n            if(idleAddition) this.removeAddition(AvatarVisualization.FLOATING_IDLE_Z_ID);\r\n        }\r\n\r\n        const isMuted = (model.getValue<number>(RoomObjectVariable.FIGURE_IS_MUTED) > 0);\r\n\r\n        let mutedAddition = this.getAddition(AvatarVisualization.MUTED_BUBBLE_ID);\r\n\r\n        if(isMuted)\r\n        {\r\n            if(!mutedAddition) mutedAddition = this.addAddition(new MutedBubbleAddition(AvatarVisualization.MUTED_BUBBLE_ID, this));\r\n\r\n            needsUpdate = true;\r\n        }\r\n        else\r\n        {\r\n            if(mutedAddition)\r\n            {\r\n                this.removeAddition(AvatarVisualization.MUTED_BUBBLE_ID);\r\n\r\n                needsUpdate = true;\r\n            }\r\n\r\n            const isTyping = (model.getValue<number>(RoomObjectVariable.FIGURE_IS_TYPING) > 0);\r\n\r\n            let typingAddition = this.getAddition(AvatarVisualization.TYPING_BUBBLE_ID);\r\n\r\n            if(isTyping)\r\n            {\r\n                if(!typingAddition) typingAddition = this.addAddition(new TypingBubbleAddition(AvatarVisualization.TYPING_BUBBLE_ID, this));\r\n\r\n                needsUpdate = true;\r\n            }\r\n            else\r\n            {\r\n                if(typingAddition)\r\n                {\r\n                    this.removeAddition(AvatarVisualization.TYPING_BUBBLE_ID);\r\n\r\n                    needsUpdate = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        const guideStatusValue = (model.getValue<number>(RoomObjectVariable.FIGURE_GUIDE_STATUS) || 0);\r\n\r\n        if(guideStatusValue !== AvatarGuideStatus.NONE)\r\n        {\r\n            this.removeAddition(AvatarVisualization.GUIDE_BUBBLE_ID);\r\n            this.addAddition(new GuideStatusBubbleAddition(AvatarVisualization.GUIDE_BUBBLE_ID, this, guideStatusValue));\r\n\r\n            needsUpdate = true;\r\n        }\r\n        else\r\n        {\r\n            if(this.getAddition(AvatarVisualization.GUIDE_BUBBLE_ID))\r\n            {\r\n                this.removeAddition(AvatarVisualization.GUIDE_BUBBLE_ID);\r\n\r\n                needsUpdate = true;\r\n            }\r\n        }\r\n\r\n        const isPlayingGame = (model.getValue<number>(RoomObjectVariable.FIGURE_IS_PLAYING_GAME) > 0);\r\n\r\n        let gameClickAddition = this.getAddition(AvatarVisualization.GAME_CLICK_TARGET_ID);\r\n\r\n        if(isPlayingGame)\r\n        {\r\n            if(!gameClickAddition) gameClickAddition = this.addAddition(new GameClickTargetAddition(AvatarVisualization.GAME_CLICK_TARGET_ID));\r\n\r\n            needsUpdate = true;\r\n        }\r\n        else\r\n        {\r\n            if(gameClickAddition) this.removeAddition(AvatarVisualization.GAME_CLICK_TARGET_ID);\r\n        }\r\n\r\n        const numberValue = model.getValue<number>(RoomObjectVariable.FIGURE_NUMBER_VALUE);\r\n\r\n        let numberAddition = this.getAddition(AvatarVisualization.NUMBER_BUBBLE_ID);\r\n\r\n        if(numberValue > 0)\r\n        {\r\n            if(!numberAddition) numberAddition = this.addAddition(new NumberBubbleAddition(AvatarVisualization.NUMBER_BUBBLE_ID, numberValue, this));\r\n\r\n            needsUpdate = true;\r\n        }\r\n        else\r\n        {\r\n            if(numberAddition) this.removeAddition(AvatarVisualization.NUMBER_BUBBLE_ID);\r\n        }\r\n\r\n        let expressionAddition = this.getAddition(AvatarVisualization.EXPRESSION_ID);\r\n\r\n        if(this._expression > 0)\r\n        {\r\n            if(!expressionAddition)\r\n            {\r\n                expressionAddition = ExpressionAdditionFactory.getExpressionAddition(AvatarVisualization.EXPRESSION_ID, this._expression, this);\r\n\r\n                if(expressionAddition) this.addAddition(expressionAddition);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(expressionAddition) this.removeAddition(AvatarVisualization.EXPRESSION_ID);\r\n        }\r\n\r\n        this.updateScale(scale);\r\n\r\n        const gender = model.getValue<string>(RoomObjectVariable.GENDER);\r\n\r\n        if(gender !== this._gender)\r\n        {\r\n            this._gender = gender;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        if(this.updateFigure(model.getValue<string>(RoomObjectVariable.FIGURE))) needsUpdate = true;\r\n\r\n        let sign = model.getValue<number>(RoomObjectVariable.FIGURE_SIGN);\r\n\r\n        if(sign === null) sign = -1;\r\n\r\n        if(this._sign !== sign)\r\n        {\r\n            this._sign = sign;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        const highlightEnabled = (model.getValue<number>(RoomObjectVariable.FIGURE_HIGHLIGHT_ENABLE) > 0);\r\n\r\n        if(highlightEnabled !== this._highlightEnabled)\r\n        {\r\n            this._highlightEnabled = highlightEnabled;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        if(this._highlightEnabled)\r\n        {\r\n            const highlight = (model.getValue<number>(RoomObjectVariable.FIGURE_HIGHLIGHT) > 0);\r\n\r\n            if(highlight !== this._highlight)\r\n            {\r\n                this._highlight = highlight;\r\n\r\n                needsUpdate = true;\r\n            }\r\n        }\r\n\r\n        const ownUser = (model.getValue<number>(RoomObjectVariable.OWN_USER) > 0);\r\n\r\n        if(ownUser !== this._ownUser)\r\n        {\r\n            this._ownUser = ownUser;\r\n\r\n            needsUpdate = true;\r\n        }\r\n\r\n        this.updateModelCounter = model.updateCounter;\r\n\r\n        return needsUpdate;\r\n    }\r\n\r\n    protected setDirection(direction: number): void\r\n    {\r\n        if(this._direction === direction) return;\r\n\r\n        this._direction = direction;\r\n\r\n        this._needsUpdate = true;\r\n    }\r\n\r\n    private updateScale(scale: number): void\r\n    {\r\n        if(scale < 48) this._blink = false;\r\n\r\n        if((this._posture === 'sit') || (this._posture === 'lay'))\r\n        {\r\n            this._postureOffset = (scale / 2);\r\n        }\r\n        else\r\n        {\r\n            this._postureOffset = 0;\r\n        }\r\n\r\n        this._layInside = false;\r\n        this._isLaying = false;\r\n\r\n        if(this._posture === 'lay')\r\n        {\r\n            this._isLaying = true;\r\n\r\n            const _local_2 = parseInt(this._postureParameter);\r\n\r\n            if(_local_2 < 0) this._layInside = true;\r\n        }\r\n    }\r\n\r\n    private processActionsForAvatar(avatar: IAvatarImage): void\r\n    {\r\n        if(!avatar) return;\r\n\r\n        avatar.initActionAppends();\r\n\r\n        avatar.appendAction(AvatarAction.POSTURE, this._posture, this._postureParameter);\r\n\r\n        if(this._gesture > 0) this._avatarImage.appendAction(AvatarAction.GESTURE, AvatarAction.getGesture(this._gesture));\r\n\r\n        if(this._dance > 0) this._avatarImage.appendAction(AvatarAction.DANCE, this._dance);\r\n\r\n        if(this._sign > -1) this._avatarImage.appendAction(AvatarAction.SIGN, this._sign);\r\n\r\n        if(this._carryObject > 0) this._avatarImage.appendAction(AvatarAction.CARRY_OBJECT, this._carryObject);\r\n\r\n        if(this._useObject > 0) this._avatarImage.appendAction(AvatarAction.USE_OBJECT, this._useObject);\r\n\r\n        if(this._talk) this._avatarImage.appendAction(AvatarAction.TALK);\r\n\r\n        if(this._sleep || this._blink) this._avatarImage.appendAction(AvatarAction.SLEEP);\r\n\r\n        if(this._expression > 0)\r\n        {\r\n            const expression = AvatarAction.getExpression(this._expression);\r\n\r\n            if(expression !== '')\r\n            {\r\n                switch(expression)\r\n                {\r\n                    case AvatarAction.DANCE:\r\n                        this._avatarImage.appendAction(AvatarAction.DANCE, 2);\r\n                        break;\r\n                    default:\r\n                        this._avatarImage.appendAction(expression);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(this._effect > 0) this._avatarImage.appendAction(AvatarAction.EFFECT, this._effect);\r\n\r\n        avatar.endActionAppends();\r\n\r\n        this._isAnimating = avatar.isAnimating();\r\n\r\n        let spriteCount = AvatarVisualization.INITIAL_RESERVED_SPRITES;\r\n\r\n        for(const sprite of this._avatarImage.getSprites())\r\n        {\r\n            if(sprite.id !== AvatarVisualization.AVATAR) spriteCount++;\r\n        }\r\n\r\n        if(spriteCount !== this.totalSprites) this.createSprites(spriteCount);\r\n\r\n        this._extraSpritesStartIndex = spriteCount;\r\n\r\n        if(this._additions)\r\n        {\r\n            for(const addition of this._additions.values()) this.createSprite();\r\n        }\r\n    }\r\n\r\n    private updateFigure(figure: string): boolean\r\n    {\r\n        if(this._figure === figure) return false;\r\n\r\n        this._figure = figure;\r\n\r\n        this.clearAvatar();\r\n\r\n        return true;\r\n    }\r\n\r\n    public resetFigure(figure: string): void\r\n    {\r\n        this.clearAvatar();\r\n    }\r\n\r\n    public resetEffect(effect: number): void\r\n    {\r\n        this.clearAvatar();\r\n    }\r\n\r\n    private clearAvatar(): void\r\n    {\r\n        for(const avatar of this._cachedAvatars.getValues()) avatar && avatar.dispose();\r\n\r\n        for(const avatar of this._cachedAvatarEffects.getValues()) avatar && avatar.dispose();\r\n\r\n        this._cachedAvatars.reset();\r\n        this._cachedAvatarEffects.reset();\r\n\r\n        this._avatarImage = null;\r\n\r\n        const sprite = this.getSprite(AvatarVisualization.AVATAR_LAYER_ID);\r\n\r\n        if(sprite)\r\n        {\r\n            sprite.texture = Texture.EMPTY;\r\n            sprite.alpha = 255;\r\n        }\r\n    }\r\n\r\n    private getAddition(id: number): IAvatarAddition\r\n    {\r\n        if(!this._additions) return null;\r\n\r\n        const existing = this._additions.get(id);\r\n\r\n        if(!existing) return null;\r\n\r\n        return existing;\r\n    }\r\n\r\n    private addAddition(addition: IAvatarAddition): IAvatarAddition\r\n    {\r\n        const existing = this.getAddition(addition.id);\r\n\r\n        if(existing) return;\r\n\r\n        this._additions.set(addition.id, addition);\r\n\r\n        return addition;\r\n    }\r\n\r\n    private removeAddition(id: number): void\r\n    {\r\n        const addition = this.getAddition(id);\r\n\r\n        if(!addition) return;\r\n\r\n        this._additions.delete(addition.id);\r\n\r\n        addition.dispose();\r\n    }\r\n\r\n    private updateShadow(scale: number): void\r\n    {\r\n        this._shadow = null;\r\n\r\n        const sprite = this.getSprite(AvatarVisualization.SHADOW_LAYER_ID);\r\n\r\n        if(!sprite) return;\r\n\r\n        let hasShadow = (((this._posture === 'mv') || (this._posture === 'std')) || ((this._posture === 'sit') && this._canStandUp));\r\n\r\n        if(this._effect === AvatarVisualization.SNOWBOARDING_EFFECT) hasShadow = false;\r\n\r\n        if(hasShadow)\r\n        {\r\n            sprite.visible = true;\r\n\r\n            if(!this._shadow || (scale !== this._scale))\r\n            {\r\n                let offsetX = 0;\r\n                let offsetY = 0;\r\n\r\n                if(scale < 48)\r\n                {\r\n                    sprite.libraryAssetName = 'sh_std_sd_1_0_0';\r\n\r\n                    this._shadow = this._avatarImage.getAsset(sprite.libraryAssetName);\r\n\r\n                    offsetX = -8;\r\n                    offsetY = ((this._canStandUp) ? 6 : -3);\r\n                }\r\n                else\r\n                {\r\n                    sprite.libraryAssetName = 'h_std_sd_1_0_0';\r\n\r\n                    this._shadow = this._avatarImage.getAsset(sprite.libraryAssetName);\r\n\r\n                    offsetX = -17;\r\n                    offsetY = ((this._canStandUp) ? 10 : -7);\r\n                }\r\n\r\n                if(this._shadow)\r\n                {\r\n                    sprite.texture = this._shadow.texture;\r\n                    sprite.offsetX = offsetX;\r\n                    sprite.offsetY = offsetY;\r\n                    sprite.alpha = 50;\r\n                    sprite.relativeDepth = 1;\r\n                }\r\n                else\r\n                {\r\n                    sprite.visible = false;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this._shadow = null;\r\n\r\n            sprite.visible = false;\r\n        }\r\n    }\r\n\r\n    public getAvatarRenderAsset(name: string): Texture<Resource>\r\n    {\r\n        return this._data ? this._data.getAvatarRendererAsset(name) : null;\r\n    }\r\n\r\n    public get direction(): number\r\n    {\r\n        return this._direction;\r\n    }\r\n\r\n    public get posture(): string\r\n    {\r\n        return this._posture;\r\n    }\r\n\r\n    public get angle(): number\r\n    {\r\n        return this._angle;\r\n    }\r\n\r\n    public get disposed(): boolean\r\n    {\r\n        return this._disposed;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}