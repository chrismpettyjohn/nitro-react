{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { CfhSanctionMessageEvent, CfhTopicsInitEvent, IssueDeletedMessageEvent, IssueInfoMessageEvent, IssuePickFailedMessageEvent, ModeratorActionResultMessageEvent, ModeratorInitMessageEvent, ModeratorToolPreferencesEvent, RoomEngineEvent } from '@nitrots/nitro-renderer';\nimport { useCallback } from 'react';\nimport { NotificationAlertType, NotificationUtilities, PlaySound, SoundNames } from '../../api';\nimport { ModToolsEvent } from '../../events';\nimport { UseMessageEventHook, UseRoomEngineEvent, UseUiEvent } from '../../hooks';\nimport { SetCfhCategories } from './common/GetCFHCategories';\nimport { useModToolsContext } from './ModToolsContext';\nimport { ModToolsActions } from './reducers/ModToolsReducer';\nexport const ModToolsMessageHandler = props => {\n  _s();\n\n  const {\n    modToolsState = null,\n    dispatchModToolsState = null\n  } = useModToolsContext();\n  const {\n    openRooms = null,\n    openRoomChatlogs = null,\n    openUserChatlogs = null,\n    openUserInfo = null,\n    tickets = null\n  } = modToolsState;\n  const onModeratorInitMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    const data = parser.data;\n    dispatchModToolsState({\n      type: ModToolsActions.SET_INIT_DATA,\n      payload: {\n        settings: data\n      }\n    });\n    dispatchModToolsState({\n      type: ModToolsActions.SET_TICKETS,\n      payload: {\n        tickets: data.issues\n      }\n    });\n  }, [dispatchModToolsState]);\n  const onIssueInfoMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    const newTickets = tickets ? Array.from(tickets) : [];\n    const existingIndex = newTickets.findIndex(entry => entry.issueId === parser.issueData.issueId);\n\n    if (existingIndex > -1) {\n      newTickets[existingIndex] = parser.issueData;\n    } else {\n      newTickets.push(parser.issueData);\n      PlaySound(SoundNames.MODTOOLS_NEW_TICKET);\n    }\n\n    dispatchModToolsState({\n      type: ModToolsActions.SET_TICKETS,\n      payload: {\n        tickets: newTickets\n      }\n    });\n  }, [dispatchModToolsState, tickets]);\n  const onModeratorToolPreferencesEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n  }, []);\n  const onIssuePickFailedMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    NotificationUtilities.simpleAlert('Failed to pick issue', NotificationAlertType.DEFAULT, null, null, 'Error');\n  }, []);\n  const onIssueDeletedMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    const newTickets = tickets ? Array.from(tickets) : [];\n    const existingIndex = newTickets.findIndex(entry => entry.issueId === parser.issueId);\n    if (existingIndex === -1) return;\n    newTickets.splice(existingIndex, 1);\n    dispatchModToolsState({\n      type: ModToolsActions.SET_TICKETS,\n      payload: {\n        tickets: newTickets\n      }\n    });\n  }, [dispatchModToolsState, tickets]);\n  const onModeratorActionResultMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n\n    if (parser.success) {\n      NotificationUtilities.simpleAlert('Moderation action was successfull', NotificationAlertType.MODERATION, null, null, 'Success');\n    } else {\n      NotificationUtilities.simpleAlert('There was a problem applying tht moderation action', NotificationAlertType.MODERATION, null, null, 'Error');\n    }\n  }, []);\n  const onCfhTopicsInitEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return;\n    const categories = parser.callForHelpCategories;\n    dispatchModToolsState({\n      type: ModToolsActions.SET_CFH_CATEGORIES,\n      payload: {\n        cfhCategories: categories\n      }\n    });\n    SetCfhCategories(categories);\n  }, [dispatchModToolsState]);\n  const onCfhSanctionMessageEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!parser) return; // todo: update sanction data\n  }, []);\n  UseMessageEventHook(ModeratorInitMessageEvent, onModeratorInitMessageEvent);\n  UseMessageEventHook(IssueInfoMessageEvent, onIssueInfoMessageEvent);\n  UseMessageEventHook(ModeratorToolPreferencesEvent, onModeratorToolPreferencesEvent);\n  UseMessageEventHook(IssuePickFailedMessageEvent, onIssuePickFailedMessageEvent);\n  UseMessageEventHook(IssueDeletedMessageEvent, onIssueDeletedMessageEvent);\n  UseMessageEventHook(ModeratorActionResultMessageEvent, onModeratorActionResultMessageEvent);\n  UseMessageEventHook(CfhTopicsInitEvent, onCfhTopicsInitEvent);\n  UseMessageEventHook(CfhSanctionMessageEvent, onCfhSanctionMessageEvent);\n  const onRoomEngineEvent = useCallback(event => {\n    switch (event.type) {\n      case RoomEngineEvent.INITIALIZED:\n        dispatchModToolsState({\n          type: ModToolsActions.SET_CURRENT_ROOM_ID,\n          payload: {\n            currentRoomId: event.roomId\n          }\n        });\n        return;\n\n      case RoomEngineEvent.DISPOSED:\n        dispatchModToolsState({\n          type: ModToolsActions.SET_CURRENT_ROOM_ID,\n          payload: {\n            currentRoomId: null\n          }\n        });\n        return;\n    }\n  }, [dispatchModToolsState]);\n  UseRoomEngineEvent(RoomEngineEvent.INITIALIZED, onRoomEngineEvent);\n  UseRoomEngineEvent(RoomEngineEvent.DISPOSED, onRoomEngineEvent);\n  const onModToolsEvent = useCallback(event => {\n    switch (event.type) {\n      case ModToolsEvent.OPEN_ROOM_INFO:\n        {\n          const castedEvent = event;\n          if (openRooms && openRooms.includes(castedEvent.roomId)) return;\n          const rooms = openRooms || [];\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_ROOMS,\n            payload: {\n              openRooms: [...rooms, castedEvent.roomId]\n            }\n          });\n          return;\n        }\n\n      case ModToolsEvent.OPEN_ROOM_CHATLOG:\n        {\n          const castedEvent = event;\n          if (openRoomChatlogs && openRoomChatlogs.includes(castedEvent.roomId)) return;\n          const chatlogs = openRoomChatlogs || [];\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_ROOM_CHATLOGS,\n            payload: {\n              openRoomChatlogs: [...chatlogs, castedEvent.roomId]\n            }\n          });\n          return;\n        }\n\n      case ModToolsEvent.OPEN_USER_INFO:\n        {\n          const castedEvent = event;\n          if (openUserInfo && openUserInfo.includes(castedEvent.userId)) return;\n          const userInfo = openUserInfo || [];\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_USERINFO,\n            payload: {\n              openUserInfo: [...userInfo, castedEvent.userId]\n            }\n          });\n          return;\n        }\n\n      case ModToolsEvent.OPEN_USER_CHATLOG:\n        {\n          const castedEvent = event;\n          if (openUserChatlogs && openUserChatlogs.includes(castedEvent.userId)) return;\n          const userChatlog = openUserChatlogs || [];\n          dispatchModToolsState({\n            type: ModToolsActions.SET_OPEN_USER_CHATLOGS,\n            payload: {\n              openUserChatlogs: [...userChatlog, castedEvent.userId]\n            }\n          });\n          return;\n        }\n    }\n  }, [openRooms, dispatchModToolsState, openRoomChatlogs, openUserInfo, openUserChatlogs]);\n  UseUiEvent(ModToolsEvent.OPEN_ROOM_INFO, onModToolsEvent);\n  UseUiEvent(ModToolsEvent.OPEN_ROOM_CHATLOG, onModToolsEvent);\n  UseUiEvent(ModToolsEvent.OPEN_USER_INFO, onModToolsEvent);\n  UseUiEvent(ModToolsEvent.OPEN_USER_CHATLOG, onModToolsEvent);\n  return null;\n};\n\n_s(ModToolsMessageHandler, \"TJFCbYUNt/yTgIGPOMgWHOhjRo8=\", false, function () {\n  return [useModToolsContext];\n});\n\n_c = ModToolsMessageHandler;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModToolsMessageHandler\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/mod-tools/ModToolsMessageHandler.tsx"],"names":["CfhSanctionMessageEvent","CfhTopicsInitEvent","IssueDeletedMessageEvent","IssueInfoMessageEvent","IssuePickFailedMessageEvent","ModeratorActionResultMessageEvent","ModeratorInitMessageEvent","ModeratorToolPreferencesEvent","RoomEngineEvent","useCallback","NotificationAlertType","NotificationUtilities","PlaySound","SoundNames","ModToolsEvent","UseMessageEventHook","UseRoomEngineEvent","UseUiEvent","SetCfhCategories","useModToolsContext","ModToolsActions","ModToolsMessageHandler","props","modToolsState","dispatchModToolsState","openRooms","openRoomChatlogs","openUserChatlogs","openUserInfo","tickets","onModeratorInitMessageEvent","event","parser","getParser","data","type","SET_INIT_DATA","payload","settings","SET_TICKETS","issues","onIssueInfoMessageEvent","newTickets","Array","from","existingIndex","findIndex","entry","issueId","issueData","push","MODTOOLS_NEW_TICKET","onModeratorToolPreferencesEvent","onIssuePickFailedMessageEvent","simpleAlert","DEFAULT","onIssueDeletedMessageEvent","splice","onModeratorActionResultMessageEvent","success","MODERATION","onCfhTopicsInitEvent","categories","callForHelpCategories","SET_CFH_CATEGORIES","cfhCategories","onCfhSanctionMessageEvent","onRoomEngineEvent","INITIALIZED","SET_CURRENT_ROOM_ID","currentRoomId","roomId","DISPOSED","onModToolsEvent","OPEN_ROOM_INFO","castedEvent","includes","rooms","SET_OPEN_ROOMS","OPEN_ROOM_CHATLOG","chatlogs","SET_OPEN_ROOM_CHATLOGS","OPEN_USER_INFO","userId","userInfo","SET_OPEN_USERINFO","OPEN_USER_CHATLOG","userChatlog","SET_OPEN_USER_CHATLOGS"],"mappings":"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","sourcesContent":["import { CfhSanctionMessageEvent, CfhTopicsInitEvent, IssueDeletedMessageEvent, IssueInfoMessageEvent, IssuePickFailedMessageEvent, ModeratorActionResultMessageEvent, ModeratorInitMessageEvent, ModeratorToolPreferencesEvent, RoomEngineEvent } from '@nitrots/nitro-renderer';\nimport { FC, useCallback } from 'react';\nimport { NotificationAlertType, NotificationUtilities, PlaySound, SoundNames } from '../../api';\nimport { ModToolsEvent, ModToolsOpenRoomChatlogEvent, ModToolsOpenRoomInfoEvent, ModToolsOpenUserChatlogEvent, ModToolsOpenUserInfoEvent } from '../../events';\nimport { UseMessageEventHook, UseRoomEngineEvent, UseUiEvent } from '../../hooks';\nimport { SetCfhCategories } from './common/GetCFHCategories';\nimport { useModToolsContext } from './ModToolsContext';\nimport { ModToolsActions } from './reducers/ModToolsReducer';\n\nexport const ModToolsMessageHandler: FC<{}> = props =>\n{\n    const { modToolsState = null, dispatchModToolsState = null } = useModToolsContext();\n    const { openRooms = null, openRoomChatlogs = null, openUserChatlogs = null, openUserInfo = null, tickets= null } = modToolsState;\n    \n    const onModeratorInitMessageEvent = useCallback((event: ModeratorInitMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        const data = parser.data;\n\n        dispatchModToolsState({\n            type: ModToolsActions.SET_INIT_DATA,\n            payload: {\n                settings: data\n            }\n        });\n\n        dispatchModToolsState({\n            type: ModToolsActions.SET_TICKETS,\n            payload: {\n                tickets: data.issues\n            }\n        });\n          \n    }, [ dispatchModToolsState ]);\n\n    const onIssueInfoMessageEvent = useCallback((event: IssueInfoMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        const newTickets = tickets ? Array.from(tickets) : [];\n        const existingIndex = newTickets.findIndex( entry => entry.issueId === parser.issueData.issueId)\n\n        if(existingIndex > -1)\n        {\n            newTickets[existingIndex] = parser.issueData;\n        }\n        else \n        {\n            newTickets.push(parser.issueData);\n            PlaySound(SoundNames.MODTOOLS_NEW_TICKET);\n        }\n\n        dispatchModToolsState({\n            type: ModToolsActions.SET_TICKETS,\n            payload: {\n                tickets: newTickets\n            }\n        });\n\n    }, [ dispatchModToolsState, tickets ]);\n\n    const onModeratorToolPreferencesEvent = useCallback((event: ModeratorToolPreferencesEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n    }, []);\n\n    const onIssuePickFailedMessageEvent = useCallback((event: IssuePickFailedMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        NotificationUtilities.simpleAlert('Failed to pick issue', NotificationAlertType.DEFAULT, null, null, 'Error')\n    }, []);\n\n    const onIssueDeletedMessageEvent = useCallback((event: IssueDeletedMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        const newTickets = tickets ? Array.from(tickets) : [];\n        const existingIndex = newTickets.findIndex( entry => entry.issueId === parser.issueId);\n\n        if(existingIndex === -1) return;\n\n        newTickets.splice(existingIndex, 1);\n\n        dispatchModToolsState({\n            type: ModToolsActions.SET_TICKETS,\n            payload: {\n                tickets: newTickets\n            }\n        });\n    }, [ dispatchModToolsState, tickets ]);\n\n    const onModeratorActionResultMessageEvent = useCallback((event: ModeratorActionResultMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        if(parser.success)\n        {\n            NotificationUtilities.simpleAlert('Moderation action was successfull', NotificationAlertType.MODERATION, null, null, 'Success');\n        }\n        else \n        {\n            NotificationUtilities.simpleAlert('There was a problem applying tht moderation action', NotificationAlertType.MODERATION, null, null, 'Error');\n        }\n    }, []);\n\n    const onCfhTopicsInitEvent = useCallback((event: CfhTopicsInitEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n\n        const categories = parser.callForHelpCategories;\n\n        dispatchModToolsState({\n            type: ModToolsActions.SET_CFH_CATEGORIES,\n            payload: {\n                cfhCategories: categories\n            }\n        });\n\n        SetCfhCategories(categories);\n        \n    }, [ dispatchModToolsState ]);\n\n    const onCfhSanctionMessageEvent = useCallback((event: CfhSanctionMessageEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!parser) return;\n        \n        // todo: update sanction data\n    }, []);\n\n    UseMessageEventHook(ModeratorInitMessageEvent, onModeratorInitMessageEvent);\n    UseMessageEventHook(IssueInfoMessageEvent, onIssueInfoMessageEvent);\n    UseMessageEventHook(ModeratorToolPreferencesEvent, onModeratorToolPreferencesEvent);\n    UseMessageEventHook(IssuePickFailedMessageEvent, onIssuePickFailedMessageEvent);\n    UseMessageEventHook(IssueDeletedMessageEvent, onIssueDeletedMessageEvent);\n    UseMessageEventHook(ModeratorActionResultMessageEvent, onModeratorActionResultMessageEvent);\n    UseMessageEventHook(CfhTopicsInitEvent, onCfhTopicsInitEvent);\n    UseMessageEventHook(CfhSanctionMessageEvent, onCfhSanctionMessageEvent);\n\n    const onRoomEngineEvent = useCallback((event: RoomEngineEvent) =>\n    {\n        switch(event.type)\n        {\n            case RoomEngineEvent.INITIALIZED:\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_CURRENT_ROOM_ID,\n                    payload: {\n                        currentRoomId: event.roomId\n                    }\n                });\n                return;\n            case RoomEngineEvent.DISPOSED:\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_CURRENT_ROOM_ID,\n                    payload: {\n                        currentRoomId: null\n                    }\n                });\n                return;\n        }\n    }, [ dispatchModToolsState ]);\n\n    UseRoomEngineEvent(RoomEngineEvent.INITIALIZED, onRoomEngineEvent);\n    UseRoomEngineEvent(RoomEngineEvent.DISPOSED, onRoomEngineEvent);\n\n    const onModToolsEvent = useCallback((event: ModToolsEvent) =>\n    {\n        switch(event.type)\n        {\n            case ModToolsEvent.OPEN_ROOM_INFO: {\n                const castedEvent = (event as ModToolsOpenRoomInfoEvent);\n                \n                if(openRooms && openRooms.includes(castedEvent.roomId)) return;\n                \n                const rooms = openRooms || [];\n                \n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_ROOMS,\n                    payload: {\n                        openRooms: [ ...rooms, castedEvent.roomId ]\n                    }\n                });\n                return;\n            }\n            case ModToolsEvent.OPEN_ROOM_CHATLOG: {\n                const castedEvent = (event as ModToolsOpenRoomChatlogEvent); \n\n                if(openRoomChatlogs && openRoomChatlogs.includes(castedEvent.roomId)) return;\n\n                const chatlogs = openRoomChatlogs || [];\n\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_ROOM_CHATLOGS,\n                    payload: {\n                        openRoomChatlogs: [ ...chatlogs, castedEvent.roomId ]\n                    }\n                });\n                return;\n            }\n            case ModToolsEvent.OPEN_USER_INFO: {\n                const castedEvent = (event as ModToolsOpenUserInfoEvent);\n\n                if(openUserInfo && openUserInfo.includes(castedEvent.userId)) return;\n\n                const userInfo = openUserInfo || [];\n\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_USERINFO,\n                    payload: {\n                        openUserInfo: [ ...userInfo, castedEvent.userId ]\n                    }\n                });\n                return;\n            }\n            case ModToolsEvent.OPEN_USER_CHATLOG: {\n                const castedEvent = (event as ModToolsOpenUserChatlogEvent);\n\n                if(openUserChatlogs && openUserChatlogs.includes(castedEvent.userId)) return;\n\n                const userChatlog = openUserChatlogs || [];\n\n                dispatchModToolsState({\n                    type: ModToolsActions.SET_OPEN_USER_CHATLOGS,\n                    payload: {\n                        openUserChatlogs: [ ...userChatlog, castedEvent.userId ]\n                    }\n                });\n                return;\n            }\n        }\n    }, [ openRooms, dispatchModToolsState, openRoomChatlogs, openUserInfo, openUserChatlogs ]);\n    \n    UseUiEvent(ModToolsEvent.OPEN_ROOM_INFO, onModToolsEvent);\n    UseUiEvent(ModToolsEvent.OPEN_ROOM_CHATLOG, onModToolsEvent);\n    UseUiEvent(ModToolsEvent.OPEN_USER_INFO, onModToolsEvent);\n    UseUiEvent(ModToolsEvent.OPEN_USER_CHATLOG, onModToolsEvent);\n\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}