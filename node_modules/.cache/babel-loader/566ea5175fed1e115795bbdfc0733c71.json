{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/room/widgets/infostand/InfoStandWidgetView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { RoomWidgetRoomObjectMessage, RoomWidgetUpdateInfostandFurniEvent, RoomWidgetUpdateInfostandPetEvent, RoomWidgetUpdateInfostandRentableBotEvent, RoomWidgetUpdateInfostandUserEvent, RoomWidgetUpdateRoomObjectEvent } from '../../../../api';\nimport { Column } from '../../../../common';\nimport { UseEventDispatcherHook } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\nimport { InfoStandWidgetBotView } from './InfoStandWidgetBotView';\nimport { InfoStandWidgetFurniView } from './InfoStandWidgetFurniView';\nimport { InfoStandWidgetPetView } from './InfoStandWidgetPetView';\nimport { InfoStandWidgetRentableBotView } from './InfoStandWidgetRentableBotView';\nimport { InfoStandWidgetUserView } from './InfoStandWidgetUserView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InfoStandWidgetView = props => {\n  _s();\n\n  const {\n    eventDispatcher = null,\n    widgetHandler = null\n  } = useRoomContext();\n  const [infoStandEvent, setInfoStandEvent] = useState(null);\n  const closeInfostand = useCallback(() => {\n    setInfoStandEvent(null);\n  }, []);\n  const onRoomWidgetUpdateEvent = useCallback(event => {\n    switch (event.type) {\n      case RoomWidgetUpdateRoomObjectEvent.OBJECT_SELECTED:\n        {\n          const roomObjectEvent = event;\n          widgetHandler.processWidgetMessage(new RoomWidgetRoomObjectMessage(RoomWidgetRoomObjectMessage.GET_OBJECT_INFO, roomObjectEvent.id, roomObjectEvent.category));\n          return;\n        }\n\n      case RoomWidgetUpdateRoomObjectEvent.OBJECT_DESELECTED:\n        {\n          const roomObjectEvent = event;\n          closeInfostand();\n          return;\n        }\n\n      case RoomWidgetUpdateRoomObjectEvent.FURNI_REMOVED:\n      case RoomWidgetUpdateRoomObjectEvent.USER_REMOVED:\n        {\n          const roomObjectEvent = event;\n          setInfoStandEvent(prevValue => {\n            switch (event.type) {\n              case RoomWidgetUpdateRoomObjectEvent.FURNI_REMOVED:\n                if (prevValue instanceof RoomWidgetUpdateInfostandFurniEvent) {\n                  if (prevValue.id === roomObjectEvent.id) return null;\n                }\n\n                break;\n\n              case RoomWidgetUpdateRoomObjectEvent.USER_REMOVED:\n                if (prevValue instanceof RoomWidgetUpdateInfostandUserEvent || prevValue instanceof RoomWidgetUpdateInfostandRentableBotEvent) {\n                  if (prevValue.roomIndex === roomObjectEvent.id) return null;\n                } else if (prevValue instanceof RoomWidgetUpdateInfostandPetEvent) {\n                  if (prevValue.roomIndex === roomObjectEvent.id) return null;\n                }\n\n                break;\n            }\n\n            return prevValue;\n          });\n          return;\n        }\n\n      case RoomWidgetUpdateInfostandFurniEvent.FURNI:\n      case RoomWidgetUpdateInfostandUserEvent.OWN_USER:\n      case RoomWidgetUpdateInfostandUserEvent.PEER:\n      case RoomWidgetUpdateInfostandUserEvent.BOT:\n      case RoomWidgetUpdateInfostandRentableBotEvent.RENTABLE_BOT:\n      case RoomWidgetUpdateInfostandPetEvent.PET_INFO:\n        {\n          setInfoStandEvent(event);\n          return;\n        }\n\n      default:\n        console.log(event);\n        return;\n    }\n  }, [widgetHandler, closeInfostand]);\n  UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.OBJECT_SELECTED, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.OBJECT_DESELECTED, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.USER_REMOVED, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.FURNI_REMOVED, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateInfostandFurniEvent.FURNI, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateInfostandUserEvent.OWN_USER, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateInfostandUserEvent.PEER, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateInfostandUserEvent.BOT, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateInfostandRentableBotEvent.RENTABLE_BOT, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateInfostandPetEvent.PET_INFO, eventDispatcher, onRoomWidgetUpdateEvent);\n  UseEventDispatcherHook(RoomWidgetUpdateInfostandPetEvent.PET_INFO, eventDispatcher, onRoomWidgetUpdateEvent);\n  const getInfostandView = useCallback(() => {\n    if (!infoStandEvent) return null;\n\n    switch (infoStandEvent.type) {\n      case RoomWidgetUpdateInfostandFurniEvent.FURNI:\n        return /*#__PURE__*/_jsxDEV(InfoStandWidgetFurniView, {\n          furniData: infoStandEvent,\n          close: closeInfostand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 24\n        }, this);\n\n      case RoomWidgetUpdateInfostandUserEvent.OWN_USER:\n      case RoomWidgetUpdateInfostandUserEvent.PEER:\n        return /*#__PURE__*/_jsxDEV(InfoStandWidgetUserView, {\n          userData: infoStandEvent,\n          setUserData: setInfoStandEvent,\n          close: closeInfostand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 24\n        }, this);\n\n      case RoomWidgetUpdateInfostandUserEvent.BOT:\n        return /*#__PURE__*/_jsxDEV(InfoStandWidgetBotView, {\n          botData: infoStandEvent,\n          close: closeInfostand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 24\n        }, this);\n\n      case RoomWidgetUpdateInfostandRentableBotEvent.RENTABLE_BOT:\n        return /*#__PURE__*/_jsxDEV(InfoStandWidgetRentableBotView, {\n          rentableBotData: infoStandEvent,\n          close: closeInfostand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 24\n        }, this);\n\n      case RoomWidgetUpdateInfostandPetEvent.PET_INFO:\n        return /*#__PURE__*/_jsxDEV(InfoStandWidgetPetView, {\n          petData: infoStandEvent,\n          close: closeInfostand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 24\n        }, this);\n    }\n\n    return null;\n  }, [infoStandEvent, closeInfostand]);\n  if (!infoStandEvent) return null;\n  return /*#__PURE__*/_jsxDEV(Column, {\n    alignItems: \"end\",\n    className: \"nitro-infostand-container\",\n    children: getInfostandView()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfoStandWidgetView, \"A3ql0ki/cPKmZyyIcAT+6VzxXOM=\", false, function () {\n  return [useRoomContext];\n});\n\n_c = InfoStandWidgetView;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoStandWidgetView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/room/widgets/infostand/InfoStandWidgetView.tsx"],"names":["useCallback","useState","RoomWidgetRoomObjectMessage","RoomWidgetUpdateInfostandFurniEvent","RoomWidgetUpdateInfostandPetEvent","RoomWidgetUpdateInfostandRentableBotEvent","RoomWidgetUpdateInfostandUserEvent","RoomWidgetUpdateRoomObjectEvent","Column","UseEventDispatcherHook","useRoomContext","InfoStandWidgetBotView","InfoStandWidgetFurniView","InfoStandWidgetPetView","InfoStandWidgetRentableBotView","InfoStandWidgetUserView","InfoStandWidgetView","props","eventDispatcher","widgetHandler","infoStandEvent","setInfoStandEvent","closeInfostand","onRoomWidgetUpdateEvent","event","type","OBJECT_SELECTED","roomObjectEvent","processWidgetMessage","GET_OBJECT_INFO","id","category","OBJECT_DESELECTED","FURNI_REMOVED","USER_REMOVED","prevValue","roomIndex","FURNI","OWN_USER","PEER","BOT","RENTABLE_BOT","PET_INFO","console","log","getInfostandView"],"mappings":"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","sourcesContent":["import { FC, useCallback, useState } from 'react';\nimport { RoomWidgetRoomObjectMessage, RoomWidgetUpdateEvent, RoomWidgetUpdateInfostandEvent, RoomWidgetUpdateInfostandFurniEvent, RoomWidgetUpdateInfostandPetEvent, RoomWidgetUpdateInfostandRentableBotEvent, RoomWidgetUpdateInfostandUserEvent, RoomWidgetUpdateRoomObjectEvent } from '../../../../api';\nimport { Column } from '../../../../common';\nimport { UseEventDispatcherHook } from '../../../../hooks';\nimport { useRoomContext } from '../../RoomContext';\nimport { InfoStandWidgetBotView } from './InfoStandWidgetBotView';\nimport { InfoStandWidgetFurniView } from './InfoStandWidgetFurniView';\nimport { InfoStandWidgetPetView } from './InfoStandWidgetPetView';\nimport { InfoStandWidgetRentableBotView } from './InfoStandWidgetRentableBotView';\nimport { InfoStandWidgetUserView } from './InfoStandWidgetUserView';\n\nexport const InfoStandWidgetView: FC<{}> = props =>\n{\n    const { eventDispatcher = null, widgetHandler = null } = useRoomContext();\n    const [ infoStandEvent, setInfoStandEvent ] = useState<RoomWidgetUpdateInfostandEvent>(null);\n\n    const closeInfostand = useCallback(() =>\n    {\n        setInfoStandEvent(null);\n    }, []);\n\n    const onRoomWidgetUpdateEvent = useCallback((event: RoomWidgetUpdateEvent) =>\n    {\n        switch(event.type)\n        {\n            case RoomWidgetUpdateRoomObjectEvent.OBJECT_SELECTED: {\n                const roomObjectEvent = (event as RoomWidgetUpdateRoomObjectEvent);\n\n                widgetHandler.processWidgetMessage(new RoomWidgetRoomObjectMessage(RoomWidgetRoomObjectMessage.GET_OBJECT_INFO, roomObjectEvent.id, roomObjectEvent.category));\n                return;\n            }\n            case RoomWidgetUpdateRoomObjectEvent.OBJECT_DESELECTED: {\n                const roomObjectEvent = (event as RoomWidgetUpdateRoomObjectEvent);\n\n                closeInfostand();\n                return;\n            }\n            case RoomWidgetUpdateRoomObjectEvent.FURNI_REMOVED:\n            case RoomWidgetUpdateRoomObjectEvent.USER_REMOVED: {\n                const roomObjectEvent = (event as RoomWidgetUpdateRoomObjectEvent);\n\n                setInfoStandEvent(prevValue =>\n                {\n                    switch(event.type)\n                    {\n                        case RoomWidgetUpdateRoomObjectEvent.FURNI_REMOVED:\n                            if(prevValue instanceof RoomWidgetUpdateInfostandFurniEvent)\n                            {\n                                if(prevValue.id === roomObjectEvent.id) return null;\n                            }\n                            break;\n                        case RoomWidgetUpdateRoomObjectEvent.USER_REMOVED:\n                            if(prevValue instanceof RoomWidgetUpdateInfostandUserEvent || prevValue instanceof RoomWidgetUpdateInfostandRentableBotEvent)\n                            {\n                                if(prevValue.roomIndex === roomObjectEvent.id) return null;\n                            }\n\n                            else if(prevValue instanceof RoomWidgetUpdateInfostandPetEvent)\n                            {\n                                if(prevValue.roomIndex === roomObjectEvent.id) return null;\n                            }\n                            break;\n                    }\n\n                    return prevValue;\n                });\n                return;\n            }\n            case RoomWidgetUpdateInfostandFurniEvent.FURNI:\n            case RoomWidgetUpdateInfostandUserEvent.OWN_USER:\n            case RoomWidgetUpdateInfostandUserEvent.PEER:\n            case RoomWidgetUpdateInfostandUserEvent.BOT:\n            case RoomWidgetUpdateInfostandRentableBotEvent.RENTABLE_BOT:\n            case RoomWidgetUpdateInfostandPetEvent.PET_INFO: {\n                setInfoStandEvent((event as RoomWidgetUpdateInfostandEvent));\n                return;\n            }\n            default:\n                console.log(event);\n                return;\n        }\n    }, [ widgetHandler, closeInfostand ]);\n\n    UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.OBJECT_SELECTED, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.OBJECT_DESELECTED, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.USER_REMOVED, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.FURNI_REMOVED, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateInfostandFurniEvent.FURNI, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateInfostandUserEvent.OWN_USER, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateInfostandUserEvent.PEER, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateInfostandUserEvent.BOT, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateInfostandRentableBotEvent.RENTABLE_BOT, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateInfostandPetEvent.PET_INFO, eventDispatcher, onRoomWidgetUpdateEvent);\n    UseEventDispatcherHook(RoomWidgetUpdateInfostandPetEvent.PET_INFO, eventDispatcher, onRoomWidgetUpdateEvent);\n\n    const getInfostandView = useCallback(() =>\n    {\n        if(!infoStandEvent) return null;\n\n        switch(infoStandEvent.type)\n        {\n            case RoomWidgetUpdateInfostandFurniEvent.FURNI:\n                return <InfoStandWidgetFurniView furniData={ (infoStandEvent as RoomWidgetUpdateInfostandFurniEvent) } close={ closeInfostand } />;\n            case RoomWidgetUpdateInfostandUserEvent.OWN_USER:\n            case RoomWidgetUpdateInfostandUserEvent.PEER:\n                return <InfoStandWidgetUserView userData={ (infoStandEvent as RoomWidgetUpdateInfostandUserEvent) } setUserData={ setInfoStandEvent } close={ closeInfostand } />;\n            case RoomWidgetUpdateInfostandUserEvent.BOT:\n                return <InfoStandWidgetBotView botData={ (infoStandEvent as RoomWidgetUpdateInfostandUserEvent) } close={ closeInfostand } />;\n            case RoomWidgetUpdateInfostandRentableBotEvent.RENTABLE_BOT:\n                return <InfoStandWidgetRentableBotView rentableBotData={ (infoStandEvent as RoomWidgetUpdateInfostandRentableBotEvent) } close={ closeInfostand } />;\n            case RoomWidgetUpdateInfostandPetEvent.PET_INFO:\n                return <InfoStandWidgetPetView petData={ (infoStandEvent as RoomWidgetUpdateInfostandPetEvent) } close={ closeInfostand } />\n        }\n\n        return null;\n    }, [ infoStandEvent, closeInfostand ]);\n\n    if(!infoStandEvent) return null;\n\n    return (\n        <Column alignItems=\"end\" className=\"nitro-infostand-container\">\n            { getInfostandView() }\n        </Column>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}