{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/components/user-profile/views/GroupsContainerView.tsx\",\n    _s = $RefreshSig$();\n\nimport { GroupInformationComposer, GroupInformationEvent } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { LocalizeText, SendMessageComposer, ToggleFavoriteGroup } from '../../../api';\nimport { AutoGrid, Base, Column, Flex, Grid, Text, LayoutBadgeImageView, LayoutGridItem } from '../../../common';\nimport { UseMessageEventHook } from '../../../hooks';\nimport { GroupInformationView } from '../../groups/views/GroupInformationView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GroupsContainerView = props => {\n  _s();\n\n  const {\n    itsMe = null,\n    groups = null,\n    onLeaveGroup = null,\n    overflow = 'hidden',\n    gap = 2,\n    ...rest\n  } = props;\n  const [selectedGroupId, setSelectedGroupId] = useState(null);\n  const [groupInformation, setGroupInformation] = useState(null);\n  const onGroupInformationEvent = useCallback(event => {\n    const parser = event.getParser();\n    if (!selectedGroupId || selectedGroupId !== parser.id || parser.flag) return;\n    setGroupInformation(parser);\n  }, [selectedGroupId]);\n  UseMessageEventHook(GroupInformationEvent, onGroupInformationEvent);\n  useEffect(() => {\n    if (!selectedGroupId) return;\n    SendMessageComposer(new GroupInformationComposer(selectedGroupId, false));\n  }, [selectedGroupId]);\n  useEffect(() => {\n    setGroupInformation(null);\n\n    if (groups.length > 0) {\n      setSelectedGroupId(prevValue => {\n        if (prevValue === groups[0].groupId) {\n          SendMessageComposer(new GroupInformationComposer(groups[0].groupId, false));\n        }\n\n        return groups[0].groupId;\n      });\n    }\n  }, [groups]);\n\n  if (!groups || !groups.length) {\n    return /*#__PURE__*/_jsxDEV(Column, {\n      center: true,\n      fullHeight: true,\n      children: /*#__PURE__*/_jsxDEV(Column, {\n        className: \"profile-grey-bg py-3 px-4\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          small: true,\n          children: [\" \", LocalizeText('extendedprofile.nogroups.user')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"center\",\n          gap: 4,\n          children: [/*#__PURE__*/_jsxDEV(Base, {\n            className: \"no-group-spritesheet image-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Base, {\n            className: \"no-group-spritesheet image-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Base, {\n            className: \"no-group-spritesheet image-3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          small: true,\n          children: LocalizeText('extendedprofile.nogroups.info')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    overflow: overflow,\n    gap: 2,\n    ...rest,\n    children: [/*#__PURE__*/_jsxDEV(Column, {\n      alignItems: \"center\",\n      size: 2,\n      overflow: \"auto\",\n      children: /*#__PURE__*/_jsxDEV(AutoGrid, {\n        overflow: null,\n        columnCount: 1,\n        columnMinHeight: 50,\n        className: \"user-groups-container\",\n        children: groups.map((group, index) => {\n          return /*#__PURE__*/_jsxDEV(LayoutGridItem, {\n            overflow: \"unset\",\n            itemActive: selectedGroupId === group.groupId,\n            onClick: () => setSelectedGroupId(group.groupId),\n            className: \"p-1\",\n            children: [itsMe && /*#__PURE__*/_jsxDEV(\"i\", {\n              className: 'position-absolute end-0 top-0 z-index-1 icon icon-group-' + (group.favourite ? 'favorite' : 'not-favorite'),\n              onClick: () => ToggleFavoriteGroup(group)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(LayoutBadgeImageView, {\n              badgeCode: group.badgeCode,\n              isGroup: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      size: 10,\n      overflow: \"hidden\",\n      children: groupInformation && /*#__PURE__*/_jsxDEV(GroupInformationView, {\n        groupInformation: groupInformation,\n        onClose: onLeaveGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GroupsContainerView, \"7PN8BXLJUyv5vnhxVAn+iUh/2QY=\");\n\n_c = GroupsContainerView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupsContainerView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/components/user-profile/views/GroupsContainerView.tsx"],"names":["GroupInformationComposer","GroupInformationEvent","useCallback","useEffect","useState","LocalizeText","SendMessageComposer","ToggleFavoriteGroup","AutoGrid","Base","Column","Flex","Grid","Text","LayoutBadgeImageView","LayoutGridItem","UseMessageEventHook","GroupInformationView","GroupsContainerView","props","itsMe","groups","onLeaveGroup","overflow","gap","rest","selectedGroupId","setSelectedGroupId","groupInformation","setGroupInformation","onGroupInformationEvent","event","parser","getParser","id","flag","length","prevValue","groupId","map","group","index","favourite","badgeCode"],"mappings":"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","sourcesContent":["import { GroupInformationComposer, GroupInformationEvent, GroupInformationParser, HabboGroupEntryData } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { LocalizeText, SendMessageComposer, ToggleFavoriteGroup } from '../../../api';\nimport { AutoGrid, Base, Column, Flex, Grid, GridProps, Text, LayoutBadgeImageView, LayoutGridItem } from '../../../common';\nimport { UseMessageEventHook } from '../../../hooks';\nimport { GroupInformationView } from '../../groups/views/GroupInformationView';\n\ninterface GroupsContainerViewProps extends GridProps\n{\n    itsMe: boolean;\n    groups: HabboGroupEntryData[];\n    onLeaveGroup: () => void;\n}\n\nexport const GroupsContainerView: FC<GroupsContainerViewProps> = props =>\n{\n    const { itsMe = null, groups = null, onLeaveGroup = null, overflow = 'hidden', gap = 2, ...rest } = props;\n    const [ selectedGroupId, setSelectedGroupId ] = useState<number>(null);\n    const [ groupInformation, setGroupInformation ] = useState<GroupInformationParser>(null);\n\n    const onGroupInformationEvent = useCallback((event: GroupInformationEvent) =>\n    {\n        const parser = event.getParser();\n\n        if(!selectedGroupId || (selectedGroupId !== parser.id) || parser.flag) return;\n\n        setGroupInformation(parser);\n    }, [ selectedGroupId ]);\n\n    UseMessageEventHook(GroupInformationEvent, onGroupInformationEvent);\n\n    useEffect(() =>\n    {\n        if(!selectedGroupId) return;\n        \n        SendMessageComposer(new GroupInformationComposer(selectedGroupId, false));\n    }, [ selectedGroupId ]);\n\n    useEffect(() =>\n    {\n        setGroupInformation(null);\n\n        if(groups.length > 0)\n        {\n            setSelectedGroupId(prevValue =>\n            {\n                if(prevValue === groups[0].groupId)\n                {\n                    SendMessageComposer(new GroupInformationComposer(groups[0].groupId, false));\n                }\n\n                return groups[0].groupId;\n            });\n        }\n    }, [ groups ]);\n\n    if(!groups || !groups.length)\n    {\n        return (\n            <Column center fullHeight>\n                <Column className=\"profile-grey-bg py-3 px-4\">\n                    <Text small> { LocalizeText('extendedprofile.nogroups.user') }</Text>\n                <Flex justifyContent=\"center\" gap={ 4 }>\n                    <Base className=\"no-group-spritesheet image-1\" />\n                    <Base className=\"no-group-spritesheet image-2\" />\n                    <Base className=\"no-group-spritesheet image-3\" />\n                </Flex>\n                    <Text small>{ LocalizeText('extendedprofile.nogroups.info') }</Text>\n                </Column>\n            </Column>\n        );\n    }\n    \n    return (\n        <Grid overflow={ overflow } gap={ 2 } { ...rest }>\n            <Column alignItems=\"center\" size={ 2 } overflow=\"auto\">\n                <AutoGrid overflow={ null } columnCount={ 1 } columnMinHeight={ 50 } className=\"user-groups-container\">\n                    { groups.map((group, index) =>\n                    {\n                        return (\n                            <LayoutGridItem key={ index } overflow=\"unset\" itemActive={ (selectedGroupId === group.groupId) } onClick={ () => setSelectedGroupId(group.groupId) } className=\"p-1\">\n                                { itsMe &&\n                                <i className={ 'position-absolute end-0 top-0 z-index-1 icon icon-group-' + (group.favourite ? 'favorite' : 'not-favorite') } onClick={ () => ToggleFavoriteGroup(group) } /> }\n                                <LayoutBadgeImageView badgeCode={ group.badgeCode } isGroup={ true } />\n                            </LayoutGridItem>\n                        )\n                    }) }\n                </AutoGrid>\n            </Column>\n            <Column size={ 10 } overflow=\"hidden\">\n                { groupInformation &&\n                    <GroupInformationView groupInformation={ groupInformation } onClose={ onLeaveGroup } /> }\n            </Column>\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}