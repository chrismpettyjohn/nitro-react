{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { ConfigurationEvent, HabboWebTools, LegacyExternalInterface, Nitro, NitroCommunicationDemoEvent, NitroEvent, NitroLocalizationEvent, NitroVersion, RoomEngineEvent, WebGL } from '@nitrots/nitro-renderer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { GetCommunication, GetConfiguration, GetNitroInstance, GetUIVersion } from './api';\nimport { Base, TransitionAnimation, TransitionAnimationTypes } from './common';\nimport { LoadingView } from './components/loading/LoadingView';\nimport { MainView } from './components/main/MainView';\nimport { DispatchUiEvent, UseConfigurationEvent, UseLocalizationEvent, UseMainEvent, UseRoomEngineEvent } from './hooks';\nimport IntervalWebWorker from './workers/IntervalWebWorker';\nimport { WorkerBuilder } from './workers/WorkerBuilder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nNitroVersion.UI_VERSION = GetUIVersion();\nexport const App = props => {\n  _s();\n\n  const [isReady, setIsReady] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [message, setMessage] = useState('Getting Ready');\n  const [percent, setPercent] = useState(0);\n  const [imageRendering, setImageRendering] = useState(true);\n\n  if (!GetNitroInstance()) {\n    //@ts-ignore\n    if (!NitroConfig) throw new Error('NitroConfig is not defined!');\n    Nitro.bootstrap();\n    const worker = new WorkerBuilder(IntervalWebWorker);\n    Nitro.instance.setWorker(worker);\n  }\n\n  const handler = useCallback(event => {\n    switch (event.type) {\n      case ConfigurationEvent.LOADED:\n        GetNitroInstance().localization.init();\n        setPercent(prevValue => prevValue + 20);\n        console.log(\"\\n%c                                                          \\n  Nitro V2 - FLASH UI EDIT!                               \\n  This UI-edit is created by robbis                       \\n  Do you want this UI for your hotel?                     \\n  Join our Discord                                        \\n  https://discord.gg/j3bqtZKAF3                           \\n                                                          \\n\", \"color: #FFFFFF; background: #eab9d0; padding:0px 0\");\n        return;\n\n      case ConfigurationEvent.FAILED:\n        setIsError(true);\n        setMessage('Configuration Failed');\n        return;\n\n      case Nitro.WEBGL_UNAVAILABLE:\n        setIsError(true);\n        setMessage('WebGL Required');\n        return;\n\n      case Nitro.WEBGL_CONTEXT_LOST:\n        setIsError(true);\n        setMessage('WebGL Context Lost - Reloading');\n        setTimeout(() => window.location.reload(), 1500);\n        return;\n\n      case NitroCommunicationDemoEvent.CONNECTION_HANDSHAKING:\n        setPercent(prevValue => prevValue + 20);\n        return;\n\n      case NitroCommunicationDemoEvent.CONNECTION_HANDSHAKE_FAILED:\n        setIsError(true);\n        setMessage('Handshake Failed');\n        return;\n\n      case NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED:\n        setPercent(prevValue => prevValue + 20);\n        GetNitroInstance().init();\n        if (LegacyExternalInterface.available) LegacyExternalInterface.call('legacyTrack', 'authentication', 'authok', []);\n        return;\n\n      case NitroCommunicationDemoEvent.CONNECTION_ERROR:\n        setIsError(true);\n        setMessage('Connection Error');\n        return;\n\n      case NitroCommunicationDemoEvent.CONNECTION_CLOSED:\n        //if(GetNitroInstance().roomEngine) GetNitroInstance().roomEngine.dispose();\n        //setIsError(true);\n        setMessage('Connection Error');\n        HabboWebTools.send(-1, 'client.init.handshake.fail');\n        return;\n\n      case RoomEngineEvent.ENGINE_INITIALIZED:\n        setPercent(prevValue => prevValue + 20);\n        setTimeout(() => setIsReady(true), 300);\n        return;\n\n      case NitroLocalizationEvent.LOADED:\n        {\n          const assetUrls = GetConfiguration('preload.assets.urls');\n          const urls = [];\n          if (assetUrls && assetUrls.length) for (const url of assetUrls) urls.push(GetNitroInstance().core.configuration.interpolate(url));\n          GetNitroInstance().core.asset.downloadAssets(urls, status => {\n            if (status) {\n              GetCommunication().init();\n              setPercent(prevValue => prevValue + 20);\n            } else {\n              setIsError(true);\n              setMessage('Assets Failed');\n            }\n          });\n          return;\n        }\n    }\n  }, []);\n  UseMainEvent(Nitro.WEBGL_UNAVAILABLE, handler);\n  UseMainEvent(Nitro.WEBGL_CONTEXT_LOST, handler);\n  UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKING, handler);\n  UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKE_FAILED, handler);\n  UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, handler);\n  UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_ERROR, handler);\n  UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_CLOSED, handler);\n  UseRoomEngineEvent(RoomEngineEvent.ENGINE_INITIALIZED, handler);\n  UseLocalizationEvent(NitroLocalizationEvent.LOADED, handler);\n  UseConfigurationEvent(ConfigurationEvent.LOADED, handler);\n  UseConfigurationEvent(ConfigurationEvent.FAILED, handler);\n  useEffect(() => {\n    if (!WebGL.isWebGLAvailable()) {\n      DispatchUiEvent(new NitroEvent(Nitro.WEBGL_UNAVAILABLE));\n    } else {\n      GetNitroInstance().core.configuration.init();\n    }\n\n    const resize = event => setImageRendering(!(window.devicePixelRatio % 1));\n\n    window.addEventListener('resize', resize);\n    resize(null);\n    return () => {\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Base, {\n    fit: true,\n    overflow: \"hidden\",\n    className: imageRendering && 'image-rendering-pixelated',\n    children: [(!isReady || isError) && /*#__PURE__*/_jsxDEV(LoadingView, {\n      isError: isError,\n      message: message,\n      percent: percent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TransitionAnimation, {\n      type: TransitionAnimationTypes.FADE_IN,\n      inProp: isReady,\n      children: /*#__PURE__*/_jsxDEV(MainView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Base, {\n      id: \"draggable-windows-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"96I2x0gdmzS/1i5v0M6J4L5KKLU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/App.tsx"],"names":["ConfigurationEvent","HabboWebTools","LegacyExternalInterface","Nitro","NitroCommunicationDemoEvent","NitroEvent","NitroLocalizationEvent","NitroVersion","RoomEngineEvent","WebGL","useCallback","useEffect","useState","GetCommunication","GetConfiguration","GetNitroInstance","GetUIVersion","Base","TransitionAnimation","TransitionAnimationTypes","LoadingView","MainView","DispatchUiEvent","UseConfigurationEvent","UseLocalizationEvent","UseMainEvent","UseRoomEngineEvent","IntervalWebWorker","WorkerBuilder","UI_VERSION","App","props","isReady","setIsReady","isError","setIsError","message","setMessage","percent","setPercent","imageRendering","setImageRendering","NitroConfig","Error","bootstrap","worker","instance","setWorker","handler","event","type","LOADED","localization","init","prevValue","console","log","FAILED","WEBGL_UNAVAILABLE","WEBGL_CONTEXT_LOST","setTimeout","window","location","reload","CONNECTION_HANDSHAKING","CONNECTION_HANDSHAKE_FAILED","CONNECTION_AUTHENTICATED","available","call","CONNECTION_ERROR","CONNECTION_CLOSED","send","ENGINE_INITIALIZED","assetUrls","urls","length","url","push","core","configuration","interpolate","asset","downloadAssets","status","isWebGLAvailable","resize","devicePixelRatio","addEventListener","removeEventListener","FADE_IN"],"mappings":"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","sourcesContent":["import { ConfigurationEvent, HabboWebTools, LegacyExternalInterface, Nitro, NitroCommunicationDemoEvent, NitroEvent, NitroLocalizationEvent, NitroVersion, RoomEngineEvent, WebGL } from '@nitrots/nitro-renderer';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { GetCommunication, GetConfiguration, GetNitroInstance, GetUIVersion } from './api';\nimport { Base, TransitionAnimation, TransitionAnimationTypes } from './common';\nimport { LoadingView } from './components/loading/LoadingView';\nimport { MainView } from './components/main/MainView';\nimport { DispatchUiEvent, UseConfigurationEvent, UseLocalizationEvent, UseMainEvent, UseRoomEngineEvent } from './hooks';\nimport IntervalWebWorker from './workers/IntervalWebWorker';\nimport { WorkerBuilder } from './workers/WorkerBuilder';\n\nNitroVersion.UI_VERSION = GetUIVersion();\n\nexport const App: FC<{}> = props =>\n{\n    const [ isReady, setIsReady ] = useState(false);\n    const [ isError, setIsError ] = useState(false);\n    const [ message, setMessage ] = useState('Getting Ready');\n    const [ percent, setPercent ] = useState(0);\n    const [ imageRendering, setImageRendering ] = useState<boolean>(true);\n\n    if(!GetNitroInstance())\n    {\n        //@ts-ignore\n        if(!NitroConfig) throw new Error('NitroConfig is not defined!');\n\n        Nitro.bootstrap();\n\n        const worker = new WorkerBuilder(IntervalWebWorker);\n\n        Nitro.instance.setWorker(worker);\n    }\n\n    const handler = useCallback((event: NitroEvent) =>\n    {\n        switch(event.type)\n        {\n            case ConfigurationEvent.LOADED:\n                GetNitroInstance().localization.init();\n                setPercent(prevValue => (prevValue + 20));\n                console.log(\"\\n%c                                                          \\n  Nitro V2 - FLASH UI EDIT!                               \\n  This UI-edit is created by robbis                       \\n  Do you want this UI for your hotel?                     \\n  Join our Discord                                        \\n  https://discord.gg/j3bqtZKAF3                           \\n                                                          \\n\", \"color: #FFFFFF; background: #eab9d0; padding:0px 0\");\n                return;\n            case ConfigurationEvent.FAILED:\n                setIsError(true);\n                setMessage('Configuration Failed');\n                return;\n            case Nitro.WEBGL_UNAVAILABLE:\n                setIsError(true);\n                setMessage('WebGL Required');\n                return;\n            case Nitro.WEBGL_CONTEXT_LOST:\n                setIsError(true);\n                setMessage('WebGL Context Lost - Reloading');\n\n                setTimeout(() => window.location.reload(), 1500);\n                return;\n            case NitroCommunicationDemoEvent.CONNECTION_HANDSHAKING:\n                setPercent(prevValue => (prevValue + 20));\n                return;\n            case NitroCommunicationDemoEvent.CONNECTION_HANDSHAKE_FAILED:\n                setIsError(true);\n                setMessage('Handshake Failed');\n                return;\n            case NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED:\n                setPercent(prevValue => (prevValue + 20));\n\n                GetNitroInstance().init();\n\n                if(LegacyExternalInterface.available) LegacyExternalInterface.call('legacyTrack', 'authentication', 'authok', []);\n                return;\n            case NitroCommunicationDemoEvent.CONNECTION_ERROR:\n                setIsError(true);\n                setMessage('Connection Error');\n                return;\n            case NitroCommunicationDemoEvent.CONNECTION_CLOSED:\n                //if(GetNitroInstance().roomEngine) GetNitroInstance().roomEngine.dispose();\n                //setIsError(true);\n                setMessage('Connection Error');\n\n                HabboWebTools.send(-1, 'client.init.handshake.fail');\n                return;\n            case RoomEngineEvent.ENGINE_INITIALIZED:\n                setPercent(prevValue => (prevValue + 20));\n\n                setTimeout(() => setIsReady(true), 300);\n                return;\n            case NitroLocalizationEvent.LOADED: {\n                const assetUrls = GetConfiguration<string[]>('preload.assets.urls');\n                const urls: string[] = [];\n\n                if(assetUrls && assetUrls.length) for(const url of assetUrls) urls.push(GetNitroInstance().core.configuration.interpolate(url));\n\n                GetNitroInstance().core.asset.downloadAssets(urls, (status: boolean) =>\n                {\n                    if(status)\n                    {\n                        GetCommunication().init();\n\n                        setPercent(prevValue => (prevValue + 20))\n                    }\n                    else\n                    {\n                        setIsError(true);\n                        setMessage('Assets Failed');\n                    }\n                });\n                return;\n            }\n        }\n    }, []);\n\n    UseMainEvent(Nitro.WEBGL_UNAVAILABLE, handler);\n    UseMainEvent(Nitro.WEBGL_CONTEXT_LOST, handler);\n    UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKING, handler);\n    UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKE_FAILED, handler);\n    UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED, handler);\n    UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_ERROR, handler);\n    UseMainEvent(NitroCommunicationDemoEvent.CONNECTION_CLOSED, handler);\n    UseRoomEngineEvent(RoomEngineEvent.ENGINE_INITIALIZED, handler);\n    UseLocalizationEvent(NitroLocalizationEvent.LOADED, handler);\n    UseConfigurationEvent(ConfigurationEvent.LOADED, handler);\n    UseConfigurationEvent(ConfigurationEvent.FAILED, handler);\n\n    useEffect(() =>\n    {\n        if(!WebGL.isWebGLAvailable())\n        {\n            DispatchUiEvent(new NitroEvent(Nitro.WEBGL_UNAVAILABLE));\n        }\n        else\n        {\n            GetNitroInstance().core.configuration.init();\n        }\n    \n        const resize = (event: UIEvent) => setImageRendering(!(window.devicePixelRatio % 1));\n\n        window.addEventListener('resize', resize);\n\n        resize(null);\n\n        return () =>\n        {\n            window.removeEventListener('resize', resize);\n        }\n    }, []);\n    \n    return (\n        <Base fit overflow=\"hidden\" className={ imageRendering && 'image-rendering-pixelated' }>\n            { (!isReady || isError) &&\n                <LoadingView isError={ isError } message={ message } percent={ percent } /> }\n            <TransitionAnimation type={ TransitionAnimationTypes.FADE_IN } inProp={ (isReady) }>\n                <MainView />\n            </TransitionAnimation>\n            <Base id=\"draggable-windows-container\" />\n        </Base>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}