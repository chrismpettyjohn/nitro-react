{"ast":null,"code":"var _jsxFileName = \"/var/www/game.bobba.ca/src/common/layout/LayoutAvatarImageView.tsx\",\n    _s = $RefreshSig$();\n\nimport { AvatarScaleType, AvatarSetType } from '@nitrots/nitro-renderer';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { GetAvatarRenderManager } from '../../api';\nimport { Base } from '../Base';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LayoutAvatarImageView = props => {\n  _s();\n\n  const {\n    figure = '',\n    gender = 'M',\n    headOnly = false,\n    direction = 0,\n    scale = 1,\n    classNames = [],\n    style = {},\n    ...rest\n  } = props;\n  const [avatarUrl, setAvatarUrl] = useState(null);\n  const [randomValue, setRandomValue] = useState(-1);\n  const isDisposed = useRef(false);\n  const getClassNames = useMemo(() => {\n    const newClassNames = ['avatar-image'];\n    if (classNames.length) newClassNames.push(...classNames);\n    return newClassNames;\n  }, [classNames]);\n  const getStyle = useMemo(() => {\n    let newStyle = {};\n    if (avatarUrl && avatarUrl.length) newStyle.backgroundImage = `url('${avatarUrl}')`;\n\n    if (scale !== 1) {\n      newStyle.transform = `scale(${scale})`;\n      if (!(scale % 1)) newStyle.imageRendering = 'pixelated';\n    }\n\n    if (Object.keys(style).length) newStyle = { ...newStyle,\n      ...style\n    };\n    return newStyle;\n  }, [avatarUrl, scale, style]);\n  useEffect(() => {\n    const avatarImage = GetAvatarRenderManager().createAvatarImage(figure, AvatarScaleType.LARGE, gender, {\n      resetFigure: figure => {\n        if (isDisposed.current) return;\n        setRandomValue(Math.random());\n      },\n      dispose: () => {},\n      disposed: false\n    }, null);\n    if (!avatarImage) return;\n    let setType = AvatarSetType.FULL;\n    if (headOnly) setType = AvatarSetType.HEAD;\n    avatarImage.setDirection(setType, direction);\n    const image = avatarImage.getCroppedImage(setType);\n    if (image) setAvatarUrl(image.src);\n    avatarImage.dispose();\n  }, [figure, gender, direction, headOnly, randomValue]);\n  useEffect(() => {\n    isDisposed.current = false;\n    return () => {\n      isDisposed.current = true;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Base, {\n    classNames: getClassNames,\n    style: getStyle,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 12\n  }, this);\n};\n\n_s(LayoutAvatarImageView, \"in5+3hFA6zx8OkFWO3/+VQYL+p8=\");\n\n_c = LayoutAvatarImageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutAvatarImageView\");","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/common/layout/LayoutAvatarImageView.tsx"],"names":["AvatarScaleType","AvatarSetType","useEffect","useMemo","useRef","useState","GetAvatarRenderManager","Base","LayoutAvatarImageView","props","figure","gender","headOnly","direction","scale","classNames","style","rest","avatarUrl","setAvatarUrl","randomValue","setRandomValue","isDisposed","getClassNames","newClassNames","length","push","getStyle","newStyle","backgroundImage","transform","imageRendering","Object","keys","avatarImage","createAvatarImage","LARGE","resetFigure","current","Math","random","dispose","disposed","setType","FULL","HEAD","setDirection","image","getCroppedImage","src"],"mappings":";;;AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,yBAA/C;AACA,SAA4BC,SAA5B,EAAuCC,OAAvC,EAAgDC,MAAhD,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,sBAAT,QAAuC,WAAvC;AACA,SAASC,IAAT,QAAgC,SAAhC;;AAWA,OAAO,MAAMC,qBAAqD,GAAGC,KAAK,IAC1E;AAAA;;AACI,QAAM;AAAEC,IAAAA,MAAM,GAAG,EAAX;AAAeC,IAAAA,MAAM,GAAG,GAAxB;AAA6BC,IAAAA,QAAQ,GAAG,KAAxC;AAA+CC,IAAAA,SAAS,GAAG,CAA3D;AAA8DC,IAAAA,KAAK,GAAG,CAAtE;AAAyEC,IAAAA,UAAU,GAAG,EAAtF;AAA0FC,IAAAA,KAAK,GAAG,EAAlG;AAAsG,OAAGC;AAAzG,MAAkHR,KAAxH;AACA,QAAM,CAAES,SAAF,EAAaC,YAAb,IAA8Bd,QAAQ,CAAS,IAAT,CAA5C;AACA,QAAM,CAAEe,WAAF,EAAeC,cAAf,IAAkChB,QAAQ,CAAC,CAAC,CAAF,CAAhD;AACA,QAAMiB,UAAU,GAAGlB,MAAM,CAAC,KAAD,CAAzB;AAEA,QAAMmB,aAAa,GAAGpB,OAAO,CAAC,MAC9B;AACI,UAAMqB,aAAuB,GAAG,CAAE,cAAF,CAAhC;AAEA,QAAGT,UAAU,CAACU,MAAd,EAAsBD,aAAa,CAACE,IAAd,CAAmB,GAAGX,UAAtB;AAEtB,WAAOS,aAAP;AACH,GAP4B,EAO1B,CAAET,UAAF,CAP0B,CAA7B;AASA,QAAMY,QAAQ,GAAGxB,OAAO,CAAC,MACzB;AACI,QAAIyB,QAAuB,GAAG,EAA9B;AAEA,QAAGV,SAAS,IAAIA,SAAS,CAACO,MAA1B,EAAkCG,QAAQ,CAACC,eAAT,GAA4B,QAAQX,SAAW,IAA/C;;AAElC,QAAGJ,KAAK,KAAK,CAAb,EACA;AACIc,MAAAA,QAAQ,CAACE,SAAT,GAAsB,SAAShB,KAAO,GAAtC;AAEA,UAAG,EAAEA,KAAK,GAAG,CAAV,CAAH,EAAiBc,QAAQ,CAACG,cAAT,GAA0B,WAA1B;AACpB;;AAED,QAAGC,MAAM,CAACC,IAAP,CAAYjB,KAAZ,EAAmBS,MAAtB,EAA8BG,QAAQ,GAAG,EAAE,GAAGA,QAAL;AAAe,SAAGZ;AAAlB,KAAX;AAE9B,WAAOY,QAAP;AACH,GAhBuB,EAgBrB,CAAEV,SAAF,EAAaJ,KAAb,EAAoBE,KAApB,CAhBqB,CAAxB;AAkBAd,EAAAA,SAAS,CAAC,MACV;AACI,UAAMgC,WAAW,GAAG5B,sBAAsB,GAAG6B,iBAAzB,CAA2CzB,MAA3C,EAAmDV,eAAe,CAACoC,KAAnE,EAA0EzB,MAA1E,EAAkF;AAClG0B,MAAAA,WAAW,EAAE3B,MAAM,IACnB;AACI,YAAGY,UAAU,CAACgB,OAAd,EAAuB;AAEvBjB,QAAAA,cAAc,CAACkB,IAAI,CAACC,MAAL,EAAD,CAAd;AACH,OANiG;AAOlGC,MAAAA,OAAO,EAAE,MACT,CAAE,CARgG;AASlGC,MAAAA,QAAQ,EAAE;AATwF,KAAlF,EAUjB,IAViB,CAApB;AAYA,QAAG,CAACR,WAAJ,EAAiB;AAEjB,QAAIS,OAAO,GAAG1C,aAAa,CAAC2C,IAA5B;AAEA,QAAGhC,QAAH,EAAa+B,OAAO,GAAG1C,aAAa,CAAC4C,IAAxB;AAEbX,IAAAA,WAAW,CAACY,YAAZ,CAAyBH,OAAzB,EAAkC9B,SAAlC;AAEA,UAAMkC,KAAK,GAAGb,WAAW,CAACc,eAAZ,CAA4BL,OAA5B,CAAd;AAEA,QAAGI,KAAH,EAAU5B,YAAY,CAAC4B,KAAK,CAACE,GAAP,CAAZ;AAEVf,IAAAA,WAAW,CAACO,OAAZ;AACH,GA3BQ,EA2BN,CAAE/B,MAAF,EAAUC,MAAV,EAAkBE,SAAlB,EAA6BD,QAA7B,EAAuCQ,WAAvC,CA3BM,CAAT;AA6BAlB,EAAAA,SAAS,CAAC,MACV;AACIoB,IAAAA,UAAU,CAACgB,OAAX,GAAqB,KAArB;AAEA,WAAO,MACP;AACIhB,MAAAA,UAAU,CAACgB,OAAX,GAAqB,IAArB;AACH,KAHD;AAIH,GARQ,EAQN,EARM,CAAT;AAUA,sBAAO,QAAC,IAAD;AAAM,IAAA,UAAU,EAAGf,aAAnB;AAAmC,IAAA,KAAK,EAAGI,QAA3C;AAAA,OAA2DV;AAA3D;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA1EM;;GAAMT,qB;;KAAAA,qB","sourcesContent":["import { AvatarScaleType, AvatarSetType } from '@nitrots/nitro-renderer';\nimport { CSSProperties, FC, useEffect, useMemo, useRef, useState } from 'react';\nimport { GetAvatarRenderManager } from '../../api';\nimport { Base, BaseProps } from '../Base';\n\nexport interface LayoutAvatarImageViewProps extends BaseProps<HTMLDivElement>\n{\n    figure: string;\n    gender?: string;\n    headOnly?: boolean;\n    direction?: number;\n    scale?: number;\n}\n\nexport const LayoutAvatarImageView: FC<LayoutAvatarImageViewProps> = props =>\n{\n    const { figure = '', gender = 'M', headOnly = false, direction = 0, scale = 1, classNames = [], style = {}, ...rest } = props;\n    const [ avatarUrl, setAvatarUrl ] = useState<string>(null);\n    const [ randomValue, setRandomValue ] = useState(-1);\n    const isDisposed = useRef(false);\n\n    const getClassNames = useMemo(() =>\n    {\n        const newClassNames: string[] = [ 'avatar-image' ];\n\n        if(classNames.length) newClassNames.push(...classNames);\n\n        return newClassNames;\n    }, [ classNames ]);\n\n    const getStyle = useMemo(() =>\n    {\n        let newStyle: CSSProperties = {};\n\n        if(avatarUrl && avatarUrl.length) newStyle.backgroundImage = `url('${ avatarUrl }')`;\n\n        if(scale !== 1)\n        {\n            newStyle.transform = `scale(${ scale })`;\n\n            if(!(scale % 1)) newStyle.imageRendering = 'pixelated';\n        }\n\n        if(Object.keys(style).length) newStyle = { ...newStyle, ...style };\n\n        return newStyle;\n    }, [ avatarUrl, scale, style ]);\n\n    useEffect(() =>\n    {\n        const avatarImage = GetAvatarRenderManager().createAvatarImage(figure, AvatarScaleType.LARGE, gender, {\n            resetFigure: figure => \n            {\n                if(isDisposed.current) return;\n\n                setRandomValue(Math.random());\n            },\n            dispose: () => \n            {},\n            disposed: false\n        }, null);\n\n        if(!avatarImage) return;\n        \n        let setType = AvatarSetType.FULL;\n\n        if(headOnly) setType = AvatarSetType.HEAD;\n\n        avatarImage.setDirection(setType, direction);\n\n        const image = avatarImage.getCroppedImage(setType);\n\n        if(image) setAvatarUrl(image.src);\n\n        avatarImage.dispose();\n    }, [ figure, gender, direction, headOnly, randomValue ]);\n\n    useEffect(() =>\n    {\n        isDisposed.current = false;\n\n        return () =>\n        {\n            isDisposed.current = true;\n        }\n    }, []);\n        \n    return <Base classNames={ getClassNames } style={ getStyle } { ...rest } />;\n}\n"]},"metadata":{},"sourceType":"module"}