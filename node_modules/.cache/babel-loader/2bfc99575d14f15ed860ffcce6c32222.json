{"ast":null,"code":"import { Vector3d } from '../../../../../../../room/utils/Vector3d';\nimport { Plane } from '../basic/Plane';\nexport class LandscapePlane extends Plane {\n  constructor() {\n    super(...arguments);\n    this._width = 0;\n    this._height = 0;\n  }\n\n  isStatic(k) {\n    const _local_2 = this.getPlaneVisualization(k);\n\n    if (_local_2) return !_local_2.hasAnimationLayers;\n    return super.isStatic(k);\n  }\n\n  initializeDimensions(k, _arg_2) {\n    if (k < 0) k = 0;\n    if (_arg_2 < 0) _arg_2 = 0;\n\n    if (k !== this._width || _arg_2 !== this._height) {\n      this._width = k;\n      this._height = _arg_2;\n    }\n  }\n\n  render(k, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7, _arg_8, _arg_9, _arg_10, _arg_11) {\n    const visualization = this.getPlaneVisualization(_arg_4);\n    if (!visualization || !visualization.geometry) return null;\n\n    const _local_13 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 0));\n\n    const _local_14 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 1));\n\n    const _local_15 = visualization.geometry.getScreenPoint(new Vector3d(0, 1, 0));\n\n    if (_local_13 && _local_14 && _local_15) {\n      _arg_2 = Math.round(Math.abs((_local_13.x - _local_15.x) * _arg_2 / visualization.geometry.scale));\n      _arg_3 = Math.round(Math.abs((_local_13.y - _local_14.y) * _arg_3 / visualization.geometry.scale));\n\n      const _local_16 = _arg_7 * Math.abs(_local_13.x - _local_15.x);\n\n      const _local_17 = _arg_8 * Math.abs(_local_13.y - _local_14.y);\n\n      const _local_18 = _arg_9 * Math.abs(_local_13.x - _local_15.x);\n\n      const _local_19 = _arg_10 * Math.abs(_local_13.y - _local_14.y);\n\n      return visualization.render(k, _arg_2, _arg_3, _arg_5, _arg_6, _local_16, _local_17, _local_18, _local_19, _arg_9, _arg_10, _arg_11);\n    }\n\n    return null;\n  }\n\n}\nLandscapePlane.DEFAULT_COLOR = 0xFFFFFF;\nLandscapePlane.HORIZONTAL_ANGLE_DEFAULT = 45;\nLandscapePlane.VERTICAL_ANGLE_DEFAULT = 30;","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/object/visualization/room/rasterizer/animated/LandscapePlane.ts"],"names":["Vector3d","Plane","LandscapePlane","_width","_height","isStatic","k","_local_2","getPlaneVisualization","hasAnimationLayers","initializeDimensions","_arg_2","render","_arg_3","_arg_4","_arg_5","_arg_6","_arg_7","_arg_8","_arg_9","_arg_10","_arg_11","visualization","geometry","_local_13","getScreenPoint","_local_14","_local_15","Math","round","abs","x","scale","y","_local_16","_local_17","_local_18","_local_19","DEFAULT_COLOR","HORIZONTAL_ANGLE_DEFAULT","VERTICAL_ANGLE_DEFAULT"],"mappings":"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","sourcesContent":["import { Graphics } from '@pixi/graphics';\r\nimport { IVector3D } from '../../../../../../../room/utils/IVector3D';\r\nimport { Vector3d } from '../../../../../../../room/utils/Vector3d';\r\nimport { Plane } from '../basic/Plane';\r\n\r\nexport class LandscapePlane extends Plane\r\n{\r\n    public static DEFAULT_COLOR: number = 0xFFFFFF;\r\n    public static HORIZONTAL_ANGLE_DEFAULT: number = 45;\r\n    public static VERTICAL_ANGLE_DEFAULT: number = 30;\r\n\r\n    private _width: number = 0;\r\n    private _height: number = 0;\r\n\r\n    public isStatic(k: number): boolean\r\n    {\r\n        const _local_2 = this.getPlaneVisualization(k);\r\n\r\n        if(_local_2) return !(_local_2.hasAnimationLayers);\r\n\r\n        return super.isStatic(k);\r\n    }\r\n\r\n    public initializeDimensions(k: number, _arg_2: number): void\r\n    {\r\n        if(k < 0) k = 0;\r\n\r\n        if(_arg_2 < 0) _arg_2 = 0;\r\n\r\n        if((k !== this._width) || (_arg_2 !== this._height))\r\n        {\r\n            this._width = k;\r\n            this._height = _arg_2;\r\n        }\r\n    }\r\n\r\n    public render(k: Graphics, _arg_2: number, _arg_3: number, _arg_4: number, _arg_5: IVector3D, _arg_6: boolean, _arg_7: number, _arg_8: number, _arg_9: number, _arg_10: number, _arg_11: number): Graphics\r\n    {\r\n        const visualization = this.getPlaneVisualization(_arg_4);\r\n\r\n        if(!visualization || !visualization.geometry) return null;\r\n\r\n        const _local_13 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 0));\r\n        const _local_14 = visualization.geometry.getScreenPoint(new Vector3d(0, 0, 1));\r\n        const _local_15 = visualization.geometry.getScreenPoint(new Vector3d(0, 1, 0));\r\n\r\n        if(_local_13 && _local_14 && _local_15)\r\n        {\r\n            _arg_2 = Math.round(Math.abs((((_local_13.x - _local_15.x) * _arg_2) / visualization.geometry.scale)));\r\n            _arg_3 = Math.round(Math.abs((((_local_13.y - _local_14.y) * _arg_3) / visualization.geometry.scale)));\r\n\r\n            const _local_16 = (_arg_7 * Math.abs((_local_13.x - _local_15.x)));\r\n            const _local_17 = (_arg_8 * Math.abs((_local_13.y - _local_14.y)));\r\n            const _local_18 = (_arg_9 * Math.abs((_local_13.x - _local_15.x)));\r\n            const _local_19 = (_arg_10 * Math.abs((_local_13.y - _local_14.y)));\r\n\r\n            return visualization.render(k, _arg_2, _arg_3, _arg_5, _arg_6, _local_16, _local_17, _local_18, _local_19, _arg_9, _arg_10, _arg_11);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}