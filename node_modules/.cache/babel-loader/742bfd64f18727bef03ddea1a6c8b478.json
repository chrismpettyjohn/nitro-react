{"ast":null,"code":"import { Graphics } from '@pixi/graphics';\nimport { Matrix } from '@pixi/math';\nimport { TextureUtils } from './TextureUtils';\nexport class Rasterizer {\n  // public static line(k:BitmapData, _arg_2: Point, _arg_3: Point, _arg_4: number): void\n  // {\n  //     var _local_5: number;\n  //     var _local_6: number;\n  //     var _local_7: number;\n  //     var _local_8: number;\n  //     var _local_9: number;\n  //     var _local_10: number;\n  //     var _local_11: number = _arg_2.x;\n  //     var _local_12: number = _arg_2.y;\n  //     _local_5 = (_arg_3.x - _arg_2.x);\n  //     _local_6 = (_arg_3.y - _arg_2.y);\n  //     _local_8 = ((_local_5 > 0) ? 1 : -1);\n  //     _local_9 = ((_local_6 > 0) ? 1 : -1);\n  //     _local_5 = Math.abs(_local_5);\n  //     _local_6 = Math.abs(_local_6);\n  //     k.lock();\n  //     k.setPixel32(_local_11, _local_12, _arg_4);\n  //     if (((_local_5 == 0) && (_local_6 == 0)))\n  //     {\n  //         return;\n  //     }\n  //     if (_local_5 > _local_6)\n  //     {\n  //         _local_7 = (_local_5 - 1);\n  //         while (_local_7 >= 0)\n  //         {\n  //             _local_10 = (_local_10 + _local_6);\n  //             _local_11 = (_local_11 + _local_8);\n  //             if (_local_10 >= (_local_5 / 2))\n  //             {\n  //                 _local_10 = (_local_10 - _local_5);\n  //                 _local_12 = (_local_12 + _local_9);\n  //             }\n  //             k.setPixel32(_local_11, _local_12, _arg_4);\n  //             _local_7--;\n  //         }\n  //     }\n  //     else\n  //     {\n  //         _local_7 = (_local_6 - 1);\n  //         while (_local_7 >= 0)\n  //         {\n  //             _local_10 = (_local_10 + _local_5);\n  //             _local_12 = (_local_12 + _local_9);\n  //             if (_local_10 >= (_local_6 / 2))\n  //             {\n  //                 _local_10 = (_local_10 - _local_6);\n  //                 _local_11 = (_local_11 + _local_8);\n  //             }\n  //             k.setPixel32(_local_11, _local_12, _arg_4);\n  //             _local_7--;\n  //         }\n  //     }\n  //     k.setPixel32(_arg_3.x, _arg_3.y, _arg_4);\n  //     k.unlock();\n  // }\n  static getFlipHBitmapData(k) {\n    if (!k) return null;\n    const matrix = new Matrix();\n    matrix.scale(-1, 1);\n    matrix.translate(k.width, 0);\n    const graphic = new Graphics();\n    graphic.beginTextureFill({\n      texture: k,\n      matrix\n    }).drawRect(0, 0, k.width, k.height).endFill();\n    return TextureUtils.generateTexture(graphic);\n  }\n\n  static getFlipVBitmapData(k) {\n    if (!k) return null;\n    const matrix = new Matrix();\n    matrix.scale(1, -1);\n    matrix.translate(0, k.height);\n    const graphic = new Graphics();\n    graphic.beginTextureFill({\n      texture: k,\n      matrix\n    }).drawRect(0, 0, k.width, k.height).endFill();\n    return TextureUtils.generateTexture(graphic);\n  }\n\n  static getFlipHVBitmapData(k) {\n    if (!k) return null;\n    const matrix = new Matrix();\n    matrix.scale(-1, -1);\n    matrix.translate(k.width, k.height);\n    const graphic = new Graphics();\n    graphic.beginTextureFill({\n      texture: k,\n      matrix\n    }).drawRect(0, 0, k.width, k.height).endFill();\n    return TextureUtils.generateTexture(graphic);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/room/utils/Rasterizer.ts"],"names":["Graphics","Matrix","TextureUtils","Rasterizer","getFlipHBitmapData","k","matrix","scale","translate","width","graphic","beginTextureFill","texture","drawRect","height","endFill","generateTexture","getFlipVBitmapData","getFlipHVBitmapData"],"mappings":"AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,UAAN,CACP;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEgC,SAAlBC,kBAAkB,CAACC,CAAD,EAChC;AACI,QAAG,CAACA,CAAJ,EAAO,OAAO,IAAP;AAEP,UAAMC,MAAM,GAAG,IAAIL,MAAJ,EAAf;AAEAK,IAAAA,MAAM,CAACC,KAAP,CAAa,CAAC,CAAd,EAAiB,CAAjB;AACAD,IAAAA,MAAM,CAACE,SAAP,CAAiBH,CAAC,CAACI,KAAnB,EAA0B,CAA1B;AAEA,UAAMC,OAAO,GAAG,IAAIV,QAAJ,EAAhB;AAEAU,IAAAA,OAAO,CACFC,gBADL,CACsB;AACdC,MAAAA,OAAO,EAAEP,CADK;AAEdC,MAAAA;AAFc,KADtB,EAKKO,QALL,CAKc,CALd,EAKiB,CALjB,EAKoBR,CAAC,CAACI,KALtB,EAK6BJ,CAAC,CAACS,MAL/B,EAMKC,OANL;AAQA,WAAOb,YAAY,CAACc,eAAb,CAA6BN,OAA7B,CAAP;AACH;;AAE+B,SAAlBO,kBAAkB,CAACZ,CAAD,EAChC;AACI,QAAG,CAACA,CAAJ,EAAO,OAAO,IAAP;AAEP,UAAMC,MAAM,GAAG,IAAIL,MAAJ,EAAf;AAEAK,IAAAA,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB;AACAD,IAAAA,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoBH,CAAC,CAACS,MAAtB;AAEA,UAAMJ,OAAO,GAAG,IAAIV,QAAJ,EAAhB;AAEAU,IAAAA,OAAO,CACFC,gBADL,CACsB;AACdC,MAAAA,OAAO,EAAEP,CADK;AAEdC,MAAAA;AAFc,KADtB,EAKKO,QALL,CAKc,CALd,EAKiB,CALjB,EAKoBR,CAAC,CAACI,KALtB,EAK6BJ,CAAC,CAACS,MAL/B,EAMKC,OANL;AAQA,WAAOb,YAAY,CAACc,eAAb,CAA6BN,OAA7B,CAAP;AACH;;AAEgC,SAAnBQ,mBAAmB,CAACb,CAAD,EACjC;AACI,QAAG,CAACA,CAAJ,EAAO,OAAO,IAAP;AAEP,UAAMC,MAAM,GAAG,IAAIL,MAAJ,EAAf;AAEAK,IAAAA,MAAM,CAACC,KAAP,CAAa,CAAC,CAAd,EAAiB,CAAC,CAAlB;AACAD,IAAAA,MAAM,CAACE,SAAP,CAAiBH,CAAC,CAACI,KAAnB,EAA0BJ,CAAC,CAACS,MAA5B;AAEA,UAAMJ,OAAO,GAAG,IAAIV,QAAJ,EAAhB;AAEAU,IAAAA,OAAO,CACFC,gBADL,CACsB;AACdC,MAAAA,OAAO,EAAEP,CADK;AAEdC,MAAAA;AAFc,KADtB,EAKKO,QALL,CAKc,CALd,EAKiB,CALjB,EAKoBR,CAAC,CAACI,KALtB,EAK6BJ,CAAC,CAACS,MAL/B,EAMKC,OANL;AAQA,WAAOb,YAAY,CAACc,eAAb,CAA6BN,OAA7B,CAAP;AACH;;AA3HL","sourcesContent":["import { Resource, Texture } from '@pixi/core';\r\nimport { Graphics } from '@pixi/graphics';\r\nimport { Matrix } from '@pixi/math';\r\nimport { TextureUtils } from './TextureUtils';\r\n\r\nexport class Rasterizer\r\n{\r\n    // public static line(k:BitmapData, _arg_2: Point, _arg_3: Point, _arg_4: number): void\r\n    // {\r\n    //     var _local_5: number;\r\n    //     var _local_6: number;\r\n    //     var _local_7: number;\r\n    //     var _local_8: number;\r\n    //     var _local_9: number;\r\n    //     var _local_10: number;\r\n    //     var _local_11: number = _arg_2.x;\r\n    //     var _local_12: number = _arg_2.y;\r\n    //     _local_5 = (_arg_3.x - _arg_2.x);\r\n    //     _local_6 = (_arg_3.y - _arg_2.y);\r\n    //     _local_8 = ((_local_5 > 0) ? 1 : -1);\r\n    //     _local_9 = ((_local_6 > 0) ? 1 : -1);\r\n    //     _local_5 = Math.abs(_local_5);\r\n    //     _local_6 = Math.abs(_local_6);\r\n    //     k.lock();\r\n    //     k.setPixel32(_local_11, _local_12, _arg_4);\r\n    //     if (((_local_5 == 0) && (_local_6 == 0)))\r\n    //     {\r\n    //         return;\r\n    //     }\r\n    //     if (_local_5 > _local_6)\r\n    //     {\r\n    //         _local_7 = (_local_5 - 1);\r\n    //         while (_local_7 >= 0)\r\n    //         {\r\n    //             _local_10 = (_local_10 + _local_6);\r\n    //             _local_11 = (_local_11 + _local_8);\r\n    //             if (_local_10 >= (_local_5 / 2))\r\n    //             {\r\n    //                 _local_10 = (_local_10 - _local_5);\r\n    //                 _local_12 = (_local_12 + _local_9);\r\n    //             }\r\n    //             k.setPixel32(_local_11, _local_12, _arg_4);\r\n    //             _local_7--;\r\n    //         }\r\n    //     }\r\n    //     else\r\n    //     {\r\n    //         _local_7 = (_local_6 - 1);\r\n    //         while (_local_7 >= 0)\r\n    //         {\r\n    //             _local_10 = (_local_10 + _local_5);\r\n    //             _local_12 = (_local_12 + _local_9);\r\n    //             if (_local_10 >= (_local_6 / 2))\r\n    //             {\r\n    //                 _local_10 = (_local_10 - _local_6);\r\n    //                 _local_11 = (_local_11 + _local_8);\r\n    //             }\r\n    //             k.setPixel32(_local_11, _local_12, _arg_4);\r\n    //             _local_7--;\r\n    //         }\r\n    //     }\r\n    //     k.setPixel32(_arg_3.x, _arg_3.y, _arg_4);\r\n    //     k.unlock();\r\n    // }\r\n\r\n    public static getFlipHBitmapData(k: Texture<Resource>): Texture<Resource>\r\n    {\r\n        if(!k) return null;\r\n\r\n        const matrix = new Matrix();\r\n\r\n        matrix.scale(-1, 1);\r\n        matrix.translate(k.width, 0);\r\n\r\n        const graphic = new Graphics();\r\n\r\n        graphic\r\n            .beginTextureFill({\r\n                texture: k,\r\n                matrix\r\n            })\r\n            .drawRect(0, 0, k.width, k.height)\r\n            .endFill();\r\n\r\n        return TextureUtils.generateTexture(graphic);\r\n    }\r\n\r\n    public static getFlipVBitmapData(k: Texture<Resource>): Texture<Resource>\r\n    {\r\n        if(!k) return null;\r\n\r\n        const matrix = new Matrix();\r\n\r\n        matrix.scale(1, -1);\r\n        matrix.translate(0, k.height);\r\n\r\n        const graphic = new Graphics();\r\n\r\n        graphic\r\n            .beginTextureFill({\r\n                texture: k,\r\n                matrix\r\n            })\r\n            .drawRect(0, 0, k.width, k.height)\r\n            .endFill();\r\n\r\n        return TextureUtils.generateTexture(graphic);\r\n    }\r\n\r\n    public static getFlipHVBitmapData(k: Texture<Resource>): Texture<Resource>\r\n    {\r\n        if(!k) return null;\r\n\r\n        const matrix = new Matrix();\r\n\r\n        matrix.scale(-1, -1);\r\n        matrix.translate(k.width, k.height);\r\n\r\n        const graphic = new Graphics();\r\n\r\n        graphic\r\n            .beginTextureFill({\r\n                texture: k,\r\n                matrix\r\n            })\r\n            .drawRect(0, 0, k.width, k.height)\r\n            .endFill();\r\n\r\n        return TextureUtils.generateTexture(graphic);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}