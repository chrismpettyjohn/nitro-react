{"ast":null,"code":"import { AvatarAction, RoomSessionWordQuizEvent, RoomWidgetEnum } from '@nitrots/nitro-renderer';\nimport { RoomWidgetHandler } from '.';\nimport { GetRoomEngine } from '../../GetRoomEngine';\nimport { RoomWidgetWordQuizUpdateEvent } from '../events/RoomWidgetWordQuizUpdateEvent';\nexport class WordQuizWidgetHandler extends RoomWidgetHandler {\n  processEvent(event) {\n    const roomQuizEvent = event;\n    let widgetEvent;\n\n    switch (event.type) {\n      case RoomSessionWordQuizEvent.ANSWERED:\n        const roomId = this.container.roomSession.roomId;\n        const userData = this.container.roomSession.userDataManager.getUserData(roomQuizEvent.userId);\n        if (!userData) return;\n        widgetEvent = new RoomWidgetWordQuizUpdateEvent(RoomWidgetWordQuizUpdateEvent.QUESTION_ANSWERED, roomQuizEvent.id);\n        widgetEvent.value = roomQuizEvent.value;\n        widgetEvent.userId = roomQuizEvent.userId;\n        widgetEvent.answerCounts = roomQuizEvent.answerCounts;\n\n        if (widgetEvent.value === '0') {\n          GetRoomEngine().updateRoomObjectUserGesture(roomId, userData.roomIndex, AvatarAction.getGestureId(AvatarAction.GESTURE_SAD));\n        } else {\n          GetRoomEngine().updateRoomObjectUserGesture(roomId, userData.roomIndex, AvatarAction.getGestureId(AvatarAction.GESTURE_SMILE));\n        }\n\n        break;\n\n      case RoomSessionWordQuizEvent.FINISHED:\n        widgetEvent = new RoomWidgetWordQuizUpdateEvent(RoomWidgetWordQuizUpdateEvent.QUESTION_FINISHED, roomQuizEvent.id);\n        widgetEvent.pollId = roomQuizEvent.pollId;\n        widgetEvent.questionId = roomQuizEvent.questionId;\n        widgetEvent.answerCounts = roomQuizEvent.answerCounts;\n        break;\n\n      case RoomSessionWordQuizEvent.QUESTION:\n        widgetEvent = new RoomWidgetWordQuizUpdateEvent(RoomWidgetWordQuizUpdateEvent.NEW_QUESTION, roomQuizEvent.id);\n        widgetEvent.question = roomQuizEvent.question;\n        widgetEvent.duration = roomQuizEvent.duration;\n        widgetEvent.pollType = roomQuizEvent.pollType;\n        widgetEvent.questionId = roomQuizEvent.questionId;\n        widgetEvent.pollId = roomQuizEvent.pollId;\n        break;\n    }\n\n    if (!widgetEvent) return;\n    this.container.eventDispatcher.dispatchEvent(widgetEvent);\n  }\n\n  processWidgetMessage(message) {\n    return null;\n  }\n\n  get type() {\n    return RoomWidgetEnum.WORD_QUIZZ;\n  }\n\n  get eventTypes() {\n    return [RoomSessionWordQuizEvent.ANSWERED, RoomSessionWordQuizEvent.FINISHED, RoomSessionWordQuizEvent.QUESTION];\n  }\n\n  get messageTypes() {\n    return [];\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/api/nitro/room/widgets/handlers/WordQuizWidgetHandler.ts"],"names":["AvatarAction","RoomSessionWordQuizEvent","RoomWidgetEnum","RoomWidgetHandler","GetRoomEngine","RoomWidgetWordQuizUpdateEvent","WordQuizWidgetHandler","processEvent","event","roomQuizEvent","widgetEvent","type","ANSWERED","roomId","container","roomSession","userData","userDataManager","getUserData","userId","QUESTION_ANSWERED","id","value","answerCounts","updateRoomObjectUserGesture","roomIndex","getGestureId","GESTURE_SAD","GESTURE_SMILE","FINISHED","QUESTION_FINISHED","pollId","questionId","QUESTION","NEW_QUESTION","question","duration","pollType","eventDispatcher","dispatchEvent","processWidgetMessage","message","WORD_QUIZZ","eventTypes","messageTypes"],"mappings":"AAAA,SAASA,YAAT,EAAmCC,wBAAnC,EAA6DC,cAA7D,QAAmF,yBAAnF;AACA,SAASC,iBAAT,QAAkC,GAAlC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AAEA,SAASC,6BAAT,QAA8C,yCAA9C;AAGA,OAAO,MAAMC,qBAAN,SAAoCH,iBAApC,CACP;AACWI,EAAAA,YAAY,CAACC,KAAD,EACnB;AACI,UAAMC,aAAa,GAAID,KAAvB;AACA,QAAIE,WAAJ;;AACA,YAAOF,KAAK,CAACG,IAAb;AAEI,WAAKV,wBAAwB,CAACW,QAA9B;AACI,cAAMC,MAAM,GAAG,KAAKC,SAAL,CAAeC,WAAf,CAA2BF,MAA1C;AACA,cAAMG,QAAQ,GAAG,KAAKF,SAAL,CAAeC,WAAf,CAA2BE,eAA3B,CAA2CC,WAA3C,CAAuDT,aAAa,CAACU,MAArE,CAAjB;AACA,YAAG,CAACH,QAAJ,EAAc;AACdN,QAAAA,WAAW,GAAG,IAAIL,6BAAJ,CAAkCA,6BAA6B,CAACe,iBAAhE,EAAmFX,aAAa,CAACY,EAAjG,CAAd;AACAX,QAAAA,WAAW,CAACY,KAAZ,GAAoBb,aAAa,CAACa,KAAlC;AACAZ,QAAAA,WAAW,CAACS,MAAZ,GAAqBV,aAAa,CAACU,MAAnC;AACAT,QAAAA,WAAW,CAACa,YAAZ,GAA2Bd,aAAa,CAACc,YAAzC;;AAEA,YAAGb,WAAW,CAACY,KAAZ,KAAsB,GAAzB,EACA;AACIlB,UAAAA,aAAa,GAAGoB,2BAAhB,CAA4CX,MAA5C,EAAoDG,QAAQ,CAACS,SAA7D,EAAwEzB,YAAY,CAAC0B,YAAb,CAA0B1B,YAAY,CAAC2B,WAAvC,CAAxE;AACH,SAHD,MAKA;AACIvB,UAAAA,aAAa,GAAGoB,2BAAhB,CAA4CX,MAA5C,EAAoDG,QAAQ,CAACS,SAA7D,EAAwEzB,YAAY,CAAC0B,YAAb,CAA0B1B,YAAY,CAAC4B,aAAvC,CAAxE;AACH;;AACD;;AACJ,WAAK3B,wBAAwB,CAAC4B,QAA9B;AACInB,QAAAA,WAAW,GAAG,IAAIL,6BAAJ,CAAkCA,6BAA6B,CAACyB,iBAAhE,EAAmFrB,aAAa,CAACY,EAAjG,CAAd;AACAX,QAAAA,WAAW,CAACqB,MAAZ,GAAqBtB,aAAa,CAACsB,MAAnC;AACArB,QAAAA,WAAW,CAACsB,UAAZ,GAAyBvB,aAAa,CAACuB,UAAvC;AACAtB,QAAAA,WAAW,CAACa,YAAZ,GAA2Bd,aAAa,CAACc,YAAzC;AACA;;AACJ,WAAKtB,wBAAwB,CAACgC,QAA9B;AACIvB,QAAAA,WAAW,GAAG,IAAIL,6BAAJ,CAAkCA,6BAA6B,CAAC6B,YAAhE,EAA8EzB,aAAa,CAACY,EAA5F,CAAd;AACAX,QAAAA,WAAW,CAACyB,QAAZ,GAAuB1B,aAAa,CAAC0B,QAArC;AACAzB,QAAAA,WAAW,CAAC0B,QAAZ,GAAuB3B,aAAa,CAAC2B,QAArC;AACA1B,QAAAA,WAAW,CAAC2B,QAAZ,GAAuB5B,aAAa,CAAC4B,QAArC;AACA3B,QAAAA,WAAW,CAACsB,UAAZ,GAAyBvB,aAAa,CAACuB,UAAvC;AACAtB,QAAAA,WAAW,CAACqB,MAAZ,GAAqBtB,aAAa,CAACsB,MAAnC;AACA;AAjCR;;AAoCA,QAAG,CAACrB,WAAJ,EAAiB;AAEjB,SAAKI,SAAL,CAAewB,eAAf,CAA+BC,aAA/B,CAA6C7B,WAA7C;AACH;;AAEM8B,EAAAA,oBAAoB,CAACC,OAAD,EAC3B;AACI,WAAO,IAAP;AACH;;AAEc,MAAJ9B,IAAI,GACf;AACI,WAAOT,cAAc,CAACwC,UAAtB;AACH;;AAEoB,MAAVC,UAAU,GACrB;AACI,WAAO,CAAE1C,wBAAwB,CAACW,QAA3B,EAAqCX,wBAAwB,CAAC4B,QAA9D,EAAwE5B,wBAAwB,CAACgC,QAAjG,CAAP;AACH;;AAEsB,MAAZW,YAAY,GACvB;AACI,WAAO,EAAP;AACH;;AAhEL","sourcesContent":["import { AvatarAction, NitroEvent, RoomSessionWordQuizEvent, RoomWidgetEnum } from '@nitrots/nitro-renderer';\nimport { RoomWidgetHandler } from '.';\nimport { GetRoomEngine } from '../../GetRoomEngine';\nimport { RoomWidgetUpdateEvent } from '../events';\nimport { RoomWidgetWordQuizUpdateEvent } from '../events/RoomWidgetWordQuizUpdateEvent';\nimport { RoomWidgetMessage } from '../messages';\n\nexport class WordQuizWidgetHandler extends RoomWidgetHandler\n{\n    public processEvent(event: NitroEvent): void\n    {\n        const roomQuizEvent = (event as RoomSessionWordQuizEvent);\n        let widgetEvent: RoomWidgetWordQuizUpdateEvent;\n        switch(event.type)\n        {\n            case RoomSessionWordQuizEvent.ANSWERED:\n                const roomId = this.container.roomSession.roomId;\n                const userData = this.container.roomSession.userDataManager.getUserData(roomQuizEvent.userId);\n                if(!userData) return;\n                widgetEvent = new RoomWidgetWordQuizUpdateEvent(RoomWidgetWordQuizUpdateEvent.QUESTION_ANSWERED, roomQuizEvent.id);\n                widgetEvent.value = roomQuizEvent.value;\n                widgetEvent.userId = roomQuizEvent.userId;\n                widgetEvent.answerCounts = roomQuizEvent.answerCounts;\n\n                if(widgetEvent.value === '0')\n                {\n                    GetRoomEngine().updateRoomObjectUserGesture(roomId, userData.roomIndex, AvatarAction.getGestureId(AvatarAction.GESTURE_SAD));\n                }\n                else\n                {\n                    GetRoomEngine().updateRoomObjectUserGesture(roomId, userData.roomIndex, AvatarAction.getGestureId(AvatarAction.GESTURE_SMILE));\n                }\n                break;\n            case RoomSessionWordQuizEvent.FINISHED:\n                widgetEvent = new RoomWidgetWordQuizUpdateEvent(RoomWidgetWordQuizUpdateEvent.QUESTION_FINISHED, roomQuizEvent.id);\n                widgetEvent.pollId = roomQuizEvent.pollId;\n                widgetEvent.questionId = roomQuizEvent.questionId;\n                widgetEvent.answerCounts = roomQuizEvent.answerCounts;\n                break;\n            case RoomSessionWordQuizEvent.QUESTION:\n                widgetEvent = new RoomWidgetWordQuizUpdateEvent(RoomWidgetWordQuizUpdateEvent.NEW_QUESTION, roomQuizEvent.id);\n                widgetEvent.question = roomQuizEvent.question;\n                widgetEvent.duration = roomQuizEvent.duration;\n                widgetEvent.pollType = roomQuizEvent.pollType;\n                widgetEvent.questionId = roomQuizEvent.questionId;\n                widgetEvent.pollId = roomQuizEvent.pollId;\n                break;\n        }\n\n        if(!widgetEvent) return;\n\n        this.container.eventDispatcher.dispatchEvent(widgetEvent);\n    }\n\n    public processWidgetMessage(message: RoomWidgetMessage): RoomWidgetUpdateEvent\n    {\n        return null;\n    }\n\n    public get type(): string\n    {\n        return RoomWidgetEnum.WORD_QUIZZ;\n    }\n\n    public get eventTypes(): string[]\n    {\n        return [ RoomSessionWordQuizEvent.ANSWERED, RoomSessionWordQuizEvent.FINISHED, RoomSessionWordQuizEvent.QUESTION ];\n    }\n\n    public get messageTypes(): string[]\n    {\n        return [];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}