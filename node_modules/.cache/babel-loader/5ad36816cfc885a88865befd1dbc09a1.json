{"ast":null,"code":"export class BinaryWriter {\n  constructor() {\n    this._buffer = void 0;\n    this._position = void 0;\n    this._buffer = new Uint8Array();\n    this._position = 0;\n  }\n\n  writeByte(byte) {\n    const array = new Uint8Array(1);\n    array[0] = byte;\n    this.appendArray(array);\n    return this;\n  }\n\n  writeBytes(bytes) {\n    const array = new Uint8Array(bytes);\n    this.appendArray(array);\n    return this;\n  }\n\n  writeShort(short) {\n    const array = new Uint8Array(2);\n    array[0] = short >> 8;\n    array[1] = short & 0xFF;\n    this.appendArray(array);\n    return this;\n  }\n\n  writeInt(integer) {\n    const array = new Uint8Array(4);\n    array[0] = integer >> 24;\n    array[1] = integer >> 16;\n    array[2] = integer >> 8;\n    array[3] = integer & 0xFF;\n    this.appendArray(array);\n    return this;\n  }\n\n  writeString(string) {\n    let includeLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const array = new TextEncoder().encode(string);\n\n    if (includeLength) {\n      this.writeShort(array.length);\n      this.appendArray(array);\n    } else {\n      this.appendArray(array);\n    }\n\n    return this;\n  }\n\n  appendArray(array) {\n    if (!array) return;\n    const mergedArray = new Uint8Array(this.position + array.length > this._buffer.length ? this.position + array.length : this._buffer.length);\n    mergedArray.set(this._buffer);\n    mergedArray.set(array, this.position);\n    this._buffer = mergedArray;\n    this.position += array.length;\n  }\n\n  getBuffer() {\n    return this._buffer.buffer;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(pos) {\n    this._position = pos;\n  }\n\n  toString(encoding) {\n    return new TextDecoder(encoding).decode(this._buffer);\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/core/communication/codec/BinaryWriter.ts"],"names":["BinaryWriter","constructor","_buffer","_position","Uint8Array","writeByte","byte","array","appendArray","writeBytes","bytes","writeShort","short","writeInt","integer","writeString","string","includeLength","TextEncoder","encode","length","mergedArray","position","set","getBuffer","buffer","pos","toString","encoding","TextDecoder","decode"],"mappings":"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","sourcesContent":["export class BinaryWriter\r\n{\r\n    private _buffer: Uint8Array;\r\n    private _position: number;\r\n\r\n    constructor()\r\n    {\r\n        this._buffer = new Uint8Array();\r\n        this._position = 0;\r\n    }\r\n\r\n    public writeByte(byte: number): BinaryWriter\r\n    {\r\n        const array = new Uint8Array(1);\r\n\r\n        array[0] = byte;\r\n\r\n        this.appendArray(array);\r\n\r\n        return this;\r\n    }\r\n\r\n    public writeBytes(bytes: ArrayBuffer | number[]): BinaryWriter\r\n    {\r\n        const array = new Uint8Array(bytes);\r\n\r\n        this.appendArray(array);\r\n\r\n        return this;\r\n    }\r\n\r\n    public writeShort(short: number): BinaryWriter\r\n    {\r\n        const array = new Uint8Array(2);\r\n\r\n        array[0] = short >> 8;\r\n        array[1] = short & 0xFF;\r\n\r\n        this.appendArray(array);\r\n\r\n        return this;\r\n    }\r\n\r\n    public writeInt(integer: number): BinaryWriter\r\n    {\r\n        const array = new Uint8Array(4);\r\n\r\n        array[0] = integer >> 24;\r\n        array[1] = integer >> 16;\r\n        array[2] = integer >> 8;\r\n        array[3] = integer & 0xFF;\r\n\r\n        this.appendArray(array);\r\n\r\n        return this;\r\n    }\r\n\r\n    public writeString(string: string, includeLength: boolean = true): BinaryWriter\r\n    {\r\n        const array = new TextEncoder().encode(string);\r\n\r\n        if(includeLength)\r\n        {\r\n            this.writeShort(array.length);\r\n            this.appendArray(array);\r\n        }\r\n        else\r\n        {\r\n            this.appendArray(array);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private appendArray(array: Uint8Array): void\r\n    {\r\n        if(!array) return;\r\n\r\n        const mergedArray = new Uint8Array( ((this.position + array.length) > this._buffer.length) ? (this.position + array.length) : this._buffer.length);\r\n\r\n        mergedArray.set(this._buffer);\r\n        mergedArray.set(array, this.position);\r\n\r\n        this._buffer = mergedArray;\r\n        this.position += array.length;\r\n    }\r\n\r\n    public getBuffer(): ArrayBuffer\r\n    {\r\n        return this._buffer.buffer;\r\n    }\r\n\r\n    public get position(): number\r\n    {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(pos: number)\r\n    {\r\n        this._position = pos;\r\n    }\r\n\r\n    public toString(encoding?: string): string\r\n    {\r\n        return new TextDecoder(encoding).decode(this._buffer);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}