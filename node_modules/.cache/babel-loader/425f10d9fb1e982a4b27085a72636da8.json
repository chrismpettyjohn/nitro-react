{"ast":null,"code":"import { LocalizeText } from '..';\nimport { FurniCategory } from './FurniCategory';\nexport class GroupItem {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    let category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let roomEngine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let stuffData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let extra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n    this._type = void 0;\n    this._category = void 0;\n    this._roomEngine = void 0;\n    this._stuffData = void 0;\n    this._extra = void 0;\n    this._isWallItem = void 0;\n    this._iconUrl = void 0;\n    this._name = void 0;\n    this._description = void 0;\n    this._locked = void 0;\n    this._selected = void 0;\n    this._hasUnseenItems = void 0;\n    this._items = void 0;\n    this._type = type;\n    this._category = category;\n    this._roomEngine = roomEngine;\n    this._stuffData = stuffData;\n    this._extra = extra;\n    this._isWallItem = false;\n    this._iconUrl = null;\n    this._name = null;\n    this._description = null;\n    this._locked = false;\n    this._selected = false;\n    this._hasUnseenItems = false;\n    this._items = [];\n  }\n\n  clone() {\n    const groupItem = new GroupItem();\n    groupItem._type = this._type;\n    groupItem._category = this._category;\n    groupItem._roomEngine = this._roomEngine;\n    groupItem._stuffData = this._stuffData;\n    groupItem._extra = this._extra;\n    groupItem._isWallItem = this._isWallItem;\n    groupItem._iconUrl = this._iconUrl;\n    groupItem._name = this._name;\n    groupItem._description = this._description;\n    groupItem._locked = this._locked;\n    groupItem._selected = this._selected;\n    groupItem._hasUnseenItems = this._hasUnseenItems;\n    groupItem._items = this._items;\n    return groupItem;\n  }\n\n  prepareGroup() {\n    this.setIcon();\n    this.setName();\n    this.setDescription();\n  }\n\n  dispose() {}\n\n  getItemByIndex(index) {\n    return this._items[index];\n  }\n\n  getItemById(id) {\n    for (const item of this._items) {\n      if (item.id !== id) continue;\n      return item;\n    }\n\n    return null;\n  }\n\n  getTradeItems(count) {\n    const items = [];\n    const furnitureItem = this.getLastItem();\n    if (!furnitureItem) return items;\n    let found = 0;\n    let i = 0;\n\n    while (i < this._items.length) {\n      if (found >= count) break;\n      const item = this.getItemByIndex(i);\n\n      if (!item.locked && item.isTradable && item.type === furnitureItem.type) {\n        items.push(item);\n        found++;\n      }\n\n      i++;\n    }\n\n    return items;\n  }\n\n  push(item) {\n    const items = [...this._items];\n    let index = 0;\n\n    while (index < items.length) {\n      let existingItem = items[index];\n\n      if (existingItem.id === item.id) {\n        existingItem = existingItem.clone();\n        existingItem.locked = false;\n        items.splice(index, 1);\n        items.push(existingItem);\n        this._items = items;\n        return;\n      }\n\n      index++;\n    }\n\n    items.push(item);\n    this._items = items;\n    if (this._items.length === 1) this.prepareGroup();\n  }\n\n  pop() {\n    const items = [...this._items];\n    let item = null;\n\n    if (items.length > 0) {\n      const index = items.length - 1;\n      item = items[index];\n      items.splice(index, 1);\n    }\n\n    this._items = items;\n    return item;\n  }\n\n  remove(k) {\n    const items = [...this._items];\n    let index = 0;\n\n    while (index < items.length) {\n      let existingItem = items[index];\n\n      if (existingItem.id === k) {\n        items.splice(index, 1);\n        this._items = items;\n        return existingItem;\n      }\n\n      index++;\n    }\n\n    return null;\n  }\n\n  getTotalCount() {\n    if (this._category === FurniCategory.POST_IT) {\n      let count = 0;\n      let index = 0;\n\n      while (index < this._items.length) {\n        const item = this.getItemByIndex(index);\n        count = count + parseInt(item.stuffData.getLegacyString());\n        index++;\n      }\n\n      return count;\n    }\n\n    return this._items.length;\n  }\n\n  getUnlockedCount() {\n    if (this.category === FurniCategory.POST_IT) return this.getTotalCount();\n    let count = 0;\n    let index = 0;\n\n    while (index < this._items.length) {\n      const item = this.getItemByIndex(index);\n      if (!item.locked) count++;\n      index++;\n    }\n\n    return count;\n  }\n\n  getLastItem() {\n    if (!this._items.length) return null;\n    const item = this.getItemByIndex(this._items.length - 1);\n    return item;\n  }\n\n  unlockAllItems() {\n    const items = [...this._items];\n    let index = 0;\n\n    while (index < items.length) {\n      const item = items[index];\n\n      if (item.locked) {\n        const newItem = item.clone();\n        newItem.locked = false;\n        items[index] = newItem;\n      }\n\n      index++;\n    }\n\n    this._items = items;\n  }\n\n  lockItemIds(itemIds) {\n    const items = [...this._items];\n    let index = 0;\n    let updated = false;\n\n    while (index < items.length) {\n      const item = items[index];\n      const locked = itemIds.indexOf(item.ref) >= 0;\n\n      if (item.locked !== locked) {\n        updated = true;\n        const newItem = item.clone();\n        newItem.locked = locked;\n        items[index] = newItem;\n      }\n\n      index++;\n    }\n\n    this._items = items;\n    return updated;\n  }\n\n  setName() {\n    const k = this.getLastItem();\n\n    if (!k) {\n      this._name = '';\n      return;\n    }\n\n    let key = '';\n\n    switch (this._category) {\n      case FurniCategory.POSTER:\n        key = 'poster_' + k.stuffData.getLegacyString() + '_name';\n        break;\n\n      case FurniCategory.TRAX_SONG:\n        this._name = 'SONG_NAME';\n        return;\n\n      default:\n        if (this.isWallItem) {\n          key = 'wallItem.name.' + k.type;\n        } else {\n          key = 'roomItem.name.' + k.type;\n        }\n\n    }\n\n    this._name = LocalizeText(key);\n  }\n\n  setDescription() {\n    this._description = '';\n  }\n\n  setIcon() {\n    if (this._iconUrl) return;\n    let url = null;\n\n    if (this.isWallItem) {\n      url = this._roomEngine.getFurnitureWallIconUrl(this._type, this._stuffData.getLegacyString());\n    } else {\n      url = this._roomEngine.getFurnitureFloorIconUrl(this._type);\n    }\n\n    if (!url) return;\n    this._iconUrl = url;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get category() {\n    return this._category;\n  }\n\n  get stuffData() {\n    return this._stuffData;\n  }\n\n  get extra() {\n    return this._extra;\n  }\n\n  get iconUrl() {\n    return this._iconUrl;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get description() {\n    return this._description;\n  }\n\n  get hasUnseenItems() {\n    return this._hasUnseenItems;\n  }\n\n  set hasUnseenItems(flag) {\n    this._hasUnseenItems = flag;\n  }\n\n  get locked() {\n    return this._locked;\n  }\n\n  set locked(flag) {\n    this._locked = flag;\n  }\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(flag) {\n    this._selected = flag;\n  }\n\n  get isWallItem() {\n    const item = this.getItemByIndex(0);\n    return item ? item.isWallItem : false;\n  }\n\n  get isGroupable() {\n    const item = this.getItemByIndex(0);\n    return item ? item.isGroupable : false;\n  }\n\n  get isSellable() {\n    const item = this.getItemByIndex(0);\n    return item ? item.sellable : false;\n  }\n\n  get items() {\n    return this._items;\n  }\n\n  set items(items) {\n    this._items = items;\n  }\n\n}","map":{"version":3,"sources":["/var/www/game.bobba.ca/src/api/inventory/GroupItem.ts"],"names":["LocalizeText","FurniCategory","GroupItem","constructor","type","category","roomEngine","stuffData","extra","_type","_category","_roomEngine","_stuffData","_extra","_isWallItem","_iconUrl","_name","_description","_locked","_selected","_hasUnseenItems","_items","clone","groupItem","prepareGroup","setIcon","setName","setDescription","dispose","getItemByIndex","index","getItemById","id","item","getTradeItems","count","items","furnitureItem","getLastItem","found","i","length","locked","isTradable","push","existingItem","splice","pop","remove","k","getTotalCount","POST_IT","parseInt","getLegacyString","getUnlockedCount","unlockAllItems","newItem","lockItemIds","itemIds","updated","indexOf","ref","key","POSTER","TRAX_SONG","isWallItem","url","getFurnitureWallIconUrl","getFurnitureFloorIconUrl","iconUrl","name","description","hasUnseenItems","flag","selected","isGroupable","isSellable","sellable"],"mappings":"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","sourcesContent":["import { IObjectData, IRoomEngine } from '@nitrots/nitro-renderer';\nimport { LocalizeText } from '..';\nimport { FurniCategory } from './FurniCategory';\nimport { FurnitureItem } from './FurnitureItem';\nimport { IFurnitureItem } from './IFurnitureItem';\n\nexport class GroupItem\n{\n    private _type: number;\n    private _category: number;\n    private _roomEngine: IRoomEngine;\n    private _stuffData: IObjectData;\n    private _extra: number;\n    private _isWallItem: boolean;\n    private _iconUrl: string;\n    private _name: string;\n    private _description: string;\n    private _locked: boolean;\n    private _selected: boolean;\n    private _hasUnseenItems: boolean;\n    private _items: FurnitureItem[];\n\n    constructor(type: number = -1, category: number = -1, roomEngine: IRoomEngine = null, stuffData: IObjectData = null, extra: number = -1)\n    {\n        this._type = type;\n        this._category = category;\n        this._roomEngine = roomEngine;\n        this._stuffData = stuffData;\n        this._extra = extra;\n        this._isWallItem = false;\n        this._iconUrl = null;\n        this._name = null;\n        this._description = null;\n        this._locked = false;\n        this._selected = false;\n        this._hasUnseenItems = false;\n        this._items = [];\n    }\n\n    public clone(): GroupItem\n    {\n        const groupItem = new GroupItem();\n\n        groupItem._type = this._type;\n        groupItem._category = this._category;\n        groupItem._roomEngine = this._roomEngine;\n        groupItem._stuffData = this._stuffData;\n        groupItem._extra = this._extra;\n        groupItem._isWallItem = this._isWallItem;\n        groupItem._iconUrl = this._iconUrl;\n        groupItem._name = this._name;\n        groupItem._description = this._description;\n        groupItem._locked = this._locked;\n        groupItem._selected = this._selected;\n        groupItem._hasUnseenItems = this._hasUnseenItems;\n        groupItem._items = this._items;\n\n        return groupItem;\n    }\n\n    public prepareGroup(): void\n    {\n        this.setIcon();\n        this.setName();\n        this.setDescription();\n    }\n\n    public dispose(): void\n    {\n\n    }\n\n    public getItemByIndex(index: number): FurnitureItem\n    {\n        return this._items[index];\n    }\n\n    public getItemById(id: number): FurnitureItem\n    {\n        for(const item of this._items)\n        {\n            if(item.id !== id) continue;\n\n            return item;\n        }\n\n        return null;\n    }\n\n    public getTradeItems(count: number): IFurnitureItem[]\n    {\n        const items: IFurnitureItem[] = [];\n\n        const furnitureItem = this.getLastItem();\n\n        if(!furnitureItem) return items;\n\n        let found = 0;\n        let i = 0;\n\n        while(i < this._items.length)\n        {\n            if(found >= count) break;\n\n            const item = this.getItemByIndex(i);\n\n            if(!item.locked && item.isTradable && (item.type === furnitureItem.type))\n            {\n                items.push(item);\n\n                found++;\n            }\n\n            i++;\n        }\n\n        return items;\n    }\n\n    public push(item: FurnitureItem): void\n    {\n        const items = [ ...this._items ];\n\n        let index = 0;\n\n        while(index < items.length)\n        {\n            let existingItem = items[index];\n\n            if(existingItem.id === item.id)\n            {\n                existingItem = existingItem.clone();\n\n                existingItem.locked = false;\n\n                items.splice(index, 1);\n\n                items.push(existingItem);\n\n                this._items = items;\n\n                return;\n            }\n\n            index++;\n        }\n\n        items.push(item);\n\n        this._items = items;\n\n        if(this._items.length === 1) this.prepareGroup();\n    }\n\n    public pop(): FurnitureItem\n    {\n        const items = [ ...this._items ];\n\n        let item: FurnitureItem = null;\n\n        if(items.length > 0)\n        {\n            const index = (items.length - 1);\n\n            item = items[index];\n\n            items.splice(index, 1);\n        }\n\n        this._items = items;\n\n        return item;\n    }\n\n    public remove(k: number): FurnitureItem\n    {\n        const items = [ ...this._items ];\n\n        let index = 0;\n\n        while(index < items.length)\n        {\n            let existingItem = items[index];\n\n            if(existingItem.id === k)\n            {\n                items.splice(index, 1);\n\n                this._items = items;\n\n                return existingItem;\n            }\n\n            index++;\n        }\n\n        return null;\n    }\n\n    public getTotalCount(): number\n    {\n        if(this._category === FurniCategory.POST_IT)\n        {\n            let count = 0;\n            let index = 0;\n\n            while(index < this._items.length)\n            {\n                const item = this.getItemByIndex(index);\n\n                count = (count + parseInt(item.stuffData.getLegacyString()));\n\n                index++;\n            }\n\n            return count;\n        }\n\n        return this._items.length;\n    }\n\n    public getUnlockedCount(): number\n    {\n        if(this.category === FurniCategory.POST_IT) return this.getTotalCount();\n\n        let count = 0;\n        let index = 0;\n\n        while(index < this._items.length)\n        {\n            const item = this.getItemByIndex(index);\n\n            if(!item.locked) count++;\n\n            index++;\n        }\n\n        return count;\n    }\n\n    public getLastItem(): FurnitureItem\n    {\n        if(!this._items.length) return null;\n\n        const item = this.getItemByIndex((this._items.length - 1));\n\n        return item;\n    }\n\n    public unlockAllItems(): void\n    {\n        const items = [ ...this._items ];\n\n        let index = 0;\n\n        while(index < items.length)\n        {\n            const item = items[index];\n\n            if(item.locked)\n            {\n                const newItem = item.clone();\n\n                newItem.locked = false;\n\n                items[index] = newItem;\n            }\n\n            index++;\n        }\n\n        this._items = items;\n    }\n\n    public lockItemIds(itemIds: number[]): boolean\n    {\n        const items = [ ...this._items ];\n\n        let index = 0;\n        let updated = false;\n\n        while(index < items.length)\n        {\n            const item = items[index];\n            const locked = (itemIds.indexOf(item.ref) >= 0);\n\n            if(item.locked !== locked)\n            {\n                updated = true;\n\n                const newItem = item.clone();\n\n                newItem.locked = locked;\n\n                items[index] = newItem;\n            }\n\n            index++;\n        }\n\n        this._items = items;\n\n        return updated;\n    }\n\n    private setName(): void\n    {\n        const k = this.getLastItem();\n\n        if(!k)\n        {\n            this._name = '';\n\n            return;\n        }\n\n        let key = '';\n\n        switch(this._category)\n        {\n            case FurniCategory.POSTER:\n                key = (('poster_' + k.stuffData.getLegacyString()) + '_name');\n                break;\n            case FurniCategory.TRAX_SONG:\n                this._name = 'SONG_NAME';\n                return;\n            default:\n                if(this.isWallItem)\n                {\n                    key = ('wallItem.name.' + k.type);\n                }\n                else\n                {\n                    key = ('roomItem.name.' + k.type);\n                }\n        }\n\n        this._name = LocalizeText(key);\n    }\n\n    private setDescription(): void\n    {\n        this._description = '';\n    }\n\n    private setIcon(): void\n    {\n        if(this._iconUrl) return;\n\n        let url = null;\n\n        if(this.isWallItem)\n        {\n            url = this._roomEngine.getFurnitureWallIconUrl(this._type, this._stuffData.getLegacyString());\n        }\n        else\n        {\n            url = this._roomEngine.getFurnitureFloorIconUrl(this._type);\n        }\n\n        if(!url) return;\n\n        this._iconUrl = url;\n    }\n\n    public get type(): number\n    {\n        return this._type;\n    }\n\n    public get category(): number\n    {\n        return this._category;\n    }\n\n    public get stuffData(): IObjectData\n    {\n        return this._stuffData;\n    }\n\n    public get extra(): number\n    {\n        return this._extra;\n    }\n\n    public get iconUrl(): string\n    {\n        return this._iconUrl;\n    }\n\n    public get name(): string\n    {\n        return this._name;\n    }\n\n    public get description(): string\n    {\n        return this._description;\n    }\n\n    public get hasUnseenItems(): boolean\n    {\n        return this._hasUnseenItems;\n    }\n\n    public set hasUnseenItems(flag: boolean)\n    {\n        this._hasUnseenItems = flag;\n    }\n\n    public get locked(): boolean\n    {\n        return this._locked;\n    }\n\n    public set locked(flag: boolean)\n    {\n        this._locked = flag;\n    }\n\n    public get selected(): boolean\n    {\n        return this._selected;\n    }\n\n    public set selected(flag: boolean)\n    {\n        this._selected = flag;\n    }\n\n    public get isWallItem(): boolean\n    {\n        const item = this.getItemByIndex(0);\n\n        return (item ? item.isWallItem : false);\n    }\n\n    public get isGroupable(): boolean\n    {\n        const item = this.getItemByIndex(0);\n\n        return (item ? item.isGroupable : false);\n    }\n\n    public get isSellable(): boolean\n    {\n        const item = this.getItemByIndex(0);\n\n        return (item ? item.sellable : false);\n    }\n\n    public get items(): FurnitureItem[]\n    {\n        return this._items;\n    }\n\n    public set items(items: FurnitureItem[])\n    {\n        this._items = items;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}