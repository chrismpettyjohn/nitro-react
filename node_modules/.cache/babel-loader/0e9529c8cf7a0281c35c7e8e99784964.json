{"ast":null,"code":"import { Loader, LoaderResource } from '@pixi/loaders';\nimport { Spritesheet } from '@pixi/spritesheet';\nimport { NitroBundle } from '../../core/asset/NitroBundle';\nimport { NitroLogger } from '../../core/common/logger/NitroLogger';\nimport { NitroEvent } from '../../core/events/NitroEvent';\nimport { RoomContentLoadedEvent } from '../../room/events/RoomContentLoadedEvent';\nimport { GraphicAssetCollection } from '../../room/object/visualization/utils/GraphicAssetCollection';\nimport { Nitro } from '../Nitro';\nimport { FurnitureType } from '../session/furniture/FurnitureType';\nimport { RoomObjectCategory } from './object/RoomObjectCategory';\nimport { RoomObjectUserType } from './object/RoomObjectUserType';\nimport { RoomObjectVariable } from './object/RoomObjectVariable';\nimport { RoomObjectVisualizationType } from './object/RoomObjectVisualizationType';\nimport { PetColorResult } from './PetColorResult';\nexport class RoomContentLoader {\n  constructor() {\n    this._logger = void 0;\n    this._stateEvents = void 0;\n    this._sessionDataManager = void 0;\n    this._waitingForSessionDataManager = void 0;\n    this._iconListener = void 0;\n    this._collections = void 0;\n    this._images = void 0;\n    this._events = void 0;\n    this._activeObjects = void 0;\n    this._activeObjectTypes = void 0;\n    this._activeObjectTypeIds = void 0;\n    this._objectTypeAdUrls = void 0;\n    this._wallItems = void 0;\n    this._wallItemTypes = void 0;\n    this._wallItemTypeIds = void 0;\n    this._furniRevisions = void 0;\n    this._pets = void 0;\n    this._petColors = void 0;\n    this._objectAliases = void 0;\n    this._objectOriginalNames = void 0;\n    this._pendingContentTypes = void 0;\n    this._dataInitialized = void 0;\n    this._logger = new NitroLogger(this.constructor.name);\n    this._stateEvents = null;\n    this._sessionDataManager = null;\n    this._waitingForSessionDataManager = false;\n    this._iconListener = null;\n    this._collections = new Map();\n    this._images = new Map();\n    this._events = new Map();\n    this._activeObjects = {};\n    this._activeObjectTypes = new Map();\n    this._activeObjectTypeIds = new Map();\n    this._objectTypeAdUrls = new Map();\n    this._wallItems = {};\n    this._wallItemTypes = new Map();\n    this._wallItemTypeIds = new Map();\n    this._furniRevisions = new Map();\n    this._pets = {};\n    this._petColors = new Map();\n    this._objectAliases = new Map();\n    this._objectOriginalNames = new Map();\n    this._pendingContentTypes = [];\n    this._dataInitialized = false;\n  }\n\n  initialize(events) {\n    this._stateEvents = events;\n    this.setFurnitureData();\n\n    for (const [index, name] of Nitro.instance.getConfiguration('pet.types').entries()) this._pets[name] = index;\n  }\n\n  dispose() {}\n\n  setSessionDataManager(sessionData) {\n    this._sessionDataManager = sessionData;\n\n    if (this._waitingForSessionDataManager) {\n      this._waitingForSessionDataManager = false;\n      this.setFurnitureData();\n    }\n  }\n\n  loadFurnitureData() {\n    this.setFurnitureData();\n  }\n\n  setFurnitureData() {\n    if (!this._sessionDataManager) {\n      this._waitingForSessionDataManager = true;\n      return;\n    }\n\n    const furnitureData = this._sessionDataManager.getAllFurnitureData(this);\n\n    if (!furnitureData) return;\n\n    this._sessionDataManager.removePendingFurniDataListener(this);\n\n    this.processFurnitureData(furnitureData);\n\n    this._stateEvents.dispatchEvent(new NitroEvent(RoomContentLoader.LOADER_READY));\n  }\n\n  processFurnitureData(furnitureData) {\n    if (!furnitureData) return;\n\n    for (const furniture of furnitureData) {\n      if (!furniture) continue;\n      const id = furniture.id;\n      let className = furniture.className;\n      if (furniture.hasIndexedColor) className = className + '*' + furniture.colorIndex;\n      const revision = furniture.revision;\n      const adUrl = furniture.adUrl;\n      if (adUrl && adUrl.length > 0) this._objectTypeAdUrls.set(className, adUrl);\n      let name = furniture.className;\n\n      if (furniture.type === FurnitureType.FLOOR) {\n        this._activeObjectTypes.set(id, className);\n\n        this._activeObjectTypeIds.set(className, id);\n\n        if (!this._activeObjects[name]) this._activeObjects[name] = 1;\n      } else if (furniture.type === FurnitureType.WALL) {\n        if (name === 'post.it') {\n          className = 'post_it';\n          name = 'post_it';\n        }\n\n        if (name === 'post.it.vd') {\n          className = 'post_it_vd';\n          name = 'post_id_vd';\n        }\n\n        this._wallItemTypes.set(id, className);\n\n        this._wallItemTypeIds.set(className, id);\n\n        if (!this._wallItems[name]) this._wallItems[name] = 1;\n      }\n\n      const existingRevision = this._furniRevisions.get(name);\n\n      if (revision > existingRevision) {\n        this._furniRevisions.delete(name);\n\n        this._furniRevisions.set(name, revision);\n      }\n    }\n  }\n\n  getFurnitureFloorNameForTypeId(typeId) {\n    const type = this._activeObjectTypes.get(typeId);\n\n    return this.removeColorIndex(type);\n  }\n\n  getFurnitureWallNameForTypeId(typeId) {\n    let extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    let type = this._wallItemTypes.get(typeId);\n\n    if (type === 'poster' && extra !== null) type = type + extra;\n    return this.removeColorIndex(type);\n  }\n\n  getFurnitureFloorColorIndex(typeId) {\n    const type = this._activeObjectTypes.get(typeId);\n\n    if (!type) return -1;\n    return this.getColorIndexFromName(type);\n  }\n\n  getFurnitureWallColorIndex(typeId) {\n    const type = this._wallItemTypes.get(typeId);\n\n    if (!type) return -1;\n    return this.getColorIndexFromName(type);\n  }\n\n  getColorIndexFromName(name) {\n    if (!name) return -1;\n    const index = name.indexOf('*');\n    if (index === -1) return 0;\n    return parseInt(name.substr(index + 1));\n  }\n\n  removeColorIndex(name) {\n    if (!name) return null;\n    const index = name.indexOf('*');\n    if (index === -1) return name;\n    return name.substr(0, index);\n  }\n\n  getRoomObjectAdUrl(type) {\n    const value = this._objectTypeAdUrls.get(type);\n\n    if (!value) return '';\n    return value;\n  }\n\n  getPetColorResult(petIndex, paletteIndex) {\n    const colorResults = this._petColors.get(petIndex);\n\n    if (!colorResults) return null;\n    return colorResults.get(paletteIndex);\n  }\n\n  getPetColorResultsForTag(petIndex, tagName) {\n    const colorResults = this._petColors.get(petIndex);\n\n    const results = [];\n\n    if (colorResults) {\n      for (const result of colorResults.values()) {\n        if (result.tag === tagName) results.push(result);\n      }\n    }\n\n    return results;\n  }\n\n  getCollection(name) {\n    if (!name) return null;\n\n    const existing = this._collections.get(name);\n\n    if (!existing) {\n      const globalCollection = Nitro.instance.core.asset.getCollection(name);\n\n      if (globalCollection) {\n        this._collections.set(name, globalCollection);\n\n        return globalCollection;\n      }\n\n      return null;\n    }\n\n    return existing;\n  }\n\n  getImage(name) {\n    if (!name) return null;\n\n    const existing = this._images.get(name);\n\n    if (!existing) return null;\n    const image = new Image();\n    image.src = existing.src;\n    return image;\n  }\n\n  addAssetToCollection(collectionName, assetName, texture) {\n    let override = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const collection = this.getCollection(collectionName);\n    if (!collection) return false;\n    return collection.addAsset(assetName, texture, override, 0, 0, false, false);\n  }\n\n  createCollection(data, spritesheet) {\n    if (!data || !spritesheet) return null;\n    const collection = new GraphicAssetCollection(data, spritesheet);\n\n    this._collections.set(collection.name, collection);\n\n    const petIndex = this._pets[collection.name];\n\n    if (petIndex !== undefined) {\n      const keys = collection.getPaletteNames();\n      const palettes = new Map();\n\n      for (const key of keys) {\n        const palette = collection.getPalette(key);\n        const paletteData = data.palettes[key];\n        const primaryColor = palette.primaryColor;\n        const secondaryColor = palette.secondaryColor;\n        const breed = paletteData.breed !== undefined ? paletteData.breed : 0;\n        const tag = paletteData.colorTag !== undefined ? paletteData.colorTag : -1;\n        const master = paletteData.master !== undefined ? paletteData.master : false;\n        const layerTags = paletteData.tags !== undefined ? paletteData.tags : [];\n        palettes.set(parseInt(key), new PetColorResult(primaryColor, secondaryColor, breed, tag, key, master, layerTags));\n      }\n\n      this._petColors.set(petIndex, palettes);\n    }\n  }\n\n  getPlaceholderName(type) {\n    const category = this.getCategoryForType(type);\n\n    switch (category) {\n      case RoomObjectCategory.FLOOR:\n        return RoomContentLoader.PLACE_HOLDER;\n\n      case RoomObjectCategory.WALL:\n        return RoomContentLoader.PLACE_HOLDER_WALL;\n\n      default:\n        if (this._pets[type] !== undefined) return RoomContentLoader.PLACE_HOLDER_PET;\n        return RoomContentLoader.PLACE_HOLDER_DEFAULT;\n    }\n  }\n\n  getCategoryForType(type) {\n    if (!type) return RoomObjectCategory.MINIMUM;\n    if (this._activeObjects[type] !== undefined) return RoomObjectCategory.FLOOR;\n    if (this._wallItems[type] !== undefined) return RoomObjectCategory.WALL;\n    if (this._pets[type] !== undefined) return RoomObjectCategory.UNIT;\n    if (type.indexOf('poster') === 0) return RoomObjectCategory.WALL;\n    if (type === 'room') return RoomObjectCategory.ROOM;\n    if (type === RoomObjectUserType.USER) return RoomObjectCategory.UNIT;\n    if (type === RoomObjectUserType.PET) return RoomObjectCategory.UNIT;\n    if (type === RoomObjectUserType.BOT) return RoomObjectCategory.UNIT;\n    if (type === RoomObjectUserType.RENTABLE_BOT) return RoomObjectCategory.UNIT;\n    if (type === RoomContentLoader.TILE_CURSOR || type === RoomContentLoader.SELECTION_ARROW) return RoomObjectCategory.CURSOR;\n    return RoomObjectCategory.MINIMUM;\n  }\n\n  getPetNameForType(type) {\n    return Nitro.instance.getConfiguration('pet.types')[type] || null;\n  }\n\n  isLoaderType(type) {\n    type = RoomObjectUserType.getRealType(type);\n    if (type === RoomObjectVisualizationType.USER) return false;\n    return true;\n  }\n\n  downloadImage(id, type, param) {\n    let events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let typeName = null;\n    let assetUrls = [];\n\n    if (type && type.indexOf(',') >= 0) {\n      typeName = type;\n      type = typeName.split(',')[0];\n    }\n\n    if (typeName) {\n      assetUrls = this.getAssetUrls(typeName, param, true);\n    } else {\n      assetUrls = this.getAssetUrls(type, param, true);\n    }\n\n    if (assetUrls && assetUrls.length) {\n      const url = assetUrls[0];\n      const image = new Image();\n      image.src = url;\n\n      image.onload = () => {\n        image.onerror = null;\n\n        this._images.set([type, param].join('_'), image);\n\n        this._iconListener.onRoomContentLoaded(id, [type, param].join('_'), true);\n      };\n\n      image.onerror = () => {\n        image.onload = null;\n\n        this._logger.error('Failed to download asset: ' + url);\n\n        this._iconListener.onRoomContentLoaded(id, [type, param].join('_'), false);\n      };\n\n      return true;\n    }\n\n    return false;\n  }\n\n  downloadAsset(type, events) {\n    const assetUrls = this.getAssetUrls(type);\n    if (!assetUrls || !assetUrls.length) return false;\n    if (this._pendingContentTypes.indexOf(type) >= 0 || this.getOrRemoveEventDispatcher(type)) return false;\n\n    this._pendingContentTypes.push(type);\n\n    this._events.set(type, events);\n\n    const totalToDownload = assetUrls.length;\n    let totalDownloaded = 0;\n\n    const onDownloaded = (loader, resource, flag) => {\n      if (loader) loader.destroy();\n\n      if (!flag) {\n        this._logger.error('Failed to download asset: ' + resource.url);\n\n        events.dispatchEvent(new RoomContentLoadedEvent(RoomContentLoadedEvent.RCLE_FAILURE, type));\n        return;\n      }\n\n      totalDownloaded++;\n\n      if (totalDownloaded === totalToDownload) {\n        const events = this._events.get(type);\n\n        if (!events) return;\n        events.dispatchEvent(new RoomContentLoadedEvent(RoomContentLoadedEvent.RCLE_SUCCESS, type));\n      }\n    };\n\n    for (const url of assetUrls) {\n      if (!url) continue;\n      const loader = new Loader();\n      loader.add({\n        url,\n        crossOrigin: 'anonymous',\n        xhrType: url.endsWith('.nitro') ? LoaderResource.XHR_RESPONSE_TYPE.BUFFER : LoaderResource.XHR_RESPONSE_TYPE.JSON\n      }).use((resource, next) => {\n        this.assetLoader(loader, resource, onDownloaded);\n        next();\n      }).load();\n    }\n\n    return true;\n  }\n\n  assetLoader(loader, resource, onDownloaded) {\n    if (!resource || resource.error) {\n      if (resource && resource.texture) resource.texture.destroy(true);\n      onDownloaded(loader, resource, false);\n      return;\n    }\n\n    if (resource.extension === 'nitro') {\n      const nitroBundle = new NitroBundle(resource.data);\n      const assetData = nitroBundle.jsonFile;\n\n      if (!assetData) {\n        onDownloaded(loader, resource, false);\n        return;\n      }\n\n      if (assetData.spritesheet && Object.keys(assetData.spritesheet).length) {\n        const baseTexture = nitroBundle.baseTexture;\n\n        if (!baseTexture) {\n          onDownloaded(loader, resource, false);\n          return;\n        }\n\n        if (baseTexture.valid) {\n          const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\n          spritesheet.parse(() => {\n            this.createCollection(assetData, spritesheet);\n            onDownloaded(loader, resource, true);\n          });\n        } else {\n          baseTexture.once('loaded', () => {\n            baseTexture.removeAllListeners();\n            const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\n            spritesheet.parse(() => {\n              this.createCollection(assetData, spritesheet);\n              onDownloaded(loader, resource, true);\n            });\n          });\n          baseTexture.once('error', () => {\n            baseTexture.removeAllListeners();\n            onDownloaded(loader, resource, false);\n          });\n        }\n\n        return;\n      }\n\n      this.createCollection(assetData, null);\n      onDownloaded(loader, resource, true);\n    } else {\n      onDownloaded(loader, resource, false);\n    }\n  }\n\n  setAssetAliasName(name, originalName) {\n    this._objectAliases.set(name, originalName);\n\n    this._objectOriginalNames.set(originalName, name);\n  }\n\n  getAssetAliasName(name) {\n    const existing = this._objectAliases.get(name);\n\n    if (!existing) return name;\n    return existing;\n  }\n\n  getAssetOriginalName(name) {\n    const existing = this._objectOriginalNames.get(name);\n\n    if (!existing) return name;\n    return existing;\n  }\n\n  getAssetUrls(type) {\n    let param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let icon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    switch (type) {\n      case RoomContentLoader.PLACE_HOLDER:\n        return [this.getAssetUrlWithGenericBase(RoomContentLoader.PLACE_HOLDER)];\n\n      case RoomContentLoader.PLACE_HOLDER_WALL:\n        return [this.getAssetUrlWithGenericBase(RoomContentLoader.PLACE_HOLDER_WALL)];\n\n      case RoomContentLoader.PLACE_HOLDER_PET:\n        return [this.getAssetUrlWithGenericBase(RoomContentLoader.PLACE_HOLDER_PET)];\n\n      case RoomContentLoader.ROOM:\n        return [this.getAssetUrlWithGenericBase('room')];\n\n      case RoomContentLoader.TILE_CURSOR:\n        return [this.getAssetUrlWithGenericBase(RoomContentLoader.TILE_CURSOR)];\n\n      case RoomContentLoader.SELECTION_ARROW:\n        return [this.getAssetUrlWithGenericBase(RoomContentLoader.SELECTION_ARROW)];\n\n      default:\n        {\n          const category = this.getCategoryForType(type);\n\n          if (category === RoomObjectCategory.FLOOR || category === RoomObjectCategory.WALL) {\n            const name = this.getAssetAliasName(type);\n            let assetUrl = icon ? this.getAssetUrlWithFurniIconBase(name) : this.getAssetUrlWithFurniBase(type);\n\n            if (icon) {\n              const active = param && param !== '' && this._activeObjectTypeIds.has(name + '*' + param);\n\n              assetUrl = assetUrl.replace(/%param%/gi, active ? '_' + param : '');\n            }\n\n            return [assetUrl];\n          }\n\n          if (category === RoomObjectCategory.UNIT) {\n            return [this.getAssetUrlWithPetBase(type)];\n          }\n\n          return null;\n        }\n    }\n  }\n\n  getAssetIconUrl(type, colorIndex) {\n    let assetName = null;\n    let assetUrls = [];\n\n    if (type && type.indexOf(',') >= 0) {\n      assetName = type;\n      type = assetName.split(',')[0];\n    }\n\n    if (assetName) {\n      assetUrls = this.getAssetUrls(assetName, colorIndex, true);\n    } else {\n      assetUrls = this.getAssetUrls(type, colorIndex, true);\n    }\n\n    if (assetUrls && assetUrls.length) return assetUrls[0];\n    return null;\n  }\n\n  getAssetUrlWithGenericBase(assetName) {\n    return Nitro.instance.getConfiguration('generic.asset.url').replace(/%libname%/gi, assetName);\n  }\n\n  getAssetUrlWithFurniBase(assetName) {\n    return Nitro.instance.getConfiguration('furni.asset.url').replace(/%libname%/gi, assetName);\n  }\n\n  getAssetUrlWithFurniIconBase(assetName) {\n    return Nitro.instance.getConfiguration('furni.asset.icon.url').replace(/%libname%/gi, assetName);\n  }\n\n  getAssetUrlWithPetBase(assetName) {\n    return Nitro.instance.getConfiguration('pet.asset.url').replace(/%libname%/gi, assetName);\n  }\n\n  setRoomObjectRoomId(object, roomId) {\n    const model = object && object.model;\n    if (!model) return;\n    model.setValue(RoomObjectVariable.OBJECT_ROOM_ID, roomId);\n  }\n\n  getOrRemoveEventDispatcher(type) {\n    let remove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    const existing = this._events.get(type);\n\n    if (remove) this._events.delete(type);\n    return existing;\n  }\n\n  setIconListener(listener) {\n    this._iconListener = listener;\n  }\n\n}\nRoomContentLoader.PLACE_HOLDER = 'place_holder';\nRoomContentLoader.PLACE_HOLDER_WALL = 'place_holder_wall';\nRoomContentLoader.PLACE_HOLDER_PET = 'place_holder_pet';\nRoomContentLoader.PLACE_HOLDER_DEFAULT = RoomContentLoader.PLACE_HOLDER;\nRoomContentLoader.ROOM = 'room';\nRoomContentLoader.TILE_CURSOR = 'tile_cursor';\nRoomContentLoader.SELECTION_ARROW = 'selection_arrow';\nRoomContentLoader.LOADER_READY = 'RCL_LOADER_READY';\nRoomContentLoader.MANDATORY_LIBRARIES = [RoomContentLoader.PLACE_HOLDER, RoomContentLoader.PLACE_HOLDER_WALL, RoomContentLoader.PLACE_HOLDER_PET, RoomContentLoader.ROOM, RoomContentLoader.TILE_CURSOR, RoomContentLoader.SELECTION_ARROW];","map":{"version":3,"sources":["/var/www/game.bobba.ca/node_modules/@nitrots/nitro-renderer/src/nitro/room/RoomContentLoader.ts"],"names":["Loader","LoaderResource","Spritesheet","NitroBundle","NitroLogger","NitroEvent","RoomContentLoadedEvent","GraphicAssetCollection","Nitro","FurnitureType","RoomObjectCategory","RoomObjectUserType","RoomObjectVariable","RoomObjectVisualizationType","PetColorResult","RoomContentLoader","constructor","_logger","_stateEvents","_sessionDataManager","_waitingForSessionDataManager","_iconListener","_collections","_images","_events","_activeObjects","_activeObjectTypes","_activeObjectTypeIds","_objectTypeAdUrls","_wallItems","_wallItemTypes","_wallItemTypeIds","_furniRevisions","_pets","_petColors","_objectAliases","_objectOriginalNames","_pendingContentTypes","_dataInitialized","name","Map","initialize","events","setFurnitureData","index","instance","getConfiguration","entries","dispose","setSessionDataManager","sessionData","loadFurnitureData","furnitureData","getAllFurnitureData","removePendingFurniDataListener","processFurnitureData","dispatchEvent","LOADER_READY","furniture","id","className","hasIndexedColor","colorIndex","revision","adUrl","length","set","type","FLOOR","WALL","existingRevision","get","delete","getFurnitureFloorNameForTypeId","typeId","removeColorIndex","getFurnitureWallNameForTypeId","extra","getFurnitureFloorColorIndex","getColorIndexFromName","getFurnitureWallColorIndex","indexOf","parseInt","substr","getRoomObjectAdUrl","value","getPetColorResult","petIndex","paletteIndex","colorResults","getPetColorResultsForTag","tagName","results","result","values","tag","push","getCollection","existing","globalCollection","core","asset","getImage","image","Image","src","addAssetToCollection","collectionName","assetName","texture","override","collection","addAsset","createCollection","data","spritesheet","undefined","keys","getPaletteNames","palettes","key","palette","getPalette","paletteData","primaryColor","secondaryColor","breed","colorTag","master","layerTags","tags","getPlaceholderName","category","getCategoryForType","PLACE_HOLDER","PLACE_HOLDER_WALL","PLACE_HOLDER_PET","PLACE_HOLDER_DEFAULT","MINIMUM","UNIT","ROOM","USER","PET","BOT","RENTABLE_BOT","TILE_CURSOR","SELECTION_ARROW","CURSOR","getPetNameForType","isLoaderType","getRealType","downloadImage","param","typeName","assetUrls","split","getAssetUrls","url","onload","onerror","join","onRoomContentLoaded","error","downloadAsset","getOrRemoveEventDispatcher","totalToDownload","totalDownloaded","onDownloaded","loader","resource","flag","destroy","RCLE_FAILURE","RCLE_SUCCESS","add","crossOrigin","xhrType","endsWith","XHR_RESPONSE_TYPE","BUFFER","JSON","use","next","assetLoader","load","extension","nitroBundle","assetData","jsonFile","Object","baseTexture","valid","parse","once","removeAllListeners","setAssetAliasName","originalName","getAssetAliasName","getAssetOriginalName","icon","getAssetUrlWithGenericBase","assetUrl","getAssetUrlWithFurniIconBase","getAssetUrlWithFurniBase","active","has","replace","getAssetUrlWithPetBase","getAssetIconUrl","setRoomObjectRoomId","object","roomId","model","setValue","OBJECT_ROOM_ID","remove","setIconListener","listener","MANDATORY_LIBRARIES"],"mappings":"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","sourcesContent":["import { Resource, Texture } from '@pixi/core';\r\nimport { Loader, LoaderResource } from '@pixi/loaders';\r\nimport { Spritesheet } from '@pixi/spritesheet';\r\nimport { IAssetData } from '../../core/asset/interfaces';\r\nimport { NitroBundle } from '../../core/asset/NitroBundle';\r\nimport { INitroLogger } from '../../core/common/logger/INitroLogger';\r\nimport { NitroLogger } from '../../core/common/logger/NitroLogger';\r\nimport { IEventDispatcher } from '../../core/events/IEventDispatcher';\r\nimport { NitroEvent } from '../../core/events/NitroEvent';\r\nimport { RoomContentLoadedEvent } from '../../room/events/RoomContentLoadedEvent';\r\nimport { IRoomObject } from '../../room/object/IRoomObject';\r\nimport { GraphicAssetCollection } from '../../room/object/visualization/utils/GraphicAssetCollection';\r\nimport { IGraphicAssetCollection } from '../../room/object/visualization/utils/IGraphicAssetCollection';\r\nimport { Nitro } from '../Nitro';\r\nimport { FurnitureType } from '../session/furniture/FurnitureType';\r\nimport { IFurnitureData } from '../session/furniture/IFurnitureData';\r\nimport { IFurnitureDataListener } from '../session/furniture/IFurnitureDataListener';\r\nimport { ISessionDataManager } from '../session/ISessionDataManager';\r\nimport { IRoomContentListener } from './IRoomContentListener';\r\nimport { RoomObjectCategory } from './object/RoomObjectCategory';\r\nimport { RoomObjectUserType } from './object/RoomObjectUserType';\r\nimport { RoomObjectVariable } from './object/RoomObjectVariable';\r\nimport { RoomObjectVisualizationType } from './object/RoomObjectVisualizationType';\r\nimport { PetColorResult } from './PetColorResult';\r\n\r\nexport class RoomContentLoader implements IFurnitureDataListener\r\n{\r\n    private static PLACE_HOLDER: string = 'place_holder';\r\n    private static PLACE_HOLDER_WALL: string = 'place_holder_wall';\r\n    private static PLACE_HOLDER_PET: string = 'place_holder_pet';\r\n    private static PLACE_HOLDER_DEFAULT: string = RoomContentLoader.PLACE_HOLDER;\r\n    private static ROOM: string = 'room';\r\n    private static TILE_CURSOR: string = 'tile_cursor';\r\n    private static SELECTION_ARROW: string = 'selection_arrow';\r\n\r\n    public static LOADER_READY: string = 'RCL_LOADER_READY';\r\n    public static MANDATORY_LIBRARIES: string[] = [ RoomContentLoader.PLACE_HOLDER, RoomContentLoader.PLACE_HOLDER_WALL, RoomContentLoader.PLACE_HOLDER_PET, RoomContentLoader.ROOM, RoomContentLoader.TILE_CURSOR, RoomContentLoader.SELECTION_ARROW ];\r\n\r\n    private _logger: INitroLogger;\r\n    private _stateEvents: IEventDispatcher;\r\n    private _sessionDataManager: ISessionDataManager;\r\n    private _waitingForSessionDataManager: boolean;\r\n    private _iconListener: IRoomContentListener;\r\n    private _collections: Map<string, IGraphicAssetCollection>;\r\n    private _images: Map<string, HTMLImageElement>;\r\n\r\n    private _events: Map<string, IEventDispatcher>;\r\n    private _activeObjects: { [index: string]: number };\r\n    private _activeObjectTypes: Map<number, string>;\r\n    private _activeObjectTypeIds: Map<string, number>;\r\n    private _objectTypeAdUrls: Map<string, string>;\r\n    private _wallItems: { [index: string]: number };\r\n    private _wallItemTypes: Map<number, string>;\r\n    private _wallItemTypeIds: Map<string, number>;\r\n    private _furniRevisions: Map<string, number>;\r\n    private _pets: { [index: string]: number };\r\n    private _petColors: Map<number, Map<number, PetColorResult>>;\r\n    private _objectAliases: Map<string, string>;\r\n    private _objectOriginalNames: Map<string, string>;\r\n\r\n    private _pendingContentTypes: string[];\r\n    private _dataInitialized: boolean;\r\n\r\n    constructor()\r\n    {\r\n        this._logger = new NitroLogger(this.constructor.name);\r\n        this._stateEvents = null;\r\n        this._sessionDataManager = null;\r\n        this._waitingForSessionDataManager = false;\r\n        this._iconListener = null;\r\n        this._collections = new Map();\r\n        this._images = new Map();\r\n\r\n        this._events = new Map();\r\n        this._activeObjects = {};\r\n        this._activeObjectTypes = new Map();\r\n        this._activeObjectTypeIds = new Map();\r\n        this._objectTypeAdUrls = new Map();\r\n        this._wallItems = {};\r\n        this._wallItemTypes = new Map();\r\n        this._wallItemTypeIds = new Map();\r\n        this._furniRevisions = new Map();\r\n        this._pets = {};\r\n        this._petColors = new Map();\r\n        this._objectAliases = new Map();\r\n        this._objectOriginalNames = new Map();\r\n\r\n        this._pendingContentTypes = [];\r\n        this._dataInitialized = false;\r\n    }\r\n\r\n    public initialize(events: IEventDispatcher): void\r\n    {\r\n        this._stateEvents = events;\r\n\r\n        this.setFurnitureData();\r\n\r\n        for(const [ index, name ] of Nitro.instance.getConfiguration<string[]>('pet.types').entries()) this._pets[name] = index;\r\n    }\r\n\r\n    public dispose(): void\r\n    {\r\n\r\n    }\r\n\r\n    public setSessionDataManager(sessionData: ISessionDataManager): void\r\n    {\r\n        this._sessionDataManager = sessionData;\r\n\r\n        if(this._waitingForSessionDataManager)\r\n        {\r\n            this._waitingForSessionDataManager = false;\r\n\r\n            this.setFurnitureData();\r\n        }\r\n    }\r\n\r\n    public loadFurnitureData(): void\r\n    {\r\n        this.setFurnitureData();\r\n    }\r\n\r\n    private setFurnitureData(): void\r\n    {\r\n        if(!this._sessionDataManager)\r\n        {\r\n            this._waitingForSessionDataManager = true;\r\n\r\n            return;\r\n        }\r\n\r\n        const furnitureData = this._sessionDataManager.getAllFurnitureData(this);\r\n\r\n        if(!furnitureData) return;\r\n\r\n        this._sessionDataManager.removePendingFurniDataListener(this);\r\n\r\n        this.processFurnitureData(furnitureData);\r\n\r\n        this._stateEvents.dispatchEvent(new NitroEvent(RoomContentLoader.LOADER_READY));\r\n    }\r\n\r\n    private processFurnitureData(furnitureData: IFurnitureData[]): void\r\n    {\r\n        if(!furnitureData) return;\r\n\r\n        for(const furniture of furnitureData)\r\n        {\r\n            if(!furniture) continue;\r\n\r\n            const id = furniture.id;\r\n\r\n            let className = furniture.className;\r\n\r\n            if(furniture.hasIndexedColor) className = ((className + '*') + furniture.colorIndex);\r\n\r\n            const revision = furniture.revision;\r\n            const adUrl = furniture.adUrl;\r\n\r\n            if(adUrl && adUrl.length > 0) this._objectTypeAdUrls.set(className, adUrl);\r\n\r\n            let name = furniture.className;\r\n\r\n            if(furniture.type === FurnitureType.FLOOR)\r\n            {\r\n                this._activeObjectTypes.set(id, className);\r\n                this._activeObjectTypeIds.set(className, id);\r\n\r\n                if(!this._activeObjects[name]) this._activeObjects[name] = 1;\r\n            }\r\n\r\n            else if(furniture.type === FurnitureType.WALL)\r\n            {\r\n                if(name === 'post.it')\r\n                {\r\n                    className = 'post_it';\r\n                    name = 'post_it';\r\n                }\r\n\r\n                if(name === 'post.it.vd')\r\n                {\r\n                    className = 'post_it_vd';\r\n                    name = 'post_id_vd';\r\n                }\r\n\r\n                this._wallItemTypes.set(id, className);\r\n                this._wallItemTypeIds.set(className, id);\r\n\r\n                if(!this._wallItems[name]) this._wallItems[name] = 1;\r\n            }\r\n\r\n            const existingRevision = this._furniRevisions.get(name);\r\n\r\n            if(revision > existingRevision)\r\n            {\r\n                this._furniRevisions.delete(name);\r\n                this._furniRevisions.set(name, revision);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getFurnitureFloorNameForTypeId(typeId: number): string\r\n    {\r\n        const type = this._activeObjectTypes.get(typeId);\r\n\r\n        return this.removeColorIndex(type);\r\n    }\r\n\r\n    public getFurnitureWallNameForTypeId(typeId: number, extra: string = null): string\r\n    {\r\n        let type = this._wallItemTypes.get(typeId);\r\n\r\n        if((type === 'poster') && (extra !== null)) type = (type + extra);\r\n\r\n        return this.removeColorIndex(type);\r\n    }\r\n\r\n    public getFurnitureFloorColorIndex(typeId: number): number\r\n    {\r\n        const type = this._activeObjectTypes.get(typeId);\r\n\r\n        if(!type) return -1;\r\n\r\n        return this.getColorIndexFromName(type);\r\n    }\r\n\r\n    public getFurnitureWallColorIndex(typeId: number): number\r\n    {\r\n        const type = this._wallItemTypes.get(typeId);\r\n\r\n        if(!type) return -1;\r\n\r\n        return this.getColorIndexFromName(type);\r\n    }\r\n\r\n    private getColorIndexFromName(name: string): number\r\n    {\r\n        if(!name) return -1;\r\n\r\n        const index = name.indexOf('*');\r\n\r\n        if(index === -1) return 0;\r\n\r\n        return parseInt(name.substr(index + 1));\r\n    }\r\n\r\n    private removeColorIndex(name: string): string\r\n    {\r\n        if(!name) return null;\r\n\r\n        const index = name.indexOf('*');\r\n\r\n        if(index === -1) return name;\r\n\r\n        return name.substr(0, index);\r\n    }\r\n\r\n    public getRoomObjectAdUrl(type: string): string\r\n    {\r\n        const value = this._objectTypeAdUrls.get(type);\r\n\r\n        if(!value) return '';\r\n\r\n        return value;\r\n    }\r\n\r\n    public getPetColorResult(petIndex: number, paletteIndex: number): PetColorResult\r\n    {\r\n        const colorResults = this._petColors.get(petIndex);\r\n\r\n        if(!colorResults) return null;\r\n\r\n        return colorResults.get(paletteIndex);\r\n    }\r\n\r\n    public getPetColorResultsForTag(petIndex: number, tagName: string): PetColorResult[]\r\n    {\r\n        const colorResults = this._petColors.get(petIndex);\r\n        const results: PetColorResult[] = [];\r\n\r\n        if(colorResults)\r\n        {\r\n            for(const result of colorResults.values())\r\n            {\r\n                if(result.tag === tagName) results.push(result);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getCollection(name: string): IGraphicAssetCollection\r\n    {\r\n        if(!name) return null;\r\n\r\n        const existing = this._collections.get(name);\r\n\r\n        if(!existing)\r\n        {\r\n            const globalCollection = Nitro.instance.core.asset.getCollection(name);\r\n\r\n            if(globalCollection)\r\n            {\r\n                this._collections.set(name, globalCollection);\r\n\r\n                return globalCollection;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getImage(name: string): HTMLImageElement\r\n    {\r\n        if(!name) return null;\r\n\r\n        const existing = this._images.get(name);\r\n\r\n        if(!existing) return null;\r\n\r\n        const image = new Image();\r\n\r\n        image.src = existing.src;\r\n\r\n        return image;\r\n    }\r\n\r\n    public addAssetToCollection(collectionName: string, assetName: string, texture: Texture<Resource>, override: boolean = true): boolean\r\n    {\r\n        const collection = this.getCollection(collectionName);\r\n\r\n        if(!collection) return false;\r\n\r\n        return collection.addAsset(assetName, texture, override, 0, 0, false, false);\r\n    }\r\n\r\n    private createCollection(data: IAssetData, spritesheet: Spritesheet): GraphicAssetCollection\r\n    {\r\n        if(!data || !spritesheet) return null;\r\n\r\n        const collection = new GraphicAssetCollection(data, spritesheet);\r\n\r\n        this._collections.set(collection.name, collection);\r\n\r\n        const petIndex = this._pets[collection.name];\r\n\r\n        if(petIndex !== undefined)\r\n        {\r\n            const keys = collection.getPaletteNames();\r\n            const palettes: Map<number, PetColorResult> = new Map();\r\n\r\n            for(const key of keys)\r\n            {\r\n                const palette = collection.getPalette(key);\r\n                const paletteData = data.palettes[key];\r\n\r\n                const primaryColor = palette.primaryColor;\r\n                const secondaryColor = palette.secondaryColor;\r\n                const breed = ((paletteData.breed !== undefined) ? paletteData.breed : 0);\r\n                const tag = ((paletteData.colorTag !== undefined) ? paletteData.colorTag : -1);\r\n                const master = ((paletteData.master !== undefined) ? paletteData.master : false);\r\n                const layerTags = ((paletteData.tags !== undefined) ? paletteData.tags : []);\r\n\r\n                palettes.set(parseInt(key), new PetColorResult(primaryColor, secondaryColor, breed, tag, key, master, layerTags));\r\n            }\r\n\r\n            this._petColors.set(petIndex, palettes);\r\n        }\r\n    }\r\n\r\n    public getPlaceholderName(type: string): string\r\n    {\r\n        const category = this.getCategoryForType(type);\r\n\r\n        switch(category)\r\n        {\r\n            case RoomObjectCategory.FLOOR:\r\n                return RoomContentLoader.PLACE_HOLDER;\r\n            case RoomObjectCategory.WALL:\r\n                return RoomContentLoader.PLACE_HOLDER_WALL;\r\n            default:\r\n                if(this._pets[type] !== undefined) return RoomContentLoader.PLACE_HOLDER_PET;\r\n\r\n                return RoomContentLoader.PLACE_HOLDER_DEFAULT;\r\n        }\r\n    }\r\n\r\n    public getCategoryForType(type: string): number\r\n    {\r\n        if(!type) return RoomObjectCategory.MINIMUM;\r\n\r\n        if(this._activeObjects[type] !== undefined) return RoomObjectCategory.FLOOR;\r\n\r\n        if(this._wallItems[type] !== undefined) return RoomObjectCategory.WALL;\r\n\r\n        if(this._pets[type] !== undefined) return RoomObjectCategory.UNIT;\r\n\r\n        if(type.indexOf('poster') === 0) return RoomObjectCategory.WALL;\r\n\r\n        if(type === 'room') return RoomObjectCategory.ROOM;\r\n\r\n        if(type === RoomObjectUserType.USER) return RoomObjectCategory.UNIT;\r\n\r\n        if(type === RoomObjectUserType.PET) return RoomObjectCategory.UNIT;\r\n\r\n        if(type === RoomObjectUserType.BOT) return RoomObjectCategory.UNIT;\r\n\r\n        if(type === RoomObjectUserType.RENTABLE_BOT) return RoomObjectCategory.UNIT;\r\n\r\n        if((type === RoomContentLoader.TILE_CURSOR) || (type === RoomContentLoader.SELECTION_ARROW)) return RoomObjectCategory.CURSOR;\r\n\r\n        return RoomObjectCategory.MINIMUM;\r\n    }\r\n\r\n    public getPetNameForType(type: number): string\r\n    {\r\n        return Nitro.instance.getConfiguration<string[]>('pet.types')[type] || null;\r\n    }\r\n\r\n    public isLoaderType(type: string): boolean\r\n    {\r\n        type = RoomObjectUserType.getRealType(type);\r\n\r\n        if(type === RoomObjectVisualizationType.USER) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    public downloadImage(id: number, type: string, param: string, events: IEventDispatcher = null): boolean\r\n    {\r\n        let typeName: string = null;\r\n        let assetUrls: string[] = [];\r\n\r\n        if(type && (type.indexOf(',') >= 0))\r\n        {\r\n            typeName = type;\r\n            type = typeName.split(',')[0];\r\n        }\r\n\r\n        if(typeName)\r\n        {\r\n            assetUrls = this.getAssetUrls(typeName, param, true);\r\n        }\r\n        else\r\n        {\r\n            assetUrls = this.getAssetUrls(type, param, true);\r\n        }\r\n\r\n        if(assetUrls && assetUrls.length)\r\n        {\r\n            const url = assetUrls[0];\r\n\r\n            const image = new Image();\r\n\r\n            image.src = url;\r\n\r\n            image.onload = () =>\r\n            {\r\n                image.onerror = null;\r\n\r\n                this._images.set(([ type, param ].join('_')), image);\r\n\r\n                this._iconListener.onRoomContentLoaded(id, [ type, param ].join('_'), true);\r\n            };\r\n\r\n            image.onerror = () =>\r\n            {\r\n                image.onload = null;\r\n\r\n                this._logger.error('Failed to download asset: ' + url);\r\n\r\n                this._iconListener.onRoomContentLoaded(id, [ type, param ].join('_'), false);\r\n            };\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public downloadAsset(type: string, events: IEventDispatcher): boolean\r\n    {\r\n        const assetUrls: string[] = this.getAssetUrls(type);\r\n\r\n        if(!assetUrls || !assetUrls.length) return false;\r\n\r\n        if((this._pendingContentTypes.indexOf(type) >= 0) || this.getOrRemoveEventDispatcher(type)) return false;\r\n\r\n        this._pendingContentTypes.push(type);\r\n        this._events.set(type, events);\r\n\r\n        const totalToDownload = assetUrls.length;\r\n        let totalDownloaded = 0;\r\n\r\n        const onDownloaded = (loader: Loader, resource: LoaderResource, flag: boolean) =>\r\n        {\r\n            if(loader) loader.destroy();\r\n\r\n            if(!flag)\r\n            {\r\n                this._logger.error('Failed to download asset: ' + resource.url);\r\n\r\n                events.dispatchEvent(new RoomContentLoadedEvent(RoomContentLoadedEvent.RCLE_FAILURE, type));\r\n\r\n                return;\r\n            }\r\n\r\n            totalDownloaded++;\r\n\r\n            if(totalDownloaded === totalToDownload)\r\n            {\r\n                const events = this._events.get(type);\r\n\r\n                if(!events) return;\r\n\r\n                events.dispatchEvent(new RoomContentLoadedEvent(RoomContentLoadedEvent.RCLE_SUCCESS, type));\r\n            }\r\n        };\r\n\r\n        for(const url of assetUrls)\r\n        {\r\n            if(!url) continue;\r\n\r\n            const loader = new Loader();\r\n\r\n            loader\r\n                .add({\r\n                    url,\r\n                    crossOrigin: 'anonymous',\r\n                    xhrType: url.endsWith('.nitro') ? LoaderResource.XHR_RESPONSE_TYPE.BUFFER : LoaderResource.XHR_RESPONSE_TYPE.JSON\r\n                })\r\n                .use((resource: LoaderResource, next: Function) =>\r\n                {\r\n                    this.assetLoader(loader, resource, onDownloaded);\r\n\r\n                    next();\r\n                })\r\n                .load();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private assetLoader(loader: Loader, resource: LoaderResource, onDownloaded: Function): void\r\n    {\r\n        if(!resource || resource.error)\r\n        {\r\n            if(resource && resource.texture) resource.texture.destroy(true);\r\n\r\n            onDownloaded(loader, resource, false);\r\n\r\n            return;\r\n        }\r\n\r\n        if(resource.extension === 'nitro')\r\n        {\r\n            const nitroBundle = new NitroBundle(resource.data);\r\n            const assetData = (nitroBundle.jsonFile as IAssetData);\r\n\r\n            if(!assetData)\r\n            {\r\n                onDownloaded(loader, resource, false);\r\n\r\n                return;\r\n            }\r\n\r\n            if(assetData.spritesheet && Object.keys(assetData.spritesheet).length)\r\n            {\r\n                const baseTexture = nitroBundle.baseTexture;\r\n\r\n                if(!baseTexture)\r\n                {\r\n                    onDownloaded(loader, resource, false);\r\n\r\n                    return;\r\n                }\r\n\r\n                if(baseTexture.valid)\r\n                {\r\n                    const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\r\n\r\n                    spritesheet.parse(() =>\r\n                    {\r\n                        this.createCollection(assetData, spritesheet);\r\n\r\n                        onDownloaded(loader, resource, true);\r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    baseTexture.once('loaded', () =>\r\n                    {\r\n                        baseTexture.removeAllListeners();\r\n\r\n                        const spritesheet = new Spritesheet(baseTexture, assetData.spritesheet);\r\n\r\n                        spritesheet.parse(() =>\r\n                        {\r\n                            this.createCollection(assetData, spritesheet);\r\n\r\n                            onDownloaded(loader, resource, true);\r\n                        });\r\n                    });\r\n\r\n                    baseTexture.once('error', () =>\r\n                    {\r\n                        baseTexture.removeAllListeners();\r\n\r\n                        onDownloaded(loader, resource, false);\r\n                    });\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            this.createCollection(assetData, null);\r\n\r\n            onDownloaded(loader, resource, true);\r\n        }\r\n        else\r\n        {\r\n            onDownloaded(loader, resource, false);\r\n        }\r\n    }\r\n\r\n    public setAssetAliasName(name: string, originalName: string): void\r\n    {\r\n        this._objectAliases.set(name, originalName);\r\n        this._objectOriginalNames.set(originalName, name);\r\n    }\r\n\r\n    private getAssetAliasName(name: string): string\r\n    {\r\n        const existing = this._objectAliases.get(name);\r\n\r\n        if(!existing) return name;\r\n\r\n        return existing;\r\n    }\r\n\r\n    private getAssetOriginalName(name: string): string\r\n    {\r\n        const existing = this._objectOriginalNames.get(name);\r\n\r\n        if(!existing) return name;\r\n\r\n        return existing;\r\n    }\r\n\r\n    public getAssetUrls(type: string, param: string = null, icon: boolean = false): string[]\r\n    {\r\n        switch(type)\r\n        {\r\n            case RoomContentLoader.PLACE_HOLDER:\r\n                return [ this.getAssetUrlWithGenericBase(RoomContentLoader.PLACE_HOLDER) ];\r\n            case RoomContentLoader.PLACE_HOLDER_WALL:\r\n                return [ this.getAssetUrlWithGenericBase(RoomContentLoader.PLACE_HOLDER_WALL) ];\r\n            case RoomContentLoader.PLACE_HOLDER_PET:\r\n                return [ this.getAssetUrlWithGenericBase(RoomContentLoader.PLACE_HOLDER_PET) ];\r\n            case RoomContentLoader.ROOM:\r\n                return [ this.getAssetUrlWithGenericBase('room') ];\r\n            case RoomContentLoader.TILE_CURSOR:\r\n                return [ this.getAssetUrlWithGenericBase(RoomContentLoader.TILE_CURSOR) ];\r\n            case RoomContentLoader.SELECTION_ARROW:\r\n                return [ this.getAssetUrlWithGenericBase(RoomContentLoader.SELECTION_ARROW) ];\r\n            default: {\r\n                const category = this.getCategoryForType(type);\r\n\r\n                if((category === RoomObjectCategory.FLOOR) || (category === RoomObjectCategory.WALL))\r\n                {\r\n                    const name = this.getAssetAliasName(type);\r\n\r\n                    let assetUrl = (icon ? this.getAssetUrlWithFurniIconBase(name) : this.getAssetUrlWithFurniBase(type));\r\n\r\n                    if(icon)\r\n                    {\r\n                        const active = (param && (param !== '') && (this._activeObjectTypeIds.has((name + '*' + param))));\r\n\r\n                        assetUrl = (assetUrl.replace(/%param%/gi, (active ? ('_' + param) : '')));\r\n                    }\r\n\r\n                    return [ assetUrl ];\r\n                }\r\n\r\n                if(category === RoomObjectCategory.UNIT)\r\n                {\r\n                    return [ this.getAssetUrlWithPetBase(type) ];\r\n                }\r\n\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getAssetIconUrl(type: string, colorIndex: string): string\r\n    {\r\n        let assetName: string = null;\r\n        let assetUrls: string[] = [];\r\n\r\n        if(type &&( type.indexOf(',') >= 0))\r\n        {\r\n            assetName = type;\r\n\r\n            type = assetName.split(',')[0];\r\n        }\r\n\r\n        if(assetName)\r\n        {\r\n            assetUrls = this.getAssetUrls(assetName, colorIndex, true);\r\n        }\r\n        else\r\n        {\r\n            assetUrls = this.getAssetUrls(type, colorIndex, true);\r\n        }\r\n\r\n        if(assetUrls && assetUrls.length) return assetUrls[0];\r\n\r\n        return null;\r\n    }\r\n\r\n    private getAssetUrlWithGenericBase(assetName: string): string\r\n    {\r\n        return (Nitro.instance.getConfiguration<string>('generic.asset.url').replace(/%libname%/gi, assetName));\r\n    }\r\n\r\n    public getAssetUrlWithFurniBase(assetName: string): string\r\n    {\r\n        return (Nitro.instance.getConfiguration<string>('furni.asset.url').replace(/%libname%/gi, assetName));\r\n    }\r\n\r\n    public getAssetUrlWithFurniIconBase(assetName: string): string\r\n    {\r\n        return (Nitro.instance.getConfiguration<string>('furni.asset.icon.url').replace(/%libname%/gi, assetName));\r\n    }\r\n\r\n    public getAssetUrlWithPetBase(assetName: string): string\r\n    {\r\n        return (Nitro.instance.getConfiguration<string>('pet.asset.url').replace(/%libname%/gi, assetName));\r\n    }\r\n\r\n    public setRoomObjectRoomId(object: IRoomObject, roomId: string): void\r\n    {\r\n        const model = object && object.model;\r\n\r\n        if(!model) return;\r\n\r\n        model.setValue(RoomObjectVariable.OBJECT_ROOM_ID, roomId);\r\n    }\r\n\r\n    private getOrRemoveEventDispatcher(type: string, remove: boolean = false): IEventDispatcher\r\n    {\r\n        const existing = this._events.get(type);\r\n\r\n        if(remove) this._events.delete(type);\r\n\r\n        return existing;\r\n    }\r\n\r\n    public setIconListener(listener: IRoomContentListener): void\r\n    {\r\n        this._iconListener = listener;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}